var searchIndex={};
searchIndex["async_trait"] = {"doc":"![github] ![crates-io] ![docs-rs]","i":[[23,"async_trait","async_trait","",null,null]],"p":[]};
searchIndex["downcast_rs"] = {"doc":"Rust enums are great for types where all variations are…","i":[[8,"Downcast","downcast_rs","Supports conversion to `Any`. Traits to be extended by…",null,null],[10,"into_any","","Convert `Box<dyn Trait>` (where `Trait: Downcast`) to…",0,[[["box"]],[["box",["any"]],["any"]]]],[10,"into_any_rc","","Convert `Rc<Trait>` (where `Trait: Downcast`) to…",0,[[["rc"]],[["rc",["any"]],["any"]]]],[10,"as_any","","Convert `&Trait` (where `Trait: Downcast`) to `&Any`. This…",0,[[["self"]],["any"]]],[10,"as_any_mut","","Convert `&mut Trait` (where `Trait: Downcast`) to `&Any`.…",0,[[["self"]],["any"]]],[8,"DowncastSync","","Extends `Downcast` to support `Sync` traits that thus…",null,null],[10,"into_any_arc","","Convert `Arc<Trait>` (where `Trait: Downcast`) to…",1,[[["arc"]],[["arc",["any"]],["any"]]]],[14,"impl_downcast","","Adds downcasting support to traits that extend…",null,null]],"p":[[8,"Downcast"],[8,"DowncastSync"]]};
searchIndex["icu"] = {"doc":"","i":[],"p":[]};
searchIndex["icu4x"] = {"doc":"","i":[],"p":[]};
searchIndex["icu_data_provider"] = {"doc":"","i":[[3,"Request","icu_data_provider","A struct to request a certain hunk of data from a data…",null,null],[12,"langid","","",0,null],[12,"category","","",0,null],[12,"key","","",0,null],[12,"payload","","",0,null],[3,"Response","","A response object containing a data hunk (\"payload\").",null,null],[12,"data_langid","","",1,null],[3,"ResponseBuilder","","Builder class used to construct a Response.",null,null],[12,"data_langid","","",2,null],[4,"Category","","A top-level collection of related data keys.",null,null],[13,"Undefined","","",3,null],[13,"Decimal","","",3,null],[13,"PrivateUse","","",3,null],[4,"Key","","A specific key within a category.",null,null],[13,"Undefined","","",4,null],[13,"Decimal","","",4,null],[13,"PrivateUse","","",4,null],[4,"PayloadError","","",null,null],[13,"TypeMismatchError","","The type argument does not match the payload. The actual…",5,null],[4,"ResponseError","","",null,null],[13,"UnsupportedCategoryError","","",6,null],[13,"UnsupportedKeyError","","",6,null],[13,"ResourceError","","",6,null],[0,"decimal","","",null,null],[3,"SymbolsV1","icu_data_provider::decimal","",null,null],[12,"zero_digit","","",7,null],[12,"decimal_separator","","",7,null],[12,"grouping_separator","","",7,null],[4,"Key","","",null,null],[13,"SymbolsV1","","",8,null],[8,"DataProvider","icu_data_provider","An abstract data providewr that takes a request object and…",null,null],[10,"load","","",9,[[["request"],["self"]],[["result",["response","responseerror"]],["responseerror"],["response"]]]],[11,"borrow_payload","","Get an immutable reference to the payload in a Response…",1,[[["self"]],[["result",["payloaderror"]],["t"],["payloaderror"]]]],[11,"borrow_payload_mut","","Get a mutable reference to the payload in a Response…",1,[[["self"]],[["result",["payloaderror"]],["t"],["payloaderror"]]]],[11,"take_payload","","Take ownership of the payload from a Response object.…",1,[[],[["payloaderror"],["result",["cow","payloaderror"]],["cow"]]]],[11,"with_owned_payload","","Construct a Response from the builder, with owned data.…",2,[[["debug"],["clone"]],["response"]]],[11,"with_borrowed_payload","","Construct a Response from the builder, with borrowed data.…",2,[[["t"]],["response"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"into_any","","",0,[[["box"]],[["any"],["box",["any"]]]]],[11,"into_any_rc","","",0,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",0,[[["self"]],["any"]]],[11,"as_any_mut","","",0,[[["self"]],["any"]]],[11,"into_any_arc","","",0,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"into_any","","",1,[[["box"]],[["any"],["box",["any"]]]]],[11,"into_any_rc","","",1,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",1,[[["self"]],["any"]]],[11,"as_any_mut","","",1,[[["self"]],["any"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"into_any","","",2,[[["box"]],[["any"],["box",["any"]]]]],[11,"into_any_rc","","",2,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",2,[[["self"]],["any"]]],[11,"as_any_mut","","",2,[[["self"]],["any"]]],[11,"into_any_arc","","",2,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"into_any","","",3,[[["box"]],[["any"],["box",["any"]]]]],[11,"into_any_rc","","",3,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",3,[[["self"]],["any"]]],[11,"as_any_mut","","",3,[[["self"]],["any"]]],[11,"into_any_arc","","",3,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"into_any","","",4,[[["box"]],[["any"],["box",["any"]]]]],[11,"into_any_rc","","",4,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",4,[[["self"]],["any"]]],[11,"as_any_mut","","",4,[[["self"]],["any"]]],[11,"into_any_arc","","",4,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"into_any","","",5,[[["box"]],[["any"],["box",["any"]]]]],[11,"into_any_rc","","",5,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",5,[[["self"]],["any"]]],[11,"as_any_mut","","",5,[[["self"]],["any"]]],[11,"into_any_arc","","",5,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"into_any","","",6,[[["box"]],[["any"],["box",["any"]]]]],[11,"into_any_rc","","",6,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",6,[[["self"]],["any"]]],[11,"as_any_mut","","",6,[[["self"]],["any"]]],[11,"from","icu_data_provider::decimal","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"into_any","","",7,[[["box"]],[["any"],["box",["any"]]]]],[11,"into_any_rc","","",7,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",7,[[["self"]],["any"]]],[11,"as_any_mut","","",7,[[["self"]],["any"]]],[11,"into_any_arc","","",7,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"into_any","","",8,[[["box"]],[["any"],["box",["any"]]]]],[11,"into_any_rc","","",8,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",8,[[["self"]],["any"]]],[11,"as_any_mut","","",8,[[["self"]],["any"]]],[11,"into_any_arc","","",8,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","icu_data_provider","",4,[[["key"]],["self"]]],[11,"from","","",5,[[["typeid"]],["self"]]],[11,"fmt","icu_data_provider::decimal","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","icu_data_provider","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","icu_data_provider::decimal","",8,[[["key"],["self"]],["bool"]]],[11,"eq","","",7,[[["self"],["symbolsv1"]],["bool"]]],[11,"ne","","",7,[[["self"],["symbolsv1"]],["bool"]]],[11,"eq","icu_data_provider","",3,[[["category"],["self"]],["bool"]]],[11,"eq","","",4,[[["key"],["self"]],["bool"]]],[11,"ne","","",4,[[["key"],["self"]],["bool"]]],[11,"eq","","",0,[[["request"],["self"]],["bool"]]],[11,"ne","","",0,[[["request"],["self"]],["bool"]]],[11,"clone","icu_data_provider::decimal","",8,[[["self"]],["key"]]],[11,"clone","","",7,[[["self"]],["symbolsv1"]]],[11,"clone","icu_data_provider","",3,[[["self"]],["category"]]],[11,"clone","","",4,[[["self"]],["key"]]],[11,"clone","","",0,[[["self"]],["request"]]],[11,"clone","","",1,[[["self"]],["response"]]],[11,"source","","",6,[[["self"]],[["error"],["option",["error"]]]]],[11,"serialize","icu_data_provider::decimal","",7,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",7,[[["__d"]],["result"]]]],"p":[[3,"Request"],[3,"Response"],[3,"ResponseBuilder"],[4,"Category"],[4,"Key"],[4,"PayloadError"],[4,"ResponseError"],[3,"SymbolsV1"],[4,"Key"],[8,"DataProvider"]]};
searchIndex["icu_data_provider_json"] = {"doc":"","i":[[3,"JsonDataProvider","icu_data_provider_json","A data provider reading from a JSON file.",null,null],[4,"Error","","",null,null],[13,"JsonError","","",0,null],[11,"from_reader","","Create a JsonDataProvider from a file reader.",1,[[["read"]],[["result",["error"]],["error"]]]],[11,"from_str","","Create a JsonDataProvider from a JSON string slice.",1,[[["str"]],[["result",["error"]],["error"]]]],[11,"from_slice","","Create a JsonDataProvider from a &[u8] slice.",1,[[],[["result",["error"]],["error"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"into_any","","",1,[[["box"]],[["any"],["box",["any"]]]]],[11,"into_any_rc","","",1,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",1,[[["self"]],["any"]]],[11,"as_any_mut","","",1,[[["self"]],["any"]]],[11,"into_any_arc","","",1,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"into_any","","",0,[[["box"]],[["any"],["box",["any"]]]]],[11,"into_any_rc","","",0,[[["rc"]],[["any"],["rc",["any"]]]]],[11,"as_any","","",0,[[["self"]],["any"]]],[11,"as_any_mut","","",0,[[["self"]],["any"]]],[11,"into_any_arc","","",0,[[["arc"]],[["arc",["any"]],["any"]]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"load","","Loads JSON data. Returns borrowed data.",1,[[["self"],["request"]],[["result",["response","responseerror"]],["response"],["responseerror"]]]]],"p":[[4,"Error"],[3,"JsonDataProvider"]]};
searchIndex["icu_locale"] = {"doc":"`icu-locale` is one of the [`ICU4X`] components.","i":[[3,"LanguageIdentifier","icu_locale","`LanguageIdentifier` is a core struct representing a…",null,null],[12,"language","","Language subtag of the LanguageIdentifier",0,null],[12,"script","","Script subtag of the LanguageIdentifier",0,null],[12,"region","","Region subtag of the LanguageIdentifier",0,null],[12,"variants","","Variant subtags of the LanguageIdentifier",0,null],[3,"Locale","","`Locale` is a core struct representing a [`Unicode Locale…",null,null],[12,"language","","Language subtag of the Locale",1,null],[12,"script","","Script subtag of the Locale",1,null],[12,"region","","Region subtag of the Locale",1,null],[12,"variants","","Variant subtags of the Locale",1,null],[12,"extensions","","",1,null],[4,"ParserError","","List of parser errors that can be generated while parsing…",null,null],[13,"InvalidLanguage","","Invalid language subtag.",2,null],[13,"InvalidSubtag","","Invalid script, region or variant subtag.",2,null],[13,"InvalidExtension","","Invalid extension subtag.",2,null],[0,"extensions","","Unicode Extensions provide a mechanism to extend the…",null,null],[3,"Extensions","icu_locale::extensions","A map of extensions associated with a given `Locale.",null,null],[12,"unicode","","",3,null],[12,"transform","","",3,null],[12,"private","","",3,null],[4,"ExtensionType","","Defines the type of extension.",null,null],[13,"Transform","","Transform Extension Type marked as `t`.",4,null],[13,"Unicode","","Unicode Extension Type marked as `u`.",4,null],[13,"Private","","Private Extension Type marked as `x`.",4,null],[0,"private","","Private Use Extensions is a list of extensions intended…",null,null],[3,"Key","icu_locale::extensions::private","A single item used in a list of [`Private`] extensions.",null,null],[3,"Private","","A list of [`Private Use Extensions`] as defined in…",null,null],[11,"from_bytes","","A constructor which takes a utf8 slice, parses it and…",5,[[],[["result",["parsererror"]],["parsererror"]]]],[11,"as_str","","A helper function for displaying a `Key` as a `&str`.",5,[[["self"]],["str"]]],[11,"from_vec_unchecked","","A constructor which takes a pre-sorted list of `Key`.",6,[[["key"],["vec",["key"]]],["self"]]],[11,"clear","","Empties the `Private` list.",6,[[["self"]]]],[0,"transform","icu_locale::extensions","Transform Extensions provide information on content…",null,null],[3,"Fields","icu_locale::extensions::transform","A list of [`Key`]-[`Value`] pairs representing functional…",null,null],[3,"Key","","A key used in a list of [`Fields`].",null,null],[3,"Value","","",null,null],[3,"Transform","","A list of [`Unicode BCP47 T Extensions`] as defined in…",null,null],[12,"lang","","",7,null],[12,"fields","","",7,null],[11,"from_vec_unchecked","","A constructor which takes a pre-sorted list of `(Key,…",8,[[["vec"]],["self"]]],[11,"clear","","Empties the `Fields` list.",8,[[["self"]]]],[11,"contains_key","","Returns `true` if the list contains a [`Value`] for the…",8,[[["q"],["self"]],["bool"]]],[11,"get","","Returns a reference to the [`Value`] corresponding to the…",8,[[["q"],["self"]],[["option",["value"]],["value"]]]],[11,"from_bytes","","A constructor which takes a utf8 slice, parses it and…",9,[[],[["result",["parsererror"]],["parsererror"]]]],[11,"as_str","","A helper function for displaying a `Key` as a `&str`.",9,[[["self"]],["str"]]],[11,"from_bytes","","A constructor which takes a utf8 slice, parses it and…",10,[[],[["result",["parsererror"]],["parsererror"]]]],[11,"is_empty","","Returns `true` if there are no tfields and no tlang in the…",7,[[["self"]],["bool"]]],[0,"unicode","icu_locale::extensions","Unicode Extensions provide information about user…",null,null],[3,"Attribute","icu_locale::extensions::unicode","An attribute used in a set of [`Attributes`].",null,null],[3,"Attributes","","A set of [`Attribute`] elements as defined in [`Unicode…",null,null],[3,"Key","","A key used in a list of [`Keywords`].",null,null],[3,"Keywords","","A list of [`Key`]-[`Value`] pairs representing functional…",null,null],[3,"Value","","A value used in a list of [`Keywords`].",null,null],[3,"Unicode","","Unicode Extensions provide information about user…",null,null],[12,"keywords","","",11,null],[12,"attributes","","",11,null],[11,"from_bytes","","A constructor which takes a utf8 slice, parses it and…",12,[[],[["result",["parsererror"]],["parsererror"]]]],[11,"as_str","","A helper function for displaying a `Attribute` subtag as a…",12,[[["self"]],["str"]]],[11,"from_vec_unchecked","","A constructor which takes a pre-sorted list of…",13,[[["vec",["attribute"]],["attribute"]],["self"]]],[11,"clear","","Empties the `Attributes` list.",13,[[["self"]]]],[11,"from_bytes","","A constructor which takes a utf8 slice, parses it and…",14,[[],[["result",["parsererror"]],["parsererror"]]]],[11,"as_str","","A helper function for displaying a `Key` subtag as a `&str`.",14,[[["self"]],["str"]]],[11,"from_vec_unchecked","","A constructor which takes a pre-sorted list of `(Key,…",15,[[["vec"]],["self"]]],[11,"contains_key","","Returns `true` if the list contains a [`Value`] for the…",15,[[["q"],["self"]],["bool"]]],[11,"get","","Returns a reference to the [`Value`] corresponding to the…",15,[[["q"],["self"]],[["value"],["option",["value"]]]]],[11,"from_bytes","","A constructor which takes a utf8 slice, parses it and…",16,[[],[["result",["parsererror"]],["parsererror"]]]],[11,"is_empty","","Returns `true` if there list of keywords and attributes is…",11,[[["self"]],["bool"]]],[11,"from_byte","icu_locale::extensions","",4,[[["u8"]],[["result",["parsererror"]],["parsererror"]]]],[11,"is_empty","","",3,[[["self"]],["bool"]]],[11,"from_bytes","icu_locale","A constructor which takes a utf8 slice, parses it and…",0,[[],[["result",["parsererror"]],["parsererror"]]]],[11,"from_locale_bytes","","A constructor which takes a utf8 slice which may contain…",0,[[],[["result",["parsererror"]],["parsererror"]]]],[11,"canonicalize","","This is a best-effort operation that performs all…",0,[[["asref"]],[["string"],["parsererror"],["result",["string","parsererror"]]]]],[11,"from_bytes","","A constructor which takes a utf8 slice, parses it and…",1,[[],[["result",["parsererror"]],["parsererror"]]]],[11,"canonicalize","","This is a best-effort operation that performs all…",1,[[["asref"]],[["string"],["parsererror"],["result",["string","parsererror"]]]]],[0,"subtags","","Language Identifier and Locale contains a set of subtags…",null,null],[3,"Language","icu_locale::subtags","Language subtag (examples: `\"en\"`, `\"csb\"`, `\"zh\"`,…",null,null],[3,"Region","","Region subtag (examples: `\"US\"`, `\"CN\"`, `\"AR\"` etc.)",null,null],[3,"Script","","Script subtag (examples: `\"Latn\"`, `\"Arab\"`, etc.)",null,null],[3,"Variant","","Variant subtag (examples: `\"macos\"`, `\"posix\"`, `\"1996\"`…",null,null],[3,"Variants","","Variants is a list of variants (examples: `[\"macos\",…",null,null],[11,"from_bytes","","A constructor which takes a utf8 slice, parses it and…",17,[[],[["result",["parsererror"]],["parsererror"]]]],[11,"as_str","","A helper function for displaying a `Language` subtag as a…",17,[[["self"]],["str"]]],[11,"clear","","Resets the `Language` subtag to an empty one.",17,[[["self"]]]],[11,"is_empty","","Tests if the `Language` subtag is empty.",17,[[],["bool"]]],[11,"from_bytes","","A constructor which takes a utf8 slice, parses it and…",18,[[],[["result",["parsererror"]],["parsererror"]]]],[11,"as_str","","A helper function for displaying a `Region` subtag as a…",18,[[["self"]],["str"]]],[11,"from_bytes","","A constructor which takes a utf8 slice, parses it and…",19,[[],[["result",["parsererror"]],["parsererror"]]]],[11,"as_str","","A helper function for displaying a `Script` subtag as a…",19,[[["self"]],["str"]]],[11,"from_bytes","","A constructor which takes a utf8 slice, parses it and…",20,[[],[["result",["parsererror"]],["parsererror"]]]],[11,"as_str","","A helper function for displaying a `Variant` subtag as a…",20,[[["self"]],["str"]]],[11,"from_vec_unchecked","","Creates a new `Variants` set from a vector. The caller is…",21,[[["vec",["variant"]],["variant"]],["self"]]],[11,"clear","","Empties the `Variants` list.",21,[[["self"]]]],[11,"from","icu_locale","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","icu_locale::extensions","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","icu_locale::extensions::private","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","icu_locale::extensions::transform","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","icu_locale::extensions::unicode","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","icu_locale::subtags","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"to_string","","",17,[[["self"]],["string"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"to_string","","",18,[[["self"]],["string"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"to_string","","",20,[[["self"]],["string"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"to_string","","",21,[[["self"]],["string"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","icu_locale","",1,[[["languageidentifier"]],["self"]]],[11,"from","","",0,[[["locale"]],["self"]]],[11,"clone","icu_locale::extensions::private","",5,[[["self"]],["key"]]],[11,"clone","","",6,[[["self"]],["private"]]],[11,"clone","icu_locale::extensions::transform","",8,[[["self"]],["fields"]]],[11,"clone","","",9,[[["self"]],["key"]]],[11,"clone","","",10,[[["self"]],["value"]]],[11,"clone","","",7,[[["self"]],["transform"]]],[11,"clone","icu_locale::extensions::unicode","",12,[[["self"]],["attribute"]]],[11,"clone","","",13,[[["self"]],["attributes"]]],[11,"clone","","",14,[[["self"]],["key"]]],[11,"clone","","",15,[[["self"]],["keywords"]]],[11,"clone","","",16,[[["self"]],["value"]]],[11,"clone","","",11,[[["self"]],["unicode"]]],[11,"clone","icu_locale::extensions","",4,[[["self"]],["extensiontype"]]],[11,"clone","","",3,[[["self"]],["extensions"]]],[11,"clone","icu_locale","",0,[[["self"]],["languageidentifier"]]],[11,"clone","","",1,[[["self"]],["locale"]]],[11,"clone","icu_locale::subtags","",17,[[["self"]],["language"]]],[11,"clone","","",18,[[["self"]],["region"]]],[11,"clone","","",19,[[["self"]],["script"]]],[11,"clone","","",20,[[["self"]],["variant"]]],[11,"clone","","",21,[[["self"]],["variants"]]],[11,"default","icu_locale::extensions::private","",6,[[],["private"]]],[11,"default","icu_locale::extensions::transform","",8,[[],["fields"]]],[11,"default","","",7,[[],["transform"]]],[11,"default","icu_locale::extensions::unicode","",13,[[],["attributes"]]],[11,"default","","",15,[[],["keywords"]]],[11,"default","","",11,[[],["unicode"]]],[11,"default","icu_locale::extensions","",3,[[],["extensions"]]],[11,"default","icu_locale","",0,[[],["languageidentifier"]]],[11,"default","","",1,[[],["locale"]]],[11,"default","icu_locale::subtags","",17,[[],["language"]]],[11,"default","","",21,[[],["variants"]]],[11,"cmp","icu_locale::extensions::private","",5,[[["self"],["key"]],["ordering"]]],[11,"cmp","","",6,[[["private"],["self"]],["ordering"]]],[11,"cmp","icu_locale::extensions::transform","",8,[[["self"],["fields"]],["ordering"]]],[11,"cmp","","",9,[[["self"],["key"]],["ordering"]]],[11,"cmp","","",10,[[["self"],["value"]],["ordering"]]],[11,"cmp","","",7,[[["transform"],["self"]],["ordering"]]],[11,"cmp","icu_locale::extensions::unicode","",12,[[["attribute"],["self"]],["ordering"]]],[11,"cmp","","",13,[[["self"],["attributes"]],["ordering"]]],[11,"cmp","","",14,[[["key"],["self"]],["ordering"]]],[11,"cmp","","",15,[[["keywords"],["self"]],["ordering"]]],[11,"cmp","","",16,[[["value"],["self"]],["ordering"]]],[11,"cmp","","",11,[[["unicode"],["self"]],["ordering"]]],[11,"cmp","icu_locale::extensions","",4,[[["extensiontype"],["self"]],["ordering"]]],[11,"cmp","","",3,[[["extensions"],["self"]],["ordering"]]],[11,"cmp","icu_locale","",0,[[["self"],["languageidentifier"]],["ordering"]]],[11,"cmp","","",1,[[["locale"],["self"]],["ordering"]]],[11,"cmp","icu_locale::subtags","",17,[[["language"],["self"]],["ordering"]]],[11,"cmp","","",18,[[["region"],["self"]],["ordering"]]],[11,"cmp","","",19,[[["self"],["script"]],["ordering"]]],[11,"cmp","","",20,[[["self"],["variant"]],["ordering"]]],[11,"cmp","","",21,[[["self"],["variants"]],["ordering"]]],[11,"eq","icu_locale::extensions::private","",5,[[["self"],["key"]],["bool"]]],[11,"ne","","",5,[[["self"],["key"]],["bool"]]],[11,"eq","","",6,[[["private"],["self"]],["bool"]]],[11,"ne","","",6,[[["private"],["self"]],["bool"]]],[11,"eq","icu_locale::extensions::transform","",8,[[["self"],["fields"]],["bool"]]],[11,"ne","","",8,[[["self"],["fields"]],["bool"]]],[11,"eq","","",9,[[["self"],["key"]],["bool"]]],[11,"ne","","",9,[[["self"],["key"]],["bool"]]],[11,"eq","","",9,[[["self"],["str"]],["bool"]]],[11,"eq","","",10,[[["self"],["value"]],["bool"]]],[11,"ne","","",10,[[["self"],["value"]],["bool"]]],[11,"eq","","",7,[[["transform"],["self"]],["bool"]]],[11,"ne","","",7,[[["transform"],["self"]],["bool"]]],[11,"eq","icu_locale::extensions::unicode","",12,[[["attribute"],["self"]],["bool"]]],[11,"ne","","",12,[[["attribute"],["self"]],["bool"]]],[11,"eq","","",12,[[["self"],["str"]],["bool"]]],[11,"eq","","",13,[[["self"],["attributes"]],["bool"]]],[11,"ne","","",13,[[["self"],["attributes"]],["bool"]]],[11,"eq","","",14,[[["key"],["self"]],["bool"]]],[11,"ne","","",14,[[["key"],["self"]],["bool"]]],[11,"eq","","",14,[[["self"],["str"]],["bool"]]],[11,"eq","","",15,[[["keywords"],["self"]],["bool"]]],[11,"ne","","",15,[[["keywords"],["self"]],["bool"]]],[11,"eq","","",16,[[["value"],["self"]],["bool"]]],[11,"ne","","",16,[[["value"],["self"]],["bool"]]],[11,"eq","","",11,[[["unicode"],["self"]],["bool"]]],[11,"ne","","",11,[[["unicode"],["self"]],["bool"]]],[11,"eq","icu_locale::extensions","",4,[[["extensiontype"],["self"]],["bool"]]],[11,"eq","","",3,[[["extensions"],["self"]],["bool"]]],[11,"ne","","",3,[[["extensions"],["self"]],["bool"]]],[11,"eq","icu_locale","",0,[[["self"],["languageidentifier"]],["bool"]]],[11,"ne","","",0,[[["self"],["languageidentifier"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",1,[[["locale"],["self"]],["bool"]]],[11,"ne","","",1,[[["locale"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"eq","","",2,[[["self"],["parsererror"]],["bool"]]],[11,"eq","icu_locale::subtags","",17,[[["language"],["self"]],["bool"]]],[11,"ne","","",17,[[["language"],["self"]],["bool"]]],[11,"eq","","",17,[[["self"],["str"]],["bool"]]],[11,"eq","","",18,[[["region"],["self"]],["bool"]]],[11,"ne","","",18,[[["region"],["self"]],["bool"]]],[11,"eq","","",18,[[["self"],["str"]],["bool"]]],[11,"eq","","",19,[[["self"],["script"]],["bool"]]],[11,"ne","","",19,[[["self"],["script"]],["bool"]]],[11,"eq","","",19,[[["self"],["str"]],["bool"]]],[11,"eq","","",20,[[["self"],["variant"]],["bool"]]],[11,"ne","","",20,[[["self"],["variant"]],["bool"]]],[11,"eq","","",20,[[["self"],["str"]],["bool"]]],[11,"eq","","",20,[[["str"],["self"]],["bool"]]],[11,"eq","","",21,[[["self"],["variants"]],["bool"]]],[11,"ne","","",21,[[["self"],["variants"]],["bool"]]],[11,"partial_cmp","icu_locale::extensions::private","",5,[[["self"],["key"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",5,[[["self"],["key"]],["bool"]]],[11,"le","","",5,[[["self"],["key"]],["bool"]]],[11,"gt","","",5,[[["self"],["key"]],["bool"]]],[11,"ge","","",5,[[["self"],["key"]],["bool"]]],[11,"partial_cmp","","",6,[[["private"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",6,[[["private"],["self"]],["bool"]]],[11,"le","","",6,[[["private"],["self"]],["bool"]]],[11,"gt","","",6,[[["private"],["self"]],["bool"]]],[11,"ge","","",6,[[["private"],["self"]],["bool"]]],[11,"partial_cmp","icu_locale::extensions::transform","",8,[[["self"],["fields"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",8,[[["self"],["fields"]],["bool"]]],[11,"le","","",8,[[["self"],["fields"]],["bool"]]],[11,"gt","","",8,[[["self"],["fields"]],["bool"]]],[11,"ge","","",8,[[["self"],["fields"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["key"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",9,[[["self"],["key"]],["bool"]]],[11,"le","","",9,[[["self"],["key"]],["bool"]]],[11,"gt","","",9,[[["self"],["key"]],["bool"]]],[11,"ge","","",9,[[["self"],["key"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["value"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",10,[[["self"],["value"]],["bool"]]],[11,"le","","",10,[[["self"],["value"]],["bool"]]],[11,"gt","","",10,[[["self"],["value"]],["bool"]]],[11,"ge","","",10,[[["self"],["value"]],["bool"]]],[11,"partial_cmp","","",7,[[["transform"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",7,[[["transform"],["self"]],["bool"]]],[11,"le","","",7,[[["transform"],["self"]],["bool"]]],[11,"gt","","",7,[[["transform"],["self"]],["bool"]]],[11,"ge","","",7,[[["transform"],["self"]],["bool"]]],[11,"partial_cmp","icu_locale::extensions::unicode","",12,[[["attribute"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",12,[[["attribute"],["self"]],["bool"]]],[11,"le","","",12,[[["attribute"],["self"]],["bool"]]],[11,"gt","","",12,[[["attribute"],["self"]],["bool"]]],[11,"ge","","",12,[[["attribute"],["self"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["attributes"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",13,[[["self"],["attributes"]],["bool"]]],[11,"le","","",13,[[["self"],["attributes"]],["bool"]]],[11,"gt","","",13,[[["self"],["attributes"]],["bool"]]],[11,"ge","","",13,[[["self"],["attributes"]],["bool"]]],[11,"partial_cmp","","",14,[[["key"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",14,[[["key"],["self"]],["bool"]]],[11,"le","","",14,[[["key"],["self"]],["bool"]]],[11,"gt","","",14,[[["key"],["self"]],["bool"]]],[11,"ge","","",14,[[["key"],["self"]],["bool"]]],[11,"partial_cmp","","",15,[[["keywords"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",15,[[["keywords"],["self"]],["bool"]]],[11,"le","","",15,[[["keywords"],["self"]],["bool"]]],[11,"gt","","",15,[[["keywords"],["self"]],["bool"]]],[11,"ge","","",15,[[["keywords"],["self"]],["bool"]]],[11,"partial_cmp","","",16,[[["value"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",16,[[["value"],["self"]],["bool"]]],[11,"le","","",16,[[["value"],["self"]],["bool"]]],[11,"gt","","",16,[[["value"],["self"]],["bool"]]],[11,"ge","","",16,[[["value"],["self"]],["bool"]]],[11,"partial_cmp","","",11,[[["unicode"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",11,[[["unicode"],["self"]],["bool"]]],[11,"le","","",11,[[["unicode"],["self"]],["bool"]]],[11,"gt","","",11,[[["unicode"],["self"]],["bool"]]],[11,"ge","","",11,[[["unicode"],["self"]],["bool"]]],[11,"partial_cmp","icu_locale::extensions","",4,[[["extensiontype"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",3,[[["extensions"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",3,[[["extensions"],["self"]],["bool"]]],[11,"le","","",3,[[["extensions"],["self"]],["bool"]]],[11,"gt","","",3,[[["extensions"],["self"]],["bool"]]],[11,"ge","","",3,[[["extensions"],["self"]],["bool"]]],[11,"partial_cmp","icu_locale","",0,[[["self"],["languageidentifier"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",0,[[["self"],["languageidentifier"]],["bool"]]],[11,"le","","",0,[[["self"],["languageidentifier"]],["bool"]]],[11,"gt","","",0,[[["self"],["languageidentifier"]],["bool"]]],[11,"ge","","",0,[[["self"],["languageidentifier"]],["bool"]]],[11,"partial_cmp","","",1,[[["locale"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",1,[[["locale"],["self"]],["bool"]]],[11,"le","","",1,[[["locale"],["self"]],["bool"]]],[11,"gt","","",1,[[["locale"],["self"]],["bool"]]],[11,"ge","","",1,[[["locale"],["self"]],["bool"]]],[11,"partial_cmp","icu_locale::subtags","",17,[[["language"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",17,[[["language"],["self"]],["bool"]]],[11,"le","","",17,[[["language"],["self"]],["bool"]]],[11,"gt","","",17,[[["language"],["self"]],["bool"]]],[11,"ge","","",17,[[["language"],["self"]],["bool"]]],[11,"partial_cmp","","",18,[[["region"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",18,[[["region"],["self"]],["bool"]]],[11,"le","","",18,[[["region"],["self"]],["bool"]]],[11,"gt","","",18,[[["region"],["self"]],["bool"]]],[11,"ge","","",18,[[["region"],["self"]],["bool"]]],[11,"partial_cmp","","",19,[[["self"],["script"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",19,[[["self"],["script"]],["bool"]]],[11,"le","","",19,[[["self"],["script"]],["bool"]]],[11,"gt","","",19,[[["self"],["script"]],["bool"]]],[11,"ge","","",19,[[["self"],["script"]],["bool"]]],[11,"partial_cmp","","",20,[[["self"],["variant"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",20,[[["self"],["variant"]],["bool"]]],[11,"le","","",20,[[["self"],["variant"]],["bool"]]],[11,"gt","","",20,[[["self"],["variant"]],["bool"]]],[11,"ge","","",20,[[["self"],["variant"]],["bool"]]],[11,"partial_cmp","","",21,[[["self"],["variants"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",21,[[["self"],["variants"]],["bool"]]],[11,"le","","",21,[[["self"],["variants"]],["bool"]]],[11,"gt","","",21,[[["self"],["variants"]],["bool"]]],[11,"ge","","",21,[[["self"],["variants"]],["bool"]]],[11,"deref","icu_locale::extensions::private","",6,[[["self"]]]],[11,"deref","icu_locale::extensions::transform","",8,[[["self"]]]],[11,"deref","icu_locale::extensions::unicode","",13,[[["self"]]]],[11,"deref","","",15,[[["self"]]]],[11,"deref","icu_locale::subtags","",21,[[["self"]]]],[11,"fmt","icu_locale::extensions::private","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","icu_locale::extensions::transform","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","icu_locale::extensions::unicode","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","icu_locale::extensions","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","icu_locale","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","icu_locale::subtags","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","icu_locale::extensions::private","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","icu_locale::extensions::transform","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","icu_locale::extensions::unicode","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","icu_locale::extensions","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","icu_locale","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","icu_locale::subtags","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"hash","icu_locale::extensions::private","",5,[[["self"],["__h"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"hash","icu_locale::extensions::transform","",8,[[["self"],["__h"]]]],[11,"hash","","",9,[[["self"],["__h"]]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"hash","","",7,[[["self"],["__h"]]]],[11,"hash","icu_locale::extensions::unicode","",12,[[["self"],["__h"]]]],[11,"hash","","",13,[[["self"],["__h"]]]],[11,"hash","","",14,[[["self"],["__h"]]]],[11,"hash","","",15,[[["self"],["__h"]]]],[11,"hash","","",16,[[["self"],["__h"]]]],[11,"hash","","",11,[[["self"],["__h"]]]],[11,"hash","icu_locale::extensions","",4,[[["self"],["__h"]]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","icu_locale","",0,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","icu_locale::subtags","",17,[[["self"],["__h"]]]],[11,"hash","","",18,[[["self"],["__h"]]]],[11,"hash","","",19,[[["self"],["__h"]]]],[11,"hash","","",20,[[["self"],["__h"]]]],[11,"hash","","",21,[[["self"],["__h"]]]],[11,"from_str","icu_locale::extensions::private","",5,[[["str"]],["result"]]],[11,"from_str","icu_locale::extensions::transform","",9,[[["str"]],["result"]]],[11,"from_str","","",10,[[["str"]],["result"]]],[11,"from_str","icu_locale::extensions::unicode","",12,[[["str"]],["result"]]],[11,"from_str","","",14,[[["str"]],["result"]]],[11,"from_str","","",16,[[["str"]],["result"]]],[11,"from_str","icu_locale","",0,[[["str"]],["result"]]],[11,"from_str","","",1,[[["str"]],["result"]]],[11,"from_str","icu_locale::subtags","",17,[[["str"]],["result"]]],[11,"from_str","","",18,[[["str"]],["result"]]],[11,"from_str","","",19,[[["str"]],["result"]]],[11,"from_str","","",20,[[["str"]],["result"]]]],"p":[[3,"LanguageIdentifier"],[3,"Locale"],[4,"ParserError"],[3,"Extensions"],[4,"ExtensionType"],[3,"Key"],[3,"Private"],[3,"Transform"],[3,"Fields"],[3,"Key"],[3,"Value"],[3,"Unicode"],[3,"Attribute"],[3,"Attributes"],[3,"Key"],[3,"Keywords"],[3,"Value"],[3,"Language"],[3,"Region"],[3,"Script"],[3,"Variant"],[3,"Variants"]]};
searchIndex["itoa"] = {"doc":"This crate provides fast functions for printing integer…","i":[[3,"Buffer","itoa","A safe API for formatting integers to text.",null,null],[5,"write","","Write integer to an `io::Write`.",null,[[["integer"],["write"]],[["result",["usize"]],["usize"]]]],[5,"fmt","","Write integer to an `fmt::Write`.",null,[[["write"],["integer"]],["result"]]],[8,"Integer","","An integer that can be formatted by `itoa::write` and…",null,null],[11,"new","","This is a cheap operation; you don't need to worry about…",0,[[],["buffer"]]],[11,"format","","Print an integer into this buffer and return a reference…",0,[[["self"],["integer"]],["str"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"default","","",0,[[],["buffer"]]]],"p":[[3,"Buffer"]]};
searchIndex["no_std_compat"] = {"doc":"","i":[[0,"prelude","no_std_compat","The Rust Prelude.",null,null],[0,"v1","no_std_compat::prelude","The first version of the prelude of The Rust Standard…",null,null],[8,"Send","no_std_compat::prelude::v1","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Sync","","Types for which it is safe to share references between…",null,null],[8,"Unpin","","Types that can be safely moved after being pinned.",null,null],[8,"Drop","","Used to run some code when a value goes out of scope. This…",null,null],[10,"drop","","Executes the destructor for this type.",0,[[["self"]]]],[8,"Fn","","The version of the call operator that takes an immutable…",null,null],[10,"call","","Performs the call operation.",1,[[["args"],["self"]]]],[8,"FnMut","","The version of the call operator that takes a mutable…",null,null],[10,"call_mut","","Performs the call operation.",2,[[["args"],["self"]]]],[8,"FnOnce","","The version of the call operator that takes a by-value…",null,null],[16,"Output","","The returned type after the call operator is used.",3,null],[10,"call_once","","Performs the call operation.",3,[[["args"]]]],[5,"drop","","Disposes of a value.",null,[[["t"]]]],[8,"AsMut","","Used to do a cheap mutable-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",4,[[["self"]],["t"]]],[8,"AsRef","","Used to do a cheap reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",5,[[["self"]],["t"]]],[8,"From","","Used to do value-to-value conversions while consuming the…",null,null],[10,"from","","Performs the conversion.",6,[[["t"]],["self"]]],[8,"Into","","A value-to-value conversion that consumes the input value.…",null,null],[10,"into","","Performs the conversion.",7,[[],["t"]]],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",8,[[["self"]],["option"]]],[11,"nth_back","","Returns the `n`th element from the end of the iterator.",8,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes…",8,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","An iterator method that reduces the iterator's elements to…",8,[[["b"],["f"]],["b"]]],[11,"rfind","","Searches for an element of an iterator from the back that…",8,[[["self"],["p"]],["option"]]],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact length of the iterator.",9,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the iterator is empty.",9,[[["self"]],["bool"]]],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",10,[[["self"],["t"]]]],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",11,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",11,null],[10,"into_iter","","Creates an iterator from a value.",11,[[]]],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",12,null],[10,"next","","Advances the iterator and returns the next value.",12,[[["self"]],["option"]]],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",12,[[["self"]]]],[11,"count","","Consumes the iterator, counting the number of iterations…",12,[[],["usize"]]],[11,"last","","Consumes the iterator, returning the last element.",12,[[],["option"]]],[11,"nth","","Returns the `n`th element of the iterator.",12,[[["self"],["usize"]],["option"]]],[11,"step_by","","Creates an iterator starting at the same point, but…",12,[[["usize"]],["stepby"]]],[11,"chain","","Takes two iterators and creates a new iterator over both…",12,[[["u"]],["chain"]]],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",12,[[["u"]],["zip"]]],[11,"map","","Takes a closure and creates an iterator which calls that…",12,[[["f"]],["map"]]],[11,"for_each","","Calls a closure on each element of an iterator.",12,[[["f"]]]],[11,"filter","","Creates an iterator which uses a closure to determine if…",12,[[["p"]],["filter"]]],[11,"filter_map","","Creates an iterator that both filters and maps.",12,[[["f"]],["filtermap"]]],[11,"enumerate","","Creates an iterator which gives the current iteration…",12,[[],["enumerate"]]],[11,"peekable","","Creates an iterator which can use `peek` to look at the…",12,[[],["peekable"]]],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a…",12,[[["p"]],["skipwhile"]]],[11,"take_while","","Creates an iterator that yields elements based on a…",12,[[["p"]],["takewhile"]]],[11,"map_while","","Creates an iterator that both yields elements based on a…",12,[[["p"]],["mapwhile"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",12,[[["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields its first `n` elements.",12,[[["usize"]],["take"]]],[11,"scan","","An iterator adaptor similar to [`fold`] that holds…",12,[[["f"],["st"]],["scan"]]],[11,"flat_map","","Creates an iterator that works like map, but flattens…",12,[[["f"]],["flatmap"]]],[11,"flatten","","Creates an iterator that flattens nested structure.",12,[[],["flatten"]]],[11,"fuse","","Creates an iterator which ends after the first [`None`].",12,[[],["fuse"]]],[11,"inspect","","Does something with each element of an iterator, passing…",12,[[["f"]],["inspect"]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",12,[[["self"]],["self"]]],[11,"collect","","Transforms an iterator into a collection.",12,[[],["b"]]],[11,"partition","","Consumes an iterator, creating two collections from it.",12,[[["f"]]]],[11,"partition_in_place","","Reorders the elements of this iterator in-place according…",12,[[["p"]],["usize"]]],[11,"is_partitioned","","Checks if the elements of this iterator are partitioned…",12,[[["p"]],["bool"]]],[11,"try_fold","","An iterator method that applies a function as long as it…",12,[[["self"],["b"],["f"]],["r"]]],[11,"try_for_each","","An iterator method that applies a fallible function to…",12,[[["self"],["f"]],["r"]]],[11,"fold","","An iterator method that applies a function, producing a…",12,[[["b"],["f"]],["b"]]],[11,"all","","Tests if every element of the iterator matches a predicate.",12,[[["self"],["f"]],["bool"]]],[11,"any","","Tests if any element of the iterator matches a predicate.",12,[[["self"],["f"]],["bool"]]],[11,"find","","Searches for an element of an iterator that satisfies a…",12,[[["self"],["p"]],["option"]]],[11,"find_map","","Applies function to the elements of iterator and returns…",12,[[["self"],["f"]],["option"]]],[11,"try_find","","Applies function to the elements of iterator and returns…",12,[[["self"],["f"]],[["option"],["result",["option"]]]]],[11,"position","","Searches for an element in an iterator, returning its index.",12,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","Searches for an element in an iterator from the right,…",12,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"max","","Returns the maximum element of an iterator.",12,[[],["option"]]],[11,"min","","Returns the minimum element of an iterator.",12,[[],["option"]]],[11,"max_by_key","","Returns the element that gives the maximum value from the…",12,[[["f"]],["option"]]],[11,"max_by","","Returns the element that gives the maximum value with…",12,[[["f"]],["option"]]],[11,"min_by_key","","Returns the element that gives the minimum value from the…",12,[[["f"]],["option"]]],[11,"min_by","","Returns the element that gives the minimum value with…",12,[[["f"]],["option"]]],[11,"rev","","Reverses an iterator's direction.",12,[[],["rev"]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",12,[[]]],[11,"copied","","Creates an iterator which copies all of its elements.",12,[[],["copied"]]],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",12,[[],["cloned"]]],[11,"cycle","","Repeats an iterator endlessly.",12,[[],["cycle"]]],[11,"sum","","Sums the elements of an iterator.",12,[[],["s"]]],[11,"product","","Iterates over the entire iterator, multiplying all the…",12,[[],["p"]]],[11,"cmp","","Lexicographically compares the elements of this `Iterator`…",12,[[["i"]],["ordering"]]],[11,"cmp_by","","Lexicographically compares the elements of this `Iterator`…",12,[[["i"],["f"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator`…",12,[[["i"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp_by","","Lexicographically compares the elements of this `Iterator`…",12,[[["i"],["f"]],[["option",["ordering"]],["ordering"]]]],[11,"eq","","Determines if the elements of this `Iterator` are equal to…",12,[[["i"]],["bool"]]],[11,"eq_by","","Determines if the elements of this `Iterator` are equal to…",12,[[["i"],["f"]],["bool"]]],[11,"ne","","Determines if the elements of this `Iterator` are unequal…",12,[[["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `Iterator` are…",12,[[["i"]],["bool"]]],[11,"le","","Determines if the elements of this `Iterator` are…",12,[[["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `Iterator` are…",12,[[["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `Iterator` are…",12,[[["i"]],["bool"]]],[11,"is_sorted","","Checks if the elements of this iterator are sorted.",12,[[],["bool"]]],[11,"is_sorted_by","","Checks if the elements of this iterator are sorted using…",12,[[["f"]],["bool"]]],[11,"is_sorted_by_key","","Checks if the elements of this iterator are sorted using…",12,[[["f"]],["bool"]]],[4,"Option","","The `Option` type. See the module level documentation for…",null,null],[13,"None","","No value",13,null],[13,"Some","","Some value `T`",13,null],[4,"Result","","`Result` is a type that represents either success ([`Ok`])…",null,null],[13,"Ok","","Contains the success value",14,null],[13,"Err","","Contains the error value",14,null],[14,"asm","","Inline assembly.",null,null],[14,"assert","","Asserts that a boolean expression is `true` at runtime.",null,null],[14,"cfg","","Evaluates boolean combinations of configuration flags at…",null,null],[14,"column","","Expands to the column number at which it was invoked.",null,null],[14,"compile_error","","Causes compilation to fail with the given error message…",null,null],[14,"concat","","Concatenates literals into a static string slice.",null,null],[14,"concat_idents","","Concatenates identifiers into one identifier.",null,null],[14,"env","","Inspects an environment variable at compile time.",null,null],[14,"file","","Expands to the file name in which it was invoked.",null,null],[14,"format_args","","Constructs parameters for the other string-formatting…",null,null],[14,"format_args_nl","","Same as `format_args`, but adds a newline in the end.",null,null],[14,"global_asm","","Module-level inline assembly.",null,null],[14,"include","","Parses a file as an expression or an item according to the…",null,null],[14,"include_bytes","","Includes a file as a reference to a byte array.",null,null],[14,"include_str","","Includes a utf8-encoded file as a string.",null,null],[14,"line","","Expands to the line number on which it was invoked.",null,null],[14,"log_syntax","","Prints passed tokens into the standard output.",null,null],[14,"module_path","","Expands to a string that represents the current module path.",null,null],[14,"option_env","","Optionally inspects an environment variable at compile time.",null,null],[14,"stringify","","Stringifies its arguments.",null,null],[14,"trace_macros","","Enables or disables tracing functionality used for…",null,null],[14,"bench","","Attribute macro applied to a function to turn it into a…",null,null],[14,"global_allocator","","Attribute macro applied to a static to register it as a…",null,null],[14,"test","","Attribute macro applied to a function to turn it into a…",null,null],[14,"test_case","","An implementation detail of the `#[test]` and `#[bench]`…",null,null],[8,"Clone","","A common trait for the ability to explicitly duplicate an…",null,null],[10,"clone","","Returns a copy of the value.",15,[[["self"]],["self"]]],[11,"clone_from","","Performs copy-assignment from `source`.",15,[[["self"],["self"]]]],[14,"Clone","","Derive macro generating an impl of the trait `Clone`.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[14,"Copy","","Derive macro generating an impl of the trait `Copy`.",null,null],[14,"Debug","","Derive macro generating an impl of the trait `Debug`.",null,null],[8,"Default","","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",16,[[],["self"]]],[14,"Default","","Derive macro generating an impl of the trait `Default`.",null,null],[8,"Eq","","Trait for equality comparisons which are equivalence…",null,null],[14,"Eq","","Derive macro generating an impl of the trait `Eq`.",null,null],[14,"Hash","","Derive macro generating an impl of the trait `Hash`.",null,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an [`Ordering`] between `self` and…",17,[[["self"]],["ordering"]]],[11,"max","","Compares and returns the maximum of two values.",17,[[],["self"]]],[11,"min","","Compares and returns the minimum of two values.",17,[[],["self"]]],[11,"clamp","","Restrict a value to a certain interval.",17,[[],["self"]]],[14,"Ord","","Derive macro generating an impl of the trait `Ord`.",null,null],[8,"PartialEq","","Trait for equality comparisons which are partial…",null,null],[10,"eq","","This method tests for `self` and `other` values to be…",18,[[["rhs"],["self"]],["bool"]]],[11,"ne","","This method tests for `!=`.",18,[[["rhs"],["self"]],["bool"]]],[14,"PartialEq","","Derive macro generating an impl of the trait `PartialEq`.",null,null],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other`…",19,[[["rhs"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","This method tests less than (for `self` and `other`) and…",19,[[["rhs"],["self"]],["bool"]]],[11,"le","","This method tests less than or equal to (for `self` and…",19,[[["rhs"],["self"]],["bool"]]],[11,"gt","","This method tests greater than (for `self` and `other`)…",19,[[["rhs"],["self"]],["bool"]]],[11,"ge","","This method tests greater than or equal to (for `self` and…",19,[[["rhs"],["self"]],["bool"]]],[14,"PartialOrd","","Derive macro generating an impl of the trait `PartialOrd`.",null,null],[14,"RustcDecodable","","Unstable implementation detail of the `rustc` compiler, do…",null,null],[14,"RustcEncodable","","Unstable implementation detail of the `rustc` compiler, do…",null,null],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","The resulting type after obtaining ownership.",20,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",20,[[["self"]]]],[11,"clone_into","","Uses borrowed data to replace owned data, usually by…",20,[[["self"]]]],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"String","","A UTF-8 encoded, growable string.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",21,[[["self"]],["string"]]],[3,"Vec","","A contiguous growable array type, written `Vec<T>` but…",null,null],[0,"f32","no_std_compat","This module provides constants which are specific to the…",null,null],[0,"consts","no_std_compat::f32","Basic mathematical constants.",null,null],[17,"PI","no_std_compat::f32::consts","Archimedes' constant (π)",null,null],[17,"TAU","","The full circle constant (τ)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG2_10","","log2(10)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LOG10_2","","log10(2)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"DIGITS","no_std_compat::f32","Approximate number of significant digits in base 10. Use…",null,null],[17,"EPSILON","","[Machine epsilon] value for `f32`. Use `f32::EPSILON`…",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2. Use…",null,null],[17,"RADIX","","The radix or base of the internal representation of `f32`.…",null,null],[17,"INFINITY","","Infinity (∞). Use `f32::INFINITY` instead.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent. Use…",null,null],[17,"NAN","","Not a Number (NaN). Use `f32::NAN` instead.",null,null],[17,"NEG_INFINITY","","Negative infinity (−∞). Use `f32::NEG_INFINITY` instead.",null,null],[17,"MAX","","Largest finite `f32` value. Use `f32::MAX` instead.",null,null],[17,"MIN","","Smallest finite `f32` value. Use `f32::MIN` instead.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f32` value. Use…",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent. Use `f32::MAX_EXP`…",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent. Use…",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2…",null,null],[0,"f64","no_std_compat","This module provides constants which are specific to the…",null,null],[0,"consts","no_std_compat::f64","Basic mathematical constants.",null,null],[17,"PI","no_std_compat::f64::consts","Archimedes' constant (π)",null,null],[17,"TAU","","The full circle constant (τ)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_10","","log2(10)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_2","","log10(2)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"DIGITS","no_std_compat::f64","Approximate number of significant digits in base 10. Use…",null,null],[17,"EPSILON","","[Machine epsilon] value for `f64`. Use `f64::EPSILON`…",null,null],[17,"MANTISSA_DIGITS","","Number of significant digits in base 2. Use…",null,null],[17,"RADIX","","The radix or base of the internal representation of `f64`.…",null,null],[17,"INFINITY","","Infinity (∞). Use `f64::INFINITY` instead.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent. Use…",null,null],[17,"NAN","","Not a Number (NaN). Use `f64::NAN` instead.",null,null],[17,"NEG_INFINITY","","Negative infinity (−∞). Use `f64::NEG_INFINITY` instead.",null,null],[17,"MAX","","Largest finite `f64` value. Use `f64::MAX` instead.",null,null],[17,"MIN","","Smallest finite `f64` value. Use `f64::MIN` instead.",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f64` value. Use…",null,null],[17,"MAX_EXP","","Maximum possible power of 2 exponent. Use `f64::MAX_EXP`…",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent. Use…",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2…",null,null],[0,"thread","no_std_compat","Native threads.",null,null],[3,"Builder","no_std_compat::thread","Thread factory, which can be used in order to configure…",null,null],[5,"spawn","","Spawns a new thread, returning a [`JoinHandle`] for it.",null,[[["f"]],["joinhandle"]]],[5,"current","","Gets a handle to the thread that invokes it.",null,[[],["thread"]]],[5,"yield_now","","Cooperatively gives up a timeslice to the OS scheduler.",null,[[]]],[5,"panicking","","Determines whether the current thread is unwinding because…",null,[[],["bool"]]],[5,"sleep_ms","","Puts the current thread to sleep for at least the…",null,[[["u32"]]]],[5,"sleep","","Puts the current thread to sleep for at least the…",null,[[["duration"]]]],[5,"park","","Blocks unless or until the current thread's token is made…",null,[[]]],[5,"park_timeout_ms","","Use [`park_timeout`].",null,[[["u32"]]]],[5,"park_timeout","","Blocks unless or until the current thread's token is made…",null,[[["duration"]]]],[3,"ThreadId","","A unique identifier for a running thread.",null,null],[3,"Thread","","A handle to a thread.",null,null],[6,"Result","","A specialized [`Result`] type for threads.",null,null],[3,"JoinHandle","","An owned permission to join on a thread (block on its…",null,null],[3,"AccessError","","An error returned by `LocalKey::try_with`.",null,null],[3,"LocalKey","","A thread local storage key which owns its contents.",null,null],[3,"__FastLocalKeyInner","","",null,null],[3,"__OsLocalKeyInner","","",null,null],[0,"ascii","no_std_compat","Operations on ASCII strings and characters.",null,null],[8,"AsciiExt","no_std_compat::ascii","Extension methods for ASCII-subset only operations.",null,null],[16,"Owned","","Container type for copied ASCII characters.",22,null],[10,"is_ascii","","Checks if the value is within the ASCII range.",22,[[["self"]],["bool"]]],[10,"to_ascii_uppercase","","Makes a copy of the value in its ASCII upper case…",22,[[["self"]]]],[10,"to_ascii_lowercase","","Makes a copy of the value in its ASCII lower case…",22,[[["self"]]]],[10,"eq_ignore_ascii_case","","Checks that two values are an ASCII case-insensitive match.",22,[[["self"]],["bool"]]],[10,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent…",22,[[["self"]]]],[10,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent…",22,[[["self"]]]],[5,"escape_default","","Returns an iterator that produces an escaped version of a…",null,[[["u8"]],["escapedefault"]]],[3,"EscapeDefault","","An iterator over the escaped version of a byte.",null,null],[0,"backtrace","no_std_compat","Support for capturing a stack backtrace of an OS thread",null,null],[3,"Backtrace","no_std_compat::backtrace","A captured OS thread stack backtrace.",null,null],[4,"BacktraceStatus","","The current status of a backtrace, indicating whether it…",null,null],[13,"Unsupported","","Capturing a backtrace is not supported, likely because…",23,null],[13,"Disabled","","Capturing a backtrace has been disabled through either the…",23,null],[13,"Captured","","A backtrace has been captured and the `Backtrace` should…",23,null],[0,"collections","no_std_compat","Collection types.",null,null],[0,"hash_map","no_std_compat::collections","A hash map implemented with quadratic probing and SIMD…",null,null],[3,"HashMap","no_std_compat::collections::hash_map","A hash map implemented with quadratic probing and SIMD…",null,null],[3,"Iter","","An iterator over the entries of a `HashMap`.",null,null],[3,"IterMut","","A mutable iterator over the entries of a `HashMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `HashMap`.",null,null],[3,"Keys","","An iterator over the keys of a `HashMap`.",null,null],[3,"Values","","An iterator over the values of a `HashMap`.",null,null],[3,"Drain","","A draining iterator over the entries of a `HashMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `HashMap`.",null,null],[3,"RawEntryBuilderMut","","A builder for computing where in a HashMap a key-value…",null,null],[4,"RawEntryMut","","A view into a single entry in a map, which may either be…",null,null],[13,"Occupied","","An occupied entry.",24,null],[13,"Vacant","","A vacant entry.",24,null],[3,"RawOccupiedEntryMut","","A view into an occupied entry in a `HashMap`. It is part…",null,null],[3,"RawVacantEntryMut","","A view into a vacant entry in a `HashMap`. It is part of…",null,null],[3,"RawEntryBuilder","","A builder for computing where in a HashMap a key-value…",null,null],[4,"Entry","","A view into a single entry in a map, which may either be…",null,null],[13,"Occupied","","An occupied entry.",25,null],[13,"Vacant","","A vacant entry.",25,null],[3,"OccupiedEntry","","A view into an occupied entry in a `HashMap`. It is part…",null,null],[3,"VacantEntry","","A view into a vacant entry in a `HashMap`. It is part of…",null,null],[3,"RandomState","","`RandomState` is the default state for [`HashMap`] types.",null,null],[3,"DefaultHasher","","The default [`Hasher`] used by [`RandomState`].",null,null],[0,"hash_set","no_std_compat::collections","A hash set implemented as a `HashMap` where the value is…",null,null],[3,"HashSet","no_std_compat::collections::hash_set","A hash set implemented as a `HashMap` where the value is…",null,null],[3,"Iter","","An iterator over the items of a `HashSet`.",null,null],[3,"IntoIter","","An owning iterator over the items of a `HashSet`.",null,null],[3,"Drain","","A draining iterator over the items of a `HashSet`.",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of…",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of…",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric…",null,null],[3,"Union","","A lazy iterator producing elements in the union of…",null,null],[4,"Bound","no_std_compat::collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",26,null],[13,"Excluded","","An exclusive bound.",26,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in…",26,null],[0,"binary_heap","","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","no_std_compat::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"PeekMut","","Structure wrapping a mutable reference to the greatest…",null,null],[3,"Iter","","An iterator over the elements of a `BinaryHeap`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `BinaryHeap`.",null,null],[3,"IntoIterSorted","","",null,null],[3,"Drain","","A draining iterator over the elements of a `BinaryHeap`.",null,null],[3,"DrainSorted","","A draining iterator over the elements of a `BinaryHeap`.",null,null],[0,"btree_map","no_std_compat::collections","A map based on a B-Tree.",null,null],[3,"BTreeMap","no_std_compat::collections::btree_map","A map based on a B-Tree.",null,null],[3,"Keys","","An iterator over the keys of a `BTreeMap`.",null,null],[3,"Iter","","An iterator over the entries of a `BTreeMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `BTreeMap`.",null,null],[3,"Values","","An iterator over the values of a `BTreeMap`.",null,null],[3,"Range","","An iterator over a sub-range of entries in a `BTreeMap`.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a…",null,null],[4,"Entry","","A view into a single entry in a map, which may either be…",null,null],[13,"Vacant","","A vacant entry.",27,null],[13,"Occupied","","An occupied entry.",27,null],[3,"VacantEntry","","A view into a vacant entry in a `BTreeMap`. It is part of…",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `BTreeMap`. It is part…",null,null],[3,"IterMut","","A mutable iterator over the entries of a `BTreeMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `BTreeMap`.",null,null],[0,"btree_set","no_std_compat::collections","A set based on a B-Tree.",null,null],[3,"Iter","no_std_compat::collections::btree_set","An iterator over the items of a `BTreeSet`.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of…",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric…",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of…",null,null],[3,"Union","","A lazy iterator producing elements in the union of…",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"IntoIter","","An owning iterator over the items of a `BTreeSet`.",null,null],[3,"Range","","An iterator over a sub-range of items in a `BTreeSet`.",null,null],[0,"linked_list","no_std_compat::collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","no_std_compat::collections::linked_list","A doubly-linked list with owned nodes.",null,null],[3,"Iter","","An iterator over the elements of a `LinkedList`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `LinkedList`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `LinkedList`.",null,null],[3,"Cursor","","A cursor over a `LinkedList`.",null,null],[3,"CursorMut","","A cursor over a `LinkedList` with editing operations.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on…",null,null],[0,"vec_deque","no_std_compat::collections","A double-ended queue implemented with a growable ring…",null,null],[3,"VecDeque","no_std_compat::collections::vec_deque","A double-ended queue implemented with a growable ring…",null,null],[3,"Iter","","An iterator over the elements of a `VecDeque`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `VecDeque`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `VecDeque`.",null,null],[3,"Drain","","A draining iterator over the elements of a `VecDeque`.",null,null],[3,"BTreeMap","no_std_compat::collections","A map based on a B-Tree.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[3,"LinkedList","","A doubly-linked list with owned nodes.",null,null],[3,"VecDeque","","A double-ended queue implemented with a growable ring…",null,null],[3,"HashMap","","A hash map implemented with quadratic probing and SIMD…",null,null],[3,"HashSet","","A hash set implemented as a `HashMap` where the value is…",null,null],[4,"TryReserveError","","The error type for `try_reserve` methods.",null,null],[13,"CapacityOverflow","","Error due to the computed capacity exceeding the…",28,null],[13,"AllocError","","The memory allocator returned an error",28,null],[12,"layout","no_std_compat::collections::TryReserveError","The layout of allocation request that failed",29,null],[0,"env","no_std_compat","Inspection and manipulation of the process's environment.",null,null],[5,"current_dir","no_std_compat::env","Returns the current working directory as a [`PathBuf`].",null,[[],[["error"],["pathbuf"],["result",["pathbuf","error"]]]]],[5,"set_current_dir","","Changes the current working directory to the specified path.",null,[[["p"]],[["error"],["result",["error"]]]]],[3,"Vars","","An iterator over a snapshot of the environment variables…",null,null],[3,"VarsOs","","An iterator over a snapshot of the environment variables…",null,null],[5,"vars","","Returns an iterator of (variable, value) pairs of strings,…",null,[[],["vars"]]],[5,"vars_os","","Returns an iterator of (variable, value) pairs of OS…",null,[[],["varsos"]]],[5,"var","","Fetches the environment variable `key` from the current…",null,[[["k"]],[["varerror"],["string"],["result",["string","varerror"]]]]],[5,"var_os","","Fetches the environment variable `key` from the current…",null,[[["k"]],[["option",["osstring"]],["osstring"]]]],[4,"VarError","","The error type for operations interacting with environment…",null,null],[13,"NotPresent","","The specified environment variable was not present in the…",30,null],[13,"NotUnicode","","The specified environment variable was found, but it did…",30,null],[5,"set_var","","Sets the environment variable `k` to the value `v` for the…",null,[[["k"],["v"]]]],[5,"remove_var","","Removes an environment variable from the environment of…",null,[[["k"]]]],[3,"SplitPaths","","An iterator that splits an environment variable into paths…",null,null],[5,"split_paths","","Parses input according to platform conventions for the…",null,[[["t"]],["splitpaths"]]],[3,"JoinPathsError","","The error type for operations on the `PATH` variable.…",null,null],[5,"join_paths","","Joins a collection of [`Path`]s appropriately for the…",null,[[["i"]],[["joinpathserror"],["result",["osstring","joinpathserror"]],["osstring"]]]],[5,"home_dir","","Returns the path of the current user's home directory if…",null,[[],[["option",["pathbuf"]],["pathbuf"]]]],[5,"temp_dir","","Returns the path of a temporary directory.",null,[[],["pathbuf"]]],[5,"current_exe","","Returns the full filesystem path of the current running…",null,[[],[["error"],["pathbuf"],["result",["pathbuf","error"]]]]],[3,"Args","","An iterator over the arguments of a process, yielding a…",null,null],[3,"ArgsOs","","An iterator over the arguments of a process, yielding an…",null,null],[5,"args","","Returns the arguments which this program was started with…",null,[[],["args"]]],[5,"args_os","","Returns the arguments which this program was started with…",null,[[],["argsos"]]],[0,"consts","","Constants associated with the current target",null,null],[17,"ARCH","no_std_compat::env::consts","A string describing the architecture of the CPU that is…",null,null],[17,"FAMILY","","The family of the operating system. Example value is `unix`.",null,null],[17,"OS","","A string describing the specific operating system in use.…",null,null],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on…",null,null],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on…",null,null],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on…",null,null],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries…",null,null],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable…",null,null],[0,"error","no_std_compat","Traits for working with Errors.",null,null],[8,"Error","no_std_compat::error","`Error` is a trait representing the basic expectations for…",null,null],[11,"source","","The lower-level source of this error, if any.",31,[[["self"]],[["error"],["option",["error"]]]]],[11,"backtrace","","Returns a stack backtrace, if available, of where this…",31,[[["self"]],[["backtrace"],["option",["backtrace"]]]]],[11,"description","","`if let Err(e) = \"xc\".parse::<u32>() { // Print `e`…",31,[[["self"]],["str"]]],[11,"cause","","",31,[[["self"]],[["option",["error"]],["error"]]]],[3,"Chain","","An iterator over an [`Error`] and its sources.",null,null],[0,"ffi","no_std_compat","Utilities related to FFI bindings.",null,null],[3,"FromBytesWithNulError","no_std_compat::ffi","An error indicating that a nul byte was not in the…",null,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[3,"CString","","A type representing an owned, C-compatible, nul-terminated…",null,null],[3,"IntoStringError","","An error indicating invalid UTF-8 when converting a…",null,null],[3,"NulError","","An error indicating that an interior nul byte was found.",null,null],[3,"OsStr","","Borrowed reference to an OS string (see [`OsString`]).",null,null],[3,"OsString","","A type that can represent owned, mutable platform-native…",null,null],[4,"c_void","","Equivalent to C's `void` type when used as a [pointer].",null,null],[3,"VaList","","A wrapper for a `va_list`",null,null],[3,"VaListImpl","","x86_64 ABI implementation of a `va_list`.",null,null],[0,"fs","no_std_compat","Filesystem manipulation operations.",null,null],[3,"File","no_std_compat::fs","A reference to an open file on the filesystem.",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"ReadDir","","Iterator over the entries in a directory.",null,null],[3,"DirEntry","","Entries returned by the [`ReadDir`] iterator.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a…",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"FileType","","A structure representing a type of file with accessors for…",null,null],[3,"DirBuilder","","A builder used to create directories in various manners.",null,null],[5,"read","","Read the entire contents of a file into a bytes vector.",null,[[["p"]],[["result",["vec","error"]],["error"],["vec",["u8"]]]]],[5,"read_to_string","","Read the entire contents of a file into a string.",null,[[["p"]],[["string"],["result",["string","error"]],["error"]]]],[5,"write","","Write a slice as the entire contents of a file.",null,[[["c"],["p"]],[["error"],["result",["error"]]]]],[5,"remove_file","","Removes a file from the filesystem.",null,[[["p"]],[["error"],["result",["error"]]]]],[5,"metadata","","Given a path, query the file system to get information…",null,[[["p"]],[["metadata"],["error"],["result",["metadata","error"]]]]],[5,"symlink_metadata","","Query the metadata about a file without following symlinks.",null,[[["p"]],[["metadata"],["error"],["result",["metadata","error"]]]]],[5,"rename","","Rename a file or directory to a new name, replacing the…",null,[[["q"],["p"]],[["error"],["result",["error"]]]]],[5,"copy","","Copies the contents of one file to another. This function…",null,[[["q"],["p"]],[["error"],["u64"],["result",["u64","error"]]]]],[5,"hard_link","","Creates a new hard link on the filesystem.",null,[[["q"],["p"]],[["error"],["result",["error"]]]]],[5,"soft_link","","Creates a new symbolic link on the filesystem.",null,[[["q"],["p"]],[["error"],["result",["error"]]]]],[5,"read_link","","Reads a symbolic link, returning the file that the link…",null,[[["p"]],[["error"],["pathbuf"],["result",["pathbuf","error"]]]]],[5,"canonicalize","","Returns the canonical, absolute form of a path with all…",null,[[["p"]],[["error"],["pathbuf"],["result",["pathbuf","error"]]]]],[5,"create_dir","","Creates a new, empty directory at the provided path",null,[[["p"]],[["error"],["result",["error"]]]]],[5,"create_dir_all","","Recursively create a directory and all of its parent…",null,[[["p"]],[["error"],["result",["error"]]]]],[5,"remove_dir","","Removes an existing, empty directory.",null,[[["p"]],[["error"],["result",["error"]]]]],[5,"remove_dir_all","","Removes a directory at this path, after removing all its…",null,[[["p"]],[["error"],["result",["error"]]]]],[5,"read_dir","","Returns an iterator over the entries within a directory.",null,[[["p"]],[["error"],["readdir"],["result",["readdir","error"]]]]],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,[[["permissions"],["p"]],[["error"],["result",["error"]]]]],[0,"io","no_std_compat","Traits, helpers, and type definitions for core I/O…",null,null],[0,"prelude","no_std_compat::io","The I/O Prelude",null,null],[8,"BufRead","no_std_compat::io::prelude","A `BufRead` is a type of `Read`er which has an internal…",null,null],[10,"fill_buf","","Returns the contents of the internal buffer, filling it…",32,[[["self"]],[["result",["error"]],["error"]]]],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from…",32,[[["self"],["usize"]]]],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` or…",32,[[["self"],["vec"],["u8"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached,…",32,[[["string"],["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"split","","Returns an iterator over the contents of this reader split…",32,[[["u8"]],["split"]]],[11,"lines","","Returns an iterator over the lines of this reader.",32,[[],["lines"]]],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified…",33,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_vectored","","Like `read`, except that it reads into a slice of buffers.",33,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"initializer","","Determines if this `Read`er can work with buffers of…",33,[[["self"]],["initializer"]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into…",33,[[["self"],["vec"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to…",33,[[["string"],["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",33,[[["self"]],[["error"],["result",["error"]]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of…",33,[[["self"]],["self"]]],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over…",33,[[],["bytes"]]],[11,"chain","","Creates an adaptor which will chain this stream with…",33,[[["r"]],["chain"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes…",33,[[["u64"]],["take"]]],[8,"Seek","","The `Seek` trait provides a cursor which can be moved…",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",34,[[["self"],["seekfrom"]],[["error"],["u64"],["result",["u64","error"]]]]],[11,"stream_len","","Returns the length of this stream (in bytes).",34,[[["self"]],[["error"],["u64"],["result",["u64","error"]]]]],[11,"stream_position","","Returns the current seek position from the start of the…",34,[[["self"]],[["error"],["u64"],["result",["u64","error"]]]]],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this writer, returning how many bytes…",35,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","Like `write`, except that it writes from a slice of buffers.",35,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[10,"flush","","Flush this output stream, ensuring that all intermediately…",35,[[["self"]],[["error"],["result",["error"]]]]],[11,"write_all","","Attempts to write an entire buffer into this writer.",35,[[["self"]],[["error"],["result",["error"]]]]],[11,"write_fmt","","Writes a formatted string into this writer, returning any…",35,[[["self"],["arguments"]],[["error"],["result",["error"]]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of…",35,[[["self"]],["self"]]],[8,"Read","no_std_compat::io","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified…",33,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_vectored","","Like `read`, except that it reads into a slice of buffers.",33,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"initializer","","Determines if this `Read`er can work with buffers of…",33,[[["self"]],["initializer"]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into…",33,[[["self"],["vec"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to…",33,[[["string"],["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",33,[[["self"]],[["error"],["result",["error"]]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of…",33,[[["self"]],["self"]]],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over…",33,[[],["bytes"]]],[11,"chain","","Creates an adaptor which will chain this stream with…",33,[[["r"]],["chain"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes…",33,[[["u64"]],["take"]]],[3,"IoSliceMut","","A buffer type used with `Read::read_vectored`.",null,null],[3,"IoSlice","","A buffer type used with `Write::write_vectored`.",null,null],[3,"Initializer","","A type used to conditionally initialize buffers passed to…",null,null],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this writer, returning how many bytes…",35,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","Like `write`, except that it writes from a slice of buffers.",35,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[10,"flush","","Flush this output stream, ensuring that all intermediately…",35,[[["self"]],[["error"],["result",["error"]]]]],[11,"write_all","","Attempts to write an entire buffer into this writer.",35,[[["self"]],[["error"],["result",["error"]]]]],[11,"write_fmt","","Writes a formatted string into this writer, returning any…",35,[[["self"],["arguments"]],[["error"],["result",["error"]]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of…",35,[[["self"]],["self"]]],[8,"Seek","","The `Seek` trait provides a cursor which can be moved…",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",34,[[["self"],["seekfrom"]],[["error"],["u64"],["result",["u64","error"]]]]],[11,"stream_len","","Returns the length of this stream (in bytes).",34,[[["self"]],[["error"],["u64"],["result",["u64","error"]]]]],[11,"stream_position","","Returns the current seek position from the start of the…",34,[[["self"]],[["error"],["u64"],["result",["u64","error"]]]]],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O…",null,null],[13,"Start","","Sets the offset to the provided number of bytes.",36,null],[13,"End","","Sets the offset to the size of this object plus the…",36,null],[13,"Current","","Sets the offset to the current position plus the specified…",36,null],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal…",null,null],[10,"fill_buf","","Returns the contents of the internal buffer, filling it…",32,[[["self"]],[["result",["error"]],["error"]]]],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from…",32,[[["self"],["usize"]]]],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` or…",32,[[["self"],["vec"],["u8"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached,…",32,[[["string"],["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"split","","Returns an iterator over the contents of this reader split…",32,[[["u8"]],["split"]]],[11,"lines","","Returns an iterator over the lines of this reader.",32,[[],["lines"]]],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an…",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Split","","An iterator over the contents of an instance of `BufRead`…",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[3,"IntoInnerError","","An error returned by `into_inner` which combines an error…",null,null],[3,"BufReader","","The `BufReader<R>` struct adds buffering to any reader.",null,null],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing whenever…",null,null],[3,"Cursor","","A `Cursor` wraps an in-memory buffer and provides it with…",null,null],[3,"Error","","The error type for I/O operations of the [`Read`],…",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",37,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",37,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",37,null],[13,"ConnectionReset","","The connection was reset by the remote server.",37,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote…",37,null],[13,"NotConnected","","The network operation failed because it was not connected…",37,null],[13,"AddrInUse","","A socket address could not be bound because the address is…",37,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested…",37,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",37,null],[13,"AlreadyExists","","An entity already exists, often a file.",37,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking…",37,null],[13,"InvalidInput","","A parameter was incorrect.",37,null],[13,"InvalidData","","Data not valid for the operation were encountered.",37,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be…",37,null],[13,"WriteZero","","An error returned when an operation could not be completed…",37,null],[13,"Interrupted","","This operation was interrupted.",37,null],[13,"Other","","Any I/O error not part of this list.",37,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed…",37,null],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[5,"stderr","","Constructs a new handle to the standard error of the…",null,[[],["stderr"]]],[5,"stdin","","Constructs a new handle to the standard input of the…",null,[[],["stdin"]]],[5,"stdout","","Constructs a new handle to the standard output of the…",null,[[],["stdout"]]],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the global standard output stream of the…",null,null],[3,"StderrLock","","A locked reference to the `Stderr` handle.",null,null],[3,"StdinLock","","A locked reference to the `Stdin` handle.",null,null],[3,"StdoutLock","","A locked reference to the `Stdout` handle.",null,null],[5,"copy","","Copies the entire contents of a reader into a writer.",null,[[["w"],["r"]],[["error"],["u64"],["result",["u64","error"]]]]],[5,"empty","","Constructs a new handle to an empty reader.",null,[[],["empty"]]],[5,"repeat","","Creates an instance of a reader that infinitely repeats…",null,[[["u8"]],["repeat"]]],[5,"sink","","Creates an instance of a writer which will successfully…",null,[[],["sink"]]],[3,"Empty","","A reader which is always at EOF.",null,null],[3,"Repeat","","A reader which yields one byte over and over and over and…",null,null],[3,"Sink","","A writer which will move data into the void.",null,null],[0,"net","no_std_compat","Networking primitives for TCP/UDP communication.",null,null],[4,"Shutdown","no_std_compat::net","Possible values which can be passed to the [`shutdown`]…",null,null],[13,"Read","","The reading portion of the [`TcpStream`] should be shut…",38,null],[13,"Write","","The writing portion of the [`TcpStream`] should be shut…",38,null],[13,"Both","","Both the reading and the writing portions of the…",38,null],[4,"SocketAddr","","An internet socket address, either IPv4 or IPv6.",null,null],[13,"V4","","An IPv4 socket address.",39,null],[13,"V6","","An IPv6 socket address.",39,null],[3,"SocketAddrV4","","An IPv4 socket address.",null,null],[3,"SocketAddrV6","","An IPv6 socket address.",null,null],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to…",null,null],[16,"Iter","","Returned iterator over socket addresses which this type…",40,null],[10,"to_socket_addrs","","Converts this object to an iterator of resolved…",40,[[["self"]],[["error"],["result",["error"]]]]],[4,"IpAddr","","An IP address, either IPv4 or IPv6.",null,null],[13,"V4","","An IPv4 address.",41,null],[13,"V6","","An IPv6 address.",41,null],[3,"Ipv4Addr","","An IPv4 address.",null,null],[3,"Ipv6Addr","","An IPv6 address.",null,null],[4,"Ipv6MulticastScope","","",null,null],[13,"InterfaceLocal","","",42,null],[13,"LinkLocal","","",42,null],[13,"RealmLocal","","",42,null],[13,"AdminLocal","","",42,null],[13,"SiteLocal","","",42,null],[13,"OrganizationLocal","","",42,null],[13,"Global","","",42,null],[3,"AddrParseError","","An error which can be returned when parsing an IP address…",null,null],[3,"Incoming","","An iterator that infinitely [`accept`]s connections on a…",null,null],[3,"TcpListener","","A TCP socket server, listening for connections.",null,null],[3,"TcpStream","","A TCP stream between a local and a remote socket.",null,null],[3,"UdpSocket","","A UDP socket.",null,null],[0,"num","no_std_compat","Additional functionality for numerics.",null,null],[3,"Wrapping","no_std_compat::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",43,null],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero.",44,null],[13,"Infinite","","Positive or negative infinity.",44,null],[13,"Zero","","Positive or negative zero.",44,null],[13,"Subnormal","","De-normalized floating point representation (less precise…",44,null],[13,"Normal","","A regular floating point number.",44,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"TryFromIntError","","The error type returned when a checked integral type…",null,null],[3,"NonZeroI128","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI16","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI32","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI64","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI8","","An integer that is known not to equal zero.",null,null],[3,"NonZeroIsize","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU128","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU16","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU32","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU64","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU8","","An integer that is known not to equal zero.",null,null],[3,"NonZeroUsize","","An integer that is known not to equal zero.",null,null],[4,"IntErrorKind","","Enum to store the various types of errors that can cause…",null,null],[13,"Empty","","Value being parsed is empty.",45,null],[13,"InvalidDigit","","Contains an invalid digit.",45,null],[13,"Overflow","","Integer is too large to store in target integer type.",45,null],[13,"Underflow","","Integer is too small to store in target integer type.",45,null],[13,"Zero","","Value was Zero",45,null],[0,"os","no_std_compat","OS-specific functionality.",null,null],[0,"linux","no_std_compat::os","Linux-specific definitions",null,null],[0,"fs","no_std_compat::os::linux","",null,null],[8,"MetadataExt","no_std_compat::os::linux::fs","OS-specific extensions to [`fs::Metadata`].",null,null],[10,"as_raw_stat","","Gain a reference to the underlying `stat` structure which…",46,[[["self"]],["stat"]]],[10,"st_dev","","Returns the device ID on which this file resides.",46,[[["self"]],["u64"]]],[10,"st_ino","","Returns the inode number.",46,[[["self"]],["u64"]]],[10,"st_mode","","Returns the file type and mode.",46,[[["self"]],["u32"]]],[10,"st_nlink","","Returns the number of hard links to file.",46,[[["self"]],["u64"]]],[10,"st_uid","","Returns the user ID of the file owner.",46,[[["self"]],["u32"]]],[10,"st_gid","","Returns the group ID of the file owner.",46,[[["self"]],["u32"]]],[10,"st_rdev","","Returns the device ID that this file represents. Only…",46,[[["self"]],["u64"]]],[10,"st_size","","Returns the size of the file (if it is a regular file or a…",46,[[["self"]],["u64"]]],[10,"st_atime","","Returns the last access time of the file, in seconds since…",46,[[["self"]],["i64"]]],[10,"st_atime_nsec","","Returns the last access time of the file, in nanoseconds…",46,[[["self"]],["i64"]]],[10,"st_mtime","","Returns the last modification time of the file, in seconds…",46,[[["self"]],["i64"]]],[10,"st_mtime_nsec","","Returns the last modification time of the file, in…",46,[[["self"]],["i64"]]],[10,"st_ctime","","Returns the last status change time of the file, in…",46,[[["self"]],["i64"]]],[10,"st_ctime_nsec","","Returns the last status change time of the file, in…",46,[[["self"]],["i64"]]],[10,"st_blksize","","Returns the \"preferred\" blocksize for efficient filesystem…",46,[[["self"]],["u64"]]],[10,"st_blocks","","Returns the number of blocks allocated to the file,…",46,[[["self"]],["u64"]]],[0,"raw","no_std_compat::os::linux","Linux-specific raw type definitions",null,null],[6,"dev_t","no_std_compat::os::linux::raw","",null,null],[6,"mode_t","","",null,null],[6,"pthread_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"blksize_t","","",null,null],[6,"ino_t","","",null,null],[6,"nlink_t","","",null,null],[6,"off_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",47,null],[12,"st_ino","","",47,null],[12,"st_nlink","","",47,null],[12,"st_mode","","",47,null],[12,"st_uid","","",47,null],[12,"st_gid","","",47,null],[12,"__pad0","","",47,null],[12,"st_rdev","","",47,null],[12,"st_size","","",47,null],[12,"st_blksize","","",47,null],[12,"st_blocks","","",47,null],[12,"st_atime","","",47,null],[12,"st_atime_nsec","","",47,null],[12,"st_mtime","","",47,null],[12,"st_mtime_nsec","","",47,null],[12,"st_ctime","","",47,null],[12,"st_ctime_nsec","","",47,null],[12,"__unused","","",47,null],[6,"time_t","","",null,null],[0,"raw","no_std_compat::os","Platform-specific types, as defined by C.",null,null],[6,"c_char","no_std_compat::os::raw","Equivalent to C's `char` type.",null,null],[6,"c_schar","","Equivalent to C's `signed char` type.",null,null],[6,"c_uchar","","Equivalent to C's `unsigned char` type.",null,null],[6,"c_short","","Equivalent to C's `signed short` (`short`) type.",null,null],[6,"c_ushort","","Equivalent to C's `unsigned short` type.",null,null],[6,"c_int","","Equivalent to C's `signed int` (`int`) type.",null,null],[6,"c_uint","","Equivalent to C's `unsigned int` type.",null,null],[6,"c_long","","Equivalent to C's `signed long` (`long`) type.",null,null],[6,"c_ulong","","Equivalent to C's `unsigned long` type.",null,null],[6,"c_longlong","","Equivalent to C's `signed long long` (`long long`) type.",null,null],[6,"c_ulonglong","","Equivalent to C's `unsigned long long` type.",null,null],[6,"c_float","","Equivalent to C's `float` type.",null,null],[6,"c_double","","Equivalent to C's `double` type.",null,null],[4,"c_void","","Equivalent to C's `void` type when used as a [pointer].",null,null],[0,"unix","no_std_compat::os","Platform-specific extensions to `std` for Unix platforms.",null,null],[0,"ffi","no_std_compat::os::unix","Unix-specific extension to the primitives in the…",null,null],[8,"OsStringExt","no_std_compat::os::unix::ffi","Platform-specific extensions to [`OsString`].",null,null],[10,"from_vec","","Creates an [`OsString`] from a byte vector.",48,[[["vec",["u8"]],["u8"]],["self"]]],[10,"into_vec","","Yields the underlying byte vector of this [`OsString`].",48,[[],[["u8"],["vec",["u8"]]]]],[8,"OsStrExt","","Platform-specific extensions to [`OsStr`].",null,null],[10,"from_bytes","","Creates an [`OsStr`] from a byte slice.",49,[[],["self"]]],[10,"as_bytes","","Gets the underlying byte view of the [`OsStr`] slice.",49,[[["self"]]]],[0,"fs","no_std_compat::os::unix","Unix-specific extensions to primitives in the `std::fs`…",null,null],[8,"FileExt","no_std_compat::os::unix::fs","Unix-specific extensions to [`File`].",null,null],[10,"read_at","","Reads a number of bytes starting from a given offset.",50,[[["u64"],["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_exact_at","","Reads the exact number of byte required to fill `buf` from…",50,[[["u64"],["self"]],[["error"],["result",["error"]]]]],[10,"write_at","","Writes a number of bytes starting from a given offset.",50,[[["self"],["u64"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_all_at","","Attempts to write an entire buffer starting from a given…",50,[[["self"],["u64"]],[["error"],["result",["error"]]]]],[8,"PermissionsExt","","Unix-specific extensions to [`fs::Permissions`].",null,null],[10,"mode","","Returns the underlying raw `st_mode` bits that contain the…",51,[[["self"]],["u32"]]],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",51,[[["self"],["u32"]]]],[10,"from_mode","","Creates a new instance of `Permissions` from the given set…",51,[[["u32"]],["self"]]],[8,"OpenOptionsExt","","Unix-specific extensions to [`fs::OpenOptions`].",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",52,[[["self"],["u32"]],["self"]]],[10,"custom_flags","","Pass custom flags to the `flags` argument of `open`.",52,[[["self"],["i32"]],["self"]]],[8,"MetadataExt","","Unix-specific extensions to [`fs::Metadata`].",null,null],[10,"dev","","Returns the ID of the device containing the file.",53,[[["self"]],["u64"]]],[10,"ino","","Returns the inode number.",53,[[["self"]],["u64"]]],[10,"mode","","Returns the rights applied to this file.",53,[[["self"]],["u32"]]],[10,"nlink","","Returns the number of hard links pointing to this file.",53,[[["self"]],["u64"]]],[10,"uid","","Returns the user ID of the owner of this file.",53,[[["self"]],["u32"]]],[10,"gid","","Returns the group ID of the owner of this file.",53,[[["self"]],["u32"]]],[10,"rdev","","Returns the device ID of this file (if it is a special one).",53,[[["self"]],["u64"]]],[10,"size","","Returns the total size of this file in bytes.",53,[[["self"]],["u64"]]],[10,"atime","","Returns the last access time of the file, in seconds since…",53,[[["self"]],["i64"]]],[10,"atime_nsec","","Returns the last access time of the file, in nanoseconds…",53,[[["self"]],["i64"]]],[10,"mtime","","Returns the last modification time of the file, in seconds…",53,[[["self"]],["i64"]]],[10,"mtime_nsec","","Returns the last modification time of the file, in…",53,[[["self"]],["i64"]]],[10,"ctime","","Returns the last status change time of the file, in…",53,[[["self"]],["i64"]]],[10,"ctime_nsec","","Returns the last status change time of the file, in…",53,[[["self"]],["i64"]]],[10,"blksize","","Returns the blocksize for filesystem I/O.",53,[[["self"]],["u64"]]],[10,"blocks","","Returns the number of blocks allocated to the file, in…",53,[[["self"]],["u64"]]],[8,"FileTypeExt","","Unix-specific extensions for [`FileType`].",null,null],[10,"is_block_device","","Returns `true` if this file type is a block device.",54,[[["self"]],["bool"]]],[10,"is_char_device","","Returns `true` if this file type is a char device.",54,[[["self"]],["bool"]]],[10,"is_fifo","","Returns `true` if this file type is a fifo.",54,[[["self"]],["bool"]]],[10,"is_socket","","Returns `true` if this file type is a socket.",54,[[["self"]],["bool"]]],[8,"DirEntryExt","","Unix-specific extension methods for [`fs::DirEntry`].",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained…",55,[[["self"]],["u64"]]],[5,"symlink","","Creates a new symbolic link on the filesystem.",null,[[["q"],["p"]],[["error"],["result",["error"]]]]],[8,"DirBuilderExt","","Unix-specific extensions to [`fs::DirBuilder`].",null,null],[10,"mode","","Sets the mode to create new directories with. This option…",56,[[["self"],["u32"]],["self"]]],[0,"io","no_std_compat::os::unix","Unix-specific extensions to general I/O primitives",null,null],[6,"RawFd","no_std_compat::os::unix::io","Raw file descriptors.",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an…",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",57,[[["self"]],["i32"]]],[8,"FromRawFd","","A trait to express the ability to construct an object from…",null,null],[10,"from_raw_fd","","Constructs a new instance of `Self` from the given raw…",58,[[["i32"]],["self"]]],[8,"IntoRawFd","","A trait to express the ability to consume an object and…",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file…",59,[[],["i32"]]],[0,"net","no_std_compat::os::unix","Unix-specific networking functionality",null,null],[3,"SocketAddr","no_std_compat::os::unix::net","An address associated with a Unix socket.",null,null],[3,"UnixStream","","A Unix stream socket.",null,null],[3,"UnixListener","","A structure representing a Unix domain socket server.",null,null],[3,"Incoming","","An iterator over incoming connections to a [`UnixListener`].",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[0,"process","no_std_compat::os::unix","Unix-specific extensions to primitives in the…",null,null],[8,"CommandExt","no_std_compat::os::unix::process","Unix-specific extensions to the [`process::Command`]…",null,null],[10,"uid","","Sets the child process's user ID. This translates to a…",60,[[["self"],["u32"]],["command"]]],[10,"gid","","Similar to `uid`, but sets the group ID of the child…",60,[[["self"],["u32"]],["command"]]],[10,"pre_exec","","Schedules a closure to be run just before the `exec`…",60,[[["self"],["f"]],["command"]]],[11,"before_exec","","Schedules a closure to be run just before the `exec`…",60,[[["self"],["f"]],["command"]]],[10,"exec","","Performs all the required setup by this `Command`,…",60,[[["self"]],["error"]]],[10,"arg0","","Set executable argument",60,[[["self"],["s"]],["command"]]],[8,"ExitStatusExt","","Unix-specific extensions to [`process::ExitStatus`].",null,null],[10,"from_raw","","Creates a new `ExitStatus` from the raw underlying `i32`…",61,[[["i32"]],["self"]]],[10,"signal","","If the process was terminated by a signal, returns that…",61,[[["self"]],[["option",["i32"]],["i32"]]]],[5,"parent_id","","Returns the OS-assigned process identifier associated with…",null,[[],["u32"]]],[0,"raw","no_std_compat::os::unix","Unix-specific primitives available on all unix platforms",null,null],[6,"uid_t","no_std_compat::os::unix::raw","",null,null],[6,"gid_t","","",null,null],[6,"pid_t","","",null,null],[6,"pthread_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"time_t","","",null,null],[6,"blksize_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"off_t","","",null,null],[0,"thread","no_std_compat::os::unix","Unix-specific extensions to primitives in the…",null,null],[6,"RawPthread","no_std_compat::os::unix::thread","",null,null],[8,"JoinHandleExt","","Unix-specific extensions to [`thread::JoinHandle`].",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",62,[[["self"]],["u64"]]],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",62,[[],["u64"]]],[0,"prelude","no_std_compat::os::unix","A prelude for conveniently writing platform-specific code.",null,null],[8,"OsStrExt","no_std_compat::os::unix::prelude","Platform-specific extensions to [`OsStr`].",null,null],[10,"from_bytes","","Creates an [`OsStr`] from a byte slice.",49,[[],["self"]]],[10,"as_bytes","","Gets the underlying byte view of the [`OsStr`] slice.",49,[[["self"]]]],[8,"OsStringExt","","Platform-specific extensions to [`OsString`].",null,null],[10,"from_vec","","Creates an [`OsString`] from a byte vector.",48,[[["vec",["u8"]],["u8"]],["self"]]],[10,"into_vec","","Yields the underlying byte vector of this [`OsString`].",48,[[],[["u8"],["vec",["u8"]]]]],[8,"DirEntryExt","","Unix-specific extension methods for [`fs::DirEntry`].",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained…",55,[[["self"]],["u64"]]],[8,"FileExt","","Unix-specific extensions to [`File`].",null,null],[10,"read_at","","Reads a number of bytes starting from a given offset.",50,[[["u64"],["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_exact_at","","Reads the exact number of byte required to fill `buf` from…",50,[[["u64"],["self"]],[["error"],["result",["error"]]]]],[10,"write_at","","Writes a number of bytes starting from a given offset.",50,[[["self"],["u64"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_all_at","","Attempts to write an entire buffer starting from a given…",50,[[["self"],["u64"]],[["error"],["result",["error"]]]]],[8,"FileTypeExt","","Unix-specific extensions for [`FileType`].",null,null],[10,"is_block_device","","Returns `true` if this file type is a block device.",54,[[["self"]],["bool"]]],[10,"is_char_device","","Returns `true` if this file type is a char device.",54,[[["self"]],["bool"]]],[10,"is_fifo","","Returns `true` if this file type is a fifo.",54,[[["self"]],["bool"]]],[10,"is_socket","","Returns `true` if this file type is a socket.",54,[[["self"]],["bool"]]],[8,"MetadataExt","","Unix-specific extensions to [`fs::Metadata`].",null,null],[10,"dev","","Returns the ID of the device containing the file.",53,[[["self"]],["u64"]]],[10,"ino","","Returns the inode number.",53,[[["self"]],["u64"]]],[10,"mode","","Returns the rights applied to this file.",53,[[["self"]],["u32"]]],[10,"nlink","","Returns the number of hard links pointing to this file.",53,[[["self"]],["u64"]]],[10,"uid","","Returns the user ID of the owner of this file.",53,[[["self"]],["u32"]]],[10,"gid","","Returns the group ID of the owner of this file.",53,[[["self"]],["u32"]]],[10,"rdev","","Returns the device ID of this file (if it is a special one).",53,[[["self"]],["u64"]]],[10,"size","","Returns the total size of this file in bytes.",53,[[["self"]],["u64"]]],[10,"atime","","Returns the last access time of the file, in seconds since…",53,[[["self"]],["i64"]]],[10,"atime_nsec","","Returns the last access time of the file, in nanoseconds…",53,[[["self"]],["i64"]]],[10,"mtime","","Returns the last modification time of the file, in seconds…",53,[[["self"]],["i64"]]],[10,"mtime_nsec","","Returns the last modification time of the file, in…",53,[[["self"]],["i64"]]],[10,"ctime","","Returns the last status change time of the file, in…",53,[[["self"]],["i64"]]],[10,"ctime_nsec","","Returns the last status change time of the file, in…",53,[[["self"]],["i64"]]],[10,"blksize","","Returns the blocksize for filesystem I/O.",53,[[["self"]],["u64"]]],[10,"blocks","","Returns the number of blocks allocated to the file, in…",53,[[["self"]],["u64"]]],[8,"OpenOptionsExt","","Unix-specific extensions to [`fs::OpenOptions`].",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",52,[[["self"],["u32"]],["self"]]],[10,"custom_flags","","Pass custom flags to the `flags` argument of `open`.",52,[[["self"],["i32"]],["self"]]],[8,"PermissionsExt","","Unix-specific extensions to [`fs::Permissions`].",null,null],[10,"mode","","Returns the underlying raw `st_mode` bits that contain the…",51,[[["self"]],["u32"]]],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",51,[[["self"],["u32"]]]],[10,"from_mode","","Creates a new instance of `Permissions` from the given set…",51,[[["u32"]],["self"]]],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an…",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",57,[[["self"]],["i32"]]],[8,"FromRawFd","","A trait to express the ability to construct an object from…",null,null],[10,"from_raw_fd","","Constructs a new instance of `Self` from the given raw…",58,[[["i32"]],["self"]]],[8,"IntoRawFd","","A trait to express the ability to consume an object and…",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file…",59,[[],["i32"]]],[6,"RawFd","","Raw file descriptors.",null,null],[8,"CommandExt","","Unix-specific extensions to the [`process::Command`]…",null,null],[10,"uid","","Sets the child process's user ID. This translates to a…",60,[[["self"],["u32"]],["command"]]],[10,"gid","","Similar to `uid`, but sets the group ID of the child…",60,[[["self"],["u32"]],["command"]]],[10,"pre_exec","","Schedules a closure to be run just before the `exec`…",60,[[["self"],["f"]],["command"]]],[11,"before_exec","","Schedules a closure to be run just before the `exec`…",60,[[["self"],["f"]],["command"]]],[10,"exec","","Performs all the required setup by this `Command`,…",60,[[["self"]],["error"]]],[10,"arg0","","Set executable argument",60,[[["self"],["s"]],["command"]]],[8,"ExitStatusExt","","Unix-specific extensions to [`process::ExitStatus`].",null,null],[10,"from_raw","","Creates a new `ExitStatus` from the raw underlying `i32`…",61,[[["i32"]],["self"]]],[10,"signal","","If the process was terminated by a signal, returns that…",61,[[["self"]],[["option",["i32"]],["i32"]]]],[8,"JoinHandleExt","","Unix-specific extensions to [`thread::JoinHandle`].",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",62,[[["self"]],["u64"]]],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",62,[[],["u64"]]],[0,"panic","no_std_compat","Panic support in the standard library.",null,null],[8,"UnwindSafe","no_std_compat::panic","A marker trait which represents \"panic safe\" types in Rust.",null,null],[8,"RefUnwindSafe","","A marker trait representing types where a shared reference…",null,null],[3,"AssertUnwindSafe","","A simple wrapper around a type to assert that it is unwind…",null,null],[12,"0","","",63,null],[5,"catch_unwind","","Invokes a closure, capturing the cause of an unwinding…",null,[[["f"]],[["result",["box"]],["box",["any"]]]]],[5,"resume_unwind","","Triggers a panic without invoking the panic hook.",null,[[["any"],["box",["any"]]]]],[5,"set_hook","","Registers a custom panic hook, replacing any that was…",null,[[["fn"],["box",["fn"]]]]],[5,"take_hook","","Unregisters the current panic hook, returning it.",null,[[],[["fn"],["box",["fn"]]]]],[3,"Location","","A struct containing information about the location of a…",null,null],[3,"PanicInfo","","A struct providing information about a panic.",null,null],[0,"path","no_std_compat","Cross-platform path manipulation.",null,null],[4,"Prefix","no_std_compat::path","Windows path prefixes, e.g., `C:` or `\\\\server\\share`.",null,null],[13,"Verbatim","","Verbatim prefix, e.g., `\\\\?\\cat_pics`.",64,null],[13,"VerbatimUNC","","Verbatim prefix using Windows' Uniform Naming Convention,…",64,null],[13,"VerbatimDisk","","Verbatim disk prefix, e.g., `\\\\?\\C:\\`.",64,null],[13,"DeviceNS","","Device namespace prefix, e.g., `\\\\.\\COM42`.",64,null],[13,"UNC","","Prefix using Windows' Uniform Naming Convention, e.g.…",64,null],[13,"Disk","","Prefix `C:` for the given disk drive.",64,null],[5,"is_separator","","Determines whether the character is one of the permitted…",null,[[["char"]],["bool"]]],[17,"MAIN_SEPARATOR","","The primary separator of path components for the current…",null,null],[3,"PrefixComponent","","A structure wrapping a Windows path prefix as well as its…",null,null],[4,"Component","","A single component of a path.",null,null],[13,"Prefix","","A Windows path prefix, e.g., `C:` or `\\\\server\\share`.",65,null],[13,"RootDir","","The root directory component, appears after any prefix and…",65,null],[13,"CurDir","","A reference to the current directory, i.e., `.`.",65,null],[13,"ParentDir","","A reference to the parent directory, i.e., `..`.",65,null],[13,"Normal","","A normal component, e.g., `a` and `b` in `a/b`.",65,null],[3,"Components","","An iterator over the [`Component`]s of a [`Path`].",null,null],[3,"Iter","","An iterator over the [`Component`]s of a [`Path`], as…",null,null],[3,"Ancestors","","An iterator over [`Path`] and its ancestors.",null,null],[3,"PathBuf","","An owned, mutable path (akin to [`String`]).",null,null],[3,"Path","","A slice of a path (akin to [`str`]).",null,null],[3,"StripPrefixError","","An error returned from…",null,null],[3,"Display","","Helper struct for safely printing paths with [`format!`]…",null,null],[0,"process","no_std_compat","A module for working with processes.",null,null],[3,"Child","no_std_compat::process","Representation of a running or exited child process.",null,null],[12,"stdin","","The handle for writing to the child's standard input…",66,null],[12,"stdout","","The handle for reading from the child's standard output…",66,null],[12,"stderr","","The handle for reading from the child's standard error…",66,null],[3,"ChildStdin","","A handle to a child process's standard input (stdin).",null,null],[3,"ChildStdout","","A handle to a child process's standard output (stdout).",null,null],[3,"ChildStderr","","A handle to a child process's stderr.",null,null],[3,"Command","","A process builder, providing fine-grained control over how…",null,null],[3,"Output","","The output of a finished process.",null,null],[12,"status","","The status (exit code) of the process.",67,null],[12,"stdout","","The data that the process wrote to stdout.",67,null],[12,"stderr","","The data that the process wrote to stderr.",67,null],[3,"Stdio","","Describes what to do with a standard I/O stream for a…",null,null],[3,"ExitStatus","","Describes the result of a process after it has terminated.",null,null],[3,"ExitCode","","This type represents the status code a process can return…",null,null],[5,"exit","","Terminates the current process with the specified exit code.",null,[[["i32"]]]],[5,"abort","","Terminates the process in an abnormal fashion.",null,[[]]],[5,"id","","Returns the OS-assigned process identifier associated with…",null,[[],["u32"]]],[8,"Termination","","A trait for implementing arbitrary return types in the…",null,null],[10,"report","","Is called to get the representation of the value as status…",68,[[],["i32"]]],[0,"sync","no_std_compat","Useful synchronization primitives.",null,null],[0,"mpsc","no_std_compat::sync","Multi-producer, single-consumer FIFO queue communication…",null,null],[3,"Receiver","no_std_compat::sync::mpsc","The receiving half of Rust's [`channel`] (or…",null,null],[3,"Iter","","An iterator over messages on a [`Receiver`], created by…",null,null],[3,"TryIter","","An iterator that attempts to yield all pending values for…",null,null],[3,"IntoIter","","An owning iterator over messages on a [`Receiver`],…",null,null],[3,"Sender","","The sending-half of Rust's asynchronous [`channel`] type.…",null,null],[3,"SyncSender","","The sending-half of Rust's synchronous [`sync_channel`]…",null,null],[3,"SendError","","An error returned from the [`Sender::send`] or…",null,null],[12,"0","","",69,null],[3,"RecvError","","An error returned from the [`recv`] function on a…",null,null],[4,"TryRecvError","","This enumeration is the list of the possible reasons that…",null,null],[13,"Empty","","This channel is currently empty, but the Sender(s) have…",70,null],[13,"Disconnected","","The channel's sending half has become disconnected, and…",70,null],[4,"RecvTimeoutError","","This enumeration is the list of possible errors that made…",null,null],[13,"Timeout","","This channel is currently empty, but the Sender(s) have…",71,null],[13,"Disconnected","","The channel's sending half has become disconnected, and…",71,null],[4,"TrySendError","","This enumeration is the list of the possible error…",null,null],[13,"Full","","The data could not be sent on the [`sync_channel`] because…",72,null],[13,"Disconnected","","This [`sync_channel`]'s receiving half has disconnected,…",72,null],[5,"channel","","Creates a new asynchronous channel, returning the…",null,[[]]],[5,"sync_channel","","Creates a new synchronous, bounded channel. All data sent…",null,[[["usize"]]]],[3,"Arc","no_std_compat::sync","A thread-safe reference-counting pointer. 'Arc' stands for…",null,null],[3,"Weak","","`Weak` is a version of [`Arc`] that holds a non-owning…",null,null],[0,"atomic","","Atomic types",null,null],[5,"spin_loop_hint","no_std_compat::sync::atomic","Signals the processor that it is inside a busy-wait…",null,[[]]],[3,"AtomicBool","","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between…",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations.",73,null],[13,"Release","","When coupled with a store, all previous operations become…",73,null],[13,"Acquire","","When coupled with a load, if the loaded value was written…",73,null],[13,"AcqRel","","Has the effects of both [`Acquire`] and [`Release`]…",73,null],[13,"SeqCst","","Like [`Acquire`]/[`Release`]/[`AcqRel`] (for load, store,…",73,null],[17,"ATOMIC_BOOL_INIT","","An [`AtomicBool`] initialized to `false`.",null,null],[3,"AtomicI8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,[[["ordering"]]]],[5,"compiler_fence","","A compiler memory fence.",null,[[["ordering"]]]],[3,"Barrier","no_std_compat::sync","A barrier enables multiple threads to synchronize the…",null,null],[3,"BarrierWaitResult","","A `BarrierWaitResult` is returned by [`wait`] when all…",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition…",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared…",null,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When…",null,null],[3,"Once","","A synchronization primitive which can be used to run a…",null,null],[3,"OnceState","","State yielded to [`call_once_force`]’s closure parameter.…",null,null],[17,"ONCE_INIT","","Initialization value for static [`Once`] values.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a…",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access…",null,null],[6,"LockResult","","A type alias for the result of a lock method which can be…",null,null],[3,"PoisonError","","A type of error which can be returned whenever a lock is…",null,null],[4,"TryLockError","","An enumeration of possible errors associated with a…",null,null],[13,"Poisoned","","The lock could not be acquired because another thread…",74,null],[13,"WouldBlock","","The lock could not be acquired at this time because the…",74,null],[6,"TryLockResult","","A type alias for the result of a nonblocking locking method.",null,null],[0,"time","no_std_compat","Temporal quantification.",null,null],[3,"Instant","no_std_compat::time","A measurement of a monotonically nondecreasing clock.…",null,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to…",null,null],[3,"SystemTimeError","","An error returned from the `duration_since` and `elapsed`…",null,null],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new…",null,null],[3,"Duration","","A `Duration` type to represent a span of time, typically…",null,null],[0,"task","no_std_compat","Types and Traits for working with asynchronous tasks.",null,null],[3,"Context","no_std_compat::task","The `Context` of an asynchronous task.",null,null],[4,"Poll","","Indicates whether a value is available or if the current…",null,null],[13,"Ready","","Represents that a value is immediately ready.",75,null],[13,"Pending","","Represents that a value is not ready yet.",75,null],[3,"RawWaker","","A `RawWaker` allows the implementor of a task executor to…",null,null],[3,"RawWakerVTable","","A virtual function pointer table (vtable) that specifies…",null,null],[3,"Waker","","A `Waker` is a handle for waking up a task by notifying…",null,null],[0,"future","no_std_compat","Asynchronous values.",null,null],[8,"Future","no_std_compat::future","A future represents an asynchronous computation.",null,null],[16,"Output","","The type of value produced on completion.",76,null],[10,"poll","","Attempt to resolve the future to a final value,…",76,[[["pin"],["self"],["context"]],["poll"]]],[0,"alloc","no_std_compat","Memory allocation APIs",null,null],[3,"System","no_std_compat::alloc","The default memory allocator provided by the operating…",null,null],[5,"set_alloc_error_hook","","Registers a custom allocation error hook, replacing any…",null,[[]]],[5,"take_alloc_error_hook","","Unregisters the current allocation error hook, returning it.",null,[[]]],[3,"AllocErr","","The `AllocErr` error indicates an allocation failure that…",null,null],[3,"CannotReallocInPlace","","The `CannotReallocInPlace` error is used when…",null,null],[3,"LayoutErr","","The parameters given to `Layout::from_size_align` or some…",null,null],[8,"GlobalAlloc","","A memory allocator that can be registered as the standard…",null,null],[10,"alloc","","Allocate memory as described by the given `layout`.",77,[[["self"],["layout"]]]],[10,"dealloc","","Deallocate the block of memory at the given `ptr` pointer…",77,[[["self"],["layout"]]]],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents…",77,[[["self"],["layout"]]]],[11,"realloc","","Shrink or grow a block of memory to the given `new_size`.…",77,[[["usize"],["self"],["layout"]]]],[3,"Layout","","Layout of a block of memory.",null,null],[3,"Global","","The global memory allocator.",null,null],[5,"alloc","","Allocate memory with the global allocator.",null,[[["layout"]]]],[5,"dealloc","","Deallocate memory with the global allocator.",null,[[["layout"]]]],[5,"realloc","","Reallocate memory with the global allocator.",null,[[["layout"],["usize"]]]],[5,"alloc_zeroed","","Allocate zero-initialized memory with the global allocator.",null,[[["layout"]]]],[5,"handle_alloc_error","","Abort on memory allocation error or failure.",null,[[["layout"]]]],[8,"AllocRef","","An implementation of `AllocRef` can allocate, reallocate,…",null,null],[10,"alloc","","On success, returns a pointer meeting the size and…",78,[[["self"],["layout"]],[["allocerr"],["result",["allocerr"]]]]],[10,"dealloc","","Deallocate the memory referenced by `ptr`.",78,[[["nonnull",["u8"]],["self"],["layout"],["u8"]]]],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents…",78,[[["self"],["layout"]],[["allocerr"],["result",["allocerr"]]]]],[11,"realloc","","Returns a pointer suitable for holding data described by a…",78,[[["nonnull",["u8"]],["usize"],["self"],["layout"],["u8"]],[["allocerr"],["result",["allocerr"]]]]],[11,"realloc_zeroed","","Behaves like `realloc`, but also ensures that the new…",78,[[["nonnull",["u8"]],["usize"],["self"],["layout"],["u8"]],[["allocerr"],["result",["allocerr"]]]]],[11,"grow_in_place","","Attempts to extend the allocation referenced by `ptr` to…",78,[[["nonnull",["u8"]],["usize"],["self"],["layout"],["u8"]],[["cannotreallocinplace"],["result",["usize","cannotreallocinplace"]],["usize"]]]],[11,"grow_in_place_zeroed","","Behaves like `grow_in_place`, but also ensures that the…",78,[[["nonnull",["u8"]],["usize"],["self"],["layout"],["u8"]],[["cannotreallocinplace"],["result",["usize","cannotreallocinplace"]],["usize"]]]],[11,"shrink_in_place","","Attempts to shrink the allocation referenced by `ptr` to…",78,[[["nonnull",["u8"]],["usize"],["self"],["layout"],["u8"]],[["cannotreallocinplace"],["result",["usize","cannotreallocinplace"]],["usize"]]]],[14,"panic","no_std_compat","Panics the current thread.",null,null],[14,"print","","Prints to the standard output.",null,null],[14,"println","","Prints to the standard output, with a newline.",null,null],[14,"eprint","","Prints to the standard error.",null,null],[14,"eprintln","","Prints to the standard error, with a newline.",null,null],[14,"dbg","","Prints and returns the value of a given expression for…",null,null],[0,"borrow","","A module for working with borrowed data.",null,null],[8,"ToOwned","no_std_compat::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","The resulting type after obtaining ownership.",20,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",20,[[["self"]]]],[11,"clone_into","","Uses borrowed data to replace owned data, usually by…",20,[[["self"]]]],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",79,null],[13,"Owned","","Owned data.",79,null],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",80,[[["self"]],["borrowed"]]],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",81,[[["self"]],["borrowed"]]],[0,"boxed","no_std_compat","A pointer type for heap allocation.",null,null],[3,"Box","no_std_compat::boxed","A pointer type for heap allocation.",null,null],[0,"fmt","no_std_compat","Utilities for formatting and printing `String`s.",null,null],[5,"format","no_std_compat::fmt","The `format` function takes an [`Arguments`] struct and…",null,[[["arguments"]],["string"]]],[4,"Alignment","","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",82,null],[13,"Right","","Indication that contents should be right-aligned.",82,null],[13,"Center","","Indication that contents should be center-aligned.",82,null],[3,"Error","","The error type which is returned from formatting a message…",null,null],[5,"write","","The `write` function takes an output stream, and an…",null,[[["arguments"],["write"]],[["result",["error"]],["error"]]]],[3,"Arguments","","This structure represents a safely precompiled version of…",null,null],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",83,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",84,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",85,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[14,"Debug","","Derive macro generating an impl of the trait `Debug`.",null,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",86,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Formatter","","Configuration for formatting.",null,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A collection of methods that are required to format a…",null,null],[10,"write_str","","Writes a string slice into this writer, returning whether…",87,[[["str"],["self"]],[["result",["error"]],["error"]]]],[11,"write_char","","Writes a [`char`] into this writer, returning whether the…",87,[[["self"],["char"]],[["result",["error"]],["error"]]]],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors…",87,[[["self"],["arguments"]],[["result",["error"]],["error"]]]],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",88,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",89,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",90,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",91,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",92,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[14,"format","no_std_compat","Creates a `String` using interpolation of runtime…",null,null],[0,"rc","","Single-threaded reference-counting pointers. 'Rc' stands…",null,null],[3,"Rc","no_std_compat::rc","A single-threaded reference-counting pointer. 'Rc' stands…",null,null],[3,"Weak","","`Weak` is a version of [`Rc`] that holds a non-owning…",null,null],[0,"slice","no_std_compat","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"Concat","no_std_compat::slice","Helper trait for `[T]::concat`.",null,null],[16,"Output","","The resulting type after concatenation",93,null],[10,"concat","","Implementation of `[T]::concat`",93,[[["self"]]]],[8,"Join","","Helper trait for `[T]::join`",null,null],[16,"Output","","The resulting type after concatenation",94,null],[10,"join","","Implementation of `[T]::join`",94,[[["self"],["separator"]]]],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",95,null],[10,"get","","Returns a shared reference to the output at this location,…",95,[[["t"]],["option"]]],[10,"get_mut","","Returns a mutable reference to the output at this…",95,[[["t"]],["option"]]],[10,"get_unchecked","","Returns a shared reference to the output at this location,…",95,[[["t"]]]],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this…",95,[[["t"]]]],[10,"index","","Returns a shared reference to the output at this location,…",95,[[["t"]]]],[10,"index_mut","","Returns a mutable reference to the output at this…",95,[[["t"]]]],[5,"from_mut","","Converts a reference to T into a slice of length 1…",null,[[["t"]]]],[5,"from_ref","","Converts a reference to T into a slice of length 1…",null,[[["t"]]]],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,[[["usize"]]]],[5,"from_raw_parts_mut","","Performs the same functionality as [`from_raw_parts`],…",null,[[["usize"]]]],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"ChunksExact","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"ChunksExactMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"Split","","An iterator over subslices separated by elements that…",null,null],[3,"SplitMut","","An iterator over the mutable subslices of the vector which…",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"RChunks","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"RChunksExact","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"RChunksExactMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"RChunksMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"RSplit","","An iterator over subslices separated by elements that…",null,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are…",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that…",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that…",null,null],[3,"SplitN","","An iterator over subslices separated by elements that…",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that…",null,null],[0,"str","no_std_compat","Unicode string slices.",null,null],[5,"from_boxed_utf8_unchecked","no_std_compat::str","Converts a boxed slice of bytes to a boxed string slice…",null,[[["box"]],[["box",["str"]],["str"]]]],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","no_std_compat::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",96,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the…",96,[[["str"]]]],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",96,[[["str"]],["bool"]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the…",96,[[["str"]],["bool"]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the…",96,[[["str"]],["bool"]]],[4,"SearchStep","","Result of calling `Searcher::next()` or…",null,null],[13,"Match","","Expresses that a match of the pattern has been found at…",97,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a…",97,null],[13,"Done","","Expresses that every byte of the haystack has been…",97,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",98,[[["self"]],["str"]]],[10,"next","","Performs the next search step starting from the front.",98,[[["self"]],["searchstep"]]],[11,"next_match","","Finds the next `Match` result. See `next()`",98,[[["self"]],["option"]]],[11,"next_reject","","Finds the next `Reject` result. See `next()` and…",98,[[["self"]],["option"]]],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",99,[[["self"]],["searchstep"]]],[11,"next_match_back","","Finds the next `Match` result. See `next_back()`",99,[[["self"]],["option"]]],[11,"next_reject_back","","Finds the next `Reject` result. See `next_back()`",99,[[["self"]],["option"]]],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be…",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[3,"EncodeUtf16","no_std_compat::str","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[3,"SplitAsciiWhitespace","","An iterator over the non-ASCII-whitespace substrings of a…",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a…",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,[[],[["result",["str","utf8error"]],["str"],["utf8error"]]]],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,[[],[["result",["str","utf8error"]],["str"],["utf8error"]]]],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and…",null,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without…",null,[[],["str"]]],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without…",null,[[],["str"]]],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`]…",null,null],[3,"EscapeDebug","","The return type of [`str::escape_debug`].",null,null],[3,"EscapeDefault","","The return type of [`str::escape_default`].",null,null],[3,"EscapeUnicode","","The return type of [`str::escape_unicode`].",null,null],[8,"FromStr","","Parse a value from a string",null,null],[16,"Err","","The associated error which can be returned from parsing.",100,null],[10,"from_str","","Parses a string `s` to return a value of this type.",100,[[["str"]],["result"]]],[3,"Utf8Error","","Errors which can occur when attempting to interpret a…",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[0,"string","no_std_compat","A UTF-8 encoded, growable string.",null,null],[3,"String","no_std_compat::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a…",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a…",null,null],[6,"ParseError","","A type alias for [`Infallible`].",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",21,[[["self"]],["string"]]],[3,"Drain","","A draining iterator for `String`.",null,null],[0,"vec","no_std_compat","A contiguous growable array type with heap-allocated…",null,null],[3,"Vec","no_std_compat::vec","A contiguous growable array type, written `Vec<T>` but…",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"Splice","","A splicing iterator for `Vec`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",null,null],[14,"vec","no_std_compat","Creates a [`Vec`] containing the arguments.",null,null],[0,"any","","This module implements the `Any` trait, which enables…",null,null],[8,"Any","no_std_compat::any","A trait to emulate dynamic typing.",null,null],[10,"type_id","","Gets the `TypeId` of `self`.",101,[[["self"]],["typeid"]]],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a…",null,null],[5,"type_name","","Returns the name of a type as a string slice.",null,[[],["str"]]],[5,"type_name_of_val","","Returns the name of the type of the pointed-to value as a…",null,[[["t"]],["str"]]],[0,"arch","no_std_compat","SIMD and vendor intrinsics module.",null,null],[0,"x86_64","no_std_compat::arch","Platform-specific intrinsics for the `x86_64` platform.",null,null],[6,"__mmask16","no_std_compat::arch::x86_64","The `__mmask16` type used in AVX-512 intrinsics, a 16-bit…",null,null],[5,"ud2","","Generates the trap instruction `UD2`",null,[[]]],[5,"_fxsave","","Saves the `x87` FPU, `MMX` technology, `XMM`, and `MXCSR`…",null,[[]]],[5,"_fxrstor","","Restores the `XMM`, `MMX`, `MXCSR`, and `x87` FPU…",null,[[]]],[5,"_bswap","","Returns an integer with the reversed byte order of x",null,[[["i32"]],["i32"]]],[5,"_rdtsc","","Reads the current value of the processor’s time-stamp…",null,[[],["u64"]]],[5,"__rdtscp","","Reads the current value of the processor’s time-stamp…",null,[[],["u64"]]],[5,"__cpuid_count","","Returns the result of the `cpuid` instruction for a given…",null,[[["u32"]],["cpuidresult"]]],[5,"__cpuid","","See `__cpuid_count`.",null,[[["u32"]],["cpuidresult"]]],[5,"has_cpuid","","Does the host support the `cpuid` instruction?",null,[[],["bool"]]],[5,"__get_cpuid_max","","Returns the highest-supported `leaf` (`EAX`) and sub-leaf…",null,[[["u32"]]]],[5,"_xsave","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xrstor","","Performs a full or partial restore of the enabled…",null,[[["u64"]]]],[17,"_XCR_XFEATURE_ENABLED_MASK","","`XFEATURE_ENABLED_MASK` for `XCR`",null,null],[5,"_xsetbv","","Copies 64-bits from `val` to the extended control register…",null,[[["u32"],["u64"]]]],[5,"_xgetbv","","Reads the contents of the extended control register `XCR`…",null,[[["u32"]],["u64"]]],[5,"_xsaveopt","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xsavec","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xsaves","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xrstors","","Performs a full or partial restore of the enabled…",null,[[["u64"]]]],[5,"_mm_add_ss","","Adds the first component of `a` and `b`, the other…",null,[[["__m128"]],["__m128"]]],[5,"_mm_add_ps","","Adds __m128 vectors.",null,[[["__m128"]],["__m128"]]],[5,"_mm_sub_ss","","Subtracts the first component of `b` from `a`, the other…",null,[[["__m128"]],["__m128"]]],[5,"_mm_sub_ps","","Subtracts __m128 vectors.",null,[[["__m128"]],["__m128"]]],[5,"_mm_mul_ss","","Multiplies the first component of `a` and `b`, the other…",null,[[["__m128"]],["__m128"]]],[5,"_mm_mul_ps","","Multiplies __m128 vectors.",null,[[["__m128"]],["__m128"]]],[5,"_mm_div_ss","","Divides the first component of `b` by `a`, the other…",null,[[["__m128"]],["__m128"]]],[5,"_mm_div_ps","","Divides __m128 vectors.",null,[[["__m128"]],["__m128"]]],[5,"_mm_sqrt_ss","","Returns the square root of the first single-precision…",null,[[["__m128"]],["__m128"]]],[5,"_mm_sqrt_ps","","Returns the square root of packed single-precision…",null,[[["__m128"]],["__m128"]]],[5,"_mm_rcp_ss","","Returns the approximate reciprocal of the first…",null,[[["__m128"]],["__m128"]]],[5,"_mm_rcp_ps","","Returns the approximate reciprocal of packed…",null,[[["__m128"]],["__m128"]]],[5,"_mm_rsqrt_ss","","Returns the approximate reciprocal square root of the fist…",null,[[["__m128"]],["__m128"]]],[5,"_mm_rsqrt_ps","","Returns the approximate reciprocal square root of packed…",null,[[["__m128"]],["__m128"]]],[5,"_mm_min_ss","","Compares the first single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_min_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_max_ss","","Compares the first single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_max_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_and_ps","","Bitwise AND of packed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_andnot_ps","","Bitwise AND-NOT of packed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_or_ps","","Bitwise OR of packed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_xor_ps","","Bitwise exclusive OR of packed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpeq_ss","","Compares the lowest `f32` of both inputs for equality. The…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmplt_ss","","Compares the lowest `f32` of both inputs for less than.…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmple_ss","","Compares the lowest `f32` of both inputs for less than or…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpgt_ss","","Compares the lowest `f32` of both inputs for greater than.…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpge_ss","","Compares the lowest `f32` of both inputs for greater than…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpneq_ss","","Compares the lowest `f32` of both inputs for inequality.…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnlt_ss","","Compares the lowest `f32` of both inputs for…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnle_ss","","Compares the lowest `f32` of both inputs for…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpngt_ss","","Compares the lowest `f32` of both inputs for…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnge_ss","","Compares the lowest `f32` of both inputs for…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpord_ss","","Checks if the lowest `f32` of both inputs are ordered. The…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpunord_ss","","Checks if the lowest `f32` of both inputs are unordered.…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpeq_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmplt_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmple_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpgt_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpge_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpneq_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnlt_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnle_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpngt_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpnge_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpord_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_cmpunord_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128"]],["__m128"]]],[5,"_mm_comieq_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_comilt_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_comile_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_comigt_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_comige_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_comineq_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomieq_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomilt_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomile_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomigt_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomige_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_ucomineq_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128"]],["i32"]]],[5,"_mm_cvtss_si32","","Converts the lowest 32 bit float in the input vector to a…",null,[[["__m128"]],["i32"]]],[5,"_mm_cvt_ss2si","","Alias for `_mm_cvtss_si32`.",null,[[["__m128"]],["i32"]]],[5,"_mm_cvttss_si32","","Converts the lowest 32 bit float in the input vector to a…",null,[[["__m128"]],["i32"]]],[5,"_mm_cvtt_ss2si","","Alias for `_mm_cvttss_si32`.",null,[[["__m128"]],["i32"]]],[5,"_mm_cvtss_f32","","Extracts the lowest 32 bit float from the input vector.",null,[[["__m128"]],["f32"]]],[5,"_mm_cvtsi32_ss","","Converts a 32 bit integer to a 32 bit float. The result…",null,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm_cvt_si2ss","","Alias for `_mm_cvtsi32_ss`.",null,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm_set_ss","","Construct a `__m128` with the lowest element set to `a`…",null,[[["f32"]],["__m128"]]],[5,"_mm_set1_ps","","Construct a `__m128` with all element set to `a`.",null,[[["f32"]],["__m128"]]],[5,"_mm_set_ps1","","Alias for `_mm_set1_ps`",null,[[["f32"]],["__m128"]]],[5,"_mm_set_ps","","Construct a `__m128` from four floating point values…",null,[[["f32"]],["__m128"]]],[5,"_mm_setr_ps","","Construct a `__m128` from four floating point values…",null,[[["f32"]],["__m128"]]],[5,"_mm_setzero_ps","","Construct a `__m128` with all elements initialized to zero.",null,[[],["__m128"]]],[5,"_MM_SHUFFLE","","A utility function for creating masks to use with Intel…",null,[[["u32"]],["i32"]]],[5,"_mm_shuffle_ps","","Shuffles packed single-precision (32-bit) floating-point…",null,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm_unpackhi_ps","","Unpacks and interleave single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_unpacklo_ps","","Unpacks and interleave single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_movehl_ps","","Combine higher half of `a` and `b`. The highwe half of `b`…",null,[[["__m128"]],["__m128"]]],[5,"_mm_movelh_ps","","Combine lower half of `a` and `b`. The lower half of `b`…",null,[[["__m128"]],["__m128"]]],[5,"_mm_movemask_ps","","Returns a mask of the most significant bit of each element…",null,[[["__m128"]],["i32"]]],[5,"_mm_loadh_pi","","Sets the upper two single-precision floating-point values…",null,[[["__m128"]],["__m128"]]],[5,"_mm_loadl_pi","","Loads two floats from `p` into the lower half of a…",null,[[["__m128"]],["__m128"]]],[5,"_mm_load_ss","","Construct a `__m128` with the lowest element read from `p`…",null,[[],["__m128"]]],[5,"_mm_load1_ps","","Construct a `__m128` by duplicating the value read from…",null,[[],["__m128"]]],[5,"_mm_load_ps1","","Alias for `_mm_load1_ps`",null,[[],["__m128"]]],[5,"_mm_load_ps","","Loads four `f32` values from aligned memory into a…",null,[[],["__m128"]]],[5,"_mm_loadu_ps","","Loads four `f32` values from memory into a `__m128`. There…",null,[[],["__m128"]]],[5,"_mm_loadr_ps","","Loads four `f32` values from aligned memory into a…",null,[[],["__m128"]]],[5,"_mm_storeh_pi","","Stores the upper half of `a` (64 bits) into memory.",null,[[["__m128"]]]],[5,"_mm_storel_pi","","Stores the lower half of `a` (64 bits) into memory.",null,[[["__m128"]]]],[5,"_mm_store_ss","","Stores the lowest 32 bit float of `a` into memory.",null,[[["__m128"]]]],[5,"_mm_store1_ps","","Stores the lowest 32 bit float of `a` repeated four times…",null,[[["__m128"]]]],[5,"_mm_store_ps1","","Alias for `_mm_store1_ps`",null,[[["__m128"]]]],[5,"_mm_store_ps","","Stores four 32-bit floats into aligned memory.",null,[[["__m128"]]]],[5,"_mm_storeu_ps","","Stores four 32-bit floats into memory. There are no…",null,[[["__m128"]]]],[5,"_mm_storer_ps","","Stores four 32-bit floats into aligned memory in reverse…",null,[[["__m128"]]]],[5,"_mm_move_ss","","Returns a `__m128` with the first component from `b` and…",null,[[["__m128"]],["__m128"]]],[5,"_mm_sfence","","Performs a serializing operation on all store-to-memory…",null,[[]]],[5,"_mm_getcsr","","Gets the unsigned 32-bit value of the MXCSR control and…",null,[[],["u32"]]],[5,"_mm_setcsr","","Sets the MXCSR register with the 32-bit unsigned integer…",null,[[["u32"]]]],[17,"_MM_EXCEPT_INVALID","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_DENORM","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_DIV_ZERO","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_OVERFLOW","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_UNDERFLOW","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_INEXACT","","See `_mm_setcsr`",null,null],[17,"_MM_EXCEPT_MASK","","See `_MM_GET_EXCEPTION_STATE`",null,null],[17,"_MM_MASK_INVALID","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_DENORM","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_DIV_ZERO","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_OVERFLOW","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_UNDERFLOW","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_INEXACT","","See `_mm_setcsr`",null,null],[17,"_MM_MASK_MASK","","See `_MM_GET_EXCEPTION_MASK`",null,null],[17,"_MM_ROUND_NEAREST","","See `_mm_setcsr`",null,null],[17,"_MM_ROUND_DOWN","","See `_mm_setcsr`",null,null],[17,"_MM_ROUND_UP","","See `_mm_setcsr`",null,null],[17,"_MM_ROUND_TOWARD_ZERO","","See `_mm_setcsr`",null,null],[17,"_MM_ROUND_MASK","","See `_MM_GET_ROUNDING_MODE`",null,null],[17,"_MM_FLUSH_ZERO_MASK","","See `_MM_GET_FLUSH_ZERO_MODE`",null,null],[17,"_MM_FLUSH_ZERO_ON","","See `_mm_setcsr`",null,null],[17,"_MM_FLUSH_ZERO_OFF","","See `_mm_setcsr`",null,null],[5,"_MM_GET_EXCEPTION_MASK","","See `_mm_setcsr`",null,[[],["u32"]]],[5,"_MM_GET_EXCEPTION_STATE","","See `_mm_setcsr`",null,[[],["u32"]]],[5,"_MM_GET_FLUSH_ZERO_MODE","","See `_mm_setcsr`",null,[[],["u32"]]],[5,"_MM_GET_ROUNDING_MODE","","See `_mm_setcsr`",null,[[],["u32"]]],[5,"_MM_SET_EXCEPTION_MASK","","See `_mm_setcsr`",null,[[["u32"]]]],[5,"_MM_SET_EXCEPTION_STATE","","See `_mm_setcsr`",null,[[["u32"]]]],[5,"_MM_SET_FLUSH_ZERO_MODE","","See `_mm_setcsr`",null,[[["u32"]]]],[5,"_MM_SET_ROUNDING_MODE","","See `_mm_setcsr`",null,[[["u32"]]]],[17,"_MM_HINT_T0","","See `_mm_prefetch`.",null,null],[17,"_MM_HINT_T1","","See `_mm_prefetch`.",null,null],[17,"_MM_HINT_T2","","See `_mm_prefetch`.",null,null],[17,"_MM_HINT_NTA","","See `_mm_prefetch`.",null,null],[5,"_mm_prefetch","","Fetch the cache line that contains address `p` using the…",null,[[["i32"]]]],[5,"_mm_undefined_ps","","Returns vector of type __m128 with undefined elements.",null,[[],["__m128"]]],[5,"_MM_TRANSPOSE4_PS","","Transpose the 4x4 matrix formed by 4 rows of __m128 in…",null,[[["__m128"]]]],[5,"_mm_stream_ps","","Stores `a` into the memory at `mem_addr` using a…",null,[[["__m128"]]]],[5,"_mm_stream_pi","","Stores 64-bits of integer data from a into memory using a…",null,[[["__m64"]]]],[5,"_mm_max_pi16","","Compares the packed 16-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_m_pmaxsw","","Compares the packed 16-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_mm_max_pu8","","Compares the packed 8-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_m_pmaxub","","Compares the packed 8-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_mm_min_pi16","","Compares the packed 16-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_m_pminsw","","Compares the packed 16-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_mm_min_pu8","","Compares the packed 8-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_m_pminub","","Compares the packed 8-bit signed integers of `a` and `b`…",null,[[["__m64"]],["__m64"]]],[5,"_mm_mulhi_pu16","","Multiplies packed 16-bit unsigned integer values and…",null,[[["__m64"]],["__m64"]]],[5,"_mm_mullo_pi16","","Multiplies packed 16-bit integer values and writes the…",null,[[["__m64"]],["__m64"]]],[5,"_m_pmulhuw","","Multiplies packed 16-bit unsigned integer values and…",null,[[["__m64"]],["__m64"]]],[5,"_mm_avg_pu8","","Computes the rounded averages of the packed unsigned 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_pavgb","","Computes the rounded averages of the packed unsigned 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_avg_pu16","","Computes the rounded averages of the packed unsigned…",null,[[["__m64"]],["__m64"]]],[5,"_m_pavgw","","Computes the rounded averages of the packed unsigned…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sad_pu8","","Subtracts the corresponding 8-bit unsigned integer values…",null,[[["__m64"]],["__m64"]]],[5,"_m_psadbw","","Subtracts the corresponding 8-bit unsigned integer values…",null,[[["__m64"]],["__m64"]]],[5,"_mm_cvtpi32_ps","","Converts two elements of a 64-bit vector of `[2 x i32]`…",null,[[["__m64"],["__m128"]],["__m128"]]],[5,"_mm_cvt_pi2ps","","Converts two elements of a 64-bit vector of `[2 x i32]`…",null,[[["__m64"],["__m128"]],["__m128"]]],[5,"_mm_cvtpi8_ps","","Converts the lower 4 8-bit values of `a` into a 128-bit…",null,[[["__m64"]],["__m128"]]],[5,"_mm_cvtpu8_ps","","Converts the lower 4 8-bit values of `a` into a 128-bit…",null,[[["__m64"]],["__m128"]]],[5,"_mm_cvtpi16_ps","","Converts a 64-bit vector of `i16`s into a 128-bit vector…",null,[[["__m64"]],["__m128"]]],[5,"_mm_cvtpu16_ps","","Converts a 64-bit vector of `i16`s into a 128-bit vector…",null,[[["__m64"]],["__m128"]]],[5,"_mm_cvtpi32x2_ps","","Converts the two 32-bit signed integer values from each…",null,[[["__m64"]],["__m128"]]],[5,"_mm_maskmove_si64","","Conditionally copies the values from each 8-bit element in…",null,[[["__m64"]]]],[5,"_m_maskmovq","","Conditionally copies the values from each 8-bit element in…",null,[[["__m64"]]]],[5,"_mm_extract_pi16","","Extracts 16-bit element from a 64-bit vector of `[4 x…",null,[[["__m64"],["i32"]],["i32"]]],[5,"_m_pextrw","","Extracts 16-bit element from a 64-bit vector of `[4 x…",null,[[["__m64"],["i32"]],["i32"]]],[5,"_mm_insert_pi16","","Copies data from the 64-bit vector of `[4 x i16]` to the…",null,[[["__m64"],["i32"]],["__m64"]]],[5,"_m_pinsrw","","Copies data from the 64-bit vector of `[4 x i16]` to the…",null,[[["__m64"],["i32"]],["__m64"]]],[5,"_mm_movemask_pi8","","Takes the most significant bit from each 8-bit element in…",null,[[["__m64"]],["i32"]]],[5,"_m_pmovmskb","","Takes the most significant bit from each 8-bit element in…",null,[[["__m64"]],["i32"]]],[5,"_mm_shuffle_pi16","","Shuffles the 4 16-bit integers from a 64-bit integer…",null,[[["__m64"],["i32"]],["__m64"]]],[5,"_m_pshufw","","Shuffles the 4 16-bit integers from a 64-bit integer…",null,[[["__m64"],["i32"]],["__m64"]]],[5,"_mm_cvttps_pi32","","Converts the two lower packed single-precision (32-bit)…",null,[[["__m128"]],["__m64"]]],[5,"_mm_cvtt_ps2pi","","Converts the two lower packed single-precision (32-bit)…",null,[[["__m128"]],["__m64"]]],[5,"_mm_cvtps_pi32","","Converts the two lower packed single-precision (32-bit)…",null,[[["__m128"]],["__m64"]]],[5,"_mm_cvt_ps2pi","","Converts the two lower packed single-precision (32-bit)…",null,[[["__m128"]],["__m64"]]],[5,"_mm_cvtps_pi16","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m64"]]],[5,"_mm_cvtps_pi8","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m64"]]],[5,"_mm_pause","","Provides a hint to the processor that the code sequence is…",null,[[]]],[5,"_mm_clflush","","Invalidates and flushes the cache line that contains `p`…",null,[[]]],[5,"_mm_lfence","","Performs a serializing operation on all load-from-memory…",null,[[]]],[5,"_mm_mfence","","Performs a serializing operation on all load-from-memory…",null,[[]]],[5,"_mm_add_epi8","","Adds packed 8-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_add_epi16","","Adds packed 16-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_add_epi32","","Adds packed 32-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_add_epi64","","Adds packed 64-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_adds_epi8","","Adds packed 8-bit integers in `a` and `b` using saturation.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_adds_epi16","","Adds packed 16-bit integers in `a` and `b` using saturation.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_adds_epu8","","Adds packed unsigned 8-bit integers in `a` and `b` using…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_adds_epu16","","Adds packed unsigned 16-bit integers in `a` and `b` using…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_avg_epu8","","Averages packed unsigned 8-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_avg_epu16","","Averages packed unsigned 16-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_madd_epi16","","Multiplies and then horizontally add signed 16 bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_max_epi16","","Compares packed 16-bit integers in `a` and `b`, and…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_max_epu8","","Compares packed unsigned 8-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epi16","","Compares packed 16-bit integers in `a` and `b`, and…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epu8","","Compares packed unsigned 8-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mulhi_epi16","","Multiplies the packed 16-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mulhi_epu16","","Multiplies the packed unsigned 16-bit integers in `a` and…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mullo_epi16","","Multiplies the packed 16-bit integers in `a` and `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mul_epu32","","Multiplies the low unsigned 32-bit integers from each…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sad_epu8","","Sum the absolute differences of packed unsigned 8-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sub_epi8","","Subtracts packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sub_epi16","","Subtracts packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sub_epi32","","Subtract packed 32-bit integers in `b` from packed 32-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sub_epi64","","Subtract packed 64-bit integers in `b` from packed 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_subs_epi8","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_subs_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_subs_epu8","","Subtract packed unsigned 8-bit integers in `b` from packed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_subs_epu16","","Subtract packed unsigned 16-bit integers in `b` from…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_slli_si128","","Shifts `a` left by `imm8` bytes while shifting in zeros.",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_bslli_si128","","Shifts `a` left by `imm8` bytes while shifting in zeros.",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_bsrli_si128","","Shifts `a` right by `imm8` bytes while shifting in zeros.",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_slli_epi16","","Shifts packed 16-bit integers in `a` left by `imm8` while…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_sll_epi16","","Shifts packed 16-bit integers in `a` left by `count` while…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_slli_epi32","","Shifts packed 32-bit integers in `a` left by `imm8` while…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_sll_epi32","","Shifts packed 32-bit integers in `a` left by `count` while…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_slli_epi64","","Shifts packed 64-bit integers in `a` left by `imm8` while…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_sll_epi64","","Shifts packed 64-bit integers in `a` left by `count` while…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_srai_epi16","","Shifts packed 16-bit integers in `a` right by `imm8` while…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_sra_epi16","","Shifts packed 16-bit integers in `a` right by `count`…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_srai_epi32","","Shifts packed 32-bit integers in `a` right by `imm8` while…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_sra_epi32","","Shifts packed 32-bit integers in `a` right by `count`…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_srli_si128","","Shifts `a` right by `imm8` bytes while shifting in zeros.",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_srli_epi16","","Shifts packed 16-bit integers in `a` right by `imm8` while…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_srl_epi16","","Shifts packed 16-bit integers in `a` right by `count`…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_srli_epi32","","Shifts packed 32-bit integers in `a` right by `imm8` while…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_srl_epi32","","Shifts packed 32-bit integers in `a` right by `count`…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_srli_epi64","","Shifts packed 64-bit integers in `a` right by `imm8` while…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_srl_epi64","","Shifts packed 64-bit integers in `a` right by `count`…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_and_si128","","Computes the bitwise AND of 128 bits (representing integer…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_andnot_si128","","Computes the bitwise NOT of 128 bits (representing integer…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_or_si128","","Computes the bitwise OR of 128 bits (representing integer…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_xor_si128","","Computes the bitwise XOR of 128 bits (representing integer…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpeq_epi8","","Compares packed 8-bit integers in `a` and `b` for equality.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpeq_epi16","","Compares packed 16-bit integers in `a` and `b` for equality.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpeq_epi32","","Compares packed 32-bit integers in `a` and `b` for equality.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpgt_epi8","","Compares packed 8-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpgt_epi16","","Compares packed 16-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpgt_epi32","","Compares packed 32-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmplt_epi8","","Compares packed 8-bit integers in `a` and `b` for less-than.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmplt_epi16","","Compares packed 16-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmplt_epi32","","Compares packed 32-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi32_pd","","Converts the lower two packed 32-bit integers in `a` to…",null,[[["__m128i"]],["__m128d"]]],[5,"_mm_cvtsi32_sd","","Returns `a` with its lower element replaced by `b` after…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_cvtepi32_ps","","Converts packed 32-bit integers in `a` to packed…",null,[[["__m128i"]],["__m128"]]],[5,"_mm_cvtps_epi32","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128i"]]],[5,"_mm_cvtsi32_si128","","Returns a vector whose lowest element is `a` and all…",null,[[["i32"]],["__m128i"]]],[5,"_mm_cvtsi128_si32","","Returns the lowest element of `a`.",null,[[["__m128i"]],["i32"]]],[5,"_mm_set_epi64x","","Sets packed 64-bit integers with the supplied values, from…",null,[[["i64"]],["__m128i"]]],[5,"_mm_set_epi32","","Sets packed 32-bit integers with the supplied values.",null,[[["i32"]],["__m128i"]]],[5,"_mm_set_epi16","","Sets packed 16-bit integers with the supplied values.",null,[[["i16"]],["__m128i"]]],[5,"_mm_set_epi8","","Sets packed 8-bit integers with the supplied values.",null,[[["i8"]],["__m128i"]]],[5,"_mm_set1_epi64x","","Broadcasts 64-bit integer `a` to all elements.",null,[[["i64"]],["__m128i"]]],[5,"_mm_set1_epi32","","Broadcasts 32-bit integer `a` to all elements.",null,[[["i32"]],["__m128i"]]],[5,"_mm_set1_epi16","","Broadcasts 16-bit integer `a` to all elements.",null,[[["i16"]],["__m128i"]]],[5,"_mm_set1_epi8","","Broadcasts 8-bit integer `a` to all elements.",null,[[["i8"]],["__m128i"]]],[5,"_mm_setr_epi32","","Sets packed 32-bit integers with the supplied values in…",null,[[["i32"]],["__m128i"]]],[5,"_mm_setr_epi16","","Sets packed 16-bit integers with the supplied values in…",null,[[["i16"]],["__m128i"]]],[5,"_mm_setr_epi8","","Sets packed 8-bit integers with the supplied values in…",null,[[["i8"]],["__m128i"]]],[5,"_mm_setzero_si128","","Returns a vector with all elements set to zero.",null,[[],["__m128i"]]],[5,"_mm_loadl_epi64","","Loads 64-bit integer from memory into first element of…",null,[[],["__m128i"]]],[5,"_mm_load_si128","","Loads 128-bits of integer data from memory into a new…",null,[[],["__m128i"]]],[5,"_mm_loadu_si128","","Loads 128-bits of integer data from memory into a new…",null,[[],["__m128i"]]],[5,"_mm_maskmoveu_si128","","Conditionally store 8-bit integer elements from `a` into…",null,[[["__m128i"]]]],[5,"_mm_store_si128","","Stores 128-bits of integer data from `a` into memory.",null,[[["__m128i"]]]],[5,"_mm_storeu_si128","","Stores 128-bits of integer data from `a` into memory.",null,[[["__m128i"]]]],[5,"_mm_storel_epi64","","Stores the lower 64-bit integer `a` to a memory location.",null,[[["__m128i"]]]],[5,"_mm_stream_si128","","Stores a 128-bit integer vector to a 128-bit aligned…",null,[[["__m128i"]]]],[5,"_mm_stream_si32","","Stores a 32-bit integer value in the specified memory…",null,[[["i32"]]]],[5,"_mm_move_epi64","","Returns a vector where the low element is extracted from…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_packs_epi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_packs_epi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_packus_epi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_extract_epi16","","Returns the `imm8` element of `a`.",null,[[["i32"],["__m128i"]],["i32"]]],[5,"_mm_insert_epi16","","Returns a new vector where the `imm8` element of `a` is…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_movemask_epi8","","Returns a mask of the most significant bit of each element…",null,[[["__m128i"]],["i32"]]],[5,"_mm_shuffle_epi32","","Shuffles 32-bit integers in `a` using the control in `imm8`.",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_shufflehi_epi16","","Shuffles 16-bit integers in the high 64 bits of `a` using…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_shufflelo_epi16","","Shuffles 16-bit integers in the low 64 bits of `a` using…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_unpackhi_epi8","","Unpacks and interleave 8-bit integers from the high half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpackhi_epi16","","Unpacks and interleave 16-bit integers from the high half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpackhi_epi32","","Unpacks and interleave 32-bit integers from the high half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpackhi_epi64","","Unpacks and interleave 64-bit integers from the high half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpacklo_epi8","","Unpacks and interleave 8-bit integers from the low half of…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpacklo_epi16","","Unpacks and interleave 16-bit integers from the low half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpacklo_epi32","","Unpacks and interleave 32-bit integers from the low half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_unpacklo_epi64","","Unpacks and interleave 64-bit integers from the low half…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_add_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_add_pd","","Adds packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_div_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_div_pd","","Divide packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_max_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_max_pd","","Returns a new vector with the maximum values from…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_min_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_min_pd","","Returns a new vector with the minimum values from…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_mul_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_mul_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_sqrt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_sqrt_pd","","Returns a new vector with the square root of each of the…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_sub_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_sub_pd","","Subtract packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_and_pd","","Computes the bitwise AND of packed double-precision…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_andnot_pd","","Computes the bitwise NOT of `a` and then AND with `b`.",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_or_pd","","Computes the bitwise OR of `a` and `b`.",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_xor_pd","","Computes the bitwise OR of `a` and `b`.",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpeq_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmplt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmple_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpgt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpge_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpord_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpunord_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpneq_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnlt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnle_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpngt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnge_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpeq_pd","","Compares corresponding elements in `a` and `b` for equality.",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmplt_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmple_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpgt_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpge_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpord_pd","","Compares corresponding elements in `a` and `b` to see if…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpunord_pd","","Compares corresponding elements in `a` and `b` to see if…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpneq_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnlt_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnle_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpngt_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_cmpnge_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_comieq_sd","","Compares the lower element of `a` and `b` for equality.",null,[[["__m128d"]],["i32"]]],[5,"_mm_comilt_sd","","Compares the lower element of `a` and `b` for less-than.",null,[[["__m128d"]],["i32"]]],[5,"_mm_comile_sd","","Compares the lower element of `a` and `b` for…",null,[[["__m128d"]],["i32"]]],[5,"_mm_comigt_sd","","Compares the lower element of `a` and `b` for greater-than.",null,[[["__m128d"]],["i32"]]],[5,"_mm_comige_sd","","Compares the lower element of `a` and `b` for…",null,[[["__m128d"]],["i32"]]],[5,"_mm_comineq_sd","","Compares the lower element of `a` and `b` for not-equal.",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomieq_sd","","Compares the lower element of `a` and `b` for equality.",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomilt_sd","","Compares the lower element of `a` and `b` for less-than.",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomile_sd","","Compares the lower element of `a` and `b` for…",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomigt_sd","","Compares the lower element of `a` and `b` for greater-than.",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomige_sd","","Compares the lower element of `a` and `b` for…",null,[[["__m128d"]],["i32"]]],[5,"_mm_ucomineq_sd","","Compares the lower element of `a` and `b` for not-equal.",null,[[["__m128d"]],["i32"]]],[5,"_mm_cvtpd_ps","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128"]]],[5,"_mm_cvtps_pd","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128d"]]],[5,"_mm_cvtpd_epi32","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128i"]]],[5,"_mm_cvtsd_si32","","Converts the lower double-precision (64-bit)…",null,[[["__m128d"]],["i32"]]],[5,"_mm_cvtsd_ss","","Converts the lower double-precision (64-bit)…",null,[[["__m128"],["__m128d"]],["__m128"]]],[5,"_mm_cvtsd_f64","","Returns the lower double-precision (64-bit) floating-point…",null,[[["__m128d"]],["f64"]]],[5,"_mm_cvtss_sd","","Converts the lower single-precision (32-bit)…",null,[[["__m128d"],["__m128"]],["__m128d"]]],[5,"_mm_cvttpd_epi32","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128i"]]],[5,"_mm_cvttsd_si32","","Converts the lower double-precision (64-bit)…",null,[[["__m128d"]],["i32"]]],[5,"_mm_cvttps_epi32","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128i"]]],[5,"_mm_set_sd","","Copies double-precision (64-bit) floating-point element…",null,[[["f64"]],["__m128d"]]],[5,"_mm_set1_pd","","Broadcasts double-precision (64-bit) floating-point value…",null,[[["f64"]],["__m128d"]]],[5,"_mm_set_pd1","","Broadcasts double-precision (64-bit) floating-point value…",null,[[["f64"]],["__m128d"]]],[5,"_mm_set_pd","","Sets packed double-precision (64-bit) floating-point…",null,[[["f64"]],["__m128d"]]],[5,"_mm_setr_pd","","Sets packed double-precision (64-bit) floating-point…",null,[[["f64"]],["__m128d"]]],[5,"_mm_setzero_pd","","Returns packed double-precision (64-bit) floating-point…",null,[[],["__m128d"]]],[5,"_mm_movemask_pd","","Returns a mask of the most significant bit of each element…",null,[[["__m128d"]],["i32"]]],[5,"_mm_load_pd","","Loads 128-bits (composed of 2 packed double-precision…",null,[[],["__m128d"]]],[5,"_mm_load_sd","","Loads a 64-bit double-precision value to the low element…",null,[[],["__m128d"]]],[5,"_mm_loadh_pd","","Loads a double-precision value into the high-order bits of…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_loadl_pd","","Loads a double-precision value into the low-order bits of…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_stream_pd","","Stores a 128-bit floating point vector of `[2 x double]`…",null,[[["__m128d"]]]],[5,"_mm_store_sd","","Stores the lower 64 bits of a 128-bit vector of `[2 x…",null,[[["__m128d"]]]],[5,"_mm_store_pd","","Stores 128-bits (composed of 2 packed double-precision…",null,[[["__m128d"]]]],[5,"_mm_storeu_pd","","Stores 128-bits (composed of 2 packed double-precision…",null,[[["__m128d"]]]],[5,"_mm_store1_pd","","Stores the lower double-precision (64-bit) floating-point…",null,[[["__m128d"]]]],[5,"_mm_store_pd1","","Stores the lower double-precision (64-bit) floating-point…",null,[[["__m128d"]]]],[5,"_mm_storer_pd","","Stores 2 double-precision (64-bit) floating-point elements…",null,[[["__m128d"]]]],[5,"_mm_storeh_pd","","Stores the upper 64 bits of a 128-bit vector of `[2 x…",null,[[["__m128d"]]]],[5,"_mm_storel_pd","","Stores the lower 64 bits of a 128-bit vector of `[2 x…",null,[[["__m128d"]]]],[5,"_mm_load1_pd","","Loads a double-precision (64-bit) floating-point element…",null,[[],["__m128d"]]],[5,"_mm_load_pd1","","Loads a double-precision (64-bit) floating-point element…",null,[[],["__m128d"]]],[5,"_mm_loadr_pd","","Loads 2 double-precision (64-bit) floating-point elements…",null,[[],["__m128d"]]],[5,"_mm_loadu_pd","","Loads 128-bits (composed of 2 packed double-precision…",null,[[],["__m128d"]]],[5,"_mm_shuffle_pd","","Constructs a 128-bit floating-point vector of `[2 x…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_move_sd","","Constructs a 128-bit floating-point vector of `[2 x…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_castpd_ps","","Casts a 128-bit floating-point vector of `[2 x double]`…",null,[[["__m128d"]],["__m128"]]],[5,"_mm_castpd_si128","","Casts a 128-bit floating-point vector of `[2 x double]`…",null,[[["__m128d"]],["__m128i"]]],[5,"_mm_castps_pd","","Casts a 128-bit floating-point vector of `[4 x float]`…",null,[[["__m128"]],["__m128d"]]],[5,"_mm_castps_si128","","Casts a 128-bit floating-point vector of `[4 x float]`…",null,[[["__m128"]],["__m128i"]]],[5,"_mm_castsi128_pd","","Casts a 128-bit integer vector into a 128-bit…",null,[[["__m128i"]],["__m128d"]]],[5,"_mm_castsi128_ps","","Casts a 128-bit integer vector into a 128-bit…",null,[[["__m128i"]],["__m128"]]],[5,"_mm_undefined_pd","","Returns vector of type __m128d with undefined elements.",null,[[],["__m128d"]]],[5,"_mm_undefined_si128","","Returns vector of type __m128i with undefined elements.",null,[[],["__m128i"]]],[5,"_mm_unpackhi_pd","","The resulting `__m128d` element is composed by the…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_unpacklo_pd","","The resulting `__m128d` element is composed by the…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_add_si64","","Adds two signed or unsigned 64-bit integer values,…",null,[[["__m64"]],["__m64"]]],[5,"_mm_mul_su32","","Multiplies 32-bit unsigned integer values contained in the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sub_si64","","Subtracts signed or unsigned 64-bit integer values and…",null,[[["__m64"]],["__m64"]]],[5,"_mm_cvtpi32_pd","","Converts the two signed 32-bit integer elements of a…",null,[[["__m64"]],["__m128d"]]],[5,"_mm_set_epi64","","Initializes both 64-bit values in a 128-bit vector of `[2…",null,[[["__m64"]],["__m128i"]]],[5,"_mm_set1_epi64","","Initializes both values in a 128-bit vector of `[2 x i64]`…",null,[[["__m64"]],["__m128i"]]],[5,"_mm_setr_epi64","","Constructs a 128-bit integer vector, initialized in…",null,[[["__m64"]],["__m128i"]]],[5,"_mm_movepi64_pi64","","Returns the lower 64 bits of a 128-bit integer vector as a…",null,[[["__m128i"]],["__m64"]]],[5,"_mm_movpi64_epi64","","Moves the 64-bit operand to a 128-bit integer vector,…",null,[[["__m64"]],["__m128i"]]],[5,"_mm_cvtpd_pi32","","Converts the two double-precision floating-point elements…",null,[[["__m128d"]],["__m64"]]],[5,"_mm_cvttpd_pi32","","Converts the two double-precision floating-point elements…",null,[[["__m128d"]],["__m64"]]],[5,"_mm_addsub_ps","","Alternatively add and subtract packed single-precision…",null,[[["__m128"]],["__m128"]]],[5,"_mm_addsub_pd","","Alternatively add and subtract packed double-precision…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_hadd_pd","","Horizontally adds adjacent pairs of double-precision…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_hadd_ps","","Horizontally adds adjacent pairs of single-precision…",null,[[["__m128"]],["__m128"]]],[5,"_mm_hsub_pd","","Horizontally subtract adjacent pairs of double-precision…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_hsub_ps","","Horizontally adds adjacent pairs of single-precision…",null,[[["__m128"]],["__m128"]]],[5,"_mm_lddqu_si128","","Loads 128-bits of integer data from unaligned memory. This…",null,[[],["__m128i"]]],[5,"_mm_movedup_pd","","Duplicate the low double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_loaddup_pd","","Loads a double-precision (64-bit) floating-point element…",null,[[],["__m128d"]]],[5,"_mm_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_moveldup_ps","","Duplicate even-indexed single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_abs_epi8","","Computes the absolute value of packed 8-bit signed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_abs_epi16","","Computes the absolute value of each of the packed 16-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_abs_epi32","","Computes the absolute value of each of the packed 32-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_shuffle_epi8","","Shuffles bytes from `a` according to the content of `b`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_alignr_epi8","","Concatenate 16-byte blocks in `a` and `b` into a 32-byte…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_hadd_epi16","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_hadds_epi16","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_hadd_epi32","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_hsub_epi16","","Horizontally subtract the adjacent pairs of values…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_hsubs_epi16","","Horizontally subtract the adjacent pairs of values…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_hsub_epi32","","Horizontally subtract the adjacent pairs of values…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_maddubs_epi16","","Multiplies corresponding pairs of packed 8-bit unsigned…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mulhrs_epi16","","Multiplies packed 16-bit signed integer values, truncate…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sign_epi8","","Negates packed 8-bit integers in `a` when the…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sign_epi16","","Negates packed 16-bit integers in `a` when the…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sign_epi32","","Negates packed 32-bit integers in `a` when the…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_abs_pi8","","Computes the absolute value of packed 8-bit integers in…",null,[[["__m64"]],["__m64"]]],[5,"_mm_abs_pi16","","Computes the absolute value of packed 8-bit integers in…",null,[[["__m64"]],["__m64"]]],[5,"_mm_abs_pi32","","Computes the absolute value of packed 32-bit integers in…",null,[[["__m64"]],["__m64"]]],[5,"_mm_shuffle_pi8","","Shuffles packed 8-bit integers in `a` according to shuffle…",null,[[["__m64"]],["__m64"]]],[5,"_mm_alignr_pi8","","Concatenates the two 64-bit integer vector operands, and…",null,[[["__m64"],["i32"]],["__m64"]]],[5,"_mm_hadd_pi16","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m64"]],["__m64"]]],[5,"_mm_hadd_pi32","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m64"]],["__m64"]]],[5,"_mm_hadds_pi16","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m64"]],["__m64"]]],[5,"_mm_hsub_pi16","","Horizontally subtracts the adjacent pairs of values…",null,[[["__m64"]],["__m64"]]],[5,"_mm_hsub_pi32","","Horizontally subtracts the adjacent pairs of values…",null,[[["__m64"]],["__m64"]]],[5,"_mm_hsubs_pi16","","Horizontally subtracts the adjacent pairs of values…",null,[[["__m64"]],["__m64"]]],[5,"_mm_maddubs_pi16","","Multiplies corresponding pairs of packed 8-bit unsigned…",null,[[["__m64"]],["__m64"]]],[5,"_mm_mulhrs_pi16","","Multiplies packed 16-bit signed integer values, truncates…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sign_pi8","","Negates packed 8-bit integers in `a` when the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sign_pi16","","Negates packed 16-bit integers in `a` when the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sign_pi32","","Negates packed 32-bit integers in `a` when the…",null,[[["__m64"]],["__m64"]]],[17,"_MM_FROUND_TO_NEAREST_INT","","round to nearest",null,null],[17,"_MM_FROUND_TO_NEG_INF","","round down",null,null],[17,"_MM_FROUND_TO_POS_INF","","round up",null,null],[17,"_MM_FROUND_TO_ZERO","","truncate",null,null],[17,"_MM_FROUND_CUR_DIRECTION","","use MXCSR.RC; see `vendor::_MM_SET_ROUNDING_MODE`",null,null],[17,"_MM_FROUND_RAISE_EXC","","do not suppress exceptions",null,null],[17,"_MM_FROUND_NO_EXC","","suppress exceptions",null,null],[17,"_MM_FROUND_NINT","","round to nearest and do not suppress exceptions",null,null],[17,"_MM_FROUND_FLOOR","","round down and do not suppress exceptions",null,null],[17,"_MM_FROUND_CEIL","","round up and do not suppress exceptions",null,null],[17,"_MM_FROUND_TRUNC","","truncate and do not suppress exceptions",null,null],[17,"_MM_FROUND_RINT","","use MXCSR.RC and do not suppress exceptions; see…",null,null],[17,"_MM_FROUND_NEARBYINT","","use MXCSR.RC and suppress exceptions; see…",null,null],[5,"_mm_blendv_epi8","","Blend packed 8-bit integers from `a` and `b` using `mask`",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_blend_epi16","","Blend packed 16-bit integers from `a` and `b` using the…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_blendv_pd","","Blend packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_blendv_ps","","Blend packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_blend_pd","","Blend packed double-precision (64-bit) floating-point…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_blend_ps","","Blend packed single-precision (32-bit) floating-point…",null,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm_extract_ps","","Extracts a single-precision (32-bit) floating-point…",null,[[["__m128"],["i32"]],["i32"]]],[5,"_mm_extract_epi8","","Extracts an 8-bit integer from `a`, selected with `imm8`.…",null,[[["i32"],["__m128i"]],["i32"]]],[5,"_mm_extract_epi32","","Extracts an 32-bit integer from `a` selected with `imm8`",null,[[["i32"],["__m128i"]],["i32"]]],[5,"_mm_insert_ps","","Select a single value in `a` to store at some position in…",null,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm_insert_epi8","","Returns a copy of `a` with the 8-bit integer from `i`…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_insert_epi32","","Returns a copy of `a` with the 32-bit integer from `i`…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_max_epi8","","Compares packed 8-bit integers in `a` and `b` and returns…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_max_epu16","","Compares packed unsigned 16-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_max_epi32","","Compares packed 32-bit integers in `a` and `b`, and…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_max_epu32","","Compares packed unsigned 32-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epi8","","Compares packed 8-bit integers in `a` and `b` and returns…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epu16","","Compares packed unsigned 16-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epi32","","Compares packed 32-bit integers in `a` and `b`, and…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_min_epu32","","Compares packed unsigned 32-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_packus_epi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cmpeq_epi64","","Compares packed 64-bit integers in `a` and `b` for equality",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi8_epi16","","Sign extend packed 8-bit integers in `a` to packed 16-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi8_epi32","","Sign extend packed 8-bit integers in `a` to packed 32-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi8_epi64","","Sign extend packed 8-bit integers in the low 8 bytes of…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi16_epi32","","Sign extend packed 16-bit integers in `a` to packed 32-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi16_epi64","","Sign extend packed 16-bit integers in `a` to packed 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepi32_epi64","","Sign extend packed 32-bit integers in `a` to packed 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu8_epi16","","Zeroes extend packed unsigned 8-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu8_epi32","","Zeroes extend packed unsigned 8-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu8_epi64","","Zeroes extend packed unsigned 8-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu16_epi32","","Zeroes extend packed unsigned 16-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu16_epi64","","Zeroes extend packed unsigned 16-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_cvtepu32_epi64","","Zeroes extend packed unsigned 32-bit integers in `a` to…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_dp_pd","","Returns the dot product of two __m128d vectors.",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_dp_ps","","Returns the dot product of two __m128 vectors.",null,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm_floor_pd","","Round the packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_floor_ps","","Round the packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_floor_sd","","Round the lower double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_floor_ss","","Round the lower single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_ceil_pd","","Round the packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_ceil_ps","","Round the packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_ceil_sd","","Round the lower double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_ceil_ss","","Round the lower single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm_round_pd","","Round the packed double-precision (64-bit) floating-point…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_round_ps","","Round the packed single-precision (32-bit) floating-point…",null,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm_round_sd","","Round the lower double-precision (64-bit) floating-point…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_round_ss","","Round the lower single-precision (32-bit) floating-point…",null,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm_minpos_epu16","","Finds the minimum unsigned 16-bit element in the 128-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mul_epi32","","Multiplies the low 32-bit integers from each packed 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mullo_epi32","","Multiplies the packed 32-bit integers in `a` and `b`,…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_mpsadbw_epu8","","Subtracts 8-bit unsigned integer values and computes the…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_testz_si128","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_testc_si128","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_testnzc_si128","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_test_all_zeros","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_test_all_ones","","Tests whether the specified bits in `a` 128-bit integer…",null,[[["__m128i"]],["i32"]]],[5,"_mm_test_mix_ones_zeros","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i"]],["i32"]]],[17,"_SIDD_UBYTE_OPS","","String contains unsigned 8-bit characters (Default)",null,null],[17,"_SIDD_UWORD_OPS","","String contains unsigned 16-bit characters",null,null],[17,"_SIDD_SBYTE_OPS","","String contains signed 8-bit characters",null,null],[17,"_SIDD_SWORD_OPS","","String contains unsigned 16-bit characters",null,null],[17,"_SIDD_CMP_EQUAL_ANY","","For each character in `a`, find if it is in `b` (Default)",null,null],[17,"_SIDD_CMP_RANGES","","For each character in `a`, determine if `b[0] <= c <= b[1]…",null,null],[17,"_SIDD_CMP_EQUAL_EACH","","The strings defined by `a` and `b` are equal",null,null],[17,"_SIDD_CMP_EQUAL_ORDERED","","Search for the defined substring in the target",null,null],[17,"_SIDD_POSITIVE_POLARITY","","Do not negate results (Default)",null,null],[17,"_SIDD_NEGATIVE_POLARITY","","Negates results",null,null],[17,"_SIDD_MASKED_POSITIVE_POLARITY","","Do not negate results before the end of the string",null,null],[17,"_SIDD_MASKED_NEGATIVE_POLARITY","","Negates results only before the end of the string",null,null],[17,"_SIDD_LEAST_SIGNIFICANT","","Index only: return the least significant bit (Default)",null,null],[17,"_SIDD_MOST_SIGNIFICANT","","Index only: return the most significant bit",null,null],[17,"_SIDD_BIT_MASK","","Mask only: return the bit mask",null,null],[17,"_SIDD_UNIT_MASK","","Mask only: return the byte mask",null,null],[5,"_mm_cmpistrm","","Compares packed strings with implicit lengths in `a` and…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_cmpistri","","Compares packed strings with implicit lengths in `a` and…",null,[[["i32"],["__m128i"]],["i32"]]],[5,"_mm_cmpistrz","","Compares packed strings with implicit lengths in `a` and…",null,[[["i32"],["__m128i"]],["i32"]]],[5,"_mm_cmpistrc","","Compares packed strings with implicit lengths in `a` and…",null,[[["i32"],["__m128i"]],["i32"]]],[5,"_mm_cmpistrs","","Compares packed strings with implicit lengths in `a` and…",null,[[["i32"],["__m128i"]],["i32"]]],[5,"_mm_cmpistro","","Compares packed strings with implicit lengths in `a` and…",null,[[["i32"],["__m128i"]],["i32"]]],[5,"_mm_cmpistra","","Compares packed strings with implicit lengths in `a` and…",null,[[["i32"],["__m128i"]],["i32"]]],[5,"_mm_cmpestrm","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_cmpestri","","Compares packed strings `a` and `b` with lengths `la` and…",null,[[["i32"],["__m128i"]],["i32"]]],[5,"_mm_cmpestrz","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["i32"],["__m128i"]],["i32"]]],[5,"_mm_cmpestrc","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["i32"],["__m128i"]],["i32"]]],[5,"_mm_cmpestrs","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["i32"],["__m128i"]],["i32"]]],[5,"_mm_cmpestro","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["i32"],["__m128i"]],["i32"]]],[5,"_mm_cmpestra","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["i32"],["__m128i"]],["i32"]]],[5,"_mm_crc32_u8","","Starting with the initial value in `crc`, return the…",null,[[["u32"],["u8"]],["u32"]]],[5,"_mm_crc32_u16","","Starting with the initial value in `crc`, return the…",null,[[["u16"],["u32"]],["u32"]]],[5,"_mm_crc32_u32","","Starting with the initial value in `crc`, return the…",null,[[["u32"]],["u32"]]],[5,"_mm_cmpgt_epi64","","Compares packed 64-bit integers in `a` and `b` for…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_add_pd","","Adds packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_add_ps","","Adds packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_and_pd","","Computes the bitwise AND of a packed double-precision…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_and_ps","","Computes the bitwise AND of packed single-precision…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_or_pd","","Computes the bitwise OR packed double-precision (64-bit)…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_or_ps","","Computes the bitwise OR packed single-precision (32-bit)…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_shuffle_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["i32"],["__m256d"]],["__m256d"]]],[5,"_mm256_shuffle_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm256_andnot_pd","","Computes the bitwise NOT of packed double-precision…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_andnot_ps","","Computes the bitwise NOT of packed single-precision…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_max_pd","","Compares packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_max_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_min_pd","","Compares packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_min_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_mul_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_mul_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_addsub_pd","","Alternatively adds and subtracts packed double-precision…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_addsub_ps","","Alternatively adds and subtracts packed single-precision…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_sub_pd","","Subtracts packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_sub_ps","","Subtracts packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_div_ps","","Computes the division of each of the 8 packed 32-bit…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_div_pd","","Computes the division of each of the 4 packed 64-bit…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_round_pd","","Rounds packed double-precision (64-bit) floating point…",null,[[["i32"],["__m256d"]],["__m256d"]]],[5,"_mm256_ceil_pd","","Rounds packed double-precision (64-bit) floating point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_floor_pd","","Rounds packed double-precision (64-bit) floating point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_round_ps","","Rounds packed single-precision (32-bit) floating point…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm256_ceil_ps","","Rounds packed single-precision (32-bit) floating point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_floor_ps","","Rounds packed single-precision (32-bit) floating point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_sqrt_ps","","Returns the square root of packed single-precision…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_sqrt_pd","","Returns the square root of packed double-precision…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_blend_pd","","Blends packed double-precision (64-bit) floating-point…",null,[[["i32"],["__m256d"]],["__m256d"]]],[5,"_mm256_blend_ps","","Blends packed single-precision (32-bit) floating-point…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm256_blendv_pd","","Blends packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_blendv_ps","","Blends packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_dp_ps","","Conditionally multiplies the packed single-precision…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm256_hadd_pd","","Horizontal addition of adjacent pairs in the two packed…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_hadd_ps","","Horizontal addition of adjacent pairs in the two packed…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_hsub_pd","","Horizontal subtraction of adjacent pairs in the two packed…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_hsub_ps","","Horizontal subtraction of adjacent pairs in the two packed…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_xor_pd","","Computes the bitwise XOR of packed double-precision…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_xor_ps","","Computes the bitwise XOR of packed single-precision…",null,[[["__m256"]],["__m256"]]],[17,"_CMP_EQ_OQ","","Equal (ordered, non-signaling)",null,null],[17,"_CMP_LT_OS","","Less-than (ordered, signaling)",null,null],[17,"_CMP_LE_OS","","Less-than-or-equal (ordered, signaling)",null,null],[17,"_CMP_UNORD_Q","","Unordered (non-signaling)",null,null],[17,"_CMP_NEQ_UQ","","Not-equal (unordered, non-signaling)",null,null],[17,"_CMP_NLT_US","","Not-less-than (unordered, signaling)",null,null],[17,"_CMP_NLE_US","","Not-less-than-or-equal (unordered, signaling)",null,null],[17,"_CMP_ORD_Q","","Ordered (non-signaling)",null,null],[17,"_CMP_EQ_UQ","","Equal (unordered, non-signaling)",null,null],[17,"_CMP_NGE_US","","Not-greater-than-or-equal (unordered, signaling)",null,null],[17,"_CMP_NGT_US","","Not-greater-than (unordered, signaling)",null,null],[17,"_CMP_FALSE_OQ","","False (ordered, non-signaling)",null,null],[17,"_CMP_NEQ_OQ","","Not-equal (ordered, non-signaling)",null,null],[17,"_CMP_GE_OS","","Greater-than-or-equal (ordered, signaling)",null,null],[17,"_CMP_GT_OS","","Greater-than (ordered, signaling)",null,null],[17,"_CMP_TRUE_UQ","","True (unordered, non-signaling)",null,null],[17,"_CMP_EQ_OS","","Equal (ordered, signaling)",null,null],[17,"_CMP_LT_OQ","","Less-than (ordered, non-signaling)",null,null],[17,"_CMP_LE_OQ","","Less-than-or-equal (ordered, non-signaling)",null,null],[17,"_CMP_UNORD_S","","Unordered (signaling)",null,null],[17,"_CMP_NEQ_US","","Not-equal (unordered, signaling)",null,null],[17,"_CMP_NLT_UQ","","Not-less-than (unordered, non-signaling)",null,null],[17,"_CMP_NLE_UQ","","Not-less-than-or-equal (unordered, non-signaling)",null,null],[17,"_CMP_ORD_S","","Ordered (signaling)",null,null],[17,"_CMP_EQ_US","","Equal (unordered, signaling)",null,null],[17,"_CMP_NGE_UQ","","Not-greater-than-or-equal (unordered, non-signaling)",null,null],[17,"_CMP_NGT_UQ","","Not-greater-than (unordered, non-signaling)",null,null],[17,"_CMP_FALSE_OS","","False (ordered, signaling)",null,null],[17,"_CMP_NEQ_OS","","Not-equal (ordered, signaling)",null,null],[17,"_CMP_GE_OQ","","Greater-than-or-equal (ordered, non-signaling)",null,null],[17,"_CMP_GT_OQ","","Greater-than (ordered, non-signaling)",null,null],[17,"_CMP_TRUE_US","","True (unordered, signaling)",null,null],[5,"_mm_cmp_pd","","Compares packed double-precision (64-bit) floating-point…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm256_cmp_pd","","Compares packed double-precision (64-bit) floating-point…",null,[[["i32"],["__m256d"]],["__m256d"]]],[5,"_mm_cmp_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm256_cmp_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm_cmp_sd","","Compares the lower double-precision (64-bit)…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm_cmp_ss","","Compares the lower single-precision (32-bit)…",null,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm256_cvtepi32_pd","","Converts packed 32-bit integers in `a` to packed…",null,[[["__m128i"]],["__m256d"]]],[5,"_mm256_cvtepi32_ps","","Converts packed 32-bit integers in `a` to packed…",null,[[["__m256i"]],["__m256"]]],[5,"_mm256_cvtpd_ps","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m128"]]],[5,"_mm256_cvtps_epi32","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256i"]]],[5,"_mm256_cvtps_pd","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m256d"]]],[5,"_mm256_cvttpd_epi32","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m128i"]]],[5,"_mm256_cvtpd_epi32","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m128i"]]],[5,"_mm256_cvttps_epi32","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256i"]]],[5,"_mm256_extractf128_ps","","Extracts 128 bits (composed of 4 packed single-precision…",null,[[["__m256"],["i32"]],["__m128"]]],[5,"_mm256_extractf128_pd","","Extracts 128 bits (composed of 2 packed double-precision…",null,[[["i32"],["__m256d"]],["__m128d"]]],[5,"_mm256_extractf128_si256","","Extracts 128 bits (composed of integer data) from `a`,…",null,[[["__m256i"],["i32"]],["__m128i"]]],[5,"_mm256_zeroall","","Zeroes the contents of all XMM or YMM registers.",null,[[]]],[5,"_mm256_zeroupper","","Zeroes the upper 128 bits of all YMM registers; the lower…",null,[[]]],[5,"_mm256_permutevar_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m256i"],["__m256"]],["__m256"]]],[5,"_mm_permutevar_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m128"],["__m128i"]],["__m128"]]],[5,"_mm256_permute_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm_permute_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m128"],["i32"]],["__m128"]]],[5,"_mm256_permutevar_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m256i"],["__m256d"]],["__m256d"]]],[5,"_mm_permutevar_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m128d"],["__m128i"]],["__m128d"]]],[5,"_mm256_permute_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["i32"],["__m256d"]],["__m256d"]]],[5,"_mm_permute_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m128d"],["i32"]],["__m128d"]]],[5,"_mm256_permute2f128_ps","","Shuffles 256 bits (composed of 8 packed single-precision…",null,[[["__m256"],["i32"]],["__m256"]]],[5,"_mm256_permute2f128_pd","","Shuffles 256 bits (composed of 4 packed double-precision…",null,[[["i32"],["__m256d"]],["__m256d"]]],[5,"_mm256_permute2f128_si256","","Shuffles 258-bits (composed of integer data) selected by…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_broadcast_ss","","Broadcasts a single-precision (32-bit) floating-point…",null,[[["f32"]],["__m256"]]],[5,"_mm_broadcast_ss","","Broadcasts a single-precision (32-bit) floating-point…",null,[[["f32"]],["__m128"]]],[5,"_mm256_broadcast_sd","","Broadcasts a double-precision (64-bit) floating-point…",null,[[["f64"]],["__m256d"]]],[5,"_mm256_broadcast_ps","","Broadcasts 128 bits from memory (composed of 4 packed…",null,[[["__m128"]],["__m256"]]],[5,"_mm256_broadcast_pd","","Broadcasts 128 bits from memory (composed of 2 packed…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_insertf128_ps","","Copies `a` to result, then inserts 128 bits (composed of 4…",null,[[["i32"],["__m256"],["__m128"]],["__m256"]]],[5,"_mm256_insertf128_pd","","Copies `a` to result, then inserts 128 bits (composed of 2…",null,[[["i32"],["__m128d"],["__m256d"]],["__m256d"]]],[5,"_mm256_insertf128_si256","","Copies `a` to result, then inserts 128 bits from `b` into…",null,[[["i32"],["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_insert_epi8","","Copies `a` to result, and inserts the 8-bit integer `i`…",null,[[["__m256i"],["i8"],["i32"]],["__m256i"]]],[5,"_mm256_insert_epi16","","Copies `a` to result, and inserts the 16-bit integer `i`…",null,[[["__m256i"],["i16"],["i32"]],["__m256i"]]],[5,"_mm256_insert_epi32","","Copies `a` to result, and inserts the 32-bit integer `i`…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_load_pd","","Loads 256-bits (composed of 4 packed double-precision…",null,[[],["__m256d"]]],[5,"_mm256_store_pd","","Stores 256-bits (composed of 4 packed double-precision…",null,[[["__m256d"]]]],[5,"_mm256_load_ps","","Loads 256-bits (composed of 8 packed single-precision…",null,[[],["__m256"]]],[5,"_mm256_store_ps","","Stores 256-bits (composed of 8 packed single-precision…",null,[[["__m256"]]]],[5,"_mm256_loadu_pd","","Loads 256-bits (composed of 4 packed double-precision…",null,[[],["__m256d"]]],[5,"_mm256_storeu_pd","","Stores 256-bits (composed of 4 packed double-precision…",null,[[["__m256d"]]]],[5,"_mm256_loadu_ps","","Loads 256-bits (composed of 8 packed single-precision…",null,[[],["__m256"]]],[5,"_mm256_storeu_ps","","Stores 256-bits (composed of 8 packed single-precision…",null,[[["__m256"]]]],[5,"_mm256_load_si256","","Loads 256-bits of integer data from memory into result.…",null,[[],["__m256i"]]],[5,"_mm256_store_si256","","Stores 256-bits of integer data from `a` into memory.…",null,[[["__m256i"]]]],[5,"_mm256_loadu_si256","","Loads 256-bits of integer data from memory into result.…",null,[[],["__m256i"]]],[5,"_mm256_storeu_si256","","Stores 256-bits of integer data from `a` into memory.…",null,[[["__m256i"]]]],[5,"_mm256_maskload_pd","","Loads packed double-precision (64-bit) floating-point…",null,[[["__m256i"]],["__m256d"]]],[5,"_mm256_maskstore_pd","","Stores packed double-precision (64-bit) floating-point…",null,[[["__m256d"],["__m256i"]]]],[5,"_mm_maskload_pd","","Loads packed double-precision (64-bit) floating-point…",null,[[["__m128i"]],["__m128d"]]],[5,"_mm_maskstore_pd","","Stores packed double-precision (64-bit) floating-point…",null,[[["__m128i"],["__m128d"]]]],[5,"_mm256_maskload_ps","","Loads packed single-precision (32-bit) floating-point…",null,[[["__m256i"]],["__m256"]]],[5,"_mm256_maskstore_ps","","Stores packed single-precision (32-bit) floating-point…",null,[[["__m256i"],["__m256"]]]],[5,"_mm_maskload_ps","","Loads packed single-precision (32-bit) floating-point…",null,[[["__m128i"]],["__m128"]]],[5,"_mm_maskstore_ps","","Stores packed single-precision (32-bit) floating-point…",null,[[["__m128"],["__m128i"]]]],[5,"_mm256_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit)…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_moveldup_ps","","Duplicate even-indexed single-precision (32-bit)…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_movedup_pd","","Duplicate even-indexed double-precision (64-bit)…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_lddqu_si256","","Loads 256-bits of integer data from unaligned memory into…",null,[[],["__m256i"]]],[5,"_mm256_stream_si256","","Moves integer data from a 256-bit integer vector to a…",null,[[["__m256i"]]]],[5,"_mm256_stream_pd","","Moves double-precision values from a 256-bit vector of `[4…",null,[[["__m256d"]]]],[5,"_mm256_stream_ps","","Moves single-precision floating point values from a…",null,[[["__m256"]]]],[5,"_mm256_rcp_ps","","Computes the approximate reciprocal of packed…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_rsqrt_ps","","Computes the approximate reciprocal square root of packed…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_unpackhi_pd","","Unpacks and interleave double-precision (64-bit)…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_unpackhi_ps","","Unpacks and interleave single-precision (32-bit)…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_unpacklo_pd","","Unpacks and interleave double-precision (64-bit)…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm256_unpacklo_ps","","Unpacks and interleave single-precision (32-bit)…",null,[[["__m256"]],["__m256"]]],[5,"_mm256_testz_si256","","Computes the bitwise AND of 256 bits (representing integer…",null,[[["__m256i"]],["i32"]]],[5,"_mm256_testc_si256","","Computes the bitwise AND of 256 bits (representing integer…",null,[[["__m256i"]],["i32"]]],[5,"_mm256_testnzc_si256","","Computes the bitwise AND of 256 bits (representing integer…",null,[[["__m256i"]],["i32"]]],[5,"_mm256_testz_pd","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256d"]],["i32"]]],[5,"_mm256_testc_pd","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256d"]],["i32"]]],[5,"_mm256_testnzc_pd","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256d"]],["i32"]]],[5,"_mm_testz_pd","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128d"]],["i32"]]],[5,"_mm_testc_pd","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128d"]],["i32"]]],[5,"_mm_testnzc_pd","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128d"]],["i32"]]],[5,"_mm256_testz_ps","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256"]],["i32"]]],[5,"_mm256_testc_ps","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256"]],["i32"]]],[5,"_mm256_testnzc_ps","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256"]],["i32"]]],[5,"_mm_testz_ps","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128"]],["i32"]]],[5,"_mm_testc_ps","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128"]],["i32"]]],[5,"_mm_testnzc_ps","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128"]],["i32"]]],[5,"_mm256_movemask_pd","","Sets each bit of the returned mask based on the most…",null,[[["__m256d"]],["i32"]]],[5,"_mm256_movemask_ps","","Sets each bit of the returned mask based on the most…",null,[[["__m256"]],["i32"]]],[5,"_mm256_setzero_pd","","Returns vector of type __m256d with all elements set to…",null,[[],["__m256d"]]],[5,"_mm256_setzero_ps","","Returns vector of type __m256 with all elements set to zero.",null,[[],["__m256"]]],[5,"_mm256_setzero_si256","","Returns vector of type __m256i with all elements set to…",null,[[],["__m256i"]]],[5,"_mm256_set_pd","","Sets packed double-precision (64-bit) floating-point…",null,[[["f64"]],["__m256d"]]],[5,"_mm256_set_ps","","Sets packed single-precision (32-bit) floating-point…",null,[[["f32"]],["__m256"]]],[5,"_mm256_set_epi8","","Sets packed 8-bit integers in returned vector with the…",null,[[["i8"]],["__m256i"]]],[5,"_mm256_set_epi16","","Sets packed 16-bit integers in returned vector with the…",null,[[["i16"]],["__m256i"]]],[5,"_mm256_set_epi32","","Sets packed 32-bit integers in returned vector with the…",null,[[["i32"]],["__m256i"]]],[5,"_mm256_set_epi64x","","Sets packed 64-bit integers in returned vector with the…",null,[[["i64"]],["__m256i"]]],[5,"_mm256_setr_pd","","Sets packed double-precision (64-bit) floating-point…",null,[[["f64"]],["__m256d"]]],[5,"_mm256_setr_ps","","Sets packed single-precision (32-bit) floating-point…",null,[[["f32"]],["__m256"]]],[5,"_mm256_setr_epi8","","Sets packed 8-bit integers in returned vector with the…",null,[[["i8"]],["__m256i"]]],[5,"_mm256_setr_epi16","","Sets packed 16-bit integers in returned vector with the…",null,[[["i16"]],["__m256i"]]],[5,"_mm256_setr_epi32","","Sets packed 32-bit integers in returned vector with the…",null,[[["i32"]],["__m256i"]]],[5,"_mm256_setr_epi64x","","Sets packed 64-bit integers in returned vector with the…",null,[[["i64"]],["__m256i"]]],[5,"_mm256_set1_pd","","Broadcasts double-precision (64-bit) floating-point value…",null,[[["f64"]],["__m256d"]]],[5,"_mm256_set1_ps","","Broadcasts single-precision (32-bit) floating-point value…",null,[[["f32"]],["__m256"]]],[5,"_mm256_set1_epi8","","Broadcasts 8-bit integer `a` to all elements of returned…",null,[[["i8"]],["__m256i"]]],[5,"_mm256_set1_epi16","","Broadcasts 16-bit integer `a` to all all elements of…",null,[[["i16"]],["__m256i"]]],[5,"_mm256_set1_epi32","","Broadcasts 32-bit integer `a` to all elements of returned…",null,[[["i32"]],["__m256i"]]],[5,"_mm256_set1_epi64x","","Broadcasts 64-bit integer `a` to all elements of returned…",null,[[["i64"]],["__m256i"]]],[5,"_mm256_castpd_ps","","Cast vector of type __m256d to type __m256.",null,[[["__m256d"]],["__m256"]]],[5,"_mm256_castps_pd","","Cast vector of type __m256 to type __m256d.",null,[[["__m256"]],["__m256d"]]],[5,"_mm256_castps_si256","","Casts vector of type __m256 to type __m256i.",null,[[["__m256"]],["__m256i"]]],[5,"_mm256_castsi256_ps","","Casts vector of type __m256i to type __m256.",null,[[["__m256i"]],["__m256"]]],[5,"_mm256_castpd_si256","","Casts vector of type __m256d to type __m256i.",null,[[["__m256d"]],["__m256i"]]],[5,"_mm256_castsi256_pd","","Casts vector of type __m256i to type __m256d.",null,[[["__m256i"]],["__m256d"]]],[5,"_mm256_castps256_ps128","","Casts vector of type __m256 to type __m128.",null,[[["__m256"]],["__m128"]]],[5,"_mm256_castpd256_pd128","","Casts vector of type __m256d to type __m128d.",null,[[["__m256d"]],["__m128d"]]],[5,"_mm256_castsi256_si128","","Casts vector of type __m256i to type __m128i.",null,[[["__m256i"]],["__m128i"]]],[5,"_mm256_castps128_ps256","","Casts vector of type __m128 to type __m256; the upper 128…",null,[[["__m128"]],["__m256"]]],[5,"_mm256_castpd128_pd256","","Casts vector of type __m128d to type __m256d; the upper…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_castsi128_si256","","Casts vector of type __m128i to type __m256i; the upper…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_zextps128_ps256","","Constructs a 256-bit floating-point vector of `[8 x…",null,[[["__m128"]],["__m256"]]],[5,"_mm256_zextsi128_si256","","Constructs a 256-bit integer vector from a 128-bit integer…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_zextpd128_pd256","","Constructs a 256-bit floating-point vector of `[4 x…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_undefined_ps","","Returns vector of type `__m256` with undefined elements.",null,[[],["__m256"]]],[5,"_mm256_undefined_pd","","Returns vector of type `__m256d` with undefined elements.",null,[[],["__m256d"]]],[5,"_mm256_undefined_si256","","Returns vector of type __m256i with undefined elements.",null,[[],["__m256i"]]],[5,"_mm256_set_m128","","Sets packed __m256 returned vector with the supplied values.",null,[[["__m128"]],["__m256"]]],[5,"_mm256_set_m128d","","Sets packed __m256d returned vector with the supplied…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_set_m128i","","Sets packed __m256i returned vector with the supplied…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_setr_m128","","Sets packed __m256 returned vector with the supplied values.",null,[[["__m128"]],["__m256"]]],[5,"_mm256_setr_m128d","","Sets packed __m256d returned vector with the supplied…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_setr_m128i","","Sets packed __m256i returned vector with the supplied…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_loadu2_m128","","Loads two 128-bit values (composed of 4 packed…",null,[[],["__m256"]]],[5,"_mm256_loadu2_m128d","","Loads two 128-bit values (composed of 2 packed…",null,[[],["__m256d"]]],[5,"_mm256_loadu2_m128i","","Loads two 128-bit values (composed of integer data) from…",null,[[],["__m256i"]]],[5,"_mm256_storeu2_m128","","Stores the high and low 128-bit halves (each composed of 4…",null,[[["__m256"]]]],[5,"_mm256_storeu2_m128d","","Stores the high and low 128-bit halves (each composed of 2…",null,[[["__m256d"]]]],[5,"_mm256_storeu2_m128i","","Stores the high and low 128-bit halves (each composed of…",null,[[["__m256i"]]]],[5,"_mm256_cvtss_f32","","Returns the first element of the input vector of `[8 x…",null,[[["__m256"]],["f32"]]],[5,"_mm256_abs_epi32","","Computes the absolute values of packed 32-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_abs_epi16","","Computes the absolute values of packed 16-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_abs_epi8","","Computes the absolute values of packed 8-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_add_epi64","","Adds packed 64-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_add_epi32","","Adds packed 32-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_add_epi16","","Adds packed 16-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_add_epi8","","Adds packed 8-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_adds_epi8","","Adds packed 8-bit integers in `a` and `b` using saturation.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_adds_epi16","","Adds packed 16-bit integers in `a` and `b` using saturation.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_adds_epu8","","Adds packed unsigned 8-bit integers in `a` and `b` using…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_adds_epu16","","Adds packed unsigned 16-bit integers in `a` and `b` using…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_alignr_epi8","","Concatenates pairs of 16-byte blocks in `a` and `b` into a…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_and_si256","","Computes the bitwise AND of 256 bits (representing integer…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_andnot_si256","","Computes the bitwise NOT of 256 bits (representing integer…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_avg_epu16","","Averages packed unsigned 16-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_avg_epu8","","Averages packed unsigned 8-bit integers in `a` and `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_blend_epi32","","Blends packed 32-bit integers from `a` and `b` using…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm256_blend_epi32","","Blends packed 32-bit integers from `a` and `b` using…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_blend_epi16","","Blends packed 16-bit integers from `a` and `b` using…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_blendv_epi8","","Blends packed 8-bit integers from `a` and `b` using `mask`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_broadcastb_epi8","","Broadcasts the low packed 8-bit integer from `a` to all…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_broadcastb_epi8","","Broadcasts the low packed 8-bit integer from `a` to all…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm_broadcastd_epi32","","Broadcasts the low packed 32-bit integer from `a` to all…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_broadcastd_epi32","","Broadcasts the low packed 32-bit integer from `a` to all…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm_broadcastq_epi64","","Broadcasts the low packed 64-bit integer from `a` to all…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_broadcastq_epi64","","Broadcasts the low packed 64-bit integer from `a` to all…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm_broadcastsd_pd","","Broadcasts the low double-precision (64-bit)…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_broadcastsd_pd","","Broadcasts the low double-precision (64-bit)…",null,[[["__m128d"]],["__m256d"]]],[5,"_mm256_broadcastsi128_si256","","Broadcasts 128 bits of integer data from a to all 128-bit…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm_broadcastss_ps","","Broadcasts the low single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_broadcastss_ps","","Broadcasts the low single-precision (32-bit)…",null,[[["__m128"]],["__m256"]]],[5,"_mm_broadcastw_epi16","","Broadcasts the low packed 16-bit integer from a to all…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_broadcastw_epi16","","Broadcasts the low packed 16-bit integer from a to all…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cmpeq_epi64","","Compares packed 64-bit integers in `a` and `b` for equality.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpeq_epi32","","Compares packed 32-bit integers in `a` and `b` for equality.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpeq_epi16","","Compares packed 16-bit integers in `a` and `b` for equality.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpeq_epi8","","Compares packed 8-bit integers in `a` and `b` for equality.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpgt_epi64","","Compares packed 64-bit integers in `a` and `b` for…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpgt_epi32","","Compares packed 32-bit integers in `a` and `b` for…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpgt_epi16","","Compares packed 16-bit integers in `a` and `b` for…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cmpgt_epi8","","Compares packed 8-bit integers in `a` and `b` for…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_cvtepi16_epi32","","Sign-extend 16-bit integers to 32-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepi16_epi64","","Sign-extend 16-bit integers to 64-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepi32_epi64","","Sign-extend 32-bit integers to 64-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepi8_epi16","","Sign-extend 8-bit integers to 16-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepi8_epi32","","Sign-extend 8-bit integers to 32-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepi8_epi64","","Sign-extend 8-bit integers to 64-bit integers.",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu16_epi32","","Zeroes extend packed unsigned 16-bit integers in `a` to…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu16_epi64","","Zero-extend the lower four unsigned 16-bit integers in `a`…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu32_epi64","","Zero-extend unsigned 32-bit integers in `a` to 64-bit…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu8_epi16","","Zero-extend unsigned 8-bit integers in `a` to 16-bit…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu8_epi32","","Zero-extend the lower eight unsigned 8-bit integers in `a`…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_cvtepu8_epi64","","Zero-extend the lower four unsigned 8-bit integers in `a`…",null,[[["__m128i"]],["__m256i"]]],[5,"_mm256_extracti128_si256","","Extracts 128 bits (of integer data) from `a` selected with…",null,[[["__m256i"],["i32"]],["__m128i"]]],[5,"_mm256_hadd_epi16","","Horizontally adds adjacent pairs of 16-bit integers in `a`…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_hadd_epi32","","Horizontally adds adjacent pairs of 32-bit integers in `a`…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_hadds_epi16","","Horizontally adds adjacent pairs of 16-bit integers in `a`…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_hsub_epi16","","Horizontally subtract adjacent pairs of 16-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_hsub_epi32","","Horizontally subtract adjacent pairs of 32-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_hsubs_epi16","","Horizontally subtract adjacent pairs of 16-bit integers in…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_i32gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_mask_i32gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm256_i32gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_mask_i32gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_i32gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["i32"],["__m128i"]],["__m128"]]],[5,"_mm_mask_i32gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"],["__m128"]],["__m128"]]],[5,"_mm256_i32gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256"]]],[5,"_mm256_mask_i32gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["i32"],["__m256i"],["__m256"]],["__m256"]]],[5,"_mm_i32gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_mask_i32gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm256_i32gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["i32"],["__m128i"]],["__m256i"]]],[5,"_mm256_mask_i32gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"],["__m256i"]],["__m256i"]]],[5,"_mm_i32gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["i32"],["__m128i"]],["__m128d"]]],[5,"_mm_mask_i32gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128d"],["__m128i"],["i32"]],["__m128d"]]],[5,"_mm256_i32gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["i32"],["__m128i"]],["__m256d"]]],[5,"_mm256_mask_i32gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["__m256d"],["i32"]],["__m256d"]]],[5,"_mm_i64gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_mask_i64gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm256_i64gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m128i"]]],[5,"_mm256_mask_i64gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"],["__m256i"]],["__m128i"]]],[5,"_mm_i64gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["i32"],["__m128i"]],["__m128"]]],[5,"_mm_mask_i64gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m128i"],["i32"],["__m128"]],["__m128"]]],[5,"_mm256_i64gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m128"]]],[5,"_mm256_mask_i64gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["i32"],["__m256i"],["__m128"]],["__m128"]]],[5,"_mm_i64gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_mask_i64gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm256_i64gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_mask_i64gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_i64gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["i32"],["__m128i"]],["__m128d"]]],[5,"_mm_mask_i64gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128d"],["__m128i"],["i32"]],["__m128d"]]],[5,"_mm256_i64gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m256i"],["i32"]],["__m256d"]]],[5,"_mm256_mask_i64gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m256d"],["__m256i"],["i32"]],["__m256d"]]],[5,"_mm256_inserti128_si256","","Copies `a` to `dst`, then insert 128 bits (of integer…",null,[[["i32"],["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_madd_epi16","","Multiplies packed signed 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_maddubs_epi16","","Vertically multiplies each unsigned 8-bit integer from `a`…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_maskload_epi32","","Loads packed 32-bit integers from memory pointed by…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_maskload_epi32","","Loads packed 32-bit integers from memory pointed by…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_maskload_epi64","","Loads packed 64-bit integers from memory pointed by…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_maskload_epi64","","Loads packed 64-bit integers from memory pointed by…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_maskstore_epi32","","Stores packed 32-bit integers from `a` into memory pointed…",null,[[["__m128i"]]]],[5,"_mm256_maskstore_epi32","","Stores packed 32-bit integers from `a` into memory pointed…",null,[[["__m256i"]]]],[5,"_mm_maskstore_epi64","","Stores packed 64-bit integers from `a` into memory pointed…",null,[[["__m128i"]]]],[5,"_mm256_maskstore_epi64","","Stores packed 64-bit integers from `a` into memory pointed…",null,[[["__m256i"]]]],[5,"_mm256_max_epi16","","Compares packed 16-bit integers in `a` and `b`, and…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_max_epi32","","Compares packed 32-bit integers in `a` and `b`, and…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_max_epi8","","Compares packed 8-bit integers in `a` and `b`, and returns…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_max_epu16","","Compares packed unsigned 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_max_epu32","","Compares packed unsigned 32-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_max_epu8","","Compares packed unsigned 8-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epi16","","Compares packed 16-bit integers in `a` and `b`, and…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epi32","","Compares packed 32-bit integers in `a` and `b`, and…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epi8","","Compares packed 8-bit integers in `a` and `b`, and returns…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epu16","","Compares packed unsigned 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epu32","","Compares packed unsigned 32-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_min_epu8","","Compares packed unsigned 8-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_movemask_epi8","","Creates mask from the most significant bit of each 8-bit…",null,[[["__m256i"]],["i32"]]],[5,"_mm256_mpsadbw_epu8","","Computes the sum of absolute differences (SADs) of…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_mul_epi32","","Multiplies the low 32-bit integers from each packed 64-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mul_epu32","","Multiplies the low unsigned 32-bit integers from each…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mulhi_epi16","","Multiplies the packed 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mulhi_epu16","","Multiplies the packed unsigned 16-bit integers in `a` and…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mullo_epi16","","Multiplies the packed 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mullo_epi32","","Multiplies the packed 32-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_mulhrs_epi16","","Multiplies packed 16-bit integers in `a` and `b`,…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_or_si256","","Computes the bitwise OR of 256 bits (representing integer…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_packs_epi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_packs_epi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_packus_epi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_packus_epi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_permutevar8x32_epi32","","Permutes packed 32-bit integers from `a` according to the…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_permute4x64_epi64","","Permutes 64-bit integers from `a` using control mask `imm8`.",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_permute2x128_si256","","Shuffles 128-bits of integer data selected by `imm8` from…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_permute4x64_pd","","Shuffles 64-bit floating-point elements in `a` across…",null,[[["i32"],["__m256d"]],["__m256d"]]],[5,"_mm256_permutevar8x32_ps","","Shuffles eight 32-bit foating-point elements in `a` across…",null,[[["__m256i"],["__m256"]],["__m256"]]],[5,"_mm256_sad_epu8","","Computes the absolute differences of packed unsigned 8-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_shuffle_epi8","","Shuffles bytes from `a` according to the content of `b`.",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_shuffle_epi32","","Shuffles 32-bit integers in 128-bit lanes of `a` using the…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_shufflehi_epi16","","Shuffles 16-bit integers in the high 64 bits of 128-bit…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_shufflelo_epi16","","Shuffles 16-bit integers in the low 64 bits of 128-bit…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_sign_epi16","","Negates packed 16-bit integers in `a` when the…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sign_epi32","","Negates packed 32-bit integers in `a` when the…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sign_epi8","","Negates packed 8-bit integers in `a` when the…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sll_epi16","","Shifts packed 16-bit integers in `a` left by `count` while…",null,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_sll_epi32","","Shifts packed 32-bit integers in `a` left by `count` while…",null,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_sll_epi64","","Shifts packed 64-bit integers in `a` left by `count` while…",null,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_slli_epi16","","Shifts packed 16-bit integers in `a` left by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_slli_epi32","","Shifts packed 32-bit integers in `a` left by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_slli_epi64","","Shifts packed 64-bit integers in `a` left by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_slli_si256","","Shifts 128-bit lanes in `a` left by `imm8` bytes while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_bslli_epi128","","Shifts 128-bit lanes in `a` left by `imm8` bytes while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_sllv_epi32","","Shifts packed 32-bit integers in `a` left by the amount…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_sllv_epi32","","Shifts packed 32-bit integers in `a` left by the amount…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_sllv_epi64","","Shifts packed 64-bit integers in `a` left by the amount…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_sllv_epi64","","Shifts packed 64-bit integers in `a` left by the amount…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sra_epi16","","Shifts packed 16-bit integers in `a` right by `count`…",null,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_sra_epi32","","Shifts packed 32-bit integers in `a` right by `count`…",null,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_srai_epi16","","Shifts packed 16-bit integers in `a` right by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_srai_epi32","","Shifts packed 32-bit integers in `a` right by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_srav_epi32","","Shifts packed 32-bit integers in `a` right by the amount…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_srav_epi32","","Shifts packed 32-bit integers in `a` right by the amount…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_srli_si256","","Shifts 128-bit lanes in `a` right by `imm8` bytes while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_bsrli_epi128","","Shifts 128-bit lanes in `a` right by `imm8` bytes while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_srl_epi16","","Shifts packed 16-bit integers in `a` right by `count`…",null,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_srl_epi32","","Shifts packed 32-bit integers in `a` right by `count`…",null,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_srl_epi64","","Shifts packed 64-bit integers in `a` right by `count`…",null,[[["__m256i"],["__m128i"]],["__m256i"]]],[5,"_mm256_srli_epi16","","Shifts packed 16-bit integers in `a` right by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_srli_epi32","","Shifts packed 32-bit integers in `a` right by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm256_srli_epi64","","Shifts packed 64-bit integers in `a` right by `imm8` while…",null,[[["__m256i"],["i32"]],["__m256i"]]],[5,"_mm_srlv_epi32","","Shifts packed 32-bit integers in `a` right by the amount…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_srlv_epi32","","Shifts packed 32-bit integers in `a` right by the amount…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_srlv_epi64","","Shifts packed 64-bit integers in `a` right by the amount…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm256_srlv_epi64","","Shifts packed 64-bit integers in `a` right by the amount…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sub_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sub_epi32","","Subtract packed 32-bit integers in `b` from packed 16-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sub_epi64","","Subtract packed 64-bit integers in `b` from packed 16-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_sub_epi8","","Subtract packed 8-bit integers in `b` from packed 16-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_subs_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_subs_epi8","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_subs_epu16","","Subtract packed unsigned 16-bit integers in `b` from…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_subs_epu8","","Subtract packed unsigned 8-bit integers in `b` from packed…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpackhi_epi8","","Unpacks and interleave 8-bit integers from the high half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpacklo_epi8","","Unpacks and interleave 8-bit integers from the low half of…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpackhi_epi16","","Unpacks and interleave 16-bit integers from the high half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpacklo_epi16","","Unpacks and interleave 16-bit integers from the low half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpackhi_epi32","","Unpacks and interleave 32-bit integers from the high half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpacklo_epi32","","Unpacks and interleave 32-bit integers from the low half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpackhi_epi64","","Unpacks and interleave 64-bit integers from the high half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_unpacklo_epi64","","Unpacks and interleave 64-bit integers from the low half…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_xor_si256","","Computes the bitwise XOR of 256 bits (representing integer…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_extract_epi8","","Extracts an 8-bit integer from `a`, selected with `imm8`.…",null,[[["__m256i"],["i32"]],["i8"]]],[5,"_mm256_extract_epi16","","Extracts a 16-bit integer from `a`, selected with `imm8`.…",null,[[["__m256i"],["i32"]],["i16"]]],[5,"_mm256_extract_epi32","","Extracts a 32-bit integer from `a`, selected with `imm8`.",null,[[["__m256i"],["i32"]],["i32"]]],[5,"_mm256_cvtsd_f64","","Returns the first element of the input vector of `[4 x…",null,[[["__m256d"]],["f64"]]],[5,"_mm256_cvtsi256_si32","","Returns the first element of the input vector of `[8 x…",null,[[["__m256i"]],["i32"]]],[5,"_mm_fmadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fmadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fmadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fmadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fmadd_sd","","Multiplies the lower double-precision (64-bit)…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_fmadd_ss","","Multiplies the lower single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_fmaddsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fmaddsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fmaddsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fmaddsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fmsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fmsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fmsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fmsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fmsub_sd","","Multiplies the lower double-precision (64-bit)…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_fmsub_ss","","Multiplies the lower single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_fmsubadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fmsubadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fmsubadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fmsubadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fnmadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fnmadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fnmadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fnmadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fnmadd_sd","","Multiplies the lower double-precision (64-bit)…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_fnmadd_ss","","Multiplies the lower single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_mm_fnmsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm256_fnmsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d"]],["__m256d"]]],[5,"_mm_fnmsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128"]],["__m128"]]],[5,"_mm256_fnmsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256"]],["__m256"]]],[5,"_mm_fnmsub_sd","","Multiplies the lower double-precision (64-bit)…",null,[[["__m128d"]],["__m128d"]]],[5,"_mm_fnmsub_ss","","Multiplies the lower single-precision (32-bit)…",null,[[["__m128"]],["__m128"]]],[5,"_lzcnt_u32","","Counts the leading most significant zero bits.",null,[[["u32"]],["u32"]]],[5,"_popcnt32","","Counts the bits that are set.",null,[[["i32"]],["i32"]]],[5,"_bextr_u32","","Extracts bits in range [`start`, `start` + `length`) from…",null,[[["u32"]],["u32"]]],[5,"_bextr2_u32","","Extracts bits of `a` specified by `control` into the least…",null,[[["u32"]],["u32"]]],[5,"_andn_u32","","Bitwise logical `AND` of inverted `a` with `b`.",null,[[["u32"]],["u32"]]],[5,"_blsi_u32","","Extracts lowest set isolated bit.",null,[[["u32"]],["u32"]]],[5,"_blsmsk_u32","","Gets mask up to lowest set bit.",null,[[["u32"]],["u32"]]],[5,"_blsr_u32","","Resets the lowest set bit of `x`.",null,[[["u32"]],["u32"]]],[5,"_tzcnt_u32","","Counts the number of trailing least significant zero bits.",null,[[["u32"]],["u32"]]],[5,"_mm_tzcnt_32","","Counts the number of trailing least significant zero bits.",null,[[["u32"]],["i32"]]],[5,"_mulx_u32","","Unsigned multiply without affecting flags.",null,[[["u32"],["u32"]],["u32"]]],[5,"_bzhi_u32","","Zeroes higher bits of `a` >= `index`.",null,[[["u32"]],["u32"]]],[5,"_pdep_u32","","Scatter contiguous low order bits of `a` to the result at…",null,[[["u32"]],["u32"]]],[5,"_pext_u32","","Gathers the bits of `x` specified by the `mask` into the…",null,[[["u32"]],["u32"]]],[5,"_mm_extract_si64","","Extracts the bit range specified by `y` from the lower 64…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_insert_si64","","Inserts the `[length:0]` bits of `y` into `x` at `index`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_stream_sd","","Non-temporal store of `a.0` into `p`.",null,[[["__m128d"]]]],[5,"_mm_stream_ss","","Non-temporal store of `a.0` into `p`.",null,[[["__m128"]]]],[5,"_blcfill_u32","","Clears all bits below the least significant zero bit of `x`.",null,[[["u32"]],["u32"]]],[5,"_blcfill_u64","","Clears all bits below the least significant zero bit of `x`.",null,[[["u64"]],["u64"]]],[5,"_blci_u32","","Sets all bits of `x` to 1 except for the least significant…",null,[[["u32"]],["u32"]]],[5,"_blci_u64","","Sets all bits of `x` to 1 except for the least significant…",null,[[["u64"]],["u64"]]],[5,"_blcic_u32","","Sets the least significant zero bit of `x` and clears all…",null,[[["u32"]],["u32"]]],[5,"_blcic_u64","","Sets the least significant zero bit of `x` and clears all…",null,[[["u64"]],["u64"]]],[5,"_blcmsk_u32","","Sets the least significant zero bit of `x` and clears all…",null,[[["u32"]],["u32"]]],[5,"_blcmsk_u64","","Sets the least significant zero bit of `x` and clears all…",null,[[["u64"]],["u64"]]],[5,"_blcs_u32","","Sets the least significant zero bit of `x`.",null,[[["u32"]],["u32"]]],[5,"_blcs_u64","","Sets the least significant zero bit of `x`.",null,[[["u64"]],["u64"]]],[5,"_blsfill_u32","","Sets all bits of `x` below the least significant one.",null,[[["u32"]],["u32"]]],[5,"_blsfill_u64","","Sets all bits of `x` below the least significant one.",null,[[["u64"]],["u64"]]],[5,"_blsic_u32","","Clears least significant bit and sets all other bits.",null,[[["u32"]],["u32"]]],[5,"_blsic_u64","","Clears least significant bit and sets all other bits.",null,[[["u64"]],["u64"]]],[5,"_t1mskc_u32","","Clears all bits below the least significant zero of `x`…",null,[[["u32"]],["u32"]]],[5,"_t1mskc_u64","","Clears all bits below the least significant zero of `x`…",null,[[["u64"]],["u64"]]],[5,"_tzmsk_u32","","Sets all bits below the least significant one of `x` and…",null,[[["u32"]],["u32"]]],[5,"_tzmsk_u64","","Sets all bits below the least significant one of `x` and…",null,[[["u64"]],["u64"]]],[5,"_mm_setzero_si64","","Constructs a 64-bit integer vector initialized to zero.",null,[[],["__m64"]]],[5,"_mm_add_pi8","","Adds packed 8-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_m_paddb","","Adds packed 8-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_mm_add_pi16","","Adds packed 16-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_m_paddw","","Adds packed 16-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_mm_add_pi32","","Adds packed 32-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_m_paddd","","Adds packed 32-bit integers in `a` and `b`.",null,[[["__m64"]],["__m64"]]],[5,"_mm_adds_pi8","","Adds packed 8-bit integers in `a` and `b` using saturation.",null,[[["__m64"]],["__m64"]]],[5,"_m_paddsb","","Adds packed 8-bit integers in `a` and `b` using saturation.",null,[[["__m64"]],["__m64"]]],[5,"_mm_adds_pi16","","Adds packed 16-bit integers in `a` and `b` using saturation.",null,[[["__m64"]],["__m64"]]],[5,"_m_paddsw","","Adds packed 16-bit integers in `a` and `b` using saturation.",null,[[["__m64"]],["__m64"]]],[5,"_mm_adds_pu8","","Adds packed unsigned 8-bit integers in `a` and `b` using…",null,[[["__m64"]],["__m64"]]],[5,"_m_paddusb","","Adds packed unsigned 8-bit integers in `a` and `b` using…",null,[[["__m64"]],["__m64"]]],[5,"_mm_adds_pu16","","Adds packed unsigned 16-bit integers in `a` and `b` using…",null,[[["__m64"]],["__m64"]]],[5,"_m_paddusw","","Adds packed unsigned 16-bit integers in `a` and `b` using…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sub_pi8","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubb","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sub_pi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubw","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_sub_pi32","","Subtract packed 32-bit integers in `b` from packed 32-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubd","","Subtract packed 32-bit integers in `b` from packed 32-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_subs_pi8","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubsb","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_subs_pi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubsw","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m64"]],["__m64"]]],[5,"_mm_subs_pu8","","Subtract packed unsigned 8-bit integers in `b` from packed…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubusb","","Subtract packed unsigned 8-bit integers in `b` from packed…",null,[[["__m64"]],["__m64"]]],[5,"_mm_subs_pu16","","Subtract packed unsigned 16-bit integers in `b` from…",null,[[["__m64"]],["__m64"]]],[5,"_m_psubusw","","Subtract packed unsigned 16-bit integers in `b` from…",null,[[["__m64"]],["__m64"]]],[5,"_mm_packs_pi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m64"]],["__m64"]]],[5,"_mm_packs_pi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m64"]],["__m64"]]],[5,"_mm_cmpgt_pi8","","Compares whether each element of `a` is greater than the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_cmpgt_pi16","","Compares whether each element of `a` is greater than the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_cmpgt_pi32","","Compares whether each element of `a` is greater than the…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpackhi_pi16","","Unpacks the upper two elements from two `i16x4` vectors…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpackhi_pi8","","Unpacks the upper four elements from two `i8x8` vectors…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpacklo_pi8","","Unpacks the lower four elements from two `i8x8` vectors…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpacklo_pi16","","Unpacks the lower two elements from two `i16x4` vectors…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpackhi_pi32","","Unpacks the upper element from two `i32x2` vectors and…",null,[[["__m64"]],["__m64"]]],[5,"_mm_unpacklo_pi32","","Unpacks the lower element from two `i32x2` vectors and…",null,[[["__m64"]],["__m64"]]],[5,"_mm_set_pi16","","Sets packed 16-bit integers in dst with the supplied values.",null,[[["i16"]],["__m64"]]],[5,"_mm_set_pi32","","Sets packed 32-bit integers in dst with the supplied values.",null,[[["i32"]],["__m64"]]],[5,"_mm_set_pi8","","Sets packed 8-bit integers in dst with the supplied values.",null,[[["i8"]],["__m64"]]],[5,"_mm_set1_pi16","","Broadcasts 16-bit integer a to all all elements of dst.",null,[[["i16"]],["__m64"]]],[5,"_mm_set1_pi32","","Broadcasts 32-bit integer a to all all elements of dst.",null,[[["i32"]],["__m64"]]],[5,"_mm_set1_pi8","","Broadcasts 8-bit integer a to all all elements of dst.",null,[[["i8"]],["__m64"]]],[5,"_mm_setr_pi16","","Sets packed 16-bit integers in dst with the supplied…",null,[[["i16"]],["__m64"]]],[5,"_mm_setr_pi32","","Sets packed 32-bit integers in dst with the supplied…",null,[[["i32"]],["__m64"]]],[5,"_mm_setr_pi8","","Sets packed 8-bit integers in dst with the supplied values…",null,[[["i8"]],["__m64"]]],[5,"_mm_empty","","Empty the MMX state, which marks the x87 FPU registers as…",null,[[]]],[5,"_m_empty","","Empty the MMX state, which marks the x87 FPU registers as…",null,[[]]],[5,"_mm_cvtsi32_si64","","Copies 32-bit integer `a` to the lower elements of the…",null,[[["i32"]],["__m64"]]],[5,"_mm_cvtsi64_si32","","Return the lower 32-bit integer in `a`.",null,[[["__m64"]],["i32"]]],[5,"_mm_clmulepi64_si128","","Performs a carry-less multiplication of two 64-bit…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_aesdec_si128","","Performs one round of an AES decryption flow on data…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_aesdeclast_si128","","Performs the last round of an AES decryption flow on data…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_aesenc_si128","","Performs one round of an AES encryption flow on data…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_aesenclast_si128","","Performs the last round of an AES encryption flow on data…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_aesimc_si128","","Performs the `InvMixColumns` transformation on `a`.",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_aeskeygenassist_si128","","Assist in expanding the AES cipher key.",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_rdrand16_step","","Read a hardware generated 16-bit random value and store…",null,[[["u16"]],["i32"]]],[5,"_rdrand32_step","","Read a hardware generated 32-bit random value and store…",null,[[["u32"]],["i32"]]],[5,"_rdseed16_step","","Read a 16-bit NIST SP800-90B and SP800-90C compliant…",null,[[["u16"]],["i32"]]],[5,"_rdseed32_step","","Read a 32-bit NIST SP800-90B and SP800-90C compliant…",null,[[["u32"]],["i32"]]],[5,"_mm_sha1msg1_epu32","","Performs an intermediate calculation for the next four…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sha1msg2_epu32","","Performs the final calculation for the next four SHA1…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sha1nexte_epu32","","Calculate SHA1 state variable E after four rounds of…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sha1rnds4_epu32","","Performs four rounds of SHA1 operation using an initial…",null,[[["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_sha256msg1_epu32","","Performs an intermediate calculation for the next four…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sha256msg2_epu32","","Performs the final calculation for the next four SHA256…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_sha256rnds2_epu32","","Performs 2 rounds of SHA256 operation using an initial…",null,[[["__m128i"]],["__m128i"]]],[5,"_addcarry_u32","","Adds unsigned 32-bit integers `a` and `b` with unsigned…",null,[[["u32"],["u32"],["u8"]],["u8"]]],[5,"_addcarryx_u32","","Adds unsigned 32-bit integers `a` and `b` with unsigned…",null,[[["u32"],["u32"],["u8"]],["u8"]]],[5,"_subborrow_u32","","Adds unsigned 32-bit integers `a` and `b` with unsigned…",null,[[["u32"],["u32"],["u8"]],["u8"]]],[5,"_mm512_abs_epi32","","Computes the absolute values of packed 32-bit integers in…",null,[[["__m512i"]],["__m512i"]]],[5,"_mm512_mask_abs_epi32","","Computes the absolute value of packed 32-bit integers in…",null,[[["__m512i"],["i16"]],["__m512i"]]],[5,"_mm512_maskz_abs_epi32","","Computes the absolute value of packed 32-bit integers in…",null,[[["__m512i"],["i16"]],["__m512i"]]],[5,"_mm512_setzero_si512","","Returns vector of type `__m512i` with all elements set to…",null,[[],["__m512i"]]],[5,"_mm512_setr_epi32","","Sets packed 32-bit integers in `dst` with the supplied…",null,[[["i32"]],["__m512i"]]],[5,"_mm512_set1_epi64","","Broadcast 64-bit integer `a` to all elements of `dst`.",null,[[["i64"]],["__m512i"]]],[5,"_mm512_madd52hi_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m512i"]],["__m512i"]]],[5,"_mm512_madd52lo_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m512i"]],["__m512i"]]],[5,"_mm256_madd52hi_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm256_madd52lo_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m256i"]],["__m256i"]]],[5,"_mm_madd52hi_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_mm_madd52lo_epu64","","Multiply packed unsigned 52-bit integers in each 64-bit…",null,[[["__m128i"]],["__m128i"]]],[5,"_bittest","","Returns the bit in position `b` of the memory addressed by…",null,[[["i32"]],["u8"]]],[5,"_bittestandset","","Returns the bit in position `b` of the memory addressed by…",null,[[["i32"]],["u8"]]],[5,"_bittestandreset","","Returns the bit in position `b` of the memory addressed by…",null,[[["i32"]],["u8"]]],[5,"_bittestandcomplement","","Returns the bit in position `b` of the memory addressed by…",null,[[["i32"]],["u8"]]],[17,"_XBEGIN_STARTED","","Transaction successfully started.",null,null],[17,"_XABORT_EXPLICIT","","Transaction explicitly aborted with xabort. The parameter…",null,null],[17,"_XABORT_RETRY","","Transaction retry is possible.",null,null],[17,"_XABORT_CONFLICT","","Transaction abort due to a memory conflict with another…",null,null],[17,"_XABORT_CAPACITY","","Transaction abort due to the transaction using too much…",null,null],[17,"_XABORT_DEBUG","","Transaction abort due to a debug trap.",null,null],[17,"_XABORT_NESTED","","Transaction abort in a inner nested transaction.",null,null],[5,"_xbegin","","Specifies the start of a restricted transactional memory…",null,[[],["u32"]]],[5,"_xend","","Specifies the end of a restricted transactional memory…",null,[[]]],[5,"_xabort","","Forces a restricted transactional memory (RTM) region to…",null,[[["u32"]]]],[5,"_xtest","","Queries whether the processor is executing in a…",null,[[],["u8"]]],[5,"_xabort_code","","Retrieves the parameter passed to [`_xabort`] when…",null,[[["u32"]],["u32"]]],[5,"_mm_cvtph_ps","","Converts the 4 x 16-bit half-precision float values in the…",null,[[["__m128i"]],["__m128"]]],[5,"_mm256_cvtph_ps","","Converts the 8 x 16-bit half-precision float values in the…",null,[[["__m128i"]],["__m256"]]],[5,"_mm_cvtps_ph","","Converts the 4 x 32-bit float values in the 128-bit vector…",null,[[["__m128"],["i32"]],["__m128i"]]],[5,"_mm256_cvtps_ph","","Converts the 8 x 32-bit float values in the 256-bit vector…",null,[[["__m256"],["i32"]],["__m128i"]]],[5,"_fxsave64","","Saves the `x87` FPU, `MMX` technology, `XMM`, and `MXCSR`…",null,[[]]],[5,"_fxrstor64","","Restores the `XMM`, `MMX`, `MXCSR`, and `x87` FPU…",null,[[]]],[5,"_mm_cvtss_si64","","Converts the lowest 32 bit float in the input vector to a…",null,[[["__m128"]],["i64"]]],[5,"_mm_cvttss_si64","","Converts the lowest 32 bit float in the input vector to a…",null,[[["__m128"]],["i64"]]],[5,"_mm_cvtsi64_ss","","Converts a 64 bit integer to a 32 bit float. The result…",null,[[["i64"],["__m128"]],["__m128"]]],[5,"_mm_cvtsd_si64","","Converts the lower double-precision (64-bit)…",null,[[["__m128d"]],["i64"]]],[5,"_mm_cvtsd_si64x","","Alias for `_mm_cvtsd_si64`",null,[[["__m128d"]],["i64"]]],[5,"_mm_cvttsd_si64","","Converts the lower double-precision (64-bit)…",null,[[["__m128d"]],["i64"]]],[5,"_mm_cvttsd_si64x","","Alias for `_mm_cvttsd_si64`",null,[[["__m128d"]],["i64"]]],[5,"_mm_stream_si64","","Stores a 64-bit integer value in the specified memory…",null,[[["i64"]]]],[5,"_mm_cvtsi64_si128","","Returns a vector whose lowest element is `a` and all…",null,[[["i64"]],["__m128i"]]],[5,"_mm_cvtsi64x_si128","","Returns a vector whose lowest element is `a` and all…",null,[[["i64"]],["__m128i"]]],[5,"_mm_cvtsi128_si64","","Returns the lowest element of `a`.",null,[[["__m128i"]],["i64"]]],[5,"_mm_cvtsi128_si64x","","Returns the lowest element of `a`.",null,[[["__m128i"]],["i64"]]],[5,"_mm_cvtsi64_sd","","Returns `a` with its lower element replaced by `b` after…",null,[[["i64"],["__m128d"]],["__m128d"]]],[5,"_mm_cvtsi64x_sd","","Returns `a` with its lower element replaced by `b` after…",null,[[["i64"],["__m128d"]],["__m128d"]]],[5,"_mm_extract_epi64","","Extracts an 64-bit integer from `a` selected with `imm8`",null,[[["i32"],["__m128i"]],["i64"]]],[5,"_mm_insert_epi64","","Returns a copy of `a` with the 64-bit integer from `i`…",null,[[["i64"],["i32"],["__m128i"]],["__m128i"]]],[5,"_mm_crc32_u64","","Starting with the initial value in `crc`, return the…",null,[[["u64"]],["u64"]]],[5,"_xsave64","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xrstor64","","Performs a full or partial restore of the enabled…",null,[[["u64"]]]],[5,"_xsaveopt64","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xsavec64","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xsaves64","","Performs a full or partial save of the enabled processor…",null,[[["u64"]]]],[5,"_xrstors64","","Performs a full or partial restore of the enabled…",null,[[["u64"]]]],[5,"_lzcnt_u64","","Counts the leading most significant zero bits.",null,[[["u64"]],["u64"]]],[5,"_popcnt64","","Counts the bits that are set.",null,[[["i64"]],["i32"]]],[5,"_mm256_insert_epi64","","Copies `a` to result, and insert the 64-bit integer `i`…",null,[[["i64"],["__m256i"],["i32"]],["__m256i"]]],[5,"_bextr_u64","","Extracts bits in range [`start`, `start` + `length`) from…",null,[[["u32"],["u64"]],["u64"]]],[5,"_bextr2_u64","","Extracts bits of `a` specified by `control` into the least…",null,[[["u64"]],["u64"]]],[5,"_andn_u64","","Bitwise logical `AND` of inverted `a` with `b`.",null,[[["u64"]],["u64"]]],[5,"_blsi_u64","","Extracts lowest set isolated bit.",null,[[["u64"]],["u64"]]],[5,"_blsmsk_u64","","Gets mask up to lowest set bit.",null,[[["u64"]],["u64"]]],[5,"_blsr_u64","","Resets the lowest set bit of `x`.",null,[[["u64"]],["u64"]]],[5,"_tzcnt_u64","","Counts the number of trailing least significant zero bits.",null,[[["u64"]],["u64"]]],[5,"_mm_tzcnt_64","","Counts the number of trailing least significant zero bits.",null,[[["u64"]],["i64"]]],[5,"_mulx_u64","","Unsigned multiply without affecting flags.",null,[[["u64"],["u64"]],["u64"]]],[5,"_bzhi_u64","","Zeroes higher bits of `a` >= `index`.",null,[[["u32"],["u64"]],["u64"]]],[5,"_pdep_u64","","Scatter contiguous low order bits of `a` to the result at…",null,[[["u64"]],["u64"]]],[5,"_pext_u64","","Gathers the bits of `x` specified by the `mask` into the…",null,[[["u64"]],["u64"]]],[5,"_mm256_extract_epi64","","Extracts a 64-bit integer from `a`, selected with `imm8`.",null,[[["__m256i"],["i32"]],["i64"]]],[5,"_bswap64","","Returns an integer with the reversed byte order of x",null,[[["i64"]],["i64"]]],[5,"_rdrand64_step","","Read a hardware generated 64-bit random value and store…",null,[[["u64"]],["i32"]]],[5,"_rdseed64_step","","Read a 64-bit NIST SP800-90B and SP800-90C compliant…",null,[[["u64"]],["i32"]]],[5,"cmpxchg16b","","Compares and exchange 16 bytes (128 bits) of data…",null,[[["u128"],["ordering"]],["u128"]]],[5,"_addcarry_u64","","Adds unsigned 64-bit integers `a` and `b` with unsigned…",null,[[["u64"],["u64"],["u8"]],["u8"]]],[5,"_addcarryx_u64","","Adds unsigned 64-bit integers `a` and `b` with unsigned…",null,[[["u64"],["u64"],["u8"]],["u8"]]],[5,"_subborrow_u64","","Adds unsigned 64-bit integers `a` and `b` with unsigned…",null,[[["u64"],["u64"],["u8"]],["u8"]]],[5,"_bittest64","","Returns the bit in position `b` of the memory addressed by…",null,[[["i64"]],["u8"]]],[5,"_bittestandset64","","Returns the bit in position `b` of the memory addressed by…",null,[[["i64"]],["u8"]]],[5,"_bittestandreset64","","Returns the bit in position `b` of the memory addressed by…",null,[[["i64"]],["u8"]]],[5,"_bittestandcomplement64","","Returns the bit in position `b` of the memory addressed by…",null,[[["i64"]],["u8"]]],[3,"__m64","","64-bit wide integer vector type, x86-specific",null,null],[3,"__m128i","","128-bit wide integer vector type, x86-specific",null,null],[3,"__m128","","128-bit wide set of four `f32` types, x86-specific",null,null],[3,"__m128d","","128-bit wide set of two `f64` types, x86-specific",null,null],[3,"__m256i","","256-bit wide integer vector type, x86-specific",null,null],[3,"__m256","","256-bit wide set of eight `f32` types, x86-specific",null,null],[3,"__m256d","","256-bit wide set of four `f64` types, x86-specific",null,null],[3,"__m512i","","512-bit wide integer vector type, x86-specific",null,null],[3,"__m512","","512-bit wide set of sixteen `f32` types, x86-specific",null,null],[3,"__m512d","","512-bit wide set of eight `f64` types, x86-specific",null,null],[3,"CpuidResult","","Result of the `cpuid` instruction.",null,null],[12,"eax","","EAX register.",102,null],[12,"ebx","","EBX register.",102,null],[12,"ecx","","ECX register.",102,null],[12,"edx","","EDX register.",102,null],[0,"array","no_std_compat","Implementations of things like `Eq` for fixed-length…",null,null],[8,"FixedSizeArray","no_std_compat::array","Utility trait implemented only on arrays of fixed size",null,null],[10,"as_slice","","Converts the array to immutable slice",103,[[["self"]]]],[10,"as_mut_slice","","Converts the array to mutable slice",103,[[["self"]]]],[3,"TryFromSliceError","","The error type returned when a conversion from a slice to…",null,null],[8,"LengthAtMost32","","Implemented for lengths where trait impls are allowed on…",null,null],[3,"IntoIter","","A by-value [array] iterator.",null,null],[0,"cell","no_std_compat","Shareable mutable containers.",null,null],[3,"Cell","no_std_compat::cell","A mutable memory location.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow…",null,null],[3,"BorrowError","","An error returned by `RefCell::try_borrow`.",null,null],[3,"BorrowMutError","","An error returned by `RefCell::try_borrow_mut`.",null,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.…",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a…",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"char","no_std_compat","A character type.",null,null],[17,"MAX","no_std_compat::char","The highest valid code point a `char` can have.",null,null],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to…",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode…",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EscapeDebug","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"ToLowercase","","Returns an iterator that yields the lowercase equivalent…",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent…",null,null],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,[[["u32"]],["char"]]],[3,"CharTryFromError","","The error type returned when a conversion from u32 to char…",null,null],[3,"ParseCharError","","An error which can be returned when parsing a char.",null,null],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,[[["u32"]],[["option",["char"]],["char"]]]],[5,"from_u32","","Converts a `u32` to a `char`.",null,[[["u32"]],[["option",["char"]],["char"]]]],[5,"decode_utf16","","Creates an iterator over the UTF-16 encoded code points in…",null,[[["i"]],["decodeutf16"]]],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from…",null,null],[3,"DecodeUtf16Error","","An error that can be returned when decoding UTF-16 code…",null,null],[3,"UnicodeVersion","","Represents a Unicode Version.",null,null],[12,"major","","Major version.",104,null],[12,"minor","","Minor version.",104,null],[12,"micro","","Micro (or Update) version.",104,null],[17,"UNICODE_VERSION","","The version of Unicode that the Unicode parts of `char`…",null,null],[0,"clone","no_std_compat","The `Clone` trait for types that cannot be 'implicitly…",null,null],[8,"Clone","no_std_compat::clone","A common trait for the ability to explicitly duplicate an…",null,null],[10,"clone","","Returns a copy of the value.",15,[[["self"]],["self"]]],[11,"clone_from","","Performs copy-assignment from `source`.",15,[[["self"],["self"]]]],[14,"Clone","","Derive macro generating an impl of the trait `Clone`.",null,null],[0,"cmp","no_std_compat","Functionality for ordering and comparison.",null,null],[8,"PartialEq","no_std_compat::cmp","Trait for equality comparisons which are partial…",null,null],[10,"eq","","This method tests for `self` and `other` values to be…",18,[[["rhs"],["self"]],["bool"]]],[11,"ne","","This method tests for `!=`.",18,[[["rhs"],["self"]],["bool"]]],[8,"Eq","","Trait for equality comparisons which are equivalence…",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two…",null,null],[13,"Less","","An ordering where a compared value is less than another.",105,null],[13,"Equal","","An ordering where a compared value is equal to another.",105,null],[13,"Greater","","An ordering where a compared value is greater than another.",105,null],[3,"Reverse","","A helper struct for reverse ordering.",null,null],[12,"0","","",106,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an [`Ordering`] between `self` and…",17,[[["self"]],["ordering"]]],[11,"max","","Compares and returns the maximum of two values.",17,[[],["self"]]],[11,"min","","Compares and returns the minimum of two values.",17,[[],["self"]]],[11,"clamp","","Restrict a value to a certain interval.",17,[[],["self"]]],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other`…",19,[[["rhs"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","This method tests less than (for `self` and `other`) and…",19,[[["rhs"],["self"]],["bool"]]],[11,"le","","This method tests less than or equal to (for `self` and…",19,[[["rhs"],["self"]],["bool"]]],[11,"gt","","This method tests greater than (for `self` and `other`)…",19,[[["rhs"],["self"]],["bool"]]],[11,"ge","","This method tests greater than or equal to (for `self` and…",19,[[["rhs"],["self"]],["bool"]]],[5,"min","","Compares and returns the minimum of two values.",null,[[["t"]],["t"]]],[5,"min_by","","Returns the minimum of two values with respect to the…",null,[[["t"],["f"]],["t"]]],[5,"min_by_key","","Returns the element that gives the minimum value from the…",null,[[["t"],["f"]],["t"]]],[5,"max","","Compares and returns the maximum of two values.",null,[[["t"]],["t"]]],[5,"max_by","","Returns the maximum of two values with respect to the…",null,[[["t"],["f"]],["t"]]],[5,"max_by_key","","Returns the element that gives the maximum value from the…",null,[[["t"],["f"]],["t"]]],[14,"PartialEq","","Derive macro generating an impl of the trait `PartialEq`.",null,null],[14,"Eq","","Derive macro generating an impl of the trait `Eq`.",null,null],[14,"Ord","","Derive macro generating an impl of the trait `Ord`.",null,null],[14,"PartialOrd","","Derive macro generating an impl of the trait `PartialOrd`.",null,null],[0,"convert","no_std_compat","Traits for conversions between types.",null,null],[5,"identity","no_std_compat::convert","The identity function.",null,[[["t"]],["t"]]],[8,"AsRef","","Used to do a cheap reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",5,[[["self"]],["t"]]],[8,"AsMut","","Used to do a cheap mutable-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",4,[[["self"]],["t"]]],[8,"Into","","A value-to-value conversion that consumes the input value.…",null,null],[10,"into","","Performs the conversion.",7,[[],["t"]]],[8,"From","","Used to do value-to-value conversions while consuming the…",null,null],[10,"from","","Performs the conversion.",6,[[["t"]],["self"]]],[8,"TryInto","","An attempted conversion that consumes `self`, which may or…",null,null],[16,"Error","","The type returned in the event of a conversion error.",107,null],[10,"try_into","","Performs the conversion.",107,[[],["result"]]],[8,"TryFrom","","Simple and safe type conversions that may fail in a…",null,null],[16,"Error","","The type returned in the event of a conversion error.",108,null],[10,"try_from","","Performs the conversion.",108,[[["t"]],["result"]]],[4,"Infallible","","The error type for errors that can never happen.",null,null],[8,"FloatToInt","","Supporting trait for inherent methods of `f32` and `f64`…",null,null],[0,"default","no_std_compat","The `Default` trait for types which may have meaningful…",null,null],[8,"Default","no_std_compat::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",16,[[],["self"]]],[14,"Default","","Derive macro generating an impl of the trait `Default`.",null,null],[0,"hash","no_std_compat","Generic hashing support.",null,null],[8,"Hash","no_std_compat::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the given [`Hasher`].",109,[[["self"],["h"]]]],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",109,[[["h"]]]],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",null,null],[10,"finish","","Returns the hash value for the values written so far.",110,[[["self"]],["u64"]]],[10,"write","","Writes some data into this `Hasher`.",110,[[["self"]]]],[11,"write_u8","","Writes a single `u8` into this hasher.",110,[[["self"],["u8"]]]],[11,"write_u16","","Writes a single `u16` into this hasher.",110,[[["u16"],["self"]]]],[11,"write_u32","","Writes a single `u32` into this hasher.",110,[[["self"],["u32"]]]],[11,"write_u64","","Writes a single `u64` into this hasher.",110,[[["self"],["u64"]]]],[11,"write_u128","","Writes a single `u128` into this hasher.",110,[[["self"],["u128"]]]],[11,"write_usize","","Writes a single `usize` into this hasher.",110,[[["self"],["usize"]]]],[11,"write_i8","","Writes a single `i8` into this hasher.",110,[[["self"],["i8"]]]],[11,"write_i16","","Writes a single `i16` into this hasher.",110,[[["self"],["i16"]]]],[11,"write_i32","","Writes a single `i32` into this hasher.",110,[[["self"],["i32"]]]],[11,"write_i64","","Writes a single `i64` into this hasher.",110,[[["i64"],["self"]]]],[11,"write_i128","","Writes a single `i128` into this hasher.",110,[[["self"],["i128"]]]],[11,"write_isize","","Writes a single `isize` into this hasher.",110,[[["isize"],["self"]]]],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",null,null],[16,"Hasher","","Type of the hasher that will be created.",111,null],[10,"build_hasher","","Creates a new hasher.",111,[[["self"]]]],[3,"BuildHasherDefault","","Used to create a default [`BuildHasher`] instance for…",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[14,"Hash","","Derive macro generating an impl of the trait `Hash`.",null,null],[0,"hint","no_std_compat","Hints to compiler that affects how code should be emitted…",null,null],[5,"unreachable_unchecked","no_std_compat::hint","Informs the compiler that this point in the code is not…",null,[[]]],[5,"spin_loop","","Emits a machine instruction hinting to the processor that…",null,[[]]],[5,"black_box","","An identity function that hints to the compiler to be…",null,[[["t"]],["t"]]],[0,"i128","no_std_compat","The 128-bit signed integer type.",null,null],[17,"MIN","no_std_compat::i128","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"i16","no_std_compat","The 16-bit signed integer type.",null,null],[17,"MIN","no_std_compat::i16","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"i32","no_std_compat","The 32-bit signed integer type.",null,null],[17,"MIN","no_std_compat::i32","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"i64","no_std_compat","The 64-bit signed integer type.",null,null],[17,"MIN","no_std_compat::i64","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"i8","no_std_compat","The 8-bit signed integer type.",null,null],[17,"MIN","no_std_compat::i8","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"intrinsics","no_std_compat","Compiler intrinsics.",null,null],[5,"atomic_cxchg","no_std_compat::intrinsics","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchg_acq","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchg_rel","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchg_acqrel","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchg_relaxed","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchg_failrelaxed","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchg_failacq","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchg_acq_failrelaxed","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchg_acqrel_failrelaxed","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak_acq","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak_rel","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak_acqrel","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak_relaxed","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak_failrelaxed","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak_failacq","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak_acq_failrelaxed","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_cxchgweak_acqrel_failrelaxed","","Stores a value if the current value is the same as the…",null,[[["t"]]]],[5,"atomic_load","","Loads the current value of the pointer.",null,[[],["t"]]],[5,"atomic_load_acq","","Loads the current value of the pointer.",null,[[],["t"]]],[5,"atomic_load_relaxed","","Loads the current value of the pointer.",null,[[],["t"]]],[5,"atomic_load_unordered","","",null,[[],["t"]]],[5,"atomic_store","","Stores the value at the specified memory location.",null,[[["t"]]]],[5,"atomic_store_rel","","Stores the value at the specified memory location.",null,[[["t"]]]],[5,"atomic_store_relaxed","","Stores the value at the specified memory location.",null,[[["t"]]]],[5,"atomic_store_unordered","","",null,[[["t"]]]],[5,"atomic_xchg","","Stores the value at the specified memory location,…",null,[[["t"]],["t"]]],[5,"atomic_xchg_acq","","Stores the value at the specified memory location,…",null,[[["t"]],["t"]]],[5,"atomic_xchg_rel","","Stores the value at the specified memory location,…",null,[[["t"]],["t"]]],[5,"atomic_xchg_acqrel","","Stores the value at the specified memory location,…",null,[[["t"]],["t"]]],[5,"atomic_xchg_relaxed","","Stores the value at the specified memory location,…",null,[[["t"]],["t"]]],[5,"atomic_xadd","","Adds to the current value, returning the previous value.",null,[[["t"]],["t"]]],[5,"atomic_xadd_acq","","Adds to the current value, returning the previous value.",null,[[["t"]],["t"]]],[5,"atomic_xadd_rel","","Adds to the current value, returning the previous value.",null,[[["t"]],["t"]]],[5,"atomic_xadd_acqrel","","Adds to the current value, returning the previous value.",null,[[["t"]],["t"]]],[5,"atomic_xadd_relaxed","","Adds to the current value, returning the previous value.",null,[[["t"]],["t"]]],[5,"atomic_xsub","","Subtract from the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xsub_acq","","Subtract from the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xsub_rel","","Subtract from the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xsub_acqrel","","Subtract from the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xsub_relaxed","","Subtract from the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_and","","Bitwise and with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_and_acq","","Bitwise and with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_and_rel","","Bitwise and with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_and_acqrel","","Bitwise and with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_and_relaxed","","Bitwise and with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_nand","","Bitwise nand with the current value, returning the…",null,[[["t"]],["t"]]],[5,"atomic_nand_acq","","Bitwise nand with the current value, returning the…",null,[[["t"]],["t"]]],[5,"atomic_nand_rel","","Bitwise nand with the current value, returning the…",null,[[["t"]],["t"]]],[5,"atomic_nand_acqrel","","Bitwise nand with the current value, returning the…",null,[[["t"]],["t"]]],[5,"atomic_nand_relaxed","","Bitwise nand with the current value, returning the…",null,[[["t"]],["t"]]],[5,"atomic_or","","Bitwise or with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_or_acq","","Bitwise or with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_or_rel","","Bitwise or with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_or_acqrel","","Bitwise or with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_or_relaxed","","Bitwise or with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xor","","Bitwise xor with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xor_acq","","Bitwise xor with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xor_rel","","Bitwise xor with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xor_acqrel","","Bitwise xor with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_xor_relaxed","","Bitwise xor with the current value, returning the previous…",null,[[["t"]],["t"]]],[5,"atomic_max","","Maximum with the current value using a signed comparison.",null,[[["t"]],["t"]]],[5,"atomic_max_acq","","Maximum with the current value using a signed comparison.",null,[[["t"]],["t"]]],[5,"atomic_max_rel","","Maximum with the current value using a signed comparison.",null,[[["t"]],["t"]]],[5,"atomic_max_acqrel","","Maximum with the current value using a signed comparison.",null,[[["t"]],["t"]]],[5,"atomic_max_relaxed","","Maximum with the current value.",null,[[["t"]],["t"]]],[5,"atomic_min","","Minimum with the current value using a signed comparison.",null,[[["t"]],["t"]]],[5,"atomic_min_acq","","Minimum with the current value using a signed comparison.",null,[[["t"]],["t"]]],[5,"atomic_min_rel","","Minimum with the current value using a signed comparison.",null,[[["t"]],["t"]]],[5,"atomic_min_acqrel","","Minimum with the current value using a signed comparison.",null,[[["t"]],["t"]]],[5,"atomic_min_relaxed","","Minimum with the current value using a signed comparison.",null,[[["t"]],["t"]]],[5,"atomic_umin","","Minimum with the current value using an unsigned comparison.",null,[[["t"]],["t"]]],[5,"atomic_umin_acq","","Minimum with the current value using an unsigned comparison.",null,[[["t"]],["t"]]],[5,"atomic_umin_rel","","Minimum with the current value using an unsigned comparison.",null,[[["t"]],["t"]]],[5,"atomic_umin_acqrel","","Minimum with the current value using an unsigned comparison.",null,[[["t"]],["t"]]],[5,"atomic_umin_relaxed","","Minimum with the current value using an unsigned comparison.",null,[[["t"]],["t"]]],[5,"atomic_umax","","Maximum with the current value using an unsigned comparison.",null,[[["t"]],["t"]]],[5,"atomic_umax_acq","","Maximum with the current value using an unsigned comparison.",null,[[["t"]],["t"]]],[5,"atomic_umax_rel","","Maximum with the current value using an unsigned comparison.",null,[[["t"]],["t"]]],[5,"atomic_umax_acqrel","","Maximum with the current value using an unsigned comparison.",null,[[["t"]],["t"]]],[5,"atomic_umax_relaxed","","Maximum with the current value using an unsigned comparison.",null,[[["t"]],["t"]]],[5,"prefetch_read_data","","The `prefetch` intrinsic is a hint to the code generator…",null,[[["i32"]]]],[5,"prefetch_write_data","","The `prefetch` intrinsic is a hint to the code generator…",null,[[["i32"]]]],[5,"prefetch_read_instruction","","The `prefetch` intrinsic is a hint to the code generator…",null,[[["i32"]]]],[5,"prefetch_write_instruction","","The `prefetch` intrinsic is a hint to the code generator…",null,[[["i32"]]]],[5,"atomic_fence","","An atomic fence.",null,[[]]],[5,"atomic_fence_acq","","An atomic fence.",null,[[]]],[5,"atomic_fence_rel","","An atomic fence.",null,[[]]],[5,"atomic_fence_acqrel","","An atomic fence.",null,[[]]],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,[[]]],[5,"atomic_singlethreadfence_acq","","A compiler-only memory barrier.",null,[[]]],[5,"atomic_singlethreadfence_rel","","A compiler-only memory barrier.",null,[[]]],[5,"atomic_singlethreadfence_acqrel","","A compiler-only memory barrier.",null,[[]]],[5,"rustc_peek","","Magic intrinsic that derives its meaning from attributes…",null,[[["t"]],["t"]]],[5,"abort","","Aborts the execution of the process.",null,[[]]],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,…",null,[[]]],[5,"assume","","Informs the optimizer that a condition is always true. If…",null,[[["bool"]]]],[5,"likely","","Hints to the compiler that branch condition is likely to…",null,[[["bool"]],["bool"]]],[5,"unlikely","","Hints to the compiler that branch condition is likely to…",null,[[["bool"]],["bool"]]],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,[[]]],[5,"size_of","","The size of a type in bytes.",null,[[],["usize"]]],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,[[["t"]]]],[5,"min_align_of","","The minimum alignment of a type.",null,[[],["usize"]]],[5,"pref_align_of","","",null,[[],["usize"]]],[5,"size_of_val","","The size of the referenced value in bytes.",null,[[["t"]],["usize"]]],[5,"min_align_of_val","","The minimum alignment of the type of the value that `val`…",null,[[["t"]],["usize"]]],[5,"type_name","","Gets a static string slice containing the name of a type.",null,[[],["str"]]],[5,"type_id","","Gets an identifier which is globally unique to the…",null,[[],["u64"]]],[5,"panic_if_uninhabited","","A guard for unsafe functions that cannot ever be executed…",null,[[]]],[5,"caller_location","","Gets a reference to a static `Location` indicating where…",null,[[],["location"]]],[5,"init","","Creates a value initialized to zero.",null,[[],["t"]]],[5,"uninit","","Creates an uninitialized value.",null,[[],["t"]]],[5,"forget","","Moves a value out of scope without running drop glue.",null,[[["t"]]]],[5,"transmute","","Reinterprets the bits of a value of one type as another…",null,[[["t"]],["u"]]],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires…",null,[[],["bool"]]],[5,"offset","","Calculates the offset from a pointer.",null,[[["isize"]]]],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,[[["isize"]]]],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*`…",null,[[["usize"]]]],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*`…",null,[[["usize"]]]],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*`…",null,[[["u8"],["usize"]]]],[5,"volatile_load","","Performs a volatile load from the `src` pointer.",null,[[],["t"]]],[5,"volatile_store","","Performs a volatile store to the `dst` pointer.",null,[[["t"]]]],[5,"unaligned_volatile_load","","Performs a volatile load from the `src` pointer The…",null,[[],["t"]]],[5,"unaligned_volatile_store","","Performs a volatile store to the `dst` pointer. The…",null,[[["t"]]]],[5,"sqrtf32","","Returns the square root of an `f32`",null,[[["f32"]],["f32"]]],[5,"sqrtf64","","Returns the square root of an `f64`",null,[[["f64"]],["f64"]]],[5,"powif32","","Raises an `f32` to an integer power.",null,[[["f32"],["i32"]],["f32"]]],[5,"powif64","","Raises an `f64` to an integer power.",null,[[["f64"],["i32"]],["f64"]]],[5,"sinf32","","Returns the sine of an `f32`.",null,[[["f32"]],["f32"]]],[5,"sinf64","","Returns the sine of an `f64`.",null,[[["f64"]],["f64"]]],[5,"cosf32","","Returns the cosine of an `f32`.",null,[[["f32"]],["f32"]]],[5,"cosf64","","Returns the cosine of an `f64`.",null,[[["f64"]],["f64"]]],[5,"powf32","","Raises an `f32` to an `f32` power.",null,[[["f32"]],["f32"]]],[5,"powf64","","Raises an `f64` to an `f64` power.",null,[[["f64"]],["f64"]]],[5,"expf32","","Returns the exponential of an `f32`.",null,[[["f32"]],["f32"]]],[5,"expf64","","Returns the exponential of an `f64`.",null,[[["f64"]],["f64"]]],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,[[["f32"]],["f32"]]],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,[[["f64"]],["f64"]]],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,[[["f32"]],["f32"]]],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,[[["f64"]],["f64"]]],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,[[["f32"]],["f32"]]],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,[[["f64"]],["f64"]]],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,[[["f32"]],["f32"]]],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,[[["f64"]],["f64"]]],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,[[["f32"]],["f32"]]],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,[[["f64"]],["f64"]]],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,[[["f32"]],["f32"]]],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,[[["f64"]],["f64"]]],[5,"minnumf32","","Returns the minimum of two `f32` values.",null,[[["f32"]],["f32"]]],[5,"minnumf64","","Returns the minimum of two `f64` values.",null,[[["f64"]],["f64"]]],[5,"maxnumf32","","Returns the maximum of two `f32` values.",null,[[["f32"]],["f32"]]],[5,"maxnumf64","","Returns the maximum of two `f64` values.",null,[[["f64"]],["f64"]]],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,[[["f32"]],["f32"]]],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,[[["f64"]],["f64"]]],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,[[["f32"]],["f32"]]],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,[[["f64"]],["f64"]]],[5,"ceilf32","","Returns the smallest integer greater than or equal to an…",null,[[["f32"]],["f32"]]],[5,"ceilf64","","Returns the smallest integer greater than or equal to an…",null,[[["f64"]],["f64"]]],[5,"truncf32","","Returns the integer part of an `f32`.",null,[[["f32"]],["f32"]]],[5,"truncf64","","Returns the integer part of an `f64`.",null,[[["f64"]],["f64"]]],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an…",null,[[["f32"]],["f32"]]],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an…",null,[[["f64"]],["f64"]]],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,[[["f32"]],["f32"]]],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,[[["f64"]],["f64"]]],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way…",null,[[["f32"]],["f32"]]],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way…",null,[[["f64"]],["f64"]]],[5,"fadd_fast","","Float addition that allows optimizations based on…",null,[[["t"]],["t"]]],[5,"fsub_fast","","Float subtraction that allows optimizations based on…",null,[[["t"]],["t"]]],[5,"fmul_fast","","Float multiplication that allows optimizations based on…",null,[[["t"]],["t"]]],[5,"fdiv_fast","","Float division that allows optimizations based on…",null,[[["t"]],["t"]]],[5,"frem_fast","","Float remainder that allows optimizations based on…",null,[[["t"]],["t"]]],[5,"float_to_int_approx_unchecked","","Convert with LLVM’s fptoui/fptosi, which may return undef…",null,[[["float"]],["int"]]],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,[[["t"]],["t"]]],[5,"ctlz","","Returns the number of leading unset bits (zeroes) in an…",null,[[["t"]],["t"]]],[5,"ctlz_nonzero","","Like `ctlz`, but extra-unsafe as it returns `undef` when…",null,[[["t"]],["t"]]],[5,"cttz","","Returns the number of trailing unset bits (zeroes) in an…",null,[[["t"]],["t"]]],[5,"cttz_nonzero","","Like `cttz`, but extra-unsafe as it returns `undef` when…",null,[[["t"]],["t"]]],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,[[["t"]],["t"]]],[5,"bitreverse","","Reverses the bits in an integer type `T`.",null,[[["t"]],["t"]]],[5,"add_with_overflow","","Performs checked integer addition.",null,[[["t"]]]],[5,"sub_with_overflow","","Performs checked integer subtraction",null,[[["t"]]]],[5,"mul_with_overflow","","Performs checked integer multiplication",null,[[["t"]]]],[5,"exact_div","","Performs an exact division, resulting in undefined…",null,[[["t"]],["t"]]],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined…",null,[[["t"]],["t"]]],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting…",null,[[["t"]],["t"]]],[5,"unchecked_shl","","Performs an unchecked left shift, resulting in undefined…",null,[[["t"]],["t"]]],[5,"unchecked_shr","","Performs an unchecked right shift, resulting in undefined…",null,[[["t"]],["t"]]],[5,"unchecked_add","","Returns the result of an unchecked addition, resulting in…",null,[[["t"]],["t"]]],[5,"unchecked_sub","","Returns the result of an unchecked subtraction, resulting…",null,[[["t"]],["t"]]],[5,"unchecked_mul","","Returns the result of an unchecked multiplication,…",null,[[["t"]],["t"]]],[5,"rotate_left","","Performs rotate left.",null,[[["t"]],["t"]]],[5,"rotate_right","","Performs rotate right.",null,[[["t"]],["t"]]],[5,"wrapping_add","","Returns (a + b) mod 2N, where N is the width of T in bits.",null,[[["t"]],["t"]]],[5,"wrapping_sub","","Returns (a - b) mod 2N, where N is the width of T in bits.",null,[[["t"]],["t"]]],[5,"wrapping_mul","","Returns (a * b) mod 2N, where N is the width of T in bits.",null,[[["t"]],["t"]]],[5,"saturating_add","","Computes `a + b`, while saturating at numeric bounds.",null,[[["t"]],["t"]]],[5,"saturating_sub","","Computes `a - b`, while saturating at numeric bounds.",null,[[["t"]],["t"]]],[5,"discriminant_value","","Returns the value of the discriminant for the variant in…",null,[[["t"]],["u64"]]],[5,"try","","Rust's \"try catch\" construct which invokes the function…",null,[[],["i32"]]],[5,"nontemporal_store","","Emits a `!nontemporal` store according to LLVM (see their…",null,[[["t"]]]],[5,"ptr_offset_from","","See documentation of `<*const T>::offset_from` for details.",null,[[],["isize"]]],[5,"miri_start_panic","","Internal hook used by Miri to implement unwinding.…",null,[[]]],[5,"copy_nonoverlapping","","Copies `count * size_of::<T>()` bytes from `src` to `dst`.…",null,[[["usize"]]]],[5,"copy","","Copies `count * size_of::<T>()` bytes from `src` to `dst`.…",null,[[["usize"]]]],[5,"write_bytes","","Sets `count * size_of::<T>()` bytes of memory starting at…",null,[[["u8"],["usize"]]]],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,[[]]],[0,"isize","no_std_compat","The pointer-sized signed integer type.",null,null],[17,"MIN","no_std_compat::isize","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"iter","no_std_compat","Composable external iteration.",null,null],[8,"Iterator","no_std_compat::iter","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",12,null],[10,"next","","Advances the iterator and returns the next value.",12,[[["self"]],["option"]]],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",12,[[["self"]]]],[11,"count","","Consumes the iterator, counting the number of iterations…",12,[[],["usize"]]],[11,"last","","Consumes the iterator, returning the last element.",12,[[],["option"]]],[11,"nth","","Returns the `n`th element of the iterator.",12,[[["self"],["usize"]],["option"]]],[11,"step_by","","Creates an iterator starting at the same point, but…",12,[[["usize"]],["stepby"]]],[11,"chain","","Takes two iterators and creates a new iterator over both…",12,[[["u"]],["chain"]]],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",12,[[["u"]],["zip"]]],[11,"map","","Takes a closure and creates an iterator which calls that…",12,[[["f"]],["map"]]],[11,"for_each","","Calls a closure on each element of an iterator.",12,[[["f"]]]],[11,"filter","","Creates an iterator which uses a closure to determine if…",12,[[["p"]],["filter"]]],[11,"filter_map","","Creates an iterator that both filters and maps.",12,[[["f"]],["filtermap"]]],[11,"enumerate","","Creates an iterator which gives the current iteration…",12,[[],["enumerate"]]],[11,"peekable","","Creates an iterator which can use `peek` to look at the…",12,[[],["peekable"]]],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a…",12,[[["p"]],["skipwhile"]]],[11,"take_while","","Creates an iterator that yields elements based on a…",12,[[["p"]],["takewhile"]]],[11,"map_while","","Creates an iterator that both yields elements based on a…",12,[[["p"]],["mapwhile"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",12,[[["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields its first `n` elements.",12,[[["usize"]],["take"]]],[11,"scan","","An iterator adaptor similar to [`fold`] that holds…",12,[[["f"],["st"]],["scan"]]],[11,"flat_map","","Creates an iterator that works like map, but flattens…",12,[[["f"]],["flatmap"]]],[11,"flatten","","Creates an iterator that flattens nested structure.",12,[[],["flatten"]]],[11,"fuse","","Creates an iterator which ends after the first [`None`].",12,[[],["fuse"]]],[11,"inspect","","Does something with each element of an iterator, passing…",12,[[["f"]],["inspect"]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",12,[[["self"]],["self"]]],[11,"collect","","Transforms an iterator into a collection.",12,[[],["b"]]],[11,"partition","","Consumes an iterator, creating two collections from it.",12,[[["f"]]]],[11,"partition_in_place","","Reorders the elements of this iterator in-place according…",12,[[["p"]],["usize"]]],[11,"is_partitioned","","Checks if the elements of this iterator are partitioned…",12,[[["p"]],["bool"]]],[11,"try_fold","","An iterator method that applies a function as long as it…",12,[[["self"],["b"],["f"]],["r"]]],[11,"try_for_each","","An iterator method that applies a fallible function to…",12,[[["self"],["f"]],["r"]]],[11,"fold","","An iterator method that applies a function, producing a…",12,[[["b"],["f"]],["b"]]],[11,"all","","Tests if every element of the iterator matches a predicate.",12,[[["self"],["f"]],["bool"]]],[11,"any","","Tests if any element of the iterator matches a predicate.",12,[[["self"],["f"]],["bool"]]],[11,"find","","Searches for an element of an iterator that satisfies a…",12,[[["self"],["p"]],["option"]]],[11,"find_map","","Applies function to the elements of iterator and returns…",12,[[["self"],["f"]],["option"]]],[11,"try_find","","Applies function to the elements of iterator and returns…",12,[[["self"],["f"]],[["option"],["result",["option"]]]]],[11,"position","","Searches for an element in an iterator, returning its index.",12,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","Searches for an element in an iterator from the right,…",12,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"max","","Returns the maximum element of an iterator.",12,[[],["option"]]],[11,"min","","Returns the minimum element of an iterator.",12,[[],["option"]]],[11,"max_by_key","","Returns the element that gives the maximum value from the…",12,[[["f"]],["option"]]],[11,"max_by","","Returns the element that gives the maximum value with…",12,[[["f"]],["option"]]],[11,"min_by_key","","Returns the element that gives the minimum value from the…",12,[[["f"]],["option"]]],[11,"min_by","","Returns the element that gives the minimum value with…",12,[[["f"]],["option"]]],[11,"rev","","Reverses an iterator's direction.",12,[[],["rev"]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",12,[[]]],[11,"copied","","Creates an iterator which copies all of its elements.",12,[[],["copied"]]],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",12,[[],["cloned"]]],[11,"cycle","","Repeats an iterator endlessly.",12,[[],["cycle"]]],[11,"sum","","Sums the elements of an iterator.",12,[[],["s"]]],[11,"product","","Iterates over the entire iterator, multiplying all the…",12,[[],["p"]]],[11,"cmp","","Lexicographically compares the elements of this `Iterator`…",12,[[["i"]],["ordering"]]],[11,"cmp_by","","Lexicographically compares the elements of this `Iterator`…",12,[[["i"],["f"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator`…",12,[[["i"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp_by","","Lexicographically compares the elements of this `Iterator`…",12,[[["i"],["f"]],[["option",["ordering"]],["ordering"]]]],[11,"eq","","Determines if the elements of this `Iterator` are equal to…",12,[[["i"]],["bool"]]],[11,"eq_by","","Determines if the elements of this `Iterator` are equal to…",12,[[["i"],["f"]],["bool"]]],[11,"ne","","Determines if the elements of this `Iterator` are unequal…",12,[[["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `Iterator` are…",12,[[["i"]],["bool"]]],[11,"le","","Determines if the elements of this `Iterator` are…",12,[[["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `Iterator` are…",12,[[["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `Iterator` are…",12,[[["i"]],["bool"]]],[11,"is_sorted","","Checks if the elements of this iterator are sorted.",12,[[],["bool"]]],[11,"is_sorted_by","","Checks if the elements of this iterator are sorted using…",12,[[["f"]],["bool"]]],[11,"is_sorted_by_key","","Checks if the elements of this iterator are sorted using…",12,[[["f"]],["bool"]]],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"steps_between","","Returns the number of steps between two step objects. The…",112,[[["self"]],[["option",["usize"]],["usize"]]]],[10,"replace_one","","Replaces this step with `1`, returning a clone of itself.",112,[[["self"]],["self"]]],[10,"replace_zero","","Replaces this step with `0`, returning a clone of itself.",112,[[["self"]],["self"]]],[10,"add_one","","Adds one to this step, returning the result.",112,[[["self"]],["self"]]],[10,"sub_one","","Subtracts one to this step, returning the result.",112,[[["self"]],["self"]]],[10,"add_usize","","Adds a `usize`, returning `None` on overflow.",112,[[["self"],["usize"]],["option"]]],[11,"sub_usize","","Subtracts a `usize`, returning `None` on underflow.",112,[[["self"],["usize"]],["option"]]],[5,"empty","","Creates an iterator that yields nothing.",null,[[],["empty"]]],[3,"Empty","","An iterator that yields nothing.",null,null],[5,"from_fn","","Creates a new iterator where each iteration calls the…",null,[[["f"]],["fromfn"]]],[3,"FromFn","","An iterator where each iteration calls the provided…",null,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,[[["t"]],["once"]]],[3,"Once","","An iterator that yields an element exactly once.",null,null],[5,"once_with","","Creates an iterator that lazily generates a value exactly…",null,[[["f"]],["oncewith"]]],[3,"OnceWith","","An iterator that yields a single element of type `A` by…",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single…",null,[[["t"]],["repeat"]]],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[5,"repeat_with","","Creates a new iterator that repeats elements of type `A`…",null,[[["f"]],["repeatwith"]]],[3,"RepeatWith","","An iterator that repeats elements of type `A` endlessly by…",null,null],[5,"successors","","Creates a new iterator where each successive item is…",null,[[["option"],["f"]],["successors"]]],[3,"Successors","","An new iterator where each successive item is computed…",null,null],[8,"FusedIterator","","An iterator that always continues to yield `None` when…",null,null],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",8,[[["self"]],["option"]]],[11,"nth_back","","Returns the `n`th element from the end of the iterator.",8,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes…",8,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","An iterator method that reduces the iterator's elements to…",8,[[["b"],["f"]],["b"]]],[11,"rfind","","Searches for an element of an iterator from the back that…",8,[[["self"],["p"]],["option"]]],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",10,[[["self"],["t"]]]],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",113,[[["t"]],["self"]]],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",11,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",11,null],[10,"into_iter","","Creates an iterator from a value.",11,[[]]],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact length of the iterator.",9,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the iterator is empty.",9,[[["self"]],["bool"]]],[8,"Product","","Trait to represent types that can be created by…",null,null],[10,"product","","Method which takes an iterator and generates `Self` from…",114,[[["i"]],["self"]]],[8,"Sum","","Trait to represent types that can be created by summing up…",null,null],[10,"sum","","Method which takes an iterator and generates `Self` from…",115,[[["i"]],["self"]]],[3,"Cloned","","An iterator that clones the elements of an underlying…",null,null],[3,"Copied","","An iterator that copies the elements of an underlying…",null,null],[3,"Flatten","","An iterator that flattens one level of nesting in an…",null,null],[3,"MapWhile","","An iterator that only accepts elements while `predicate`…",null,null],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",null,null],[3,"Chain","","An iterator that links two iterators together, in a chain.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element…",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with…",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements…",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Rev","","A double-ended iterator with the direction inverted.",null,null],[3,"Zip","","An iterator that iterates two other iterators…",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and…",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional…",null,null],[3,"Scan","","An iterator to maintain state while iterating another…",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate`…",null,null],[3,"Take","","An iterator that only iterates over the first `n`…",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate`…",null,null],[3,"Fuse","","An iterator that yields `None` forever after the…",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each…",null,null],[0,"marker","no_std_compat","Primitive traits and types representing basic properties…",null,null],[8,"Send","no_std_compat::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically-sized type.",null,null],[8,"StructuralPartialEq","","Required trait for constants used in pattern matches.",null,null],[8,"StructuralEq","","Required trait for constants used in pattern matches.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[8,"Sync","","Types for which it is safe to share references between…",null,null],[3,"PhantomData","","Zero-sized type used to mark things that \"act like\" they…",null,null],[8,"Unpin","","Types that can be safely moved after being pinned.",null,null],[3,"PhantomPinned","","A marker type which does not implement `Unpin`.",null,null],[14,"Copy","","Derive macro generating an impl of the trait `Copy`.",null,null],[0,"mem","no_std_compat","Basic functions for dealing with memory.",null,null],[5,"forget","no_std_compat::mem","Takes ownership and \"forgets\" about the value without…",null,[[["t"]]]],[5,"forget_unsized","","Like [`forget`], but also accepts unsized values.",null,[[["t"]]]],[5,"size_of","","Returns the size of a type in bytes.",null,[[],["usize"]]],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,[[["t"]],["usize"]]],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,[[],["usize"]]],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type…",null,[[["t"]],["usize"]]],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,[[],["usize"]]],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type…",null,[[["t"]],["usize"]]],[5,"needs_drop","","Returns `true` if dropping values of type `T` matters.",null,[[],["bool"]]],[5,"zeroed","","Returns the value of type `T` represented by the all-zero…",null,[[],["t"]]],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by…",null,[[],["t"]]],[5,"swap","","Swaps the values at two mutable locations, without…",null,[[["t"]]]],[5,"take","","Replaces `dest` with the default value of `T`, returning…",null,[[["t"]],["t"]]],[5,"replace","","Moves `src` into the referenced `dest`, returning the…",null,[[["t"],["t"]],["t"]]],[5,"drop","","Disposes of a value.",null,[[["t"]]]],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src`…",null,[[["t"]],["u"]]],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[5,"discriminant","","Returns a value uniquely identifying the enum variant in…",null,[[["t"]],["discriminant"]]],[3,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling…",null,null],[19,"MaybeUninit","","A wrapper type to construct uninitialized instances of `T`.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another…",null,[[["t"]],["u"]]],[0,"ops","no_std_compat","Overloadable operators.",null,null],[8,"Add","no_std_compat::ops","The addition operator `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator.",116,null],[10,"add","","Performs the `+` operation.",116,[[["rhs"]]]],[8,"Div","","The division operator `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator.",117,null],[10,"div","","Performs the `/` operation.",117,[[["rhs"]]]],[8,"Mul","","The multiplication operator `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator.",118,null],[10,"mul","","Performs the `*` operation.",118,[[["rhs"]]]],[8,"Neg","","The unary negation operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",119,null],[10,"neg","","Performs the unary `-` operation.",119,[[]]],[8,"Rem","","The remainder operator `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator.",120,null],[10,"rem","","Performs the `%` operation.",120,[[["rhs"]]]],[8,"Sub","","The subtraction operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",121,null],[10,"sub","","Performs the `-` operation.",121,[[["rhs"]]]],[8,"AddAssign","","The addition assignment operator `+=`.",null,null],[10,"add_assign","","Performs the `+=` operation.",122,[[["self"],["rhs"]]]],[8,"DivAssign","","The division assignment operator `/=`.",null,null],[10,"div_assign","","Performs the `/=` operation.",123,[[["self"],["rhs"]]]],[8,"MulAssign","","The multiplication assignment operator `*=`.",null,null],[10,"mul_assign","","Performs the `*=` operation.",124,[[["self"],["rhs"]]]],[8,"RemAssign","","The remainder assignment operator `%=`.",null,null],[10,"rem_assign","","Performs the `%=` operation.",125,[[["self"],["rhs"]]]],[8,"SubAssign","","The subtraction assignment operator `-=`.",null,null],[10,"sub_assign","","Performs the `-=` operation.",126,[[["self"],["rhs"]]]],[8,"BitAnd","","The bitwise AND operator `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator.",127,null],[10,"bitand","","Performs the `&` operation.",127,[[["rhs"]]]],[8,"BitOr","","The bitwise OR operator `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator.",128,null],[10,"bitor","","Performs the `|` operation.",128,[[["rhs"]]]],[8,"BitXor","","The bitwise XOR operator `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator.",129,null],[10,"bitxor","","Performs the `^` operation.",129,[[["rhs"]]]],[8,"Not","","The unary logical negation operator `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator.",130,null],[10,"not","","Performs the unary `!` operation.",130,[[]]],[8,"Shl","","The left shift operator `<<`. Note that because this trait…",null,null],[16,"Output","","The resulting type after applying the `<<` operator.",131,null],[10,"shl","","Performs the `<<` operation.",131,[[["rhs"]]]],[8,"Shr","","The right shift operator `>>`. Note that because this…",null,null],[16,"Output","","The resulting type after applying the `>>` operator.",132,null],[10,"shr","","Performs the `>>` operation.",132,[[["rhs"]]]],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",null,null],[10,"bitand_assign","","Performs the `&=` operation.",133,[[["self"],["rhs"]]]],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",null,null],[10,"bitor_assign","","Performs the `|=` operation.",134,[[["self"],["rhs"]]]],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",null,null],[10,"bitxor_assign","","Performs the `^=` operation.",135,[[["self"],["rhs"]]]],[8,"ShlAssign","","The left shift assignment operator `<<=`.",null,null],[10,"shl_assign","","Performs the `<<=` operation.",136,[[["self"],["rhs"]]]],[8,"ShrAssign","","The right shift assignment operator `>>=`.",null,null],[10,"shr_assign","","Performs the `>>=` operation.",137,[[["self"],["rhs"]]]],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing.",138,null],[10,"deref","","Dereferences the value.",138,[[["self"]]]],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v =…",null,null],[10,"deref_mut","","Mutably dereferences the value.",139,[[["self"]]]],[8,"Drop","","Used to run some code when a value goes out of scope. This…",null,null],[10,"drop","","Executes the destructor for this type.",0,[[["self"]]]],[8,"Fn","","The version of the call operator that takes an immutable…",null,null],[10,"call","","Performs the call operation.",1,[[["args"],["self"]]]],[8,"FnMut","","The version of the call operator that takes a mutable…",null,null],[10,"call_mut","","Performs the call operation.",2,[[["args"],["self"]]]],[8,"FnOnce","","The version of the call operator that takes a by-value…",null,null],[16,"Output","","The returned type after the call operator is used.",3,null],[10,"call_once","","Performs the call operation.",3,[[["args"]]]],[8,"Index","","Used for indexing operations (`container[index]`) in…",null,null],[16,"Output","","The returned type after indexing.",140,null],[10,"index","","Performs the indexing (`container[index]`) operation.",140,[[["idx"],["self"]]]],[8,"IndexMut","","Used for indexing operations (`container[index]`) in…",null,null],[10,"index_mut","","Performs the mutable indexing (`container[index]`)…",141,[[["self"],["idx"]]]],[3,"Range","","A (half-open) range bounded inclusively below and…",null,null],[12,"start","","The lower bound of the range (inclusive).",142,null],[12,"end","","The upper bound of the range (exclusive).",142,null],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",null,null],[12,"start","","The lower bound of the range (inclusive).",143,null],[3,"RangeFull","","An unbounded range (`..`).",null,null],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",null,null],[12,"end","","The upper bound of the range (exclusive).",144,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",26,null],[13,"Excluded","","An exclusive bound.",26,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in…",26,null],[8,"RangeBounds","","`RangeBounds` is implemented by Rust's built-in range…",null,null],[10,"start_bound","","Start index bound.",145,[[["self"]],[["bound"],["t"]]]],[10,"end_bound","","End index bound.",145,[[["self"]],[["bound"],["t"]]]],[11,"contains","","Returns `true` if `item` is contained in the range.",145,[[["self"],["u"]],["bool"]]],[3,"RangeInclusive","","A range bounded inclusively below and above (`start..=end`).",null,null],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",null,null],[12,"end","","The upper bound of the range (inclusive)",146,null],[8,"Try","","A trait for customizing the behavior of the `?` operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",147,null],[16,"Error","","The type of this value when viewed as failed.",147,null],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that…",147,[[],["result"]]],[10,"from_error","","Wrap an error value to construct the composite result. For…",147,[[],["self"]]],[10,"from_ok","","Wrap an OK value to construct the composite result. For…",147,[[],["self"]]],[8,"Generator","","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",148,null],[16,"Return","","The type of value this generator returns.",148,null],[10,"resume","","Resumes the execution of this generator.",148,[[["pin"],["self"],["r"]],["generatorstate"]]],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",149,null],[13,"Complete","","The generator completed with a return value.",149,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper…",null,null],[8,"DispatchFromDyn","","This is used for object safety, to check that a method's…",null,null],[0,"option","no_std_compat","Optional values.",null,null],[4,"Option","no_std_compat::option","The `Option` type. See the module level documentation for…",null,null],[13,"None","","No value",13,null],[13,"Some","","Some value `T`",13,null],[3,"Iter","","An iterator over a reference to the [`Some`] variant of an…",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Some`]…",null,null],[3,"IntoIter","","An iterator over the value in [`Some`] variant of an…",null,null],[3,"NoneError","","The error type that results from applying the try operator…",null,null],[0,"pin","no_std_compat","Types that pin data to its location in memory.",null,null],[3,"Pin","no_std_compat::pin","A pinned pointer.",null,null],[0,"ptr","no_std_compat","Manually manage memory through raw pointers.",null,null],[5,"drop_in_place","no_std_compat::ptr","Executes the destructor (if any) of the pointed-to value.",null,[[]]],[5,"null","","Creates a null raw pointer.",null,[[]]],[5,"null_mut","","Creates a null mutable raw pointer.",null,[[]]],[5,"slice_from_raw_parts","","Forms a raw slice from a pointer and a length.",null,[[["usize"]]]],[5,"slice_from_raw_parts_mut","","Performs the same functionality as…",null,[[["usize"]]]],[5,"swap","","Swaps the values at two mutable locations of the same…",null,[[]]],[5,"swap_nonoverlapping","","Swaps `count * size_of::<T>()` bytes between the two…",null,[[["usize"]]]],[5,"replace","","Moves `src` into the pointed `dst`, returning the previous…",null,[[["t"]],["t"]]],[5,"read","","Reads the value from `src` without moving it. This leaves…",null,[[],["t"]]],[5,"read_unaligned","","Reads the value from `src` without moving it. This leaves…",null,[[],["t"]]],[5,"write","","Overwrites a memory location with the given value without…",null,[[["t"]]]],[5,"write_unaligned","","Overwrites a memory location with the given value without…",null,[[["t"]]]],[5,"read_volatile","","Performs a volatile read of the value from `src` without…",null,[[],["t"]]],[5,"write_volatile","","Performs a volatile write of a memory location with the…",null,[[["t"]]]],[5,"eq","","Compares raw pointers for equality.",null,[[],["bool"]]],[5,"hash","","Hash a raw pointer.",null,[[["s"]]]],[5,"copy_nonoverlapping","","Copies `count * size_of::<T>()` bytes from `src` to `dst`.…",null,[[["usize"]]]],[5,"copy","","Copies `count * size_of::<T>()` bytes from `src` to `dst`.…",null,[[["usize"]]]],[5,"write_bytes","","Sets `count * size_of::<T>()` bytes of memory starting at…",null,[[["u8"],["usize"]]]],[3,"NonNull","","`*mut T` but non-zero and covariant.",null,null],[0,"raw","no_std_compat","Contains struct definitions for the layout of compiler…",null,null],[3,"TraitObject","no_std_compat::raw","The representation of a trait object like `&SomeTrait`.",null,null],[12,"data","","",150,null],[12,"vtable","","",150,null],[0,"result","no_std_compat","Error handling with the `Result` type.",null,null],[4,"Result","no_std_compat::result","`Result` is a type that represents either success ([`Ok`])…",null,null],[13,"Ok","","Contains the success value",14,null],[13,"Err","","Contains the error value",14,null],[3,"Iter","","An iterator over a reference to the [`Ok`] variant of a…",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant…",null,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a…",null,null],[0,"u128","no_std_compat","The 128-bit unsigned integer type.",null,null],[17,"MIN","no_std_compat::u128","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"u16","no_std_compat","The 16-bit unsigned integer type.",null,null],[17,"MIN","no_std_compat::u16","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"u32","no_std_compat","The 32-bit unsigned integer type.",null,null],[17,"MIN","no_std_compat::u32","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"u64","no_std_compat","The 64-bit unsigned integer type.",null,null],[17,"MIN","no_std_compat::u64","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"u8","no_std_compat","The 8-bit unsigned integer type.",null,null],[17,"MIN","no_std_compat::u8","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[0,"usize","no_std_compat","The pointer-sized unsigned integer type.",null,null],[17,"MIN","no_std_compat::usize","The smallest value that can be represented by this integer…",null,null],[17,"MAX","","The largest value that can be represented by this integer…",null,null],[14,"thread_local","no_std_compat","Declare a new thread local storage key of type…",null,null],[14,"is_arm_feature_detected","","Prevents compilation if `is_arm_feature_detected` is used…",null,null],[14,"is_aarch64_feature_detected","","Prevents compilation if `is_aarch64_feature_detected` is…",null,null],[14,"is_powerpc_feature_detected","","Prevents compilation if `is_powerpc_feature_detected` is…",null,null],[14,"is_powerpc64_feature_detected","","Prevents compilation if `is_powerpc64_feature_detected` is…",null,null],[14,"is_mips_feature_detected","","Prevents compilation if `is_mips_feature_detected` is used…",null,null],[14,"is_mips64_feature_detected","","Prevents compilation if `is_mips64_feature_detected` is…",null,null],[14,"assert_eq","","Asserts that two expressions are equal to each other…",null,null],[14,"assert_ne","","Asserts that two expressions are not equal to each other…",null,null],[14,"debug_assert","","Asserts that a boolean expression is `true` at runtime.",null,null],[14,"debug_assert_eq","","Asserts that two expressions are equal to each other.",null,null],[14,"debug_assert_ne","","Asserts that two expressions are not equal to each other.",null,null],[14,"matches","","Returns whether the given expression matches any of the…",null,null],[14,"try","","Unwraps a result or propagates its error.",null,null],[14,"todo","","Indicates unfinished code.",null,null],[14,"unimplemented","","Indicates unimplemented code by panicking with a message…",null,null],[14,"unreachable","","Indicates unreachable code.",null,null],[14,"write","","Writes formatted data into a buffer.",null,null],[14,"writeln","","Write formatted data into a buffer, with a newline appended.",null,null],[14,"asm","","Inline assembly.",null,null],[14,"assert","","Asserts that a boolean expression is `true` at runtime.",null,null],[14,"cfg","","Evaluates boolean combinations of configuration flags at…",null,null],[14,"column","","Expands to the column number at which it was invoked.",null,null],[14,"compile_error","","Causes compilation to fail with the given error message…",null,null],[14,"concat","","Concatenates literals into a static string slice.",null,null],[14,"concat_idents","","Concatenates identifiers into one identifier.",null,null],[14,"env","","Inspects an environment variable at compile time.",null,null],[14,"file","","Expands to the file name in which it was invoked.",null,null],[14,"format_args","","Constructs parameters for the other string-formatting…",null,null],[14,"format_args_nl","","Same as `format_args`, but adds a newline in the end.",null,null],[14,"global_asm","","Module-level inline assembly.",null,null],[14,"include","","Parses a file as an expression or an item according to the…",null,null],[14,"include_bytes","","Includes a file as a reference to a byte array.",null,null],[14,"include_str","","Includes a utf8-encoded file as a string.",null,null],[14,"line","","Expands to the line number on which it was invoked.",null,null],[14,"log_syntax","","Prints passed tokens into the standard output.",null,null],[14,"module_path","","Expands to a string that represents the current module path.",null,null],[14,"option_env","","Optionally inspects an environment variable at compile time.",null,null],[14,"stringify","","Stringifies its arguments.",null,null],[14,"trace_macros","","Enables or disables tracing functionality used for…",null,null],[0,"primitive","","This module reexports the primitive types to allow usage…",null,null],[14,"is_x86_feature_detected","","A macro to test at runtime whether a CPU feature is…",null,null],[0,"prelude","","",null,null],[0,"v1","no_std_compat::prelude","",null,null],[8,"Send","no_std_compat::prelude::v1","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Sync","","Types for which it is safe to share references between…",null,null],[8,"Unpin","","Types that can be safely moved after being pinned.",null,null],[8,"Drop","","Used to run some code when a value goes out of scope. This…",null,null],[10,"drop","","Executes the destructor for this type.",0,[[["self"]]]],[8,"Fn","","The version of the call operator that takes an immutable…",null,null],[10,"call","","Performs the call operation.",1,[[["args"],["self"]]]],[8,"FnMut","","The version of the call operator that takes a mutable…",null,null],[10,"call_mut","","Performs the call operation.",2,[[["args"],["self"]]]],[8,"FnOnce","","The version of the call operator that takes a by-value…",null,null],[16,"Output","","The returned type after the call operator is used.",3,null],[10,"call_once","","Performs the call operation.",3,[[["args"]]]],[5,"drop","","Disposes of a value.",null,[[["t"]]]],[8,"AsMut","","Used to do a cheap mutable-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",4,[[["self"]],["t"]]],[8,"AsRef","","Used to do a cheap reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",5,[[["self"]],["t"]]],[8,"From","","Used to do value-to-value conversions while consuming the…",null,null],[10,"from","","Performs the conversion.",6,[[["t"]],["self"]]],[8,"Into","","A value-to-value conversion that consumes the input value.…",null,null],[10,"into","","Performs the conversion.",7,[[],["t"]]],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",8,[[["self"]],["option"]]],[11,"nth_back","","Returns the `n`th element from the end of the iterator.",8,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes…",8,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","An iterator method that reduces the iterator's elements to…",8,[[["b"],["f"]],["b"]]],[11,"rfind","","Searches for an element of an iterator from the back that…",8,[[["self"],["p"]],["option"]]],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact length of the iterator.",9,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the iterator is empty.",9,[[["self"]],["bool"]]],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",10,[[["self"],["t"]]]],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",11,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",11,null],[10,"into_iter","","Creates an iterator from a value.",11,[[]]],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",12,null],[10,"next","","Advances the iterator and returns the next value.",12,[[["self"]],["option"]]],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",12,[[["self"]]]],[11,"count","","Consumes the iterator, counting the number of iterations…",12,[[],["usize"]]],[11,"last","","Consumes the iterator, returning the last element.",12,[[],["option"]]],[11,"nth","","Returns the `n`th element of the iterator.",12,[[["self"],["usize"]],["option"]]],[11,"step_by","","Creates an iterator starting at the same point, but…",12,[[["usize"]],["stepby"]]],[11,"chain","","Takes two iterators and creates a new iterator over both…",12,[[["u"]],["chain"]]],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",12,[[["u"]],["zip"]]],[11,"map","","Takes a closure and creates an iterator which calls that…",12,[[["f"]],["map"]]],[11,"for_each","","Calls a closure on each element of an iterator.",12,[[["f"]]]],[11,"filter","","Creates an iterator which uses a closure to determine if…",12,[[["p"]],["filter"]]],[11,"filter_map","","Creates an iterator that both filters and maps.",12,[[["f"]],["filtermap"]]],[11,"enumerate","","Creates an iterator which gives the current iteration…",12,[[],["enumerate"]]],[11,"peekable","","Creates an iterator which can use `peek` to look at the…",12,[[],["peekable"]]],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a…",12,[[["p"]],["skipwhile"]]],[11,"take_while","","Creates an iterator that yields elements based on a…",12,[[["p"]],["takewhile"]]],[11,"map_while","","Creates an iterator that both yields elements based on a…",12,[[["p"]],["mapwhile"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",12,[[["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields its first `n` elements.",12,[[["usize"]],["take"]]],[11,"scan","","An iterator adaptor similar to [`fold`] that holds…",12,[[["f"],["st"]],["scan"]]],[11,"flat_map","","Creates an iterator that works like map, but flattens…",12,[[["f"]],["flatmap"]]],[11,"flatten","","Creates an iterator that flattens nested structure.",12,[[],["flatten"]]],[11,"fuse","","Creates an iterator which ends after the first [`None`].",12,[[],["fuse"]]],[11,"inspect","","Does something with each element of an iterator, passing…",12,[[["f"]],["inspect"]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",12,[[["self"]],["self"]]],[11,"collect","","Transforms an iterator into a collection.",12,[[],["b"]]],[11,"partition","","Consumes an iterator, creating two collections from it.",12,[[["f"]]]],[11,"partition_in_place","","Reorders the elements of this iterator in-place according…",12,[[["p"]],["usize"]]],[11,"is_partitioned","","Checks if the elements of this iterator are partitioned…",12,[[["p"]],["bool"]]],[11,"try_fold","","An iterator method that applies a function as long as it…",12,[[["self"],["b"],["f"]],["r"]]],[11,"try_for_each","","An iterator method that applies a fallible function to…",12,[[["self"],["f"]],["r"]]],[11,"fold","","An iterator method that applies a function, producing a…",12,[[["b"],["f"]],["b"]]],[11,"all","","Tests if every element of the iterator matches a predicate.",12,[[["self"],["f"]],["bool"]]],[11,"any","","Tests if any element of the iterator matches a predicate.",12,[[["self"],["f"]],["bool"]]],[11,"find","","Searches for an element of an iterator that satisfies a…",12,[[["self"],["p"]],["option"]]],[11,"find_map","","Applies function to the elements of iterator and returns…",12,[[["self"],["f"]],["option"]]],[11,"try_find","","Applies function to the elements of iterator and returns…",12,[[["self"],["f"]],[["option"],["result",["option"]]]]],[11,"position","","Searches for an element in an iterator, returning its index.",12,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","Searches for an element in an iterator from the right,…",12,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"max","","Returns the maximum element of an iterator.",12,[[],["option"]]],[11,"min","","Returns the minimum element of an iterator.",12,[[],["option"]]],[11,"max_by_key","","Returns the element that gives the maximum value from the…",12,[[["f"]],["option"]]],[11,"max_by","","Returns the element that gives the maximum value with…",12,[[["f"]],["option"]]],[11,"min_by_key","","Returns the element that gives the minimum value from the…",12,[[["f"]],["option"]]],[11,"min_by","","Returns the element that gives the minimum value with…",12,[[["f"]],["option"]]],[11,"rev","","Reverses an iterator's direction.",12,[[],["rev"]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",12,[[]]],[11,"copied","","Creates an iterator which copies all of its elements.",12,[[],["copied"]]],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",12,[[],["cloned"]]],[11,"cycle","","Repeats an iterator endlessly.",12,[[],["cycle"]]],[11,"sum","","Sums the elements of an iterator.",12,[[],["s"]]],[11,"product","","Iterates over the entire iterator, multiplying all the…",12,[[],["p"]]],[11,"cmp","","Lexicographically compares the elements of this `Iterator`…",12,[[["i"]],["ordering"]]],[11,"cmp_by","","Lexicographically compares the elements of this `Iterator`…",12,[[["i"],["f"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator`…",12,[[["i"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp_by","","Lexicographically compares the elements of this `Iterator`…",12,[[["i"],["f"]],[["option",["ordering"]],["ordering"]]]],[11,"eq","","Determines if the elements of this `Iterator` are equal to…",12,[[["i"]],["bool"]]],[11,"eq_by","","Determines if the elements of this `Iterator` are equal to…",12,[[["i"],["f"]],["bool"]]],[11,"ne","","Determines if the elements of this `Iterator` are unequal…",12,[[["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `Iterator` are…",12,[[["i"]],["bool"]]],[11,"le","","Determines if the elements of this `Iterator` are…",12,[[["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `Iterator` are…",12,[[["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `Iterator` are…",12,[[["i"]],["bool"]]],[11,"is_sorted","","Checks if the elements of this iterator are sorted.",12,[[],["bool"]]],[11,"is_sorted_by","","Checks if the elements of this iterator are sorted using…",12,[[["f"]],["bool"]]],[11,"is_sorted_by_key","","Checks if the elements of this iterator are sorted using…",12,[[["f"]],["bool"]]],[4,"Option","","The `Option` type. See the module level documentation for…",null,null],[13,"None","","No value",13,null],[13,"Some","","Some value `T`",13,null],[4,"Result","","`Result` is a type that represents either success ([`Ok`])…",null,null],[13,"Ok","","Contains the success value",14,null],[13,"Err","","Contains the error value",14,null],[14,"asm","","Inline assembly.",null,null],[14,"assert","","Asserts that a boolean expression is `true` at runtime.",null,null],[14,"cfg","","Evaluates boolean combinations of configuration flags at…",null,null],[14,"column","","Expands to the column number at which it was invoked.",null,null],[14,"compile_error","","Causes compilation to fail with the given error message…",null,null],[14,"concat","","Concatenates literals into a static string slice.",null,null],[14,"concat_idents","","Concatenates identifiers into one identifier.",null,null],[14,"env","","Inspects an environment variable at compile time.",null,null],[14,"file","","Expands to the file name in which it was invoked.",null,null],[14,"format_args","","Constructs parameters for the other string-formatting…",null,null],[14,"format_args_nl","","Same as `format_args`, but adds a newline in the end.",null,null],[14,"global_asm","","Module-level inline assembly.",null,null],[14,"include","","Parses a file as an expression or an item according to the…",null,null],[14,"include_bytes","","Includes a file as a reference to a byte array.",null,null],[14,"include_str","","Includes a utf8-encoded file as a string.",null,null],[14,"line","","Expands to the line number on which it was invoked.",null,null],[14,"log_syntax","","Prints passed tokens into the standard output.",null,null],[14,"module_path","","Expands to a string that represents the current module path.",null,null],[14,"option_env","","Optionally inspects an environment variable at compile time.",null,null],[14,"stringify","","Stringifies its arguments.",null,null],[14,"trace_macros","","Enables or disables tracing functionality used for…",null,null],[14,"bench","","Attribute macro applied to a function to turn it into a…",null,null],[14,"global_allocator","","Attribute macro applied to a static to register it as a…",null,null],[14,"test","","Attribute macro applied to a function to turn it into a…",null,null],[14,"test_case","","An implementation detail of the `#[test]` and `#[bench]`…",null,null],[8,"Clone","","A common trait for the ability to explicitly duplicate an…",null,null],[10,"clone","","Returns a copy of the value.",15,[[["self"]],["self"]]],[11,"clone_from","","Performs copy-assignment from `source`.",15,[[["self"],["self"]]]],[14,"Clone","","Derive macro generating an impl of the trait `Clone`.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[14,"Copy","","Derive macro generating an impl of the trait `Copy`.",null,null],[14,"Debug","","Derive macro generating an impl of the trait `Debug`.",null,null],[8,"Default","","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",16,[[],["self"]]],[14,"Default","","Derive macro generating an impl of the trait `Default`.",null,null],[8,"Eq","","Trait for equality comparisons which are equivalence…",null,null],[14,"Eq","","Derive macro generating an impl of the trait `Eq`.",null,null],[14,"Hash","","Derive macro generating an impl of the trait `Hash`.",null,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an [`Ordering`] between `self` and…",17,[[["self"]],["ordering"]]],[11,"max","","Compares and returns the maximum of two values.",17,[[],["self"]]],[11,"min","","Compares and returns the minimum of two values.",17,[[],["self"]]],[11,"clamp","","Restrict a value to a certain interval.",17,[[],["self"]]],[14,"Ord","","Derive macro generating an impl of the trait `Ord`.",null,null],[8,"PartialEq","","Trait for equality comparisons which are partial…",null,null],[10,"eq","","This method tests for `self` and `other` values to be…",18,[[["rhs"],["self"]],["bool"]]],[11,"ne","","This method tests for `!=`.",18,[[["rhs"],["self"]],["bool"]]],[14,"PartialEq","","Derive macro generating an impl of the trait `PartialEq`.",null,null],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other`…",19,[[["rhs"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","This method tests less than (for `self` and `other`) and…",19,[[["rhs"],["self"]],["bool"]]],[11,"le","","This method tests less than or equal to (for `self` and…",19,[[["rhs"],["self"]],["bool"]]],[11,"gt","","This method tests greater than (for `self` and `other`)…",19,[[["rhs"],["self"]],["bool"]]],[11,"ge","","This method tests greater than or equal to (for `self` and…",19,[[["rhs"],["self"]],["bool"]]],[14,"PartialOrd","","Derive macro generating an impl of the trait `PartialOrd`.",null,null],[14,"RustcDecodable","","Unstable implementation detail of the `rustc` compiler, do…",null,null],[14,"RustcEncodable","","Unstable implementation detail of the `rustc` compiler, do…",null,null],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","The resulting type after obtaining ownership.",20,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",20,[[["self"]]]],[11,"clone_into","","Uses borrowed data to replace owned data, usually by…",20,[[["self"]]]],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"String","","A UTF-8 encoded, growable string.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",21,[[["self"]],["string"]]],[3,"Vec","","A contiguous growable array type, written `Vec<T>` but…",null,null],[14,"format","","Creates a `String` using interpolation of runtime…",null,null],[0,"vec","","A contiguous growable array type with heap-allocated…",null,null],[3,"Vec","no_std_compat::prelude::v1::vec","A contiguous growable array type, written `Vec<T>` but…",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"Splice","","A splicing iterator for `Vec`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",null,null],[14,"vec","no_std_compat::prelude::v1","Creates a [`Vec`] containing the arguments.",null,null],[14,"print","","Prints to the standard output.",null,null],[14,"println","","Prints to the standard output, with a newline.",null,null],[14,"eprint","","Prints to the standard error.",null,null],[14,"eprintln","","Prints to the standard error, with a newline.",null,null],[14,"dbg","","Prints and returns the value of a given expression for…",null,null],[11,"from","","",13,[[],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into_iter","","",13,[[],["i"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into_iter","","",14,[[],["i"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"from","","",151,[[],["t"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"into_iter","","",151,[[],["i"]]],[11,"into_searcher","","",151,[[["str"]],["charpredicatesearcher"]]],[11,"is_contained_in","","",151,[[["str"]],["bool"]]],[11,"is_prefix_of","","",151,[[["str"]],["bool"]]],[11,"is_suffix_of","","",151,[[["str"]],["bool"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"into","","",151,[[],["u"]]],[11,"try_into","","",151,[[],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"type_id","","",151,[[["self"]],["typeid"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,[[["self"],["t"]]]],[11,"to_string","","",151,[[["self"]],["string"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"into","","",152,[[],["u"]]],[11,"try_into","","",152,[[],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"type_id","","",152,[[["self"]],["typeid"]]],[11,"to_owned","","",152,[[["self"]],["t"]]],[11,"clone_into","","",152,[[["self"],["t"]]]],[11,"to_string","","",152,[[["self"]],["string"]]],[11,"from","no_std_compat::prelude::v1::vec","",153,[[["t"]],["t"]]],[11,"into_iter","","",153,[[],["i"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"into","","",153,[[],["u"]]],[11,"try_into","","",153,[[],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"type_id","","",153,[[["self"]],["typeid"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,[[["self"],["t"]]]],[11,"from","no_std_compat::thread","",154,[[["t"]],["t"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"into","","",154,[[],["u"]]],[11,"try_into","","",154,[[],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"type_id","","",154,[[["self"]],["typeid"]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"into","","",155,[[],["u"]]],[11,"try_into","","",155,[[],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"type_id","","",155,[[["self"]],["typeid"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,[[["self"],["t"]]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"into","","",156,[[],["u"]]],[11,"try_into","","",156,[[],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"type_id","","",156,[[["self"]],["typeid"]]],[11,"to_owned","","",156,[[["self"]],["t"]]],[11,"clone_into","","",156,[[["self"],["t"]]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"into","","",157,[[],["u"]]],[11,"try_into","","",157,[[],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"type_id","","",157,[[["self"]],["typeid"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"into","","",158,[[],["u"]]],[11,"try_into","","",158,[[],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"type_id","","",158,[[["self"]],["typeid"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,[[["self"],["t"]]]],[11,"to_string","","",158,[[["self"]],["string"]]],[11,"from","","",159,[[["t"]],["t"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"into","","",159,[[],["u"]]],[11,"try_into","","",159,[[],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"type_id","","",159,[[["self"]],["typeid"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"into","","",160,[[],["u"]]],[11,"try_into","","",160,[[],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"type_id","","",160,[[["self"]],["typeid"]]],[11,"from","","",161,[[["t"]],["t"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"into","","",161,[[],["u"]]],[11,"try_into","","",161,[[],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"type_id","","",161,[[["self"]],["typeid"]]],[11,"from","no_std_compat::ascii","",162,[[["t"]],["t"]]],[11,"into_iter","","",162,[[],["i"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"into","","",162,[[],["u"]]],[11,"try_into","","",162,[[],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"type_id","","",162,[[["self"]],["typeid"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,[[["self"],["t"]]]],[11,"to_string","","",162,[[["self"]],["string"]]],[11,"from","no_std_compat::backtrace","",163,[[["t"]],["t"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"into","","",163,[[],["u"]]],[11,"try_into","","",163,[[],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"type_id","","",163,[[["self"]],["typeid"]]],[11,"to_string","","",163,[[["self"]],["string"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into","","",23,[[],["u"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","no_std_compat::collections","",164,[[["t"]],["t"]]],[11,"into_iter","","",164,[[],["i"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"into","","",164,[[],["u"]]],[11,"try_into","","",164,[[],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"type_id","","",164,[[["self"]],["typeid"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,[[["self"],["t"]]]],[11,"from","no_std_compat::collections::hash_map","",165,[[["t"]],["t"]]],[11,"into_iter","","",165,[[],["i"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"into","","",165,[[],["u"]]],[11,"try_into","","",165,[[],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"type_id","","",165,[[["self"]],["typeid"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,[[["self"],["t"]]]],[11,"from","","",166,[[["t"]],["t"]]],[11,"into_iter","","",166,[[],["i"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"into","","",166,[[],["u"]]],[11,"try_into","","",166,[[],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"type_id","","",166,[[["self"]],["typeid"]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"into_iter","","",167,[[],["i"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"into","","",167,[[],["u"]]],[11,"try_into","","",167,[[],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"type_id","","",167,[[["self"]],["typeid"]]],[11,"from","","",168,[[["t"]],["t"]]],[11,"into_iter","","",168,[[],["i"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"into","","",168,[[],["u"]]],[11,"try_into","","",168,[[],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"type_id","","",168,[[["self"]],["typeid"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,[[["self"],["t"]]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"into_iter","","",169,[[],["i"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"into","","",169,[[],["u"]]],[11,"try_into","","",169,[[],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"type_id","","",169,[[["self"]],["typeid"]]],[11,"to_owned","","",169,[[["self"]],["t"]]],[11,"clone_into","","",169,[[["self"],["t"]]]],[11,"from","","",170,[[["t"]],["t"]]],[11,"into_iter","","",170,[[],["i"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"into","","",170,[[],["u"]]],[11,"try_into","","",170,[[],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"type_id","","",170,[[["self"]],["typeid"]]],[11,"from","","",171,[[["t"]],["t"]]],[11,"into_iter","","",171,[[],["i"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"into","","",171,[[],["u"]]],[11,"try_into","","",171,[[],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"type_id","","",171,[[["self"]],["typeid"]]],[11,"from","","",172,[[["t"]],["t"]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"into","","",172,[[],["u"]]],[11,"try_into","","",172,[[],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"type_id","","",172,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"into","","",24,[[],["u"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",173,[[["t"]],["t"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"into","","",173,[[],["u"]]],[11,"try_into","","",173,[[],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"type_id","","",173,[[["self"]],["typeid"]]],[11,"from","","",174,[[["t"]],["t"]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"into","","",174,[[],["u"]]],[11,"try_into","","",174,[[],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"type_id","","",174,[[["self"]],["typeid"]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"into","","",175,[[],["u"]]],[11,"try_into","","",175,[[],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"type_id","","",175,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"into","","",25,[[],["u"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",176,[[["t"]],["t"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"into","","",176,[[],["u"]]],[11,"try_into","","",176,[[],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"type_id","","",176,[[["self"]],["typeid"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"into","","",177,[[],["u"]]],[11,"try_into","","",177,[[],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"type_id","","",177,[[["self"]],["typeid"]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"into","","",178,[[],["u"]]],[11,"try_into","","",178,[[],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"type_id","","",178,[[["self"]],["typeid"]]],[11,"to_owned","","",178,[[["self"]],["t"]]],[11,"clone_into","","",178,[[["self"],["t"]]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"into","","",179,[[],["u"]]],[11,"try_into","","",179,[[],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"type_id","","",179,[[["self"]],["typeid"]]],[11,"to_owned","","",179,[[["self"]],["t"]]],[11,"clone_into","","",179,[[["self"],["t"]]]],[11,"from","no_std_compat::collections","",180,[[["t"]],["t"]]],[11,"into_iter","","",180,[[],["i"]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"into","","",180,[[],["u"]]],[11,"try_into","","",180,[[],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"type_id","","",180,[[["self"]],["typeid"]]],[11,"to_owned","","",180,[[["self"]],["t"]]],[11,"clone_into","","",180,[[["self"],["t"]]]],[11,"from","no_std_compat::collections::hash_set","",181,[[["t"]],["t"]]],[11,"into_iter","","",181,[[],["i"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"into","","",181,[[],["u"]]],[11,"try_into","","",181,[[],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"type_id","","",181,[[["self"]],["typeid"]]],[11,"to_owned","","",181,[[["self"]],["t"]]],[11,"clone_into","","",181,[[["self"],["t"]]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"into_iter","","",182,[[],["i"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"into","","",182,[[],["u"]]],[11,"try_into","","",182,[[],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"type_id","","",182,[[["self"]],["typeid"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"into_iter","","",183,[[],["i"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"into","","",183,[[],["u"]]],[11,"try_into","","",183,[[],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"type_id","","",183,[[["self"]],["typeid"]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"into_iter","","",184,[[],["i"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"into","","",184,[[],["u"]]],[11,"try_into","","",184,[[],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"type_id","","",184,[[["self"]],["typeid"]]],[11,"to_owned","","",184,[[["self"]],["t"]]],[11,"clone_into","","",184,[[["self"],["t"]]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"into_iter","","",185,[[],["i"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"into","","",185,[[],["u"]]],[11,"try_into","","",185,[[],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"type_id","","",185,[[["self"]],["typeid"]]],[11,"to_owned","","",185,[[["self"]],["t"]]],[11,"clone_into","","",185,[[["self"],["t"]]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"into_iter","","",186,[[],["i"]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"into","","",186,[[],["u"]]],[11,"try_into","","",186,[[],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"type_id","","",186,[[["self"]],["typeid"]]],[11,"to_owned","","",186,[[["self"]],["t"]]],[11,"clone_into","","",186,[[["self"],["t"]]]],[11,"from","","",187,[[["t"]],["t"]]],[11,"into_iter","","",187,[[],["i"]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"into","","",187,[[],["u"]]],[11,"try_into","","",187,[[],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"type_id","","",187,[[["self"]],["typeid"]]],[11,"to_owned","","",187,[[["self"]],["t"]]],[11,"clone_into","","",187,[[["self"],["t"]]]],[11,"from","no_std_compat::ops","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"into","","",26,[[],["u"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"from","no_std_compat::collections","",188,[[["t"]],["t"]]],[11,"into_iter","","",188,[[],["i"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"into","","",188,[[],["u"]]],[11,"try_into","","",188,[[],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"type_id","","",188,[[["self"]],["typeid"]]],[11,"to_owned","","",188,[[["self"]],["t"]]],[11,"clone_into","","",188,[[["self"],["t"]]]],[11,"from","no_std_compat::collections::binary_heap","",189,[[["t"]],["t"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"into","","",189,[[],["u"]]],[11,"try_into","","",189,[[],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"type_id","","",189,[[["self"]],["typeid"]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"into_iter","","",190,[[],["i"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"into","","",190,[[],["u"]]],[11,"try_into","","",190,[[],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"type_id","","",190,[[["self"]],["typeid"]]],[11,"to_owned","","",190,[[["self"]],["t"]]],[11,"clone_into","","",190,[[["self"],["t"]]]],[11,"from","","",191,[[["t"]],["t"]]],[11,"into_iter","","",191,[[],["i"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"into","","",191,[[],["u"]]],[11,"try_into","","",191,[[],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"type_id","","",191,[[["self"]],["typeid"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,[[["self"],["t"]]]],[11,"from","","",192,[[["t"]],["t"]]],[11,"into_iter","","",192,[[],["i"]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"into","","",192,[[],["u"]]],[11,"try_into","","",192,[[],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"type_id","","",192,[[["self"]],["typeid"]]],[11,"to_owned","","",192,[[["self"]],["t"]]],[11,"clone_into","","",192,[[["self"],["t"]]]],[11,"from","","",193,[[["t"]],["t"]]],[11,"into_iter","","",193,[[],["i"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"into","","",193,[[],["u"]]],[11,"try_into","","",193,[[],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"type_id","","",193,[[["self"]],["typeid"]]],[11,"from","","",194,[[["t"]],["t"]]],[11,"into_iter","","",194,[[],["i"]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"into","","",194,[[],["u"]]],[11,"try_into","","",194,[[],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"type_id","","",194,[[["self"]],["typeid"]]],[11,"from","no_std_compat::collections","",195,[[["t"]],["t"]]],[11,"into_iter","","",195,[[],["i"]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"into","","",195,[[],["u"]]],[11,"try_into","","",195,[[],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"type_id","","",195,[[["self"]],["typeid"]]],[11,"to_owned","","",195,[[["self"]],["t"]]],[11,"clone_into","","",195,[[["self"],["t"]]]],[11,"from","no_std_compat::collections::btree_map","",196,[[["t"]],["t"]]],[11,"into_iter","","",196,[[],["i"]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"into","","",196,[[],["u"]]],[11,"try_into","","",196,[[],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"type_id","","",196,[[["self"]],["typeid"]]],[11,"to_owned","","",196,[[["self"]],["t"]]],[11,"clone_into","","",196,[[["self"],["t"]]]],[11,"from","","",197,[[["t"]],["t"]]],[11,"into_iter","","",197,[[],["i"]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"into","","",197,[[],["u"]]],[11,"try_into","","",197,[[],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"type_id","","",197,[[["self"]],["typeid"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,[[["self"],["t"]]]],[11,"from","","",198,[[["t"]],["t"]]],[11,"into_iter","","",198,[[],["i"]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"into","","",198,[[],["u"]]],[11,"try_into","","",198,[[],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"type_id","","",198,[[["self"]],["typeid"]]],[11,"from","","",199,[[["t"]],["t"]]],[11,"into_iter","","",199,[[],["i"]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"into","","",199,[[],["u"]]],[11,"try_into","","",199,[[],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"type_id","","",199,[[["self"]],["typeid"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,[[["self"],["t"]]]],[11,"from","","",200,[[["t"]],["t"]]],[11,"into_iter","","",200,[[],["i"]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"into","","",200,[[],["u"]]],[11,"try_into","","",200,[[],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"type_id","","",200,[[["self"]],["typeid"]]],[11,"to_owned","","",200,[[["self"]],["t"]]],[11,"clone_into","","",200,[[["self"],["t"]]]],[11,"from","","",201,[[["t"]],["t"]]],[11,"into_iter","","",201,[[],["i"]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"into","","",201,[[],["u"]]],[11,"try_into","","",201,[[],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"type_id","","",201,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into","","",27,[[],["u"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",202,[[["t"]],["t"]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"into","","",202,[[],["u"]]],[11,"try_into","","",202,[[],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"type_id","","",202,[[["self"]],["typeid"]]],[11,"from","","",203,[[["t"]],["t"]]],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"into","","",203,[[],["u"]]],[11,"try_into","","",203,[[],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"type_id","","",203,[[["self"]],["typeid"]]],[11,"from","","",204,[[["t"]],["t"]]],[11,"into_iter","","",204,[[],["i"]]],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"into","","",204,[[],["u"]]],[11,"try_into","","",204,[[],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"type_id","","",204,[[["self"]],["typeid"]]],[11,"from","","",205,[[["t"]],["t"]]],[11,"into_iter","","",205,[[],["i"]]],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"into","","",205,[[],["u"]]],[11,"try_into","","",205,[[],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"type_id","","",205,[[["self"]],["typeid"]]],[11,"from","no_std_compat::collections::btree_set","",206,[[["t"]],["t"]]],[11,"into_iter","","",206,[[],["i"]]],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"into","","",206,[[],["u"]]],[11,"try_into","","",206,[[],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"type_id","","",206,[[["self"]],["typeid"]]],[11,"to_owned","","",206,[[["self"]],["t"]]],[11,"clone_into","","",206,[[["self"],["t"]]]],[11,"from","","",207,[[["t"]],["t"]]],[11,"into_iter","","",207,[[],["i"]]],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"into","","",207,[[],["u"]]],[11,"try_into","","",207,[[],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"type_id","","",207,[[["self"]],["typeid"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,[[["self"],["t"]]]],[11,"from","","",208,[[["t"]],["t"]]],[11,"into_iter","","",208,[[],["i"]]],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"into","","",208,[[],["u"]]],[11,"try_into","","",208,[[],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"type_id","","",208,[[["self"]],["typeid"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,[[["self"],["t"]]]],[11,"from","","",209,[[["t"]],["t"]]],[11,"into_iter","","",209,[[],["i"]]],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"into","","",209,[[],["u"]]],[11,"try_into","","",209,[[],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"type_id","","",209,[[["self"]],["typeid"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,[[["self"],["t"]]]],[11,"from","","",210,[[["t"]],["t"]]],[11,"into_iter","","",210,[[],["i"]]],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"into","","",210,[[],["u"]]],[11,"try_into","","",210,[[],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"type_id","","",210,[[["self"]],["typeid"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,[[["self"],["t"]]]],[11,"from","no_std_compat::collections","",211,[[["t"]],["t"]]],[11,"into_iter","","",211,[[],["i"]]],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"into","","",211,[[],["u"]]],[11,"try_into","","",211,[[],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"type_id","","",211,[[["self"]],["typeid"]]],[11,"to_owned","","",211,[[["self"]],["t"]]],[11,"clone_into","","",211,[[["self"],["t"]]]],[11,"from","no_std_compat::collections::btree_set","",212,[[["t"]],["t"]]],[11,"into_iter","","",212,[[],["i"]]],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"into","","",212,[[],["u"]]],[11,"try_into","","",212,[[],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"type_id","","",212,[[["self"]],["typeid"]]],[11,"from","","",213,[[["t"]],["t"]]],[11,"into_iter","","",213,[[],["i"]]],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"into","","",213,[[],["u"]]],[11,"try_into","","",213,[[],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"type_id","","",213,[[["self"]],["typeid"]]],[11,"to_owned","","",213,[[["self"]],["t"]]],[11,"clone_into","","",213,[[["self"],["t"]]]],[11,"from","no_std_compat::collections","",214,[[["t"]],["t"]]],[11,"into_iter","","",214,[[],["i"]]],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"into","","",214,[[],["u"]]],[11,"try_into","","",214,[[],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"type_id","","",214,[[["self"]],["typeid"]]],[11,"to_owned","","",214,[[["self"]],["t"]]],[11,"clone_into","","",214,[[["self"],["t"]]]],[11,"from","no_std_compat::collections::linked_list","",215,[[["t"]],["t"]]],[11,"into_iter","","",215,[[],["i"]]],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"into","","",215,[[],["u"]]],[11,"try_into","","",215,[[],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"type_id","","",215,[[["self"]],["typeid"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,[[["self"],["t"]]]],[11,"from","","",216,[[["t"]],["t"]]],[11,"into_iter","","",216,[[],["i"]]],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"into","","",216,[[],["u"]]],[11,"try_into","","",216,[[],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"type_id","","",216,[[["self"]],["typeid"]]],[11,"from","","",217,[[["t"]],["t"]]],[11,"into_iter","","",217,[[],["i"]]],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"into","","",217,[[],["u"]]],[11,"try_into","","",217,[[],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"type_id","","",217,[[["self"]],["typeid"]]],[11,"to_owned","","",217,[[["self"]],["t"]]],[11,"clone_into","","",217,[[["self"],["t"]]]],[11,"from","","",218,[[["t"]],["t"]]],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"into","","",218,[[],["u"]]],[11,"try_into","","",218,[[],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"type_id","","",218,[[["self"]],["typeid"]]],[11,"from","","",219,[[["t"]],["t"]]],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"into","","",219,[[],["u"]]],[11,"try_into","","",219,[[],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"type_id","","",219,[[["self"]],["typeid"]]],[11,"from","","",220,[[["t"]],["t"]]],[11,"into_iter","","",220,[[],["i"]]],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"into","","",220,[[],["u"]]],[11,"try_into","","",220,[[],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"type_id","","",220,[[["self"]],["typeid"]]],[11,"from","no_std_compat::collections","",221,[[["t"]],["t"]]],[11,"into_iter","","",221,[[],["i"]]],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"into","","",221,[[],["u"]]],[11,"try_into","","",221,[[],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"type_id","","",221,[[["self"]],["typeid"]]],[11,"to_owned","","",221,[[["self"]],["t"]]],[11,"clone_into","","",221,[[["self"],["t"]]]],[11,"from","no_std_compat::collections::vec_deque","",222,[[["t"]],["t"]]],[11,"into_iter","","",222,[[],["i"]]],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"into","","",222,[[],["u"]]],[11,"try_into","","",222,[[],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"type_id","","",222,[[["self"]],["typeid"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,[[["self"],["t"]]]],[11,"from","","",223,[[["t"]],["t"]]],[11,"into_iter","","",223,[[],["i"]]],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"into","","",223,[[],["u"]]],[11,"try_into","","",223,[[],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"type_id","","",223,[[["self"]],["typeid"]]],[11,"from","","",224,[[["t"]],["t"]]],[11,"into_iter","","",224,[[],["i"]]],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"into","","",224,[[],["u"]]],[11,"try_into","","",224,[[],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"type_id","","",224,[[["self"]],["typeid"]]],[11,"to_owned","","",224,[[["self"]],["t"]]],[11,"clone_into","","",224,[[["self"],["t"]]]],[11,"from","","",225,[[["t"]],["t"]]],[11,"into_iter","","",225,[[],["i"]]],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"into","","",225,[[],["u"]]],[11,"try_into","","",225,[[],["result"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"type_id","","",225,[[["self"]],["typeid"]]],[11,"from","no_std_compat::collections","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"into","","",28,[[],["u"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"from","no_std_compat::env","",226,[[["t"]],["t"]]],[11,"into_iter","","",226,[[],["i"]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"into","","",226,[[],["u"]]],[11,"try_into","","",226,[[],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"type_id","","",226,[[["self"]],["typeid"]]],[11,"from","","",227,[[["t"]],["t"]]],[11,"into_iter","","",227,[[],["i"]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"into","","",227,[[],["u"]]],[11,"try_into","","",227,[[],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"type_id","","",227,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"into","","",30,[[],["u"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"to_string","","",30,[[["self"]],["string"]]],[11,"from","","",228,[[["t"]],["t"]]],[11,"into_iter","","",228,[[],["i"]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"into","","",228,[[],["u"]]],[11,"try_into","","",228,[[],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"type_id","","",228,[[["self"]],["typeid"]]],[11,"from","","",229,[[["t"]],["t"]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"into","","",229,[[],["u"]]],[11,"try_into","","",229,[[],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"type_id","","",229,[[["self"]],["typeid"]]],[11,"to_string","","",229,[[["self"]],["string"]]],[11,"from","","",230,[[["t"]],["t"]]],[11,"into_iter","","",230,[[],["i"]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"into","","",230,[[],["u"]]],[11,"try_into","","",230,[[],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"type_id","","",230,[[["self"]],["typeid"]]],[11,"from","","",231,[[["t"]],["t"]]],[11,"into_iter","","",231,[[],["i"]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"into","","",231,[[],["u"]]],[11,"try_into","","",231,[[],["result"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"type_id","","",231,[[["self"]],["typeid"]]],[11,"from","no_std_compat::error","",232,[[["t"]],["t"]]],[11,"into_iter","","",232,[[],["i"]]],[11,"try_from","","",232,[[["u"]],["result"]]],[11,"into","","",232,[[],["u"]]],[11,"try_into","","",232,[[],["result"]]],[11,"borrow","","",232,[[["self"]],["t"]]],[11,"borrow_mut","","",232,[[["self"]],["t"]]],[11,"type_id","","",232,[[["self"]],["typeid"]]],[11,"to_owned","","",232,[[["self"]],["t"]]],[11,"clone_into","","",232,[[["self"],["t"]]]],[11,"from","no_std_compat::ffi","",233,[[["t"]],["t"]]],[11,"try_from","","",233,[[["u"]],["result"]]],[11,"into","","",233,[[],["u"]]],[11,"try_into","","",233,[[],["result"]]],[11,"borrow","","",233,[[["self"]],["t"]]],[11,"borrow_mut","","",233,[[["self"]],["t"]]],[11,"type_id","","",233,[[["self"]],["typeid"]]],[11,"to_owned","","",233,[[["self"]],["t"]]],[11,"clone_into","","",233,[[["self"],["t"]]]],[11,"to_string","","",233,[[["self"]],["string"]]],[11,"borrow","","",234,[[["self"]],["t"]]],[11,"borrow_mut","","",234,[[["self"]],["t"]]],[11,"type_id","","",234,[[["self"]],["typeid"]]],[11,"to_owned","","",234,[[["self"]],["t"]]],[11,"clone_into","","",234,[[["self"],["t"]]]],[11,"from","","",235,[[["t"]],["t"]]],[11,"try_from","","",235,[[["u"]],["result"]]],[11,"into","","",235,[[],["u"]]],[11,"try_into","","",235,[[],["result"]]],[11,"borrow","","",235,[[["self"]],["t"]]],[11,"borrow_mut","","",235,[[["self"]],["t"]]],[11,"type_id","","",235,[[["self"]],["typeid"]]],[11,"to_owned","","",235,[[["self"]],["t"]]],[11,"clone_into","","",235,[[["self"],["t"]]]],[11,"from","","",236,[[["t"]],["t"]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"into","","",236,[[],["u"]]],[11,"try_into","","",236,[[],["result"]]],[11,"borrow","","",236,[[["self"]],["t"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"type_id","","",236,[[["self"]],["typeid"]]],[11,"to_owned","","",236,[[["self"]],["t"]]],[11,"clone_into","","",236,[[["self"],["t"]]]],[11,"to_string","","",236,[[["self"]],["string"]]],[11,"from","","",237,[[["t"]],["t"]]],[11,"try_from","","",237,[[["u"]],["result"]]],[11,"into","","",237,[[],["u"]]],[11,"try_into","","",237,[[],["result"]]],[11,"borrow","","",237,[[["self"]],["t"]]],[11,"borrow_mut","","",237,[[["self"]],["t"]]],[11,"type_id","","",237,[[["self"]],["typeid"]]],[11,"to_owned","","",237,[[["self"]],["t"]]],[11,"clone_into","","",237,[[["self"],["t"]]]],[11,"to_string","","",237,[[["self"]],["string"]]],[11,"borrow","","",238,[[["self"]],["t"]]],[11,"borrow_mut","","",238,[[["self"]],["t"]]],[11,"type_id","","",238,[[["self"]],["typeid"]]],[11,"to_owned","","",238,[[["self"]],["t"]]],[11,"clone_into","","",238,[[["self"],["t"]]]],[11,"from","","",239,[[["t"]],["t"]]],[11,"try_from","","",239,[[["u"]],["result"]]],[11,"into","","",239,[[],["u"]]],[11,"try_into","","",239,[[],["result"]]],[11,"borrow","","",239,[[["self"]],["t"]]],[11,"borrow_mut","","",239,[[["self"]],["t"]]],[11,"type_id","","",239,[[["self"]],["typeid"]]],[11,"to_owned","","",239,[[["self"]],["t"]]],[11,"clone_into","","",239,[[["self"],["t"]]]],[11,"from","no_std_compat::os::raw","",240,[[["t"]],["t"]]],[11,"try_from","","",240,[[["u"]],["result"]]],[11,"into","","",240,[[],["u"]]],[11,"try_into","","",240,[[],["result"]]],[11,"borrow","","",240,[[["self"]],["t"]]],[11,"borrow_mut","","",240,[[["self"]],["t"]]],[11,"type_id","","",240,[[["self"]],["typeid"]]],[11,"from","no_std_compat::ffi","",241,[[["t"]],["t"]]],[11,"try_from","","",241,[[["u"]],["result"]]],[11,"into","","",241,[[],["u"]]],[11,"try_into","","",241,[[],["result"]]],[11,"borrow","","",241,[[["self"]],["t"]]],[11,"borrow_mut","","",241,[[["self"]],["t"]]],[11,"type_id","","",241,[[["self"]],["typeid"]]],[11,"from","","",242,[[["t"]],["t"]]],[11,"try_from","","",242,[[["u"]],["result"]]],[11,"into","","",242,[[],["u"]]],[11,"try_into","","",242,[[],["result"]]],[11,"borrow","","",242,[[["self"]],["t"]]],[11,"borrow_mut","","",242,[[["self"]],["t"]]],[11,"type_id","","",242,[[["self"]],["typeid"]]],[11,"to_owned","","",242,[[["self"]],["t"]]],[11,"clone_into","","",242,[[["self"],["t"]]]],[11,"from","no_std_compat::fs","",243,[[["t"]],["t"]]],[11,"try_from","","",243,[[["u"]],["result"]]],[11,"into","","",243,[[],["u"]]],[11,"try_into","","",243,[[],["result"]]],[11,"borrow","","",243,[[["self"]],["t"]]],[11,"borrow_mut","","",243,[[["self"]],["t"]]],[11,"type_id","","",243,[[["self"]],["typeid"]]],[11,"from","","",244,[[["t"]],["t"]]],[11,"try_from","","",244,[[["u"]],["result"]]],[11,"into","","",244,[[],["u"]]],[11,"try_into","","",244,[[],["result"]]],[11,"borrow","","",244,[[["self"]],["t"]]],[11,"borrow_mut","","",244,[[["self"]],["t"]]],[11,"type_id","","",244,[[["self"]],["typeid"]]],[11,"to_owned","","",244,[[["self"]],["t"]]],[11,"clone_into","","",244,[[["self"],["t"]]]],[11,"from","","",245,[[["t"]],["t"]]],[11,"into_iter","","",245,[[],["i"]]],[11,"try_from","","",245,[[["u"]],["result"]]],[11,"into","","",245,[[],["u"]]],[11,"try_into","","",245,[[],["result"]]],[11,"borrow","","",245,[[["self"]],["t"]]],[11,"borrow_mut","","",245,[[["self"]],["t"]]],[11,"type_id","","",245,[[["self"]],["typeid"]]],[11,"from","","",246,[[["t"]],["t"]]],[11,"try_from","","",246,[[["u"]],["result"]]],[11,"into","","",246,[[],["u"]]],[11,"try_into","","",246,[[],["result"]]],[11,"borrow","","",246,[[["self"]],["t"]]],[11,"borrow_mut","","",246,[[["self"]],["t"]]],[11,"type_id","","",246,[[["self"]],["typeid"]]],[11,"from","","",247,[[["t"]],["t"]]],[11,"try_from","","",247,[[["u"]],["result"]]],[11,"into","","",247,[[],["u"]]],[11,"try_into","","",247,[[],["result"]]],[11,"borrow","","",247,[[["self"]],["t"]]],[11,"borrow_mut","","",247,[[["self"]],["t"]]],[11,"type_id","","",247,[[["self"]],["typeid"]]],[11,"to_owned","","",247,[[["self"]],["t"]]],[11,"clone_into","","",247,[[["self"],["t"]]]],[11,"from","","",248,[[["t"]],["t"]]],[11,"try_from","","",248,[[["u"]],["result"]]],[11,"into","","",248,[[],["u"]]],[11,"try_into","","",248,[[],["result"]]],[11,"borrow","","",248,[[["self"]],["t"]]],[11,"borrow_mut","","",248,[[["self"]],["t"]]],[11,"type_id","","",248,[[["self"]],["typeid"]]],[11,"to_owned","","",248,[[["self"]],["t"]]],[11,"clone_into","","",248,[[["self"],["t"]]]],[11,"from","","",249,[[["t"]],["t"]]],[11,"try_from","","",249,[[["u"]],["result"]]],[11,"into","","",249,[[],["u"]]],[11,"try_into","","",249,[[],["result"]]],[11,"borrow","","",249,[[["self"]],["t"]]],[11,"borrow_mut","","",249,[[["self"]],["t"]]],[11,"type_id","","",249,[[["self"]],["typeid"]]],[11,"to_owned","","",249,[[["self"]],["t"]]],[11,"clone_into","","",249,[[["self"],["t"]]]],[11,"from","","",250,[[["t"]],["t"]]],[11,"try_from","","",250,[[["u"]],["result"]]],[11,"into","","",250,[[],["u"]]],[11,"try_into","","",250,[[],["result"]]],[11,"borrow","","",250,[[["self"]],["t"]]],[11,"borrow_mut","","",250,[[["self"]],["t"]]],[11,"type_id","","",250,[[["self"]],["typeid"]]],[11,"from","no_std_compat::io","",251,[[["t"]],["t"]]],[11,"try_from","","",251,[[["u"]],["result"]]],[11,"into","","",251,[[],["u"]]],[11,"try_into","","",251,[[],["result"]]],[11,"borrow","","",251,[[["self"]],["t"]]],[11,"borrow_mut","","",251,[[["self"]],["t"]]],[11,"type_id","","",251,[[["self"]],["typeid"]]],[11,"from","","",252,[[["t"]],["t"]]],[11,"try_from","","",252,[[["u"]],["result"]]],[11,"into","","",252,[[],["u"]]],[11,"try_into","","",252,[[],["result"]]],[11,"borrow","","",252,[[["self"]],["t"]]],[11,"borrow_mut","","",252,[[["self"]],["t"]]],[11,"type_id","","",252,[[["self"]],["typeid"]]],[11,"from","","",253,[[["t"]],["t"]]],[11,"try_from","","",253,[[["u"]],["result"]]],[11,"into","","",253,[[],["u"]]],[11,"try_into","","",253,[[],["result"]]],[11,"borrow","","",253,[[["self"]],["t"]]],[11,"borrow_mut","","",253,[[["self"]],["t"]]],[11,"type_id","","",253,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"into","","",36,[[],["u"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"from","","",254,[[["t"]],["t"]]],[11,"try_from","","",254,[[["u"]],["result"]]],[11,"into","","",254,[[],["u"]]],[11,"try_into","","",254,[[],["result"]]],[11,"borrow","","",254,[[["self"]],["t"]]],[11,"borrow_mut","","",254,[[["self"]],["t"]]],[11,"type_id","","",254,[[["self"]],["typeid"]]],[11,"from","","",255,[[["t"]],["t"]]],[11,"try_from","","",255,[[["u"]],["result"]]],[11,"into","","",255,[[],["u"]]],[11,"try_into","","",255,[[],["result"]]],[11,"borrow","","",255,[[["self"]],["t"]]],[11,"borrow_mut","","",255,[[["self"]],["t"]]],[11,"type_id","","",255,[[["self"]],["typeid"]]],[11,"from","","",256,[[["t"]],["t"]]],[11,"into_iter","","",256,[[],["i"]]],[11,"try_from","","",256,[[["u"]],["result"]]],[11,"into","","",256,[[],["u"]]],[11,"try_into","","",256,[[],["result"]]],[11,"borrow","","",256,[[["self"]],["t"]]],[11,"borrow_mut","","",256,[[["self"]],["t"]]],[11,"type_id","","",256,[[["self"]],["typeid"]]],[11,"from","","",257,[[["t"]],["t"]]],[11,"into_iter","","",257,[[],["i"]]],[11,"try_from","","",257,[[["u"]],["result"]]],[11,"into","","",257,[[],["u"]]],[11,"try_into","","",257,[[],["result"]]],[11,"borrow","","",257,[[["self"]],["t"]]],[11,"borrow_mut","","",257,[[["self"]],["t"]]],[11,"type_id","","",257,[[["self"]],["typeid"]]],[11,"from","","",258,[[["t"]],["t"]]],[11,"into_iter","","",258,[[],["i"]]],[11,"try_from","","",258,[[["u"]],["result"]]],[11,"into","","",258,[[],["u"]]],[11,"try_into","","",258,[[],["result"]]],[11,"borrow","","",258,[[["self"]],["t"]]],[11,"borrow_mut","","",258,[[["self"]],["t"]]],[11,"type_id","","",258,[[["self"]],["typeid"]]],[11,"from","","",259,[[["t"]],["t"]]],[11,"try_from","","",259,[[["u"]],["result"]]],[11,"into","","",259,[[],["u"]]],[11,"try_into","","",259,[[],["result"]]],[11,"borrow","","",259,[[["self"]],["t"]]],[11,"borrow_mut","","",259,[[["self"]],["t"]]],[11,"type_id","","",259,[[["self"]],["typeid"]]],[11,"to_string","","",259,[[["self"]],["string"]]],[11,"from","","",260,[[["t"]],["t"]]],[11,"try_from","","",260,[[["u"]],["result"]]],[11,"into","","",260,[[],["u"]]],[11,"try_into","","",260,[[],["result"]]],[11,"borrow","","",260,[[["self"]],["t"]]],[11,"borrow_mut","","",260,[[["self"]],["t"]]],[11,"type_id","","",260,[[["self"]],["typeid"]]],[11,"from","","",261,[[["t"]],["t"]]],[11,"try_from","","",261,[[["u"]],["result"]]],[11,"into","","",261,[[],["u"]]],[11,"try_into","","",261,[[],["result"]]],[11,"borrow","","",261,[[["self"]],["t"]]],[11,"borrow_mut","","",261,[[["self"]],["t"]]],[11,"type_id","","",261,[[["self"]],["typeid"]]],[11,"from","","",262,[[["t"]],["t"]]],[11,"try_from","","",262,[[["u"]],["result"]]],[11,"into","","",262,[[],["u"]]],[11,"try_into","","",262,[[],["result"]]],[11,"borrow","","",262,[[["self"]],["t"]]],[11,"borrow_mut","","",262,[[["self"]],["t"]]],[11,"type_id","","",262,[[["self"]],["typeid"]]],[11,"from","","",263,[[["t"]],["t"]]],[11,"try_from","","",263,[[["u"]],["result"]]],[11,"into","","",263,[[],["u"]]],[11,"try_into","","",263,[[],["result"]]],[11,"borrow","","",263,[[["self"]],["t"]]],[11,"borrow_mut","","",263,[[["self"]],["t"]]],[11,"type_id","","",263,[[["self"]],["typeid"]]],[11,"to_owned","","",263,[[["self"]],["t"]]],[11,"clone_into","","",263,[[["self"],["t"]]]],[11,"from","","",264,[[["t"]],["t"]]],[11,"try_from","","",264,[[["u"]],["result"]]],[11,"into","","",264,[[],["u"]]],[11,"try_into","","",264,[[],["result"]]],[11,"borrow","","",264,[[["self"]],["t"]]],[11,"borrow_mut","","",264,[[["self"]],["t"]]],[11,"type_id","","",264,[[["self"]],["typeid"]]],[11,"to_string","","",264,[[["self"]],["string"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"into","","",37,[[],["u"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"from","","",265,[[["t"]],["t"]]],[11,"try_from","","",265,[[["u"]],["result"]]],[11,"into","","",265,[[],["u"]]],[11,"try_into","","",265,[[],["result"]]],[11,"borrow","","",265,[[["self"]],["t"]]],[11,"borrow_mut","","",265,[[["self"]],["t"]]],[11,"type_id","","",265,[[["self"]],["typeid"]]],[11,"from","","",266,[[["t"]],["t"]]],[11,"try_from","","",266,[[["u"]],["result"]]],[11,"into","","",266,[[],["u"]]],[11,"try_into","","",266,[[],["result"]]],[11,"borrow","","",266,[[["self"]],["t"]]],[11,"borrow_mut","","",266,[[["self"]],["t"]]],[11,"type_id","","",266,[[["self"]],["typeid"]]],[11,"from","","",267,[[["t"]],["t"]]],[11,"try_from","","",267,[[["u"]],["result"]]],[11,"into","","",267,[[],["u"]]],[11,"try_into","","",267,[[],["result"]]],[11,"borrow","","",267,[[["self"]],["t"]]],[11,"borrow_mut","","",267,[[["self"]],["t"]]],[11,"type_id","","",267,[[["self"]],["typeid"]]],[11,"from","","",268,[[["t"]],["t"]]],[11,"try_from","","",268,[[["u"]],["result"]]],[11,"into","","",268,[[],["u"]]],[11,"try_into","","",268,[[],["result"]]],[11,"borrow","","",268,[[["self"]],["t"]]],[11,"borrow_mut","","",268,[[["self"]],["t"]]],[11,"type_id","","",268,[[["self"]],["typeid"]]],[11,"from","","",269,[[["t"]],["t"]]],[11,"try_from","","",269,[[["u"]],["result"]]],[11,"into","","",269,[[],["u"]]],[11,"try_into","","",269,[[],["result"]]],[11,"borrow","","",269,[[["self"]],["t"]]],[11,"borrow_mut","","",269,[[["self"]],["t"]]],[11,"type_id","","",269,[[["self"]],["typeid"]]],[11,"from","","",270,[[["t"]],["t"]]],[11,"try_from","","",270,[[["u"]],["result"]]],[11,"into","","",270,[[],["u"]]],[11,"try_into","","",270,[[],["result"]]],[11,"borrow","","",270,[[["self"]],["t"]]],[11,"borrow_mut","","",270,[[["self"]],["t"]]],[11,"type_id","","",270,[[["self"]],["typeid"]]],[11,"from","","",271,[[["t"]],["t"]]],[11,"try_from","","",271,[[["u"]],["result"]]],[11,"into","","",271,[[],["u"]]],[11,"try_into","","",271,[[],["result"]]],[11,"borrow","","",271,[[["self"]],["t"]]],[11,"borrow_mut","","",271,[[["self"]],["t"]]],[11,"type_id","","",271,[[["self"]],["typeid"]]],[11,"from","","",272,[[["t"]],["t"]]],[11,"try_from","","",272,[[["u"]],["result"]]],[11,"into","","",272,[[],["u"]]],[11,"try_into","","",272,[[],["result"]]],[11,"borrow","","",272,[[["self"]],["t"]]],[11,"borrow_mut","","",272,[[["self"]],["t"]]],[11,"type_id","","",272,[[["self"]],["typeid"]]],[11,"from","","",273,[[["t"]],["t"]]],[11,"try_from","","",273,[[["u"]],["result"]]],[11,"into","","",273,[[],["u"]]],[11,"try_into","","",273,[[],["result"]]],[11,"borrow","","",273,[[["self"]],["t"]]],[11,"borrow_mut","","",273,[[["self"]],["t"]]],[11,"type_id","","",273,[[["self"]],["typeid"]]],[11,"from","no_std_compat::net","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"into","","",38,[[],["u"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"into","","",39,[[],["u"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"to_string","","",39,[[["self"]],["string"]]],[11,"from","","",274,[[["t"]],["t"]]],[11,"try_from","","",274,[[["u"]],["result"]]],[11,"into","","",274,[[],["u"]]],[11,"try_into","","",274,[[],["result"]]],[11,"borrow","","",274,[[["self"]],["t"]]],[11,"borrow_mut","","",274,[[["self"]],["t"]]],[11,"type_id","","",274,[[["self"]],["typeid"]]],[11,"to_owned","","",274,[[["self"]],["t"]]],[11,"clone_into","","",274,[[["self"],["t"]]]],[11,"to_string","","",274,[[["self"]],["string"]]],[11,"from","","",275,[[["t"]],["t"]]],[11,"try_from","","",275,[[["u"]],["result"]]],[11,"into","","",275,[[],["u"]]],[11,"try_into","","",275,[[],["result"]]],[11,"borrow","","",275,[[["self"]],["t"]]],[11,"borrow_mut","","",275,[[["self"]],["t"]]],[11,"type_id","","",275,[[["self"]],["typeid"]]],[11,"to_owned","","",275,[[["self"]],["t"]]],[11,"clone_into","","",275,[[["self"],["t"]]]],[11,"to_string","","",275,[[["self"]],["string"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"into","","",41,[[],["u"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"to_string","","",41,[[["self"]],["string"]]],[11,"from","","",276,[[["t"]],["t"]]],[11,"try_from","","",276,[[["u"]],["result"]]],[11,"into","","",276,[[],["u"]]],[11,"try_into","","",276,[[],["result"]]],[11,"borrow","","",276,[[["self"]],["t"]]],[11,"borrow_mut","","",276,[[["self"]],["t"]]],[11,"type_id","","",276,[[["self"]],["typeid"]]],[11,"to_owned","","",276,[[["self"]],["t"]]],[11,"clone_into","","",276,[[["self"],["t"]]]],[11,"to_string","","",276,[[["self"]],["string"]]],[11,"from","","",277,[[["t"]],["t"]]],[11,"try_from","","",277,[[["u"]],["result"]]],[11,"into","","",277,[[],["u"]]],[11,"try_into","","",277,[[],["result"]]],[11,"borrow","","",277,[[["self"]],["t"]]],[11,"borrow_mut","","",277,[[["self"]],["t"]]],[11,"type_id","","",277,[[["self"]],["typeid"]]],[11,"to_owned","","",277,[[["self"]],["t"]]],[11,"clone_into","","",277,[[["self"],["t"]]]],[11,"to_string","","",277,[[["self"]],["string"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"into","","",42,[[],["u"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"from","","",278,[[["t"]],["t"]]],[11,"try_from","","",278,[[["u"]],["result"]]],[11,"into","","",278,[[],["u"]]],[11,"try_into","","",278,[[],["result"]]],[11,"borrow","","",278,[[["self"]],["t"]]],[11,"borrow_mut","","",278,[[["self"]],["t"]]],[11,"type_id","","",278,[[["self"]],["typeid"]]],[11,"to_owned","","",278,[[["self"]],["t"]]],[11,"clone_into","","",278,[[["self"],["t"]]]],[11,"to_string","","",278,[[["self"]],["string"]]],[11,"from","","",279,[[["t"]],["t"]]],[11,"into_iter","","",279,[[],["i"]]],[11,"try_from","","",279,[[["u"]],["result"]]],[11,"into","","",279,[[],["u"]]],[11,"try_into","","",279,[[],["result"]]],[11,"borrow","","",279,[[["self"]],["t"]]],[11,"borrow_mut","","",279,[[["self"]],["t"]]],[11,"type_id","","",279,[[["self"]],["typeid"]]],[11,"from","","",280,[[["t"]],["t"]]],[11,"try_from","","",280,[[["u"]],["result"]]],[11,"into","","",280,[[],["u"]]],[11,"try_into","","",280,[[],["result"]]],[11,"borrow","","",280,[[["self"]],["t"]]],[11,"borrow_mut","","",280,[[["self"]],["t"]]],[11,"type_id","","",280,[[["self"]],["typeid"]]],[11,"from","","",281,[[["t"]],["t"]]],[11,"try_from","","",281,[[["u"]],["result"]]],[11,"into","","",281,[[],["u"]]],[11,"try_into","","",281,[[],["result"]]],[11,"borrow","","",281,[[["self"]],["t"]]],[11,"borrow_mut","","",281,[[["self"]],["t"]]],[11,"type_id","","",281,[[["self"]],["typeid"]]],[11,"from","","",282,[[["t"]],["t"]]],[11,"try_from","","",282,[[["u"]],["result"]]],[11,"into","","",282,[[],["u"]]],[11,"try_into","","",282,[[],["result"]]],[11,"borrow","","",282,[[["self"]],["t"]]],[11,"borrow_mut","","",282,[[["self"]],["t"]]],[11,"type_id","","",282,[[["self"]],["typeid"]]],[11,"from","no_std_compat::num","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"into","","",43,[[],["u"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"to_string","","",43,[[["self"]],["string"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"into","","",44,[[],["u"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"from","","",283,[[["t"]],["t"]]],[11,"try_from","","",283,[[["u"]],["result"]]],[11,"into","","",283,[[],["u"]]],[11,"try_into","","",283,[[],["result"]]],[11,"borrow","","",283,[[["self"]],["t"]]],[11,"borrow_mut","","",283,[[["self"]],["t"]]],[11,"type_id","","",283,[[["self"]],["typeid"]]],[11,"to_owned","","",283,[[["self"]],["t"]]],[11,"clone_into","","",283,[[["self"],["t"]]]],[11,"to_string","","",283,[[["self"]],["string"]]],[11,"from","","",284,[[["t"]],["t"]]],[11,"try_from","","",284,[[["u"]],["result"]]],[11,"into","","",284,[[],["u"]]],[11,"try_into","","",284,[[],["result"]]],[11,"borrow","","",284,[[["self"]],["t"]]],[11,"borrow_mut","","",284,[[["self"]],["t"]]],[11,"type_id","","",284,[[["self"]],["typeid"]]],[11,"to_owned","","",284,[[["self"]],["t"]]],[11,"clone_into","","",284,[[["self"],["t"]]]],[11,"to_string","","",284,[[["self"]],["string"]]],[11,"from","","",285,[[],["t"]]],[11,"from","","",285,[[["t"]],["t"]]],[11,"try_from","","",285,[[["u"]],["result"]]],[11,"into","","",285,[[],["u"]]],[11,"try_into","","",285,[[],["result"]]],[11,"borrow","","",285,[[["self"]],["t"]]],[11,"borrow_mut","","",285,[[["self"]],["t"]]],[11,"type_id","","",285,[[["self"]],["typeid"]]],[11,"to_owned","","",285,[[["self"]],["t"]]],[11,"clone_into","","",285,[[["self"],["t"]]]],[11,"to_string","","",285,[[["self"]],["string"]]],[11,"from","","",286,[[["t"]],["t"]]],[11,"try_from","","",286,[[["u"]],["result"]]],[11,"into","","",286,[[],["u"]]],[11,"try_into","","",286,[[],["result"]]],[11,"borrow","","",286,[[["self"]],["t"]]],[11,"borrow_mut","","",286,[[["self"]],["t"]]],[11,"type_id","","",286,[[["self"]],["typeid"]]],[11,"to_owned","","",286,[[["self"]],["t"]]],[11,"clone_into","","",286,[[["self"],["t"]]]],[11,"to_string","","",286,[[["self"]],["string"]]],[11,"from","","",287,[[["t"]],["t"]]],[11,"try_from","","",287,[[["u"]],["result"]]],[11,"into","","",287,[[],["u"]]],[11,"try_into","","",287,[[],["result"]]],[11,"borrow","","",287,[[["self"]],["t"]]],[11,"borrow_mut","","",287,[[["self"]],["t"]]],[11,"type_id","","",287,[[["self"]],["typeid"]]],[11,"to_owned","","",287,[[["self"]],["t"]]],[11,"clone_into","","",287,[[["self"],["t"]]]],[11,"to_string","","",287,[[["self"]],["string"]]],[11,"from","","",288,[[["t"]],["t"]]],[11,"try_from","","",288,[[["u"]],["result"]]],[11,"into","","",288,[[],["u"]]],[11,"try_into","","",288,[[],["result"]]],[11,"borrow","","",288,[[["self"]],["t"]]],[11,"borrow_mut","","",288,[[["self"]],["t"]]],[11,"type_id","","",288,[[["self"]],["typeid"]]],[11,"to_owned","","",288,[[["self"]],["t"]]],[11,"clone_into","","",288,[[["self"],["t"]]]],[11,"to_string","","",288,[[["self"]],["string"]]],[11,"from","","",289,[[["t"]],["t"]]],[11,"try_from","","",289,[[["u"]],["result"]]],[11,"into","","",289,[[],["u"]]],[11,"try_into","","",289,[[],["result"]]],[11,"borrow","","",289,[[["self"]],["t"]]],[11,"borrow_mut","","",289,[[["self"]],["t"]]],[11,"type_id","","",289,[[["self"]],["typeid"]]],[11,"to_owned","","",289,[[["self"]],["t"]]],[11,"clone_into","","",289,[[["self"],["t"]]]],[11,"to_string","","",289,[[["self"]],["string"]]],[11,"from","","",290,[[["t"]],["t"]]],[11,"try_from","","",290,[[["u"]],["result"]]],[11,"into","","",290,[[],["u"]]],[11,"try_into","","",290,[[],["result"]]],[11,"borrow","","",290,[[["self"]],["t"]]],[11,"borrow_mut","","",290,[[["self"]],["t"]]],[11,"type_id","","",290,[[["self"]],["typeid"]]],[11,"to_owned","","",290,[[["self"]],["t"]]],[11,"clone_into","","",290,[[["self"],["t"]]]],[11,"to_string","","",290,[[["self"]],["string"]]],[11,"from","","",291,[[["t"]],["t"]]],[11,"try_from","","",291,[[["u"]],["result"]]],[11,"into","","",291,[[],["u"]]],[11,"try_into","","",291,[[],["result"]]],[11,"borrow","","",291,[[["self"]],["t"]]],[11,"borrow_mut","","",291,[[["self"]],["t"]]],[11,"type_id","","",291,[[["self"]],["typeid"]]],[11,"to_owned","","",291,[[["self"]],["t"]]],[11,"clone_into","","",291,[[["self"],["t"]]]],[11,"to_string","","",291,[[["self"]],["string"]]],[11,"from","","",292,[[["t"]],["t"]]],[11,"try_from","","",292,[[["u"]],["result"]]],[11,"into","","",292,[[],["u"]]],[11,"try_into","","",292,[[],["result"]]],[11,"borrow","","",292,[[["self"]],["t"]]],[11,"borrow_mut","","",292,[[["self"]],["t"]]],[11,"type_id","","",292,[[["self"]],["typeid"]]],[11,"to_owned","","",292,[[["self"]],["t"]]],[11,"clone_into","","",292,[[["self"],["t"]]]],[11,"to_string","","",292,[[["self"]],["string"]]],[11,"from","","",293,[[["t"]],["t"]]],[11,"try_from","","",293,[[["u"]],["result"]]],[11,"into","","",293,[[],["u"]]],[11,"try_into","","",293,[[],["result"]]],[11,"borrow","","",293,[[["self"]],["t"]]],[11,"borrow_mut","","",293,[[["self"]],["t"]]],[11,"type_id","","",293,[[["self"]],["typeid"]]],[11,"to_owned","","",293,[[["self"]],["t"]]],[11,"clone_into","","",293,[[["self"],["t"]]]],[11,"to_string","","",293,[[["self"]],["string"]]],[11,"from","","",294,[[["t"]],["t"]]],[11,"try_from","","",294,[[["u"]],["result"]]],[11,"into","","",294,[[],["u"]]],[11,"try_into","","",294,[[],["result"]]],[11,"borrow","","",294,[[["self"]],["t"]]],[11,"borrow_mut","","",294,[[["self"]],["t"]]],[11,"type_id","","",294,[[["self"]],["typeid"]]],[11,"to_owned","","",294,[[["self"]],["t"]]],[11,"clone_into","","",294,[[["self"],["t"]]]],[11,"to_string","","",294,[[["self"]],["string"]]],[11,"from","","",295,[[["t"]],["t"]]],[11,"try_from","","",295,[[["u"]],["result"]]],[11,"into","","",295,[[],["u"]]],[11,"try_into","","",295,[[],["result"]]],[11,"borrow","","",295,[[["self"]],["t"]]],[11,"borrow_mut","","",295,[[["self"]],["t"]]],[11,"type_id","","",295,[[["self"]],["typeid"]]],[11,"to_owned","","",295,[[["self"]],["t"]]],[11,"clone_into","","",295,[[["self"],["t"]]]],[11,"to_string","","",295,[[["self"]],["string"]]],[11,"from","","",296,[[["t"]],["t"]]],[11,"try_from","","",296,[[["u"]],["result"]]],[11,"into","","",296,[[],["u"]]],[11,"try_into","","",296,[[],["result"]]],[11,"borrow","","",296,[[["self"]],["t"]]],[11,"borrow_mut","","",296,[[["self"]],["t"]]],[11,"type_id","","",296,[[["self"]],["typeid"]]],[11,"to_owned","","",296,[[["self"]],["t"]]],[11,"clone_into","","",296,[[["self"],["t"]]]],[11,"to_string","","",296,[[["self"]],["string"]]],[11,"from","","",297,[[["t"]],["t"]]],[11,"try_from","","",297,[[["u"]],["result"]]],[11,"into","","",297,[[],["u"]]],[11,"try_into","","",297,[[],["result"]]],[11,"borrow","","",297,[[["self"]],["t"]]],[11,"borrow_mut","","",297,[[["self"]],["t"]]],[11,"type_id","","",297,[[["self"]],["typeid"]]],[11,"to_owned","","",297,[[["self"]],["t"]]],[11,"clone_into","","",297,[[["self"],["t"]]]],[11,"to_string","","",297,[[["self"]],["string"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"into","","",45,[[],["u"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"from","no_std_compat::os::linux::raw","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"into","","",47,[[],["u"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"from","no_std_compat::os::unix::net","",298,[[["t"]],["t"]]],[11,"try_from","","",298,[[["u"]],["result"]]],[11,"into","","",298,[[],["u"]]],[11,"try_into","","",298,[[],["result"]]],[11,"borrow","","",298,[[["self"]],["t"]]],[11,"borrow_mut","","",298,[[["self"]],["t"]]],[11,"type_id","","",298,[[["self"]],["typeid"]]],[11,"to_owned","","",298,[[["self"]],["t"]]],[11,"clone_into","","",298,[[["self"],["t"]]]],[11,"from","","",299,[[["t"]],["t"]]],[11,"try_from","","",299,[[["u"]],["result"]]],[11,"into","","",299,[[],["u"]]],[11,"try_into","","",299,[[],["result"]]],[11,"borrow","","",299,[[["self"]],["t"]]],[11,"borrow_mut","","",299,[[["self"]],["t"]]],[11,"type_id","","",299,[[["self"]],["typeid"]]],[11,"from","","",300,[[["t"]],["t"]]],[11,"try_from","","",300,[[["u"]],["result"]]],[11,"into","","",300,[[],["u"]]],[11,"try_into","","",300,[[],["result"]]],[11,"borrow","","",300,[[["self"]],["t"]]],[11,"borrow_mut","","",300,[[["self"]],["t"]]],[11,"type_id","","",300,[[["self"]],["typeid"]]],[11,"from","","",301,[[["t"]],["t"]]],[11,"into_iter","","",301,[[],["i"]]],[11,"try_from","","",301,[[["u"]],["result"]]],[11,"into","","",301,[[],["u"]]],[11,"try_into","","",301,[[],["result"]]],[11,"borrow","","",301,[[["self"]],["t"]]],[11,"borrow_mut","","",301,[[["self"]],["t"]]],[11,"type_id","","",301,[[["self"]],["typeid"]]],[11,"from","","",302,[[["t"]],["t"]]],[11,"try_from","","",302,[[["u"]],["result"]]],[11,"into","","",302,[[],["u"]]],[11,"try_into","","",302,[[],["result"]]],[11,"borrow","","",302,[[["self"]],["t"]]],[11,"borrow_mut","","",302,[[["self"]],["t"]]],[11,"type_id","","",302,[[["self"]],["typeid"]]],[11,"from","no_std_compat::panic","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"into","","",63,[[],["u"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"from","","",303,[[["t"]],["t"]]],[11,"try_from","","",303,[[["u"]],["result"]]],[11,"into","","",303,[[],["u"]]],[11,"try_into","","",303,[[],["result"]]],[11,"borrow","","",303,[[["self"]],["t"]]],[11,"borrow_mut","","",303,[[["self"]],["t"]]],[11,"type_id","","",303,[[["self"]],["typeid"]]],[11,"to_string","","",303,[[["self"]],["string"]]],[11,"from","","",304,[[["t"]],["t"]]],[11,"try_from","","",304,[[["u"]],["result"]]],[11,"into","","",304,[[],["u"]]],[11,"try_into","","",304,[[],["result"]]],[11,"borrow","","",304,[[["self"]],["t"]]],[11,"borrow_mut","","",304,[[["self"]],["t"]]],[11,"type_id","","",304,[[["self"]],["typeid"]]],[11,"to_string","","",304,[[["self"]],["string"]]],[11,"from","no_std_compat::path","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"into","","",64,[[],["u"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,[[["self"],["t"]]]],[11,"from","","",305,[[["t"]],["t"]]],[11,"try_from","","",305,[[["u"]],["result"]]],[11,"into","","",305,[[],["u"]]],[11,"try_into","","",305,[[],["result"]]],[11,"borrow","","",305,[[["self"]],["t"]]],[11,"borrow_mut","","",305,[[["self"]],["t"]]],[11,"type_id","","",305,[[["self"]],["typeid"]]],[11,"to_owned","","",305,[[["self"]],["t"]]],[11,"clone_into","","",305,[[["self"],["t"]]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"into","","",65,[[],["u"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,[[["self"],["t"]]]],[11,"from","","",306,[[["t"]],["t"]]],[11,"into_iter","","",306,[[],["i"]]],[11,"try_from","","",306,[[["u"]],["result"]]],[11,"into","","",306,[[],["u"]]],[11,"try_into","","",306,[[],["result"]]],[11,"borrow","","",306,[[["self"]],["t"]]],[11,"borrow_mut","","",306,[[["self"]],["t"]]],[11,"type_id","","",306,[[["self"]],["typeid"]]],[11,"to_owned","","",306,[[["self"]],["t"]]],[11,"clone_into","","",306,[[["self"],["t"]]]],[11,"from","","",307,[[["t"]],["t"]]],[11,"into_iter","","",307,[[],["i"]]],[11,"try_from","","",307,[[["u"]],["result"]]],[11,"into","","",307,[[],["u"]]],[11,"try_into","","",307,[[],["result"]]],[11,"borrow","","",307,[[["self"]],["t"]]],[11,"borrow_mut","","",307,[[["self"]],["t"]]],[11,"type_id","","",307,[[["self"]],["typeid"]]],[11,"to_owned","","",307,[[["self"]],["t"]]],[11,"clone_into","","",307,[[["self"],["t"]]]],[11,"from","","",308,[[["t"]],["t"]]],[11,"into_iter","","",308,[[],["i"]]],[11,"try_from","","",308,[[["u"]],["result"]]],[11,"into","","",308,[[],["u"]]],[11,"try_into","","",308,[[],["result"]]],[11,"borrow","","",308,[[["self"]],["t"]]],[11,"borrow_mut","","",308,[[["self"]],["t"]]],[11,"type_id","","",308,[[["self"]],["typeid"]]],[11,"to_owned","","",308,[[["self"]],["t"]]],[11,"clone_into","","",308,[[["self"],["t"]]]],[11,"from","","",309,[[["t"]],["t"]]],[11,"try_from","","",309,[[["u"]],["result"]]],[11,"into","","",309,[[],["u"]]],[11,"try_into","","",309,[[],["result"]]],[11,"borrow","","",309,[[["self"]],["t"]]],[11,"borrow_mut","","",309,[[["self"]],["t"]]],[11,"type_id","","",309,[[["self"]],["typeid"]]],[11,"to_owned","","",309,[[["self"]],["t"]]],[11,"clone_into","","",309,[[["self"],["t"]]]],[11,"borrow","","",310,[[["self"]],["t"]]],[11,"borrow_mut","","",310,[[["self"]],["t"]]],[11,"type_id","","",310,[[["self"]],["typeid"]]],[11,"to_owned","","",310,[[["self"]],["t"]]],[11,"clone_into","","",310,[[["self"],["t"]]]],[11,"from","","",311,[[["t"]],["t"]]],[11,"try_from","","",311,[[["u"]],["result"]]],[11,"into","","",311,[[],["u"]]],[11,"try_into","","",311,[[],["result"]]],[11,"borrow","","",311,[[["self"]],["t"]]],[11,"borrow_mut","","",311,[[["self"]],["t"]]],[11,"type_id","","",311,[[["self"]],["typeid"]]],[11,"to_owned","","",311,[[["self"]],["t"]]],[11,"clone_into","","",311,[[["self"],["t"]]]],[11,"to_string","","",311,[[["self"]],["string"]]],[11,"from","","",312,[[["t"]],["t"]]],[11,"try_from","","",312,[[["u"]],["result"]]],[11,"into","","",312,[[],["u"]]],[11,"try_into","","",312,[[],["result"]]],[11,"borrow","","",312,[[["self"]],["t"]]],[11,"borrow_mut","","",312,[[["self"]],["t"]]],[11,"type_id","","",312,[[["self"]],["typeid"]]],[11,"to_string","","",312,[[["self"]],["string"]]],[11,"from","no_std_compat::process","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"into","","",66,[[],["u"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"from","","",313,[[["t"]],["t"]]],[11,"try_from","","",313,[[["u"]],["result"]]],[11,"into","","",313,[[],["u"]]],[11,"try_into","","",313,[[],["result"]]],[11,"borrow","","",313,[[["self"]],["t"]]],[11,"borrow_mut","","",313,[[["self"]],["t"]]],[11,"type_id","","",313,[[["self"]],["typeid"]]],[11,"from","","",314,[[["t"]],["t"]]],[11,"try_from","","",314,[[["u"]],["result"]]],[11,"into","","",314,[[],["u"]]],[11,"try_into","","",314,[[],["result"]]],[11,"borrow","","",314,[[["self"]],["t"]]],[11,"borrow_mut","","",314,[[["self"]],["t"]]],[11,"type_id","","",314,[[["self"]],["typeid"]]],[11,"from","","",315,[[["t"]],["t"]]],[11,"try_from","","",315,[[["u"]],["result"]]],[11,"into","","",315,[[],["u"]]],[11,"try_into","","",315,[[],["result"]]],[11,"borrow","","",315,[[["self"]],["t"]]],[11,"borrow_mut","","",315,[[["self"]],["t"]]],[11,"type_id","","",315,[[["self"]],["typeid"]]],[11,"from","","",316,[[["t"]],["t"]]],[11,"try_from","","",316,[[["u"]],["result"]]],[11,"into","","",316,[[],["u"]]],[11,"try_into","","",316,[[],["result"]]],[11,"borrow","","",316,[[["self"]],["t"]]],[11,"borrow_mut","","",316,[[["self"]],["t"]]],[11,"type_id","","",316,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"into","","",67,[[],["u"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"from","","",317,[[["t"]],["t"]]],[11,"try_from","","",317,[[["u"]],["result"]]],[11,"into","","",317,[[],["u"]]],[11,"try_into","","",317,[[],["result"]]],[11,"borrow","","",317,[[["self"]],["t"]]],[11,"borrow_mut","","",317,[[["self"]],["t"]]],[11,"type_id","","",317,[[["self"]],["typeid"]]],[11,"from","","",318,[[["t"]],["t"]]],[11,"try_from","","",318,[[["u"]],["result"]]],[11,"into","","",318,[[],["u"]]],[11,"try_into","","",318,[[],["result"]]],[11,"borrow","","",318,[[["self"]],["t"]]],[11,"borrow_mut","","",318,[[["self"]],["t"]]],[11,"type_id","","",318,[[["self"]],["typeid"]]],[11,"to_owned","","",318,[[["self"]],["t"]]],[11,"clone_into","","",318,[[["self"],["t"]]]],[11,"to_string","","",318,[[["self"]],["string"]]],[11,"from","","",319,[[["t"]],["t"]]],[11,"try_from","","",319,[[["u"]],["result"]]],[11,"into","","",319,[[],["u"]]],[11,"try_into","","",319,[[],["result"]]],[11,"borrow","","",319,[[["self"]],["t"]]],[11,"borrow_mut","","",319,[[["self"]],["t"]]],[11,"type_id","","",319,[[["self"]],["typeid"]]],[11,"to_owned","","",319,[[["self"]],["t"]]],[11,"clone_into","","",319,[[["self"],["t"]]]],[11,"from","no_std_compat::sync::mpsc","",320,[[["t"]],["t"]]],[11,"into_iter","","",320,[[],["i"]]],[11,"try_from","","",320,[[["u"]],["result"]]],[11,"into","","",320,[[],["u"]]],[11,"try_into","","",320,[[],["result"]]],[11,"borrow","","",320,[[["self"]],["t"]]],[11,"borrow_mut","","",320,[[["self"]],["t"]]],[11,"type_id","","",320,[[["self"]],["typeid"]]],[11,"from","","",321,[[["t"]],["t"]]],[11,"into_iter","","",321,[[],["i"]]],[11,"try_from","","",321,[[["u"]],["result"]]],[11,"into","","",321,[[],["u"]]],[11,"try_into","","",321,[[],["result"]]],[11,"borrow","","",321,[[["self"]],["t"]]],[11,"borrow_mut","","",321,[[["self"]],["t"]]],[11,"type_id","","",321,[[["self"]],["typeid"]]],[11,"from","","",322,[[["t"]],["t"]]],[11,"into_iter","","",322,[[],["i"]]],[11,"try_from","","",322,[[["u"]],["result"]]],[11,"into","","",322,[[],["u"]]],[11,"try_into","","",322,[[],["result"]]],[11,"borrow","","",322,[[["self"]],["t"]]],[11,"borrow_mut","","",322,[[["self"]],["t"]]],[11,"type_id","","",322,[[["self"]],["typeid"]]],[11,"from","","",323,[[["t"]],["t"]]],[11,"into_iter","","",323,[[],["i"]]],[11,"try_from","","",323,[[["u"]],["result"]]],[11,"into","","",323,[[],["u"]]],[11,"try_into","","",323,[[],["result"]]],[11,"borrow","","",323,[[["self"]],["t"]]],[11,"borrow_mut","","",323,[[["self"]],["t"]]],[11,"type_id","","",323,[[["self"]],["typeid"]]],[11,"from","","",324,[[["t"]],["t"]]],[11,"try_from","","",324,[[["u"]],["result"]]],[11,"into","","",324,[[],["u"]]],[11,"try_into","","",324,[[],["result"]]],[11,"borrow","","",324,[[["self"]],["t"]]],[11,"borrow_mut","","",324,[[["self"]],["t"]]],[11,"type_id","","",324,[[["self"]],["typeid"]]],[11,"to_owned","","",324,[[["self"]],["t"]]],[11,"clone_into","","",324,[[["self"],["t"]]]],[11,"from","","",325,[[["t"]],["t"]]],[11,"try_from","","",325,[[["u"]],["result"]]],[11,"into","","",325,[[],["u"]]],[11,"try_into","","",325,[[],["result"]]],[11,"borrow","","",325,[[["self"]],["t"]]],[11,"borrow_mut","","",325,[[["self"]],["t"]]],[11,"type_id","","",325,[[["self"]],["typeid"]]],[11,"to_owned","","",325,[[["self"]],["t"]]],[11,"clone_into","","",325,[[["self"],["t"]]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"into","","",69,[[],["u"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,[[["self"],["t"]]]],[11,"to_string","","",69,[[["self"]],["string"]]],[11,"from","","",326,[[["t"]],["t"]]],[11,"try_from","","",326,[[["u"]],["result"]]],[11,"into","","",326,[[],["u"]]],[11,"try_into","","",326,[[],["result"]]],[11,"borrow","","",326,[[["self"]],["t"]]],[11,"borrow_mut","","",326,[[["self"]],["t"]]],[11,"type_id","","",326,[[["self"]],["typeid"]]],[11,"to_owned","","",326,[[["self"]],["t"]]],[11,"clone_into","","",326,[[["self"],["t"]]]],[11,"to_string","","",326,[[["self"]],["string"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"into","","",70,[[],["u"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,[[["self"],["t"]]]],[11,"to_string","","",70,[[["self"]],["string"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"into","","",71,[[],["u"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,[[["self"],["t"]]]],[11,"to_string","","",71,[[["self"]],["string"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"into","","",72,[[],["u"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,[[["self"],["t"]]]],[11,"to_string","","",72,[[["self"]],["string"]]],[11,"from","no_std_compat::sync","",327,[[],["t"]]],[11,"from","","",327,[[["t"]],["t"]]],[11,"try_from","","",327,[[["u"]],["result"]]],[11,"into","","",327,[[],["u"]]],[11,"try_into","","",327,[[],["result"]]],[11,"borrow","","",327,[[["self"]],["t"]]],[11,"borrow_mut","","",327,[[["self"]],["t"]]],[11,"type_id","","",327,[[["self"]],["typeid"]]],[11,"to_owned","","",327,[[["self"]],["t"]]],[11,"clone_into","","",327,[[["self"],["t"]]]],[11,"to_string","","",327,[[["self"]],["string"]]],[11,"from","","",328,[[["t"]],["t"]]],[11,"try_from","","",328,[[["u"]],["result"]]],[11,"into","","",328,[[],["u"]]],[11,"try_into","","",328,[[],["result"]]],[11,"borrow","","",328,[[["self"]],["t"]]],[11,"borrow_mut","","",328,[[["self"]],["t"]]],[11,"type_id","","",328,[[["self"]],["typeid"]]],[11,"to_owned","","",328,[[["self"]],["t"]]],[11,"clone_into","","",328,[[["self"],["t"]]]],[11,"from","no_std_compat::sync::atomic","",329,[[["t"]],["t"]]],[11,"try_from","","",329,[[["u"]],["result"]]],[11,"into","","",329,[[],["u"]]],[11,"try_into","","",329,[[],["result"]]],[11,"borrow","","",329,[[["self"]],["t"]]],[11,"borrow_mut","","",329,[[["self"]],["t"]]],[11,"type_id","","",329,[[["self"]],["typeid"]]],[11,"from","","",330,[[["t"]],["t"]]],[11,"try_from","","",330,[[["u"]],["result"]]],[11,"into","","",330,[[],["u"]]],[11,"try_into","","",330,[[],["result"]]],[11,"borrow","","",330,[[["self"]],["t"]]],[11,"borrow_mut","","",330,[[["self"]],["t"]]],[11,"type_id","","",330,[[["self"]],["typeid"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"into","","",73,[[],["u"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,[[["self"],["t"]]]],[11,"from","","",331,[[["t"]],["t"]]],[11,"try_from","","",331,[[["u"]],["result"]]],[11,"into","","",331,[[],["u"]]],[11,"try_into","","",331,[[],["result"]]],[11,"borrow","","",331,[[["self"]],["t"]]],[11,"borrow_mut","","",331,[[["self"]],["t"]]],[11,"type_id","","",331,[[["self"]],["typeid"]]],[11,"from","","",332,[[["t"]],["t"]]],[11,"try_from","","",332,[[["u"]],["result"]]],[11,"into","","",332,[[],["u"]]],[11,"try_into","","",332,[[],["result"]]],[11,"borrow","","",332,[[["self"]],["t"]]],[11,"borrow_mut","","",332,[[["self"]],["t"]]],[11,"type_id","","",332,[[["self"]],["typeid"]]],[11,"from","","",333,[[["t"]],["t"]]],[11,"try_from","","",333,[[["u"]],["result"]]],[11,"into","","",333,[[],["u"]]],[11,"try_into","","",333,[[],["result"]]],[11,"borrow","","",333,[[["self"]],["t"]]],[11,"borrow_mut","","",333,[[["self"]],["t"]]],[11,"type_id","","",333,[[["self"]],["typeid"]]],[11,"from","","",334,[[["t"]],["t"]]],[11,"try_from","","",334,[[["u"]],["result"]]],[11,"into","","",334,[[],["u"]]],[11,"try_into","","",334,[[],["result"]]],[11,"borrow","","",334,[[["self"]],["t"]]],[11,"borrow_mut","","",334,[[["self"]],["t"]]],[11,"type_id","","",334,[[["self"]],["typeid"]]],[11,"from","","",335,[[["t"]],["t"]]],[11,"try_from","","",335,[[["u"]],["result"]]],[11,"into","","",335,[[],["u"]]],[11,"try_into","","",335,[[],["result"]]],[11,"borrow","","",335,[[["self"]],["t"]]],[11,"borrow_mut","","",335,[[["self"]],["t"]]],[11,"type_id","","",335,[[["self"]],["typeid"]]],[11,"from","","",336,[[["t"]],["t"]]],[11,"try_from","","",336,[[["u"]],["result"]]],[11,"into","","",336,[[],["u"]]],[11,"try_into","","",336,[[],["result"]]],[11,"borrow","","",336,[[["self"]],["t"]]],[11,"borrow_mut","","",336,[[["self"]],["t"]]],[11,"type_id","","",336,[[["self"]],["typeid"]]],[11,"from","","",337,[[["t"]],["t"]]],[11,"try_from","","",337,[[["u"]],["result"]]],[11,"into","","",337,[[],["u"]]],[11,"try_into","","",337,[[],["result"]]],[11,"borrow","","",337,[[["self"]],["t"]]],[11,"borrow_mut","","",337,[[["self"]],["t"]]],[11,"type_id","","",337,[[["self"]],["typeid"]]],[11,"from","","",338,[[["t"]],["t"]]],[11,"try_from","","",338,[[["u"]],["result"]]],[11,"into","","",338,[[],["u"]]],[11,"try_into","","",338,[[],["result"]]],[11,"borrow","","",338,[[["self"]],["t"]]],[11,"borrow_mut","","",338,[[["self"]],["t"]]],[11,"type_id","","",338,[[["self"]],["typeid"]]],[11,"from","","",339,[[["t"]],["t"]]],[11,"try_from","","",339,[[["u"]],["result"]]],[11,"into","","",339,[[],["u"]]],[11,"try_into","","",339,[[],["result"]]],[11,"borrow","","",339,[[["self"]],["t"]]],[11,"borrow_mut","","",339,[[["self"]],["t"]]],[11,"type_id","","",339,[[["self"]],["typeid"]]],[11,"from","","",340,[[["t"]],["t"]]],[11,"try_from","","",340,[[["u"]],["result"]]],[11,"into","","",340,[[],["u"]]],[11,"try_into","","",340,[[],["result"]]],[11,"borrow","","",340,[[["self"]],["t"]]],[11,"borrow_mut","","",340,[[["self"]],["t"]]],[11,"type_id","","",340,[[["self"]],["typeid"]]],[11,"from","no_std_compat::sync","",341,[[["t"]],["t"]]],[11,"try_from","","",341,[[["u"]],["result"]]],[11,"into","","",341,[[],["u"]]],[11,"try_into","","",341,[[],["result"]]],[11,"borrow","","",341,[[["self"]],["t"]]],[11,"borrow_mut","","",341,[[["self"]],["t"]]],[11,"type_id","","",341,[[["self"]],["typeid"]]],[11,"from","","",342,[[["t"]],["t"]]],[11,"try_from","","",342,[[["u"]],["result"]]],[11,"into","","",342,[[],["u"]]],[11,"try_into","","",342,[[],["result"]]],[11,"borrow","","",342,[[["self"]],["t"]]],[11,"borrow_mut","","",342,[[["self"]],["t"]]],[11,"type_id","","",342,[[["self"]],["typeid"]]],[11,"from","","",343,[[["t"]],["t"]]],[11,"try_from","","",343,[[["u"]],["result"]]],[11,"into","","",343,[[],["u"]]],[11,"try_into","","",343,[[],["result"]]],[11,"borrow","","",343,[[["self"]],["t"]]],[11,"borrow_mut","","",343,[[["self"]],["t"]]],[11,"type_id","","",343,[[["self"]],["typeid"]]],[11,"from","","",344,[[["t"]],["t"]]],[11,"try_from","","",344,[[["u"]],["result"]]],[11,"into","","",344,[[],["u"]]],[11,"try_into","","",344,[[],["result"]]],[11,"borrow","","",344,[[["self"]],["t"]]],[11,"borrow_mut","","",344,[[["self"]],["t"]]],[11,"type_id","","",344,[[["self"]],["typeid"]]],[11,"to_owned","","",344,[[["self"]],["t"]]],[11,"clone_into","","",344,[[["self"],["t"]]]],[11,"from","","",345,[[],["t"]]],[11,"from","","",345,[[["t"]],["t"]]],[11,"try_from","","",345,[[["u"]],["result"]]],[11,"into","","",345,[[],["u"]]],[11,"try_into","","",345,[[],["result"]]],[11,"borrow","","",345,[[["self"]],["t"]]],[11,"borrow_mut","","",345,[[["self"]],["t"]]],[11,"type_id","","",345,[[["self"]],["typeid"]]],[11,"from","","",346,[[["t"]],["t"]]],[11,"try_from","","",346,[[["u"]],["result"]]],[11,"into","","",346,[[],["u"]]],[11,"try_into","","",346,[[],["result"]]],[11,"borrow","","",346,[[["self"]],["t"]]],[11,"borrow_mut","","",346,[[["self"]],["t"]]],[11,"type_id","","",346,[[["self"]],["typeid"]]],[11,"to_string","","",346,[[["self"]],["string"]]],[11,"from","","",347,[[["t"]],["t"]]],[11,"try_from","","",347,[[["u"]],["result"]]],[11,"into","","",347,[[],["u"]]],[11,"try_into","","",347,[[],["result"]]],[11,"borrow","","",347,[[["self"]],["t"]]],[11,"borrow_mut","","",347,[[["self"]],["t"]]],[11,"type_id","","",347,[[["self"]],["typeid"]]],[11,"from","","",348,[[["t"]],["t"]]],[11,"try_from","","",348,[[["u"]],["result"]]],[11,"into","","",348,[[],["u"]]],[11,"try_into","","",348,[[],["result"]]],[11,"borrow","","",348,[[["self"]],["t"]]],[11,"borrow_mut","","",348,[[["self"]],["t"]]],[11,"type_id","","",348,[[["self"]],["typeid"]]],[11,"from","","",349,[[],["t"]]],[11,"from","","",349,[[["t"]],["t"]]],[11,"try_from","","",349,[[["u"]],["result"]]],[11,"into","","",349,[[],["u"]]],[11,"try_into","","",349,[[],["result"]]],[11,"borrow","","",349,[[["self"]],["t"]]],[11,"borrow_mut","","",349,[[["self"]],["t"]]],[11,"type_id","","",349,[[["self"]],["typeid"]]],[11,"from","","",350,[[["t"]],["t"]]],[11,"try_from","","",350,[[["u"]],["result"]]],[11,"into","","",350,[[],["u"]]],[11,"try_into","","",350,[[],["result"]]],[11,"borrow","","",350,[[["self"]],["t"]]],[11,"borrow_mut","","",350,[[["self"]],["t"]]],[11,"type_id","","",350,[[["self"]],["typeid"]]],[11,"to_string","","",350,[[["self"]],["string"]]],[11,"from","","",351,[[["t"]],["t"]]],[11,"try_from","","",351,[[["u"]],["result"]]],[11,"into","","",351,[[],["u"]]],[11,"try_into","","",351,[[],["result"]]],[11,"borrow","","",351,[[["self"]],["t"]]],[11,"borrow_mut","","",351,[[["self"]],["t"]]],[11,"type_id","","",351,[[["self"]],["typeid"]]],[11,"to_string","","",351,[[["self"]],["string"]]],[11,"from","","",352,[[["t"]],["t"]]],[11,"try_from","","",352,[[["u"]],["result"]]],[11,"into","","",352,[[],["u"]]],[11,"try_into","","",352,[[],["result"]]],[11,"borrow","","",352,[[["self"]],["t"]]],[11,"borrow_mut","","",352,[[["self"]],["t"]]],[11,"type_id","","",352,[[["self"]],["typeid"]]],[11,"to_string","","",352,[[["self"]],["string"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"into","","",74,[[],["u"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"to_string","","",74,[[["self"]],["string"]]],[11,"from","no_std_compat::time","",353,[[["t"]],["t"]]],[11,"try_from","","",353,[[["u"]],["result"]]],[11,"into","","",353,[[],["u"]]],[11,"try_into","","",353,[[],["result"]]],[11,"borrow","","",353,[[["self"]],["t"]]],[11,"borrow_mut","","",353,[[["self"]],["t"]]],[11,"type_id","","",353,[[["self"]],["typeid"]]],[11,"to_owned","","",353,[[["self"]],["t"]]],[11,"clone_into","","",353,[[["self"],["t"]]]],[11,"from","","",354,[[["t"]],["t"]]],[11,"try_from","","",354,[[["u"]],["result"]]],[11,"into","","",354,[[],["u"]]],[11,"try_into","","",354,[[],["result"]]],[11,"borrow","","",354,[[["self"]],["t"]]],[11,"borrow_mut","","",354,[[["self"]],["t"]]],[11,"type_id","","",354,[[["self"]],["typeid"]]],[11,"to_owned","","",354,[[["self"]],["t"]]],[11,"clone_into","","",354,[[["self"],["t"]]]],[11,"from","","",355,[[["t"]],["t"]]],[11,"try_from","","",355,[[["u"]],["result"]]],[11,"into","","",355,[[],["u"]]],[11,"try_into","","",355,[[],["result"]]],[11,"borrow","","",355,[[["self"]],["t"]]],[11,"borrow_mut","","",355,[[["self"]],["t"]]],[11,"type_id","","",355,[[["self"]],["typeid"]]],[11,"to_owned","","",355,[[["self"]],["t"]]],[11,"clone_into","","",355,[[["self"],["t"]]]],[11,"to_string","","",355,[[["self"]],["string"]]],[11,"from","","",356,[[["t"]],["t"]]],[11,"try_from","","",356,[[["u"]],["result"]]],[11,"into","","",356,[[],["u"]]],[11,"try_into","","",356,[[],["result"]]],[11,"borrow","","",356,[[["self"]],["t"]]],[11,"borrow_mut","","",356,[[["self"]],["t"]]],[11,"type_id","","",356,[[["self"]],["typeid"]]],[11,"to_owned","","",356,[[["self"]],["t"]]],[11,"clone_into","","",356,[[["self"],["t"]]]],[11,"from","no_std_compat::task","",357,[[["t"]],["t"]]],[11,"try_from","","",357,[[["u"]],["result"]]],[11,"into","","",357,[[],["u"]]],[11,"try_into","","",357,[[],["result"]]],[11,"borrow","","",357,[[["self"]],["t"]]],[11,"borrow_mut","","",357,[[["self"]],["t"]]],[11,"type_id","","",357,[[["self"]],["typeid"]]],[11,"from","","",75,[[],["t"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"into","","",75,[[],["u"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,[[["self"],["t"]]]],[11,"from","","",358,[[["t"]],["t"]]],[11,"try_from","","",358,[[["u"]],["result"]]],[11,"into","","",358,[[],["u"]]],[11,"try_into","","",358,[[],["result"]]],[11,"borrow","","",358,[[["self"]],["t"]]],[11,"borrow_mut","","",358,[[["self"]],["t"]]],[11,"type_id","","",358,[[["self"]],["typeid"]]],[11,"from","","",359,[[["t"]],["t"]]],[11,"try_from","","",359,[[["u"]],["result"]]],[11,"into","","",359,[[],["u"]]],[11,"try_into","","",359,[[],["result"]]],[11,"borrow","","",359,[[["self"]],["t"]]],[11,"borrow_mut","","",359,[[["self"]],["t"]]],[11,"type_id","","",359,[[["self"]],["typeid"]]],[11,"to_owned","","",359,[[["self"]],["t"]]],[11,"clone_into","","",359,[[["self"],["t"]]]],[11,"from","","",360,[[["t"]],["t"]]],[11,"try_from","","",360,[[["u"]],["result"]]],[11,"into","","",360,[[],["u"]]],[11,"try_into","","",360,[[],["result"]]],[11,"borrow","","",360,[[["self"]],["t"]]],[11,"borrow_mut","","",360,[[["self"]],["t"]]],[11,"type_id","","",360,[[["self"]],["typeid"]]],[11,"to_owned","","",360,[[["self"]],["t"]]],[11,"clone_into","","",360,[[["self"],["t"]]]],[11,"from","no_std_compat::alloc","",361,[[["t"]],["t"]]],[11,"try_from","","",361,[[["u"]],["result"]]],[11,"into","","",361,[[],["u"]]],[11,"try_into","","",361,[[],["result"]]],[11,"borrow","","",361,[[["self"]],["t"]]],[11,"borrow_mut","","",361,[[["self"]],["t"]]],[11,"type_id","","",361,[[["self"]],["typeid"]]],[11,"to_owned","","",361,[[["self"]],["t"]]],[11,"clone_into","","",361,[[["self"],["t"]]]],[11,"from","","",362,[[["t"]],["t"]]],[11,"try_from","","",362,[[["u"]],["result"]]],[11,"into","","",362,[[],["u"]]],[11,"try_into","","",362,[[],["result"]]],[11,"borrow","","",362,[[["self"]],["t"]]],[11,"borrow_mut","","",362,[[["self"]],["t"]]],[11,"type_id","","",362,[[["self"]],["typeid"]]],[11,"to_owned","","",362,[[["self"]],["t"]]],[11,"clone_into","","",362,[[["self"],["t"]]]],[11,"to_string","","",362,[[["self"]],["string"]]],[11,"from","","",363,[[["t"]],["t"]]],[11,"try_from","","",363,[[["u"]],["result"]]],[11,"into","","",363,[[],["u"]]],[11,"try_into","","",363,[[],["result"]]],[11,"borrow","","",363,[[["self"]],["t"]]],[11,"borrow_mut","","",363,[[["self"]],["t"]]],[11,"type_id","","",363,[[["self"]],["typeid"]]],[11,"to_owned","","",363,[[["self"]],["t"]]],[11,"clone_into","","",363,[[["self"],["t"]]]],[11,"to_string","","",363,[[["self"]],["string"]]],[11,"from","","",364,[[["t"]],["t"]]],[11,"try_from","","",364,[[["u"]],["result"]]],[11,"into","","",364,[[],["u"]]],[11,"try_into","","",364,[[],["result"]]],[11,"borrow","","",364,[[["self"]],["t"]]],[11,"borrow_mut","","",364,[[["self"]],["t"]]],[11,"type_id","","",364,[[["self"]],["typeid"]]],[11,"to_owned","","",364,[[["self"]],["t"]]],[11,"clone_into","","",364,[[["self"],["t"]]]],[11,"to_string","","",364,[[["self"]],["string"]]],[11,"from","","",365,[[["t"]],["t"]]],[11,"try_from","","",365,[[["u"]],["result"]]],[11,"into","","",365,[[],["u"]]],[11,"try_into","","",365,[[],["result"]]],[11,"borrow","","",365,[[["self"]],["t"]]],[11,"borrow_mut","","",365,[[["self"]],["t"]]],[11,"type_id","","",365,[[["self"]],["typeid"]]],[11,"to_owned","","",365,[[["self"]],["t"]]],[11,"clone_into","","",365,[[["self"],["t"]]]],[11,"from","","",366,[[["t"]],["t"]]],[11,"try_from","","",366,[[["u"]],["result"]]],[11,"into","","",366,[[],["u"]]],[11,"try_into","","",366,[[],["result"]]],[11,"borrow","","",366,[[["self"]],["t"]]],[11,"borrow_mut","","",366,[[["self"]],["t"]]],[11,"type_id","","",366,[[["self"]],["typeid"]]],[11,"to_owned","","",366,[[["self"]],["t"]]],[11,"clone_into","","",366,[[["self"],["t"]]]],[11,"from","no_std_compat::borrow","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"into","","",79,[[],["u"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,[[["self"],["t"]]]],[11,"to_string","","",79,[[["self"]],["string"]]],[11,"from","no_std_compat::fmt","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"into","","",82,[[],["u"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"from","","",367,[[["t"]],["t"]]],[11,"try_from","","",367,[[["u"]],["result"]]],[11,"into","","",367,[[],["u"]]],[11,"try_into","","",367,[[],["result"]]],[11,"borrow","","",367,[[["self"]],["t"]]],[11,"borrow_mut","","",367,[[["self"]],["t"]]],[11,"type_id","","",367,[[["self"]],["typeid"]]],[11,"to_owned","","",367,[[["self"]],["t"]]],[11,"clone_into","","",367,[[["self"],["t"]]]],[11,"to_string","","",367,[[["self"]],["string"]]],[11,"from","","",368,[[["t"]],["t"]]],[11,"try_from","","",368,[[["u"]],["result"]]],[11,"into","","",368,[[],["u"]]],[11,"try_into","","",368,[[],["result"]]],[11,"borrow","","",368,[[["self"]],["t"]]],[11,"borrow_mut","","",368,[[["self"]],["t"]]],[11,"type_id","","",368,[[["self"]],["typeid"]]],[11,"to_owned","","",368,[[["self"]],["t"]]],[11,"clone_into","","",368,[[["self"],["t"]]]],[11,"to_string","","",368,[[["self"]],["string"]]],[11,"from","","",369,[[["t"]],["t"]]],[11,"try_from","","",369,[[["u"]],["result"]]],[11,"into","","",369,[[],["u"]]],[11,"try_into","","",369,[[],["result"]]],[11,"borrow","","",369,[[["self"]],["t"]]],[11,"borrow_mut","","",369,[[["self"]],["t"]]],[11,"type_id","","",369,[[["self"]],["typeid"]]],[11,"from","","",370,[[["t"]],["t"]]],[11,"try_from","","",370,[[["u"]],["result"]]],[11,"into","","",370,[[],["u"]]],[11,"try_into","","",370,[[],["result"]]],[11,"borrow","","",370,[[["self"]],["t"]]],[11,"borrow_mut","","",370,[[["self"]],["t"]]],[11,"type_id","","",370,[[["self"]],["typeid"]]],[11,"from","","",371,[[["t"]],["t"]]],[11,"try_from","","",371,[[["u"]],["result"]]],[11,"into","","",371,[[],["u"]]],[11,"try_into","","",371,[[],["result"]]],[11,"borrow","","",371,[[["self"]],["t"]]],[11,"borrow_mut","","",371,[[["self"]],["t"]]],[11,"type_id","","",371,[[["self"]],["typeid"]]],[11,"from","","",372,[[["t"]],["t"]]],[11,"try_from","","",372,[[["u"]],["result"]]],[11,"into","","",372,[[],["u"]]],[11,"try_into","","",372,[[],["result"]]],[11,"borrow","","",372,[[["self"]],["t"]]],[11,"borrow_mut","","",372,[[["self"]],["t"]]],[11,"type_id","","",372,[[["self"]],["typeid"]]],[11,"from","","",373,[[["t"]],["t"]]],[11,"try_from","","",373,[[["u"]],["result"]]],[11,"into","","",373,[[],["u"]]],[11,"try_into","","",373,[[],["result"]]],[11,"borrow","","",373,[[["self"]],["t"]]],[11,"borrow_mut","","",373,[[["self"]],["t"]]],[11,"type_id","","",373,[[["self"]],["typeid"]]],[11,"from","","",374,[[["t"]],["t"]]],[11,"try_from","","",374,[[["u"]],["result"]]],[11,"into","","",374,[[],["u"]]],[11,"try_into","","",374,[[],["result"]]],[11,"borrow","","",374,[[["self"]],["t"]]],[11,"borrow_mut","","",374,[[["self"]],["t"]]],[11,"type_id","","",374,[[["self"]],["typeid"]]],[11,"from","no_std_compat::rc","",375,[[],["t"]]],[11,"from","","",375,[[["t"]],["t"]]],[11,"try_from","","",375,[[["u"]],["result"]]],[11,"into","","",375,[[],["u"]]],[11,"try_into","","",375,[[],["result"]]],[11,"borrow","","",375,[[["self"]],["t"]]],[11,"borrow_mut","","",375,[[["self"]],["t"]]],[11,"type_id","","",375,[[["self"]],["typeid"]]],[11,"to_owned","","",375,[[["self"]],["t"]]],[11,"clone_into","","",375,[[["self"],["t"]]]],[11,"to_string","","",375,[[["self"]],["string"]]],[11,"from","","",376,[[["t"]],["t"]]],[11,"try_from","","",376,[[["u"]],["result"]]],[11,"into","","",376,[[],["u"]]],[11,"try_into","","",376,[[],["result"]]],[11,"borrow","","",376,[[["self"]],["t"]]],[11,"borrow_mut","","",376,[[["self"]],["t"]]],[11,"type_id","","",376,[[["self"]],["typeid"]]],[11,"to_owned","","",376,[[["self"]],["t"]]],[11,"clone_into","","",376,[[["self"],["t"]]]],[11,"from","no_std_compat::slice","",377,[[["t"]],["t"]]],[11,"into_iter","","",377,[[],["i"]]],[11,"try_from","","",377,[[["u"]],["result"]]],[11,"into","","",377,[[],["u"]]],[11,"try_into","","",377,[[],["result"]]],[11,"borrow","","",377,[[["self"]],["t"]]],[11,"borrow_mut","","",377,[[["self"]],["t"]]],[11,"type_id","","",377,[[["self"]],["typeid"]]],[11,"to_owned","","",377,[[["self"]],["t"]]],[11,"clone_into","","",377,[[["self"],["t"]]]],[11,"from","","",378,[[["t"]],["t"]]],[11,"into_iter","","",378,[[],["i"]]],[11,"try_from","","",378,[[["u"]],["result"]]],[11,"into","","",378,[[],["u"]]],[11,"try_into","","",378,[[],["result"]]],[11,"borrow","","",378,[[["self"]],["t"]]],[11,"borrow_mut","","",378,[[["self"]],["t"]]],[11,"type_id","","",378,[[["self"]],["typeid"]]],[11,"to_owned","","",378,[[["self"]],["t"]]],[11,"clone_into","","",378,[[["self"],["t"]]]],[11,"from","","",379,[[["t"]],["t"]]],[11,"into_iter","","",379,[[],["i"]]],[11,"try_from","","",379,[[["u"]],["result"]]],[11,"into","","",379,[[],["u"]]],[11,"try_into","","",379,[[],["result"]]],[11,"borrow","","",379,[[["self"]],["t"]]],[11,"borrow_mut","","",379,[[["self"]],["t"]]],[11,"type_id","","",379,[[["self"]],["typeid"]]],[11,"to_owned","","",379,[[["self"]],["t"]]],[11,"clone_into","","",379,[[["self"],["t"]]]],[11,"from","","",380,[[["t"]],["t"]]],[11,"into_iter","","",380,[[],["i"]]],[11,"try_from","","",380,[[["u"]],["result"]]],[11,"into","","",380,[[],["u"]]],[11,"try_into","","",380,[[],["result"]]],[11,"borrow","","",380,[[["self"]],["t"]]],[11,"borrow_mut","","",380,[[["self"]],["t"]]],[11,"type_id","","",380,[[["self"]],["typeid"]]],[11,"from","","",381,[[["t"]],["t"]]],[11,"into_iter","","",381,[[],["i"]]],[11,"try_from","","",381,[[["u"]],["result"]]],[11,"into","","",381,[[],["u"]]],[11,"try_into","","",381,[[],["result"]]],[11,"borrow","","",381,[[["self"]],["t"]]],[11,"borrow_mut","","",381,[[["self"]],["t"]]],[11,"type_id","","",381,[[["self"]],["typeid"]]],[11,"from","","",382,[[["t"]],["t"]]],[11,"into_iter","","",382,[[],["i"]]],[11,"try_from","","",382,[[["u"]],["result"]]],[11,"into","","",382,[[],["u"]]],[11,"try_into","","",382,[[],["result"]]],[11,"borrow","","",382,[[["self"]],["t"]]],[11,"borrow_mut","","",382,[[["self"]],["t"]]],[11,"type_id","","",382,[[["self"]],["typeid"]]],[11,"to_owned","","",382,[[["self"]],["t"]]],[11,"clone_into","","",382,[[["self"],["t"]]]],[11,"from","","",383,[[["t"]],["t"]]],[11,"into_iter","","",383,[[],["i"]]],[11,"try_from","","",383,[[["u"]],["result"]]],[11,"into","","",383,[[],["u"]]],[11,"try_into","","",383,[[],["result"]]],[11,"borrow","","",383,[[["self"]],["t"]]],[11,"borrow_mut","","",383,[[["self"]],["t"]]],[11,"type_id","","",383,[[["self"]],["typeid"]]],[11,"from","","",384,[[["t"]],["t"]]],[11,"into_iter","","",384,[[],["i"]]],[11,"try_from","","",384,[[["u"]],["result"]]],[11,"into","","",384,[[],["u"]]],[11,"try_into","","",384,[[],["result"]]],[11,"borrow","","",384,[[["self"]],["t"]]],[11,"borrow_mut","","",384,[[["self"]],["t"]]],[11,"type_id","","",384,[[["self"]],["typeid"]]],[11,"to_owned","","",384,[[["self"]],["t"]]],[11,"clone_into","","",384,[[["self"],["t"]]]],[11,"from","","",385,[[["t"]],["t"]]],[11,"into_iter","","",385,[[],["i"]]],[11,"try_from","","",385,[[["u"]],["result"]]],[11,"into","","",385,[[],["u"]]],[11,"try_into","","",385,[[],["result"]]],[11,"borrow","","",385,[[["self"]],["t"]]],[11,"borrow_mut","","",385,[[["self"]],["t"]]],[11,"type_id","","",385,[[["self"]],["typeid"]]],[11,"from","","",386,[[["t"]],["t"]]],[11,"into_iter","","",386,[[],["i"]]],[11,"try_from","","",386,[[["u"]],["result"]]],[11,"into","","",386,[[],["u"]]],[11,"try_into","","",386,[[],["result"]]],[11,"borrow","","",386,[[["self"]],["t"]]],[11,"borrow_mut","","",386,[[["self"]],["t"]]],[11,"type_id","","",386,[[["self"]],["typeid"]]],[11,"to_owned","","",386,[[["self"]],["t"]]],[11,"clone_into","","",386,[[["self"],["t"]]]],[11,"from","","",387,[[["t"]],["t"]]],[11,"into_iter","","",387,[[],["i"]]],[11,"try_from","","",387,[[["u"]],["result"]]],[11,"into","","",387,[[],["u"]]],[11,"try_into","","",387,[[],["result"]]],[11,"borrow","","",387,[[["self"]],["t"]]],[11,"borrow_mut","","",387,[[["self"]],["t"]]],[11,"type_id","","",387,[[["self"]],["typeid"]]],[11,"to_owned","","",387,[[["self"]],["t"]]],[11,"clone_into","","",387,[[["self"],["t"]]]],[11,"from","","",388,[[["t"]],["t"]]],[11,"into_iter","","",388,[[],["i"]]],[11,"try_from","","",388,[[["u"]],["result"]]],[11,"into","","",388,[[],["u"]]],[11,"try_into","","",388,[[],["result"]]],[11,"borrow","","",388,[[["self"]],["t"]]],[11,"borrow_mut","","",388,[[["self"]],["t"]]],[11,"type_id","","",388,[[["self"]],["typeid"]]],[11,"from","","",389,[[["t"]],["t"]]],[11,"into_iter","","",389,[[],["i"]]],[11,"try_from","","",389,[[["u"]],["result"]]],[11,"into","","",389,[[],["u"]]],[11,"try_into","","",389,[[],["result"]]],[11,"borrow","","",389,[[["self"]],["t"]]],[11,"borrow_mut","","",389,[[["self"]],["t"]]],[11,"type_id","","",389,[[["self"]],["typeid"]]],[11,"from","","",390,[[["t"]],["t"]]],[11,"into_iter","","",390,[[],["i"]]],[11,"try_from","","",390,[[["u"]],["result"]]],[11,"into","","",390,[[],["u"]]],[11,"try_into","","",390,[[],["result"]]],[11,"borrow","","",390,[[["self"]],["t"]]],[11,"borrow_mut","","",390,[[["self"]],["t"]]],[11,"type_id","","",390,[[["self"]],["typeid"]]],[11,"to_owned","","",390,[[["self"]],["t"]]],[11,"clone_into","","",390,[[["self"],["t"]]]],[11,"from","","",391,[[["t"]],["t"]]],[11,"into_iter","","",391,[[],["i"]]],[11,"try_from","","",391,[[["u"]],["result"]]],[11,"into","","",391,[[],["u"]]],[11,"try_into","","",391,[[],["result"]]],[11,"borrow","","",391,[[["self"]],["t"]]],[11,"borrow_mut","","",391,[[["self"]],["t"]]],[11,"type_id","","",391,[[["self"]],["typeid"]]],[11,"from","","",392,[[["t"]],["t"]]],[11,"into_iter","","",392,[[],["i"]]],[11,"try_from","","",392,[[["u"]],["result"]]],[11,"into","","",392,[[],["u"]]],[11,"try_into","","",392,[[],["result"]]],[11,"borrow","","",392,[[["self"]],["t"]]],[11,"borrow_mut","","",392,[[["self"]],["t"]]],[11,"type_id","","",392,[[["self"]],["typeid"]]],[11,"from","","",393,[[["t"]],["t"]]],[11,"into_iter","","",393,[[],["i"]]],[11,"try_from","","",393,[[["u"]],["result"]]],[11,"into","","",393,[[],["u"]]],[11,"try_into","","",393,[[],["result"]]],[11,"borrow","","",393,[[["self"]],["t"]]],[11,"borrow_mut","","",393,[[["self"]],["t"]]],[11,"type_id","","",393,[[["self"]],["typeid"]]],[11,"from","","",394,[[["t"]],["t"]]],[11,"into_iter","","",394,[[],["i"]]],[11,"try_from","","",394,[[["u"]],["result"]]],[11,"into","","",394,[[],["u"]]],[11,"try_into","","",394,[[],["result"]]],[11,"borrow","","",394,[[["self"]],["t"]]],[11,"borrow_mut","","",394,[[["self"]],["t"]]],[11,"type_id","","",394,[[["self"]],["typeid"]]],[11,"from","","",395,[[["t"]],["t"]]],[11,"into_iter","","",395,[[],["i"]]],[11,"try_from","","",395,[[["u"]],["result"]]],[11,"into","","",395,[[],["u"]]],[11,"try_into","","",395,[[],["result"]]],[11,"borrow","","",395,[[["self"]],["t"]]],[11,"borrow_mut","","",395,[[["self"]],["t"]]],[11,"type_id","","",395,[[["self"]],["typeid"]]],[11,"from","no_std_compat::str::pattern","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"into","","",97,[[],["u"]]],[11,"try_into","","",97,[[],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"type_id","","",97,[[["self"]],["typeid"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,[[["self"],["t"]]]],[11,"from","","",396,[[["t"]],["t"]]],[11,"try_from","","",396,[[["u"]],["result"]]],[11,"into","","",396,[[],["u"]]],[11,"try_into","","",396,[[],["result"]]],[11,"borrow","","",396,[[["self"]],["t"]]],[11,"borrow_mut","","",396,[[["self"]],["t"]]],[11,"type_id","","",396,[[["self"]],["typeid"]]],[11,"to_owned","","",396,[[["self"]],["t"]]],[11,"clone_into","","",396,[[["self"],["t"]]]],[11,"from","","",397,[[["t"]],["t"]]],[11,"try_from","","",397,[[["u"]],["result"]]],[11,"into","","",397,[[],["u"]]],[11,"try_into","","",397,[[],["result"]]],[11,"borrow","","",397,[[["self"]],["t"]]],[11,"borrow_mut","","",397,[[["self"]],["t"]]],[11,"type_id","","",397,[[["self"]],["typeid"]]],[11,"to_owned","","",397,[[["self"]],["t"]]],[11,"clone_into","","",397,[[["self"],["t"]]]],[11,"from","","",398,[[["t"]],["t"]]],[11,"try_from","","",398,[[["u"]],["result"]]],[11,"into","","",398,[[],["u"]]],[11,"try_into","","",398,[[],["result"]]],[11,"borrow","","",398,[[["self"]],["t"]]],[11,"borrow_mut","","",398,[[["self"]],["t"]]],[11,"type_id","","",398,[[["self"]],["typeid"]]],[11,"to_owned","","",398,[[["self"]],["t"]]],[11,"clone_into","","",398,[[["self"],["t"]]]],[11,"from","","",399,[[["t"]],["t"]]],[11,"try_from","","",399,[[["u"]],["result"]]],[11,"into","","",399,[[],["u"]]],[11,"try_into","","",399,[[],["result"]]],[11,"borrow","","",399,[[["self"]],["t"]]],[11,"borrow_mut","","",399,[[["self"]],["t"]]],[11,"type_id","","",399,[[["self"]],["typeid"]]],[11,"to_owned","","",399,[[["self"]],["t"]]],[11,"clone_into","","",399,[[["self"],["t"]]]],[11,"from","no_std_compat::str","",400,[[["t"]],["t"]]],[11,"into_iter","","",400,[[],["i"]]],[11,"try_from","","",400,[[["u"]],["result"]]],[11,"into","","",400,[[],["u"]]],[11,"try_into","","",400,[[],["result"]]],[11,"borrow","","",400,[[["self"]],["t"]]],[11,"borrow_mut","","",400,[[["self"]],["t"]]],[11,"type_id","","",400,[[["self"]],["typeid"]]],[11,"to_owned","","",400,[[["self"]],["t"]]],[11,"clone_into","","",400,[[["self"],["t"]]]],[11,"from","","",401,[[["t"]],["t"]]],[11,"into_iter","","",401,[[],["i"]]],[11,"try_from","","",401,[[["u"]],["result"]]],[11,"into","","",401,[[],["u"]]],[11,"try_into","","",401,[[],["result"]]],[11,"borrow","","",401,[[["self"]],["t"]]],[11,"borrow_mut","","",401,[[["self"]],["t"]]],[11,"type_id","","",401,[[["self"]],["typeid"]]],[11,"to_owned","","",401,[[["self"]],["t"]]],[11,"clone_into","","",401,[[["self"],["t"]]]],[11,"from","","",402,[[["t"]],["t"]]],[11,"into_iter","","",402,[[],["i"]]],[11,"try_from","","",402,[[["u"]],["result"]]],[11,"into","","",402,[[],["u"]]],[11,"try_into","","",402,[[],["result"]]],[11,"borrow","","",402,[[["self"]],["t"]]],[11,"borrow_mut","","",402,[[["self"]],["t"]]],[11,"type_id","","",402,[[["self"]],["typeid"]]],[11,"to_owned","","",402,[[["self"]],["t"]]],[11,"clone_into","","",402,[[["self"],["t"]]]],[11,"from","","",403,[[["t"]],["t"]]],[11,"into_iter","","",403,[[],["i"]]],[11,"try_from","","",403,[[["u"]],["result"]]],[11,"into","","",403,[[],["u"]]],[11,"try_into","","",403,[[],["result"]]],[11,"borrow","","",403,[[["self"]],["t"]]],[11,"borrow_mut","","",403,[[["self"]],["t"]]],[11,"type_id","","",403,[[["self"]],["typeid"]]],[11,"to_owned","","",403,[[["self"]],["t"]]],[11,"clone_into","","",403,[[["self"],["t"]]]],[11,"from","","",404,[[["t"]],["t"]]],[11,"into_iter","","",404,[[],["i"]]],[11,"try_from","","",404,[[["u"]],["result"]]],[11,"into","","",404,[[],["u"]]],[11,"try_into","","",404,[[],["result"]]],[11,"borrow","","",404,[[["self"]],["t"]]],[11,"borrow_mut","","",404,[[["self"]],["t"]]],[11,"type_id","","",404,[[["self"]],["typeid"]]],[11,"to_owned","","",404,[[["self"]],["t"]]],[11,"clone_into","","",404,[[["self"],["t"]]]],[11,"from","","",405,[[["t"]],["t"]]],[11,"into_iter","","",405,[[],["i"]]],[11,"try_from","","",405,[[["u"]],["result"]]],[11,"into","","",405,[[],["u"]]],[11,"try_into","","",405,[[],["result"]]],[11,"borrow","","",405,[[["self"]],["t"]]],[11,"borrow_mut","","",405,[[["self"]],["t"]]],[11,"type_id","","",405,[[["self"]],["typeid"]]],[11,"to_owned","","",405,[[["self"]],["t"]]],[11,"clone_into","","",405,[[["self"],["t"]]]],[11,"from","","",406,[[["t"]],["t"]]],[11,"try_from","","",406,[[["u"]],["result"]]],[11,"into","","",406,[[],["u"]]],[11,"try_into","","",406,[[],["result"]]],[11,"borrow","","",406,[[["self"]],["t"]]],[11,"borrow_mut","","",406,[[["self"]],["t"]]],[11,"type_id","","",406,[[["self"]],["typeid"]]],[11,"to_owned","","",406,[[["self"]],["t"]]],[11,"clone_into","","",406,[[["self"],["t"]]]],[11,"to_string","","",406,[[["self"]],["string"]]],[11,"from","","",407,[[["t"]],["t"]]],[11,"into_iter","","",407,[[],["i"]]],[11,"try_from","","",407,[[["u"]],["result"]]],[11,"into","","",407,[[],["u"]]],[11,"try_into","","",407,[[],["result"]]],[11,"borrow","","",407,[[["self"]],["t"]]],[11,"borrow_mut","","",407,[[["self"]],["t"]]],[11,"type_id","","",407,[[["self"]],["typeid"]]],[11,"to_owned","","",407,[[["self"]],["t"]]],[11,"clone_into","","",407,[[["self"],["t"]]]],[11,"to_string","","",407,[[["self"]],["string"]]],[11,"from","","",408,[[["t"]],["t"]]],[11,"into_iter","","",408,[[],["i"]]],[11,"try_from","","",408,[[["u"]],["result"]]],[11,"into","","",408,[[],["u"]]],[11,"try_into","","",408,[[],["result"]]],[11,"borrow","","",408,[[["self"]],["t"]]],[11,"borrow_mut","","",408,[[["self"]],["t"]]],[11,"type_id","","",408,[[["self"]],["typeid"]]],[11,"to_owned","","",408,[[["self"]],["t"]]],[11,"clone_into","","",408,[[["self"],["t"]]]],[11,"to_string","","",408,[[["self"]],["string"]]],[11,"from","","",409,[[["t"]],["t"]]],[11,"into_iter","","",409,[[],["i"]]],[11,"try_from","","",409,[[["u"]],["result"]]],[11,"into","","",409,[[],["u"]]],[11,"try_into","","",409,[[],["result"]]],[11,"borrow","","",409,[[["self"]],["t"]]],[11,"borrow_mut","","",409,[[["self"]],["t"]]],[11,"type_id","","",409,[[["self"]],["typeid"]]],[11,"to_owned","","",409,[[["self"]],["t"]]],[11,"clone_into","","",409,[[["self"],["t"]]]],[11,"to_string","","",409,[[["self"]],["string"]]],[11,"from","","",410,[[["t"]],["t"]]],[11,"try_from","","",410,[[["u"]],["result"]]],[11,"into","","",410,[[],["u"]]],[11,"try_into","","",410,[[],["result"]]],[11,"borrow","","",410,[[["self"]],["t"]]],[11,"borrow_mut","","",410,[[["self"]],["t"]]],[11,"type_id","","",410,[[["self"]],["typeid"]]],[11,"to_owned","","",410,[[["self"]],["t"]]],[11,"clone_into","","",410,[[["self"],["t"]]]],[11,"to_string","","",410,[[["self"]],["string"]]],[11,"from","","",411,[[["t"]],["t"]]],[11,"into_iter","","",411,[[],["i"]]],[11,"try_from","","",411,[[["u"]],["result"]]],[11,"into","","",411,[[],["u"]]],[11,"try_into","","",411,[[],["result"]]],[11,"borrow","","",411,[[["self"]],["t"]]],[11,"borrow_mut","","",411,[[["self"]],["t"]]],[11,"type_id","","",411,[[["self"]],["typeid"]]],[11,"to_owned","","",411,[[["self"]],["t"]]],[11,"clone_into","","",411,[[["self"],["t"]]]],[11,"from","","",412,[[["t"]],["t"]]],[11,"into_iter","","",412,[[],["i"]]],[11,"try_from","","",412,[[["u"]],["result"]]],[11,"into","","",412,[[],["u"]]],[11,"try_into","","",412,[[],["result"]]],[11,"borrow","","",412,[[["self"]],["t"]]],[11,"borrow_mut","","",412,[[["self"]],["t"]]],[11,"type_id","","",412,[[["self"]],["typeid"]]],[11,"to_owned","","",412,[[["self"]],["t"]]],[11,"clone_into","","",412,[[["self"],["t"]]]],[11,"from","","",413,[[["t"]],["t"]]],[11,"into_iter","","",413,[[],["i"]]],[11,"try_from","","",413,[[["u"]],["result"]]],[11,"into","","",413,[[],["u"]]],[11,"try_into","","",413,[[],["result"]]],[11,"borrow","","",413,[[["self"]],["t"]]],[11,"borrow_mut","","",413,[[["self"]],["t"]]],[11,"type_id","","",413,[[["self"]],["typeid"]]],[11,"to_owned","","",413,[[["self"]],["t"]]],[11,"clone_into","","",413,[[["self"],["t"]]]],[11,"from","","",414,[[["t"]],["t"]]],[11,"into_iter","","",414,[[],["i"]]],[11,"try_from","","",414,[[["u"]],["result"]]],[11,"into","","",414,[[],["u"]]],[11,"try_into","","",414,[[],["result"]]],[11,"borrow","","",414,[[["self"]],["t"]]],[11,"borrow_mut","","",414,[[["self"]],["t"]]],[11,"type_id","","",414,[[["self"]],["typeid"]]],[11,"to_owned","","",414,[[["self"]],["t"]]],[11,"clone_into","","",414,[[["self"],["t"]]]],[11,"from","","",415,[[["t"]],["t"]]],[11,"into_iter","","",415,[[],["i"]]],[11,"try_from","","",415,[[["u"]],["result"]]],[11,"into","","",415,[[],["u"]]],[11,"try_into","","",415,[[],["result"]]],[11,"borrow","","",415,[[["self"]],["t"]]],[11,"borrow_mut","","",415,[[["self"]],["t"]]],[11,"type_id","","",415,[[["self"]],["typeid"]]],[11,"to_owned","","",415,[[["self"]],["t"]]],[11,"clone_into","","",415,[[["self"],["t"]]]],[11,"from","","",416,[[["t"]],["t"]]],[11,"into_iter","","",416,[[],["i"]]],[11,"try_from","","",416,[[["u"]],["result"]]],[11,"into","","",416,[[],["u"]]],[11,"try_into","","",416,[[],["result"]]],[11,"borrow","","",416,[[["self"]],["t"]]],[11,"borrow_mut","","",416,[[["self"]],["t"]]],[11,"type_id","","",416,[[["self"]],["typeid"]]],[11,"to_owned","","",416,[[["self"]],["t"]]],[11,"clone_into","","",416,[[["self"],["t"]]]],[11,"from","","",417,[[["t"]],["t"]]],[11,"into_iter","","",417,[[],["i"]]],[11,"try_from","","",417,[[["u"]],["result"]]],[11,"into","","",417,[[],["u"]]],[11,"try_into","","",417,[[],["result"]]],[11,"borrow","","",417,[[["self"]],["t"]]],[11,"borrow_mut","","",417,[[["self"]],["t"]]],[11,"type_id","","",417,[[["self"]],["typeid"]]],[11,"to_owned","","",417,[[["self"]],["t"]]],[11,"clone_into","","",417,[[["self"],["t"]]]],[11,"from","","",418,[[["t"]],["t"]]],[11,"into_iter","","",418,[[],["i"]]],[11,"try_from","","",418,[[["u"]],["result"]]],[11,"into","","",418,[[],["u"]]],[11,"try_into","","",418,[[],["result"]]],[11,"borrow","","",418,[[["self"]],["t"]]],[11,"borrow_mut","","",418,[[["self"]],["t"]]],[11,"type_id","","",418,[[["self"]],["typeid"]]],[11,"to_owned","","",418,[[["self"]],["t"]]],[11,"clone_into","","",418,[[["self"],["t"]]]],[11,"from","","",419,[[["t"]],["t"]]],[11,"into_iter","","",419,[[],["i"]]],[11,"try_from","","",419,[[["u"]],["result"]]],[11,"into","","",419,[[],["u"]]],[11,"try_into","","",419,[[],["result"]]],[11,"borrow","","",419,[[["self"]],["t"]]],[11,"borrow_mut","","",419,[[["self"]],["t"]]],[11,"type_id","","",419,[[["self"]],["typeid"]]],[11,"to_owned","","",419,[[["self"]],["t"]]],[11,"clone_into","","",419,[[["self"],["t"]]]],[11,"from","","",420,[[["t"]],["t"]]],[11,"into_iter","","",420,[[],["i"]]],[11,"try_from","","",420,[[["u"]],["result"]]],[11,"into","","",420,[[],["u"]]],[11,"try_into","","",420,[[],["result"]]],[11,"borrow","","",420,[[["self"]],["t"]]],[11,"borrow_mut","","",420,[[["self"]],["t"]]],[11,"type_id","","",420,[[["self"]],["typeid"]]],[11,"to_owned","","",420,[[["self"]],["t"]]],[11,"clone_into","","",420,[[["self"],["t"]]]],[11,"from","","",421,[[["t"]],["t"]]],[11,"into_iter","","",421,[[],["i"]]],[11,"try_from","","",421,[[["u"]],["result"]]],[11,"into","","",421,[[],["u"]]],[11,"try_into","","",421,[[],["result"]]],[11,"borrow","","",421,[[["self"]],["t"]]],[11,"borrow_mut","","",421,[[["self"]],["t"]]],[11,"type_id","","",421,[[["self"]],["typeid"]]],[11,"to_owned","","",421,[[["self"]],["t"]]],[11,"clone_into","","",421,[[["self"],["t"]]]],[11,"from","","",422,[[["t"]],["t"]]],[11,"into_iter","","",422,[[],["i"]]],[11,"try_from","","",422,[[["u"]],["result"]]],[11,"into","","",422,[[],["u"]]],[11,"try_into","","",422,[[],["result"]]],[11,"borrow","","",422,[[["self"]],["t"]]],[11,"borrow_mut","","",422,[[["self"]],["t"]]],[11,"type_id","","",422,[[["self"]],["typeid"]]],[11,"to_owned","","",422,[[["self"]],["t"]]],[11,"clone_into","","",422,[[["self"],["t"]]]],[11,"from","no_std_compat::string","",423,[[["t"]],["t"]]],[11,"try_from","","",423,[[["u"]],["result"]]],[11,"into","","",423,[[],["u"]]],[11,"try_into","","",423,[[],["result"]]],[11,"borrow","","",423,[[["self"]],["t"]]],[11,"borrow_mut","","",423,[[["self"]],["t"]]],[11,"type_id","","",423,[[["self"]],["typeid"]]],[11,"to_owned","","",423,[[["self"]],["t"]]],[11,"clone_into","","",423,[[["self"],["t"]]]],[11,"to_string","","",423,[[["self"]],["string"]]],[11,"from","","",424,[[["t"]],["t"]]],[11,"try_from","","",424,[[["u"]],["result"]]],[11,"into","","",424,[[],["u"]]],[11,"try_into","","",424,[[],["result"]]],[11,"borrow","","",424,[[["self"]],["t"]]],[11,"borrow_mut","","",424,[[["self"]],["t"]]],[11,"type_id","","",424,[[["self"]],["typeid"]]],[11,"to_string","","",424,[[["self"]],["string"]]],[11,"from","","",425,[[["t"]],["t"]]],[11,"into_iter","","",425,[[],["i"]]],[11,"try_from","","",425,[[["u"]],["result"]]],[11,"into","","",425,[[],["u"]]],[11,"try_into","","",425,[[],["result"]]],[11,"borrow","","",425,[[["self"]],["t"]]],[11,"borrow_mut","","",425,[[["self"]],["t"]]],[11,"type_id","","",425,[[["self"]],["typeid"]]],[11,"from","no_std_compat::prelude::v1::vec","",426,[[["t"]],["t"]]],[11,"into_iter","","",426,[[],["i"]]],[11,"try_from","","",426,[[["u"]],["result"]]],[11,"into","","",426,[[],["u"]]],[11,"try_into","","",426,[[],["result"]]],[11,"borrow","","",426,[[["self"]],["t"]]],[11,"borrow_mut","","",426,[[["self"]],["t"]]],[11,"type_id","","",426,[[["self"]],["typeid"]]],[11,"to_owned","","",426,[[["self"]],["t"]]],[11,"clone_into","","",426,[[["self"],["t"]]]],[11,"from","","",427,[[["t"]],["t"]]],[11,"into_iter","","",427,[[],["i"]]],[11,"try_from","","",427,[[["u"]],["result"]]],[11,"into","","",427,[[],["u"]]],[11,"try_into","","",427,[[],["result"]]],[11,"borrow","","",427,[[["self"]],["t"]]],[11,"borrow_mut","","",427,[[["self"]],["t"]]],[11,"type_id","","",427,[[["self"]],["typeid"]]],[11,"from","","",428,[[["t"]],["t"]]],[11,"into_iter","","",428,[[],["i"]]],[11,"try_from","","",428,[[["u"]],["result"]]],[11,"into","","",428,[[],["u"]]],[11,"try_into","","",428,[[],["result"]]],[11,"borrow","","",428,[[["self"]],["t"]]],[11,"borrow_mut","","",428,[[["self"]],["t"]]],[11,"type_id","","",428,[[["self"]],["typeid"]]],[11,"from","","",429,[[["t"]],["t"]]],[11,"into_iter","","",429,[[],["i"]]],[11,"try_from","","",429,[[["u"]],["result"]]],[11,"into","","",429,[[],["u"]]],[11,"try_into","","",429,[[],["result"]]],[11,"borrow","","",429,[[["self"]],["t"]]],[11,"borrow_mut","","",429,[[["self"]],["t"]]],[11,"type_id","","",429,[[["self"]],["typeid"]]],[11,"from","no_std_compat::any","",430,[[["t"]],["t"]]],[11,"try_from","","",430,[[["u"]],["result"]]],[11,"into","","",430,[[],["u"]]],[11,"try_into","","",430,[[],["result"]]],[11,"borrow","","",430,[[["self"]],["t"]]],[11,"borrow_mut","","",430,[[["self"]],["t"]]],[11,"type_id","","",430,[[["self"]],["typeid"]]],[11,"to_owned","","",430,[[["self"]],["t"]]],[11,"clone_into","","",430,[[["self"],["t"]]]],[11,"from","no_std_compat::arch::x86_64","",431,[[["t"]],["t"]]],[11,"try_from","","",431,[[["u"]],["result"]]],[11,"into","","",431,[[],["u"]]],[11,"try_into","","",431,[[],["result"]]],[11,"borrow","","",431,[[["self"]],["t"]]],[11,"borrow_mut","","",431,[[["self"]],["t"]]],[11,"type_id","","",431,[[["self"]],["typeid"]]],[11,"to_owned","","",431,[[["self"]],["t"]]],[11,"clone_into","","",431,[[["self"],["t"]]]],[11,"from","","",432,[[["t"]],["t"]]],[11,"try_from","","",432,[[["u"]],["result"]]],[11,"into","","",432,[[],["u"]]],[11,"try_into","","",432,[[],["result"]]],[11,"borrow","","",432,[[["self"]],["t"]]],[11,"borrow_mut","","",432,[[["self"]],["t"]]],[11,"type_id","","",432,[[["self"]],["typeid"]]],[11,"to_owned","","",432,[[["self"]],["t"]]],[11,"clone_into","","",432,[[["self"],["t"]]]],[11,"from","","",433,[[["t"]],["t"]]],[11,"try_from","","",433,[[["u"]],["result"]]],[11,"into","","",433,[[],["u"]]],[11,"try_into","","",433,[[],["result"]]],[11,"borrow","","",433,[[["self"]],["t"]]],[11,"borrow_mut","","",433,[[["self"]],["t"]]],[11,"type_id","","",433,[[["self"]],["typeid"]]],[11,"to_owned","","",433,[[["self"]],["t"]]],[11,"clone_into","","",433,[[["self"],["t"]]]],[11,"from","","",434,[[["t"]],["t"]]],[11,"try_from","","",434,[[["u"]],["result"]]],[11,"into","","",434,[[],["u"]]],[11,"try_into","","",434,[[],["result"]]],[11,"borrow","","",434,[[["self"]],["t"]]],[11,"borrow_mut","","",434,[[["self"]],["t"]]],[11,"type_id","","",434,[[["self"]],["typeid"]]],[11,"to_owned","","",434,[[["self"]],["t"]]],[11,"clone_into","","",434,[[["self"],["t"]]]],[11,"from","","",435,[[["t"]],["t"]]],[11,"try_from","","",435,[[["u"]],["result"]]],[11,"into","","",435,[[],["u"]]],[11,"try_into","","",435,[[],["result"]]],[11,"borrow","","",435,[[["self"]],["t"]]],[11,"borrow_mut","","",435,[[["self"]],["t"]]],[11,"type_id","","",435,[[["self"]],["typeid"]]],[11,"to_owned","","",435,[[["self"]],["t"]]],[11,"clone_into","","",435,[[["self"],["t"]]]],[11,"from","","",436,[[["t"]],["t"]]],[11,"try_from","","",436,[[["u"]],["result"]]],[11,"into","","",436,[[],["u"]]],[11,"try_into","","",436,[[],["result"]]],[11,"borrow","","",436,[[["self"]],["t"]]],[11,"borrow_mut","","",436,[[["self"]],["t"]]],[11,"type_id","","",436,[[["self"]],["typeid"]]],[11,"to_owned","","",436,[[["self"]],["t"]]],[11,"clone_into","","",436,[[["self"],["t"]]]],[11,"from","","",437,[[["t"]],["t"]]],[11,"try_from","","",437,[[["u"]],["result"]]],[11,"into","","",437,[[],["u"]]],[11,"try_into","","",437,[[],["result"]]],[11,"borrow","","",437,[[["self"]],["t"]]],[11,"borrow_mut","","",437,[[["self"]],["t"]]],[11,"type_id","","",437,[[["self"]],["typeid"]]],[11,"to_owned","","",437,[[["self"]],["t"]]],[11,"clone_into","","",437,[[["self"],["t"]]]],[11,"from","","",438,[[["t"]],["t"]]],[11,"try_from","","",438,[[["u"]],["result"]]],[11,"into","","",438,[[],["u"]]],[11,"try_into","","",438,[[],["result"]]],[11,"borrow","","",438,[[["self"]],["t"]]],[11,"borrow_mut","","",438,[[["self"]],["t"]]],[11,"type_id","","",438,[[["self"]],["typeid"]]],[11,"to_owned","","",438,[[["self"]],["t"]]],[11,"clone_into","","",438,[[["self"],["t"]]]],[11,"from","","",439,[[["t"]],["t"]]],[11,"try_from","","",439,[[["u"]],["result"]]],[11,"into","","",439,[[],["u"]]],[11,"try_into","","",439,[[],["result"]]],[11,"borrow","","",439,[[["self"]],["t"]]],[11,"borrow_mut","","",439,[[["self"]],["t"]]],[11,"type_id","","",439,[[["self"]],["typeid"]]],[11,"to_owned","","",439,[[["self"]],["t"]]],[11,"clone_into","","",439,[[["self"],["t"]]]],[11,"from","","",440,[[["t"]],["t"]]],[11,"try_from","","",440,[[["u"]],["result"]]],[11,"into","","",440,[[],["u"]]],[11,"try_into","","",440,[[],["result"]]],[11,"borrow","","",440,[[["self"]],["t"]]],[11,"borrow_mut","","",440,[[["self"]],["t"]]],[11,"type_id","","",440,[[["self"]],["typeid"]]],[11,"to_owned","","",440,[[["self"]],["t"]]],[11,"clone_into","","",440,[[["self"],["t"]]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"into","","",102,[[],["u"]]],[11,"try_into","","",102,[[],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"type_id","","",102,[[["self"]],["typeid"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,[[["self"],["t"]]]],[11,"from","no_std_compat::array","",441,[[["t"]],["t"]]],[11,"try_from","","",441,[[["u"]],["result"]]],[11,"into","","",441,[[],["u"]]],[11,"try_into","","",441,[[],["result"]]],[11,"borrow","","",441,[[["self"]],["t"]]],[11,"borrow_mut","","",441,[[["self"]],["t"]]],[11,"type_id","","",441,[[["self"]],["typeid"]]],[11,"to_owned","","",441,[[["self"]],["t"]]],[11,"clone_into","","",441,[[["self"],["t"]]]],[11,"to_string","","",441,[[["self"]],["string"]]],[11,"from","","",442,[[["t"]],["t"]]],[11,"into_iter","","",442,[[],["i"]]],[11,"try_from","","",442,[[["u"]],["result"]]],[11,"into","","",442,[[],["u"]]],[11,"try_into","","",442,[[],["result"]]],[11,"borrow","","",442,[[["self"]],["t"]]],[11,"borrow_mut","","",442,[[["self"]],["t"]]],[11,"type_id","","",442,[[["self"]],["typeid"]]],[11,"to_owned","","",442,[[["self"]],["t"]]],[11,"clone_into","","",442,[[["self"],["t"]]]],[11,"from","no_std_compat::cell","",443,[[],["t"]]],[11,"from","","",443,[[["t"]],["t"]]],[11,"try_from","","",443,[[["u"]],["result"]]],[11,"into","","",443,[[],["u"]]],[11,"try_into","","",443,[[],["result"]]],[11,"borrow","","",443,[[["self"]],["t"]]],[11,"borrow_mut","","",443,[[["self"]],["t"]]],[11,"type_id","","",443,[[["self"]],["typeid"]]],[11,"to_owned","","",443,[[["self"]],["t"]]],[11,"clone_into","","",443,[[["self"],["t"]]]],[11,"from","","",444,[[],["t"]]],[11,"from","","",444,[[["t"]],["t"]]],[11,"try_from","","",444,[[["u"]],["result"]]],[11,"into","","",444,[[],["u"]]],[11,"try_into","","",444,[[],["result"]]],[11,"borrow","","",444,[[["self"]],["t"]]],[11,"borrow_mut","","",444,[[["self"]],["t"]]],[11,"type_id","","",444,[[["self"]],["typeid"]]],[11,"to_owned","","",444,[[["self"]],["t"]]],[11,"clone_into","","",444,[[["self"],["t"]]]],[11,"from","","",445,[[["t"]],["t"]]],[11,"try_from","","",445,[[["u"]],["result"]]],[11,"into","","",445,[[],["u"]]],[11,"try_into","","",445,[[],["result"]]],[11,"borrow","","",445,[[["self"]],["t"]]],[11,"borrow_mut","","",445,[[["self"]],["t"]]],[11,"type_id","","",445,[[["self"]],["typeid"]]],[11,"to_string","","",445,[[["self"]],["string"]]],[11,"from","","",446,[[["t"]],["t"]]],[11,"try_from","","",446,[[["u"]],["result"]]],[11,"into","","",446,[[],["u"]]],[11,"try_into","","",446,[[],["result"]]],[11,"borrow","","",446,[[["self"]],["t"]]],[11,"borrow_mut","","",446,[[["self"]],["t"]]],[11,"type_id","","",446,[[["self"]],["typeid"]]],[11,"to_string","","",446,[[["self"]],["string"]]],[11,"from","","",447,[[["t"]],["t"]]],[11,"try_from","","",447,[[["u"]],["result"]]],[11,"into","","",447,[[],["u"]]],[11,"try_into","","",447,[[],["result"]]],[11,"borrow","","",447,[[["self"]],["t"]]],[11,"borrow_mut","","",447,[[["self"]],["t"]]],[11,"type_id","","",447,[[["self"]],["typeid"]]],[11,"to_string","","",447,[[["self"]],["string"]]],[11,"from","","",448,[[["t"]],["t"]]],[11,"try_from","","",448,[[["u"]],["result"]]],[11,"into","","",448,[[],["u"]]],[11,"try_into","","",448,[[],["result"]]],[11,"borrow","","",448,[[["self"]],["t"]]],[11,"borrow_mut","","",448,[[["self"]],["t"]]],[11,"type_id","","",448,[[["self"]],["typeid"]]],[11,"to_string","","",448,[[["self"]],["string"]]],[11,"from","","",449,[[],["t"]]],[11,"from","","",449,[[["t"]],["t"]]],[11,"try_from","","",449,[[["u"]],["result"]]],[11,"into","","",449,[[],["u"]]],[11,"try_into","","",449,[[],["result"]]],[11,"borrow","","",449,[[["self"]],["t"]]],[11,"borrow_mut","","",449,[[["self"]],["t"]]],[11,"type_id","","",449,[[["self"]],["typeid"]]],[11,"from","no_std_compat::char","",450,[[["t"]],["t"]]],[11,"into_iter","","",450,[[],["i"]]],[11,"try_from","","",450,[[["u"]],["result"]]],[11,"into","","",450,[[],["u"]]],[11,"try_into","","",450,[[],["result"]]],[11,"borrow","","",450,[[["self"]],["t"]]],[11,"borrow_mut","","",450,[[["self"]],["t"]]],[11,"type_id","","",450,[[["self"]],["typeid"]]],[11,"to_owned","","",450,[[["self"]],["t"]]],[11,"clone_into","","",450,[[["self"],["t"]]]],[11,"to_string","","",450,[[["self"]],["string"]]],[11,"from","","",451,[[["t"]],["t"]]],[11,"into_iter","","",451,[[],["i"]]],[11,"try_from","","",451,[[["u"]],["result"]]],[11,"into","","",451,[[],["u"]]],[11,"try_into","","",451,[[],["result"]]],[11,"borrow","","",451,[[["self"]],["t"]]],[11,"borrow_mut","","",451,[[["self"]],["t"]]],[11,"type_id","","",451,[[["self"]],["typeid"]]],[11,"to_owned","","",451,[[["self"]],["t"]]],[11,"clone_into","","",451,[[["self"],["t"]]]],[11,"to_string","","",451,[[["self"]],["string"]]],[11,"from","","",452,[[["t"]],["t"]]],[11,"into_iter","","",452,[[],["i"]]],[11,"try_from","","",452,[[["u"]],["result"]]],[11,"into","","",452,[[],["u"]]],[11,"try_into","","",452,[[],["result"]]],[11,"borrow","","",452,[[["self"]],["t"]]],[11,"borrow_mut","","",452,[[["self"]],["t"]]],[11,"type_id","","",452,[[["self"]],["typeid"]]],[11,"to_owned","","",452,[[["self"]],["t"]]],[11,"clone_into","","",452,[[["self"],["t"]]]],[11,"to_string","","",452,[[["self"]],["string"]]],[11,"from","","",453,[[["t"]],["t"]]],[11,"into_iter","","",453,[[],["i"]]],[11,"try_from","","",453,[[["u"]],["result"]]],[11,"into","","",453,[[],["u"]]],[11,"try_into","","",453,[[],["result"]]],[11,"borrow","","",453,[[["self"]],["t"]]],[11,"borrow_mut","","",453,[[["self"]],["t"]]],[11,"type_id","","",453,[[["self"]],["typeid"]]],[11,"to_owned","","",453,[[["self"]],["t"]]],[11,"clone_into","","",453,[[["self"],["t"]]]],[11,"to_string","","",453,[[["self"]],["string"]]],[11,"from","","",454,[[["t"]],["t"]]],[11,"into_iter","","",454,[[],["i"]]],[11,"try_from","","",454,[[["u"]],["result"]]],[11,"into","","",454,[[],["u"]]],[11,"try_into","","",454,[[],["result"]]],[11,"borrow","","",454,[[["self"]],["t"]]],[11,"borrow_mut","","",454,[[["self"]],["t"]]],[11,"type_id","","",454,[[["self"]],["typeid"]]],[11,"to_owned","","",454,[[["self"]],["t"]]],[11,"clone_into","","",454,[[["self"],["t"]]]],[11,"to_string","","",454,[[["self"]],["string"]]],[11,"from","","",455,[[["t"]],["t"]]],[11,"try_from","","",455,[[["u"]],["result"]]],[11,"into","","",455,[[],["u"]]],[11,"try_into","","",455,[[],["result"]]],[11,"borrow","","",455,[[["self"]],["t"]]],[11,"borrow_mut","","",455,[[["self"]],["t"]]],[11,"type_id","","",455,[[["self"]],["typeid"]]],[11,"to_owned","","",455,[[["self"]],["t"]]],[11,"clone_into","","",455,[[["self"],["t"]]]],[11,"to_string","","",455,[[["self"]],["string"]]],[11,"from","","",456,[[["t"]],["t"]]],[11,"try_from","","",456,[[["u"]],["result"]]],[11,"into","","",456,[[],["u"]]],[11,"try_into","","",456,[[],["result"]]],[11,"borrow","","",456,[[["self"]],["t"]]],[11,"borrow_mut","","",456,[[["self"]],["t"]]],[11,"type_id","","",456,[[["self"]],["typeid"]]],[11,"to_owned","","",456,[[["self"]],["t"]]],[11,"clone_into","","",456,[[["self"],["t"]]]],[11,"to_string","","",456,[[["self"]],["string"]]],[11,"from","","",457,[[["t"]],["t"]]],[11,"into_iter","","",457,[[],["i"]]],[11,"try_from","","",457,[[["u"]],["result"]]],[11,"into","","",457,[[],["u"]]],[11,"try_into","","",457,[[],["result"]]],[11,"borrow","","",457,[[["self"]],["t"]]],[11,"borrow_mut","","",457,[[["self"]],["t"]]],[11,"type_id","","",457,[[["self"]],["typeid"]]],[11,"to_owned","","",457,[[["self"]],["t"]]],[11,"clone_into","","",457,[[["self"],["t"]]]],[11,"from","","",458,[[["t"]],["t"]]],[11,"try_from","","",458,[[["u"]],["result"]]],[11,"into","","",458,[[],["u"]]],[11,"try_into","","",458,[[],["result"]]],[11,"borrow","","",458,[[["self"]],["t"]]],[11,"borrow_mut","","",458,[[["self"]],["t"]]],[11,"type_id","","",458,[[["self"]],["typeid"]]],[11,"to_owned","","",458,[[["self"]],["t"]]],[11,"clone_into","","",458,[[["self"],["t"]]]],[11,"to_string","","",458,[[["self"]],["string"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"into","","",104,[[],["u"]]],[11,"try_into","","",104,[[],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,[[["self"],["t"]]]],[11,"from","no_std_compat::cmp","",105,[[["t"]],["t"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"into","","",105,[[],["u"]]],[11,"try_into","","",105,[[],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,[[["self"],["t"]]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"into","","",106,[[],["u"]]],[11,"try_into","","",106,[[],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"type_id","","",106,[[["self"]],["typeid"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,[[["self"],["t"]]]],[11,"from","no_std_compat::convert","",459,[[],["t"]]],[11,"from","","",459,[[["t"]],["t"]]],[11,"try_from","","",459,[[["u"]],["result"]]],[11,"into","","",459,[[],["u"]]],[11,"try_into","","",459,[[],["result"]]],[11,"borrow","","",459,[[["self"]],["t"]]],[11,"borrow_mut","","",459,[[["self"]],["t"]]],[11,"type_id","","",459,[[["self"]],["typeid"]]],[11,"to_owned","","",459,[[["self"]],["t"]]],[11,"clone_into","","",459,[[["self"],["t"]]]],[11,"to_string","","",459,[[["self"]],["string"]]],[11,"from","no_std_compat::hash","",460,[[["t"]],["t"]]],[11,"try_from","","",460,[[["u"]],["result"]]],[11,"into","","",460,[[],["u"]]],[11,"try_into","","",460,[[],["result"]]],[11,"borrow","","",460,[[["self"]],["t"]]],[11,"borrow_mut","","",460,[[["self"]],["t"]]],[11,"type_id","","",460,[[["self"]],["typeid"]]],[11,"to_owned","","",460,[[["self"]],["t"]]],[11,"clone_into","","",460,[[["self"],["t"]]]],[11,"from","","",461,[[["t"]],["t"]]],[11,"try_from","","",461,[[["u"]],["result"]]],[11,"into","","",461,[[],["u"]]],[11,"try_into","","",461,[[],["result"]]],[11,"borrow","","",461,[[["self"]],["t"]]],[11,"borrow_mut","","",461,[[["self"]],["t"]]],[11,"type_id","","",461,[[["self"]],["typeid"]]],[11,"to_owned","","",461,[[["self"]],["t"]]],[11,"clone_into","","",461,[[["self"],["t"]]]],[11,"from","no_std_compat::iter","",462,[[["t"]],["t"]]],[11,"into_iter","","",462,[[],["i"]]],[11,"try_from","","",462,[[["u"]],["result"]]],[11,"into","","",462,[[],["u"]]],[11,"try_into","","",462,[[],["result"]]],[11,"borrow","","",462,[[["self"]],["t"]]],[11,"borrow_mut","","",462,[[["self"]],["t"]]],[11,"type_id","","",462,[[["self"]],["typeid"]]],[11,"to_owned","","",462,[[["self"]],["t"]]],[11,"clone_into","","",462,[[["self"],["t"]]]],[11,"from","","",463,[[["t"]],["t"]]],[11,"into_iter","","",463,[[],["i"]]],[11,"try_from","","",463,[[["u"]],["result"]]],[11,"into","","",463,[[],["u"]]],[11,"try_into","","",463,[[],["result"]]],[11,"borrow","","",463,[[["self"]],["t"]]],[11,"borrow_mut","","",463,[[["self"]],["t"]]],[11,"type_id","","",463,[[["self"]],["typeid"]]],[11,"to_owned","","",463,[[["self"]],["t"]]],[11,"clone_into","","",463,[[["self"],["t"]]]],[11,"from","","",464,[[["t"]],["t"]]],[11,"into_iter","","",464,[[],["i"]]],[11,"try_from","","",464,[[["u"]],["result"]]],[11,"into","","",464,[[],["u"]]],[11,"try_into","","",464,[[],["result"]]],[11,"borrow","","",464,[[["self"]],["t"]]],[11,"borrow_mut","","",464,[[["self"]],["t"]]],[11,"type_id","","",464,[[["self"]],["typeid"]]],[11,"to_owned","","",464,[[["self"]],["t"]]],[11,"clone_into","","",464,[[["self"],["t"]]]],[11,"from","","",465,[[["t"]],["t"]]],[11,"into_iter","","",465,[[],["i"]]],[11,"try_from","","",465,[[["u"]],["result"]]],[11,"into","","",465,[[],["u"]]],[11,"try_into","","",465,[[],["result"]]],[11,"borrow","","",465,[[["self"]],["t"]]],[11,"borrow_mut","","",465,[[["self"]],["t"]]],[11,"type_id","","",465,[[["self"]],["typeid"]]],[11,"to_owned","","",465,[[["self"]],["t"]]],[11,"clone_into","","",465,[[["self"],["t"]]]],[11,"from","","",466,[[["t"]],["t"]]],[11,"into_iter","","",466,[[],["i"]]],[11,"try_from","","",466,[[["u"]],["result"]]],[11,"into","","",466,[[],["u"]]],[11,"try_into","","",466,[[],["result"]]],[11,"borrow","","",466,[[["self"]],["t"]]],[11,"borrow_mut","","",466,[[["self"]],["t"]]],[11,"type_id","","",466,[[["self"]],["typeid"]]],[11,"to_owned","","",466,[[["self"]],["t"]]],[11,"clone_into","","",466,[[["self"],["t"]]]],[11,"from","","",467,[[["t"]],["t"]]],[11,"into_iter","","",467,[[],["i"]]],[11,"try_from","","",467,[[["u"]],["result"]]],[11,"into","","",467,[[],["u"]]],[11,"try_into","","",467,[[],["result"]]],[11,"borrow","","",467,[[["self"]],["t"]]],[11,"borrow_mut","","",467,[[["self"]],["t"]]],[11,"type_id","","",467,[[["self"]],["typeid"]]],[11,"to_owned","","",467,[[["self"]],["t"]]],[11,"clone_into","","",467,[[["self"],["t"]]]],[11,"from","","",468,[[["t"]],["t"]]],[11,"into_iter","","",468,[[],["i"]]],[11,"try_from","","",468,[[["u"]],["result"]]],[11,"into","","",468,[[],["u"]]],[11,"try_into","","",468,[[],["result"]]],[11,"borrow","","",468,[[["self"]],["t"]]],[11,"borrow_mut","","",468,[[["self"]],["t"]]],[11,"type_id","","",468,[[["self"]],["typeid"]]],[11,"to_owned","","",468,[[["self"]],["t"]]],[11,"clone_into","","",468,[[["self"],["t"]]]],[11,"from","","",469,[[["t"]],["t"]]],[11,"into_iter","","",469,[[],["i"]]],[11,"try_from","","",469,[[["u"]],["result"]]],[11,"into","","",469,[[],["u"]]],[11,"try_into","","",469,[[],["result"]]],[11,"borrow","","",469,[[["self"]],["t"]]],[11,"borrow_mut","","",469,[[["self"]],["t"]]],[11,"type_id","","",469,[[["self"]],["typeid"]]],[11,"to_owned","","",469,[[["self"]],["t"]]],[11,"clone_into","","",469,[[["self"],["t"]]]],[11,"from","","",470,[[["t"]],["t"]]],[11,"into_iter","","",470,[[],["i"]]],[11,"try_from","","",470,[[["u"]],["result"]]],[11,"into","","",470,[[],["u"]]],[11,"try_into","","",470,[[],["result"]]],[11,"borrow","","",470,[[["self"]],["t"]]],[11,"borrow_mut","","",470,[[["self"]],["t"]]],[11,"type_id","","",470,[[["self"]],["typeid"]]],[11,"to_owned","","",470,[[["self"]],["t"]]],[11,"clone_into","","",470,[[["self"],["t"]]]],[11,"from","","",471,[[["t"]],["t"]]],[11,"into_iter","","",471,[[],["i"]]],[11,"try_from","","",471,[[["u"]],["result"]]],[11,"into","","",471,[[],["u"]]],[11,"try_into","","",471,[[],["result"]]],[11,"borrow","","",471,[[["self"]],["t"]]],[11,"borrow_mut","","",471,[[["self"]],["t"]]],[11,"type_id","","",471,[[["self"]],["typeid"]]],[11,"to_owned","","",471,[[["self"]],["t"]]],[11,"clone_into","","",471,[[["self"],["t"]]]],[11,"from","","",472,[[["t"]],["t"]]],[11,"into_iter","","",472,[[],["i"]]],[11,"try_from","","",472,[[["u"]],["result"]]],[11,"into","","",472,[[],["u"]]],[11,"try_into","","",472,[[],["result"]]],[11,"borrow","","",472,[[["self"]],["t"]]],[11,"borrow_mut","","",472,[[["self"]],["t"]]],[11,"type_id","","",472,[[["self"]],["typeid"]]],[11,"to_owned","","",472,[[["self"]],["t"]]],[11,"clone_into","","",472,[[["self"],["t"]]]],[11,"from","","",473,[[["t"]],["t"]]],[11,"into_iter","","",473,[[],["i"]]],[11,"try_from","","",473,[[["u"]],["result"]]],[11,"into","","",473,[[],["u"]]],[11,"try_into","","",473,[[],["result"]]],[11,"borrow","","",473,[[["self"]],["t"]]],[11,"borrow_mut","","",473,[[["self"]],["t"]]],[11,"type_id","","",473,[[["self"]],["typeid"]]],[11,"to_owned","","",473,[[["self"]],["t"]]],[11,"clone_into","","",473,[[["self"],["t"]]]],[11,"from","","",474,[[["t"]],["t"]]],[11,"into_iter","","",474,[[],["i"]]],[11,"try_from","","",474,[[["u"]],["result"]]],[11,"into","","",474,[[],["u"]]],[11,"try_into","","",474,[[],["result"]]],[11,"borrow","","",474,[[["self"]],["t"]]],[11,"borrow_mut","","",474,[[["self"]],["t"]]],[11,"type_id","","",474,[[["self"]],["typeid"]]],[11,"to_owned","","",474,[[["self"]],["t"]]],[11,"clone_into","","",474,[[["self"],["t"]]]],[11,"from","","",475,[[["t"]],["t"]]],[11,"into_iter","","",475,[[],["i"]]],[11,"try_from","","",475,[[["u"]],["result"]]],[11,"into","","",475,[[],["u"]]],[11,"try_into","","",475,[[],["result"]]],[11,"borrow","","",475,[[["self"]],["t"]]],[11,"borrow_mut","","",475,[[["self"]],["t"]]],[11,"type_id","","",475,[[["self"]],["typeid"]]],[11,"to_owned","","",475,[[["self"]],["t"]]],[11,"clone_into","","",475,[[["self"],["t"]]]],[11,"from","","",476,[[["t"]],["t"]]],[11,"into_iter","","",476,[[],["i"]]],[11,"try_from","","",476,[[["u"]],["result"]]],[11,"into","","",476,[[],["u"]]],[11,"try_into","","",476,[[],["result"]]],[11,"borrow","","",476,[[["self"]],["t"]]],[11,"borrow_mut","","",476,[[["self"]],["t"]]],[11,"type_id","","",476,[[["self"]],["typeid"]]],[11,"to_owned","","",476,[[["self"]],["t"]]],[11,"clone_into","","",476,[[["self"],["t"]]]],[11,"from","","",477,[[["t"]],["t"]]],[11,"into_iter","","",477,[[],["i"]]],[11,"try_from","","",477,[[["u"]],["result"]]],[11,"into","","",477,[[],["u"]]],[11,"try_into","","",477,[[],["result"]]],[11,"borrow","","",477,[[["self"]],["t"]]],[11,"borrow_mut","","",477,[[["self"]],["t"]]],[11,"type_id","","",477,[[["self"]],["typeid"]]],[11,"to_owned","","",477,[[["self"]],["t"]]],[11,"clone_into","","",477,[[["self"],["t"]]]],[11,"from","","",478,[[["t"]],["t"]]],[11,"into_iter","","",478,[[],["i"]]],[11,"try_from","","",478,[[["u"]],["result"]]],[11,"into","","",478,[[],["u"]]],[11,"try_into","","",478,[[],["result"]]],[11,"borrow","","",478,[[["self"]],["t"]]],[11,"borrow_mut","","",478,[[["self"]],["t"]]],[11,"type_id","","",478,[[["self"]],["typeid"]]],[11,"to_owned","","",478,[[["self"]],["t"]]],[11,"clone_into","","",478,[[["self"],["t"]]]],[11,"from","","",479,[[["t"]],["t"]]],[11,"into_iter","","",479,[[],["i"]]],[11,"try_from","","",479,[[["u"]],["result"]]],[11,"into","","",479,[[],["u"]]],[11,"try_into","","",479,[[],["result"]]],[11,"borrow","","",479,[[["self"]],["t"]]],[11,"borrow_mut","","",479,[[["self"]],["t"]]],[11,"type_id","","",479,[[["self"]],["typeid"]]],[11,"to_owned","","",479,[[["self"]],["t"]]],[11,"clone_into","","",479,[[["self"],["t"]]]],[11,"from","","",480,[[["t"]],["t"]]],[11,"into_iter","","",480,[[],["i"]]],[11,"try_from","","",480,[[["u"]],["result"]]],[11,"into","","",480,[[],["u"]]],[11,"try_into","","",480,[[],["result"]]],[11,"borrow","","",480,[[["self"]],["t"]]],[11,"borrow_mut","","",480,[[["self"]],["t"]]],[11,"type_id","","",480,[[["self"]],["typeid"]]],[11,"to_owned","","",480,[[["self"]],["t"]]],[11,"clone_into","","",480,[[["self"],["t"]]]],[11,"from","","",481,[[["t"]],["t"]]],[11,"into_iter","","",481,[[],["i"]]],[11,"try_from","","",481,[[["u"]],["result"]]],[11,"into","","",481,[[],["u"]]],[11,"try_into","","",481,[[],["result"]]],[11,"borrow","","",481,[[["self"]],["t"]]],[11,"borrow_mut","","",481,[[["self"]],["t"]]],[11,"type_id","","",481,[[["self"]],["typeid"]]],[11,"to_owned","","",481,[[["self"]],["t"]]],[11,"clone_into","","",481,[[["self"],["t"]]]],[11,"from","","",482,[[["t"]],["t"]]],[11,"into_iter","","",482,[[],["i"]]],[11,"try_from","","",482,[[["u"]],["result"]]],[11,"into","","",482,[[],["u"]]],[11,"try_into","","",482,[[],["result"]]],[11,"borrow","","",482,[[["self"]],["t"]]],[11,"borrow_mut","","",482,[[["self"]],["t"]]],[11,"type_id","","",482,[[["self"]],["typeid"]]],[11,"to_owned","","",482,[[["self"]],["t"]]],[11,"clone_into","","",482,[[["self"],["t"]]]],[11,"from","","",483,[[["t"]],["t"]]],[11,"into_iter","","",483,[[],["i"]]],[11,"try_from","","",483,[[["u"]],["result"]]],[11,"into","","",483,[[],["u"]]],[11,"try_into","","",483,[[],["result"]]],[11,"borrow","","",483,[[["self"]],["t"]]],[11,"borrow_mut","","",483,[[["self"]],["t"]]],[11,"type_id","","",483,[[["self"]],["typeid"]]],[11,"to_owned","","",483,[[["self"]],["t"]]],[11,"clone_into","","",483,[[["self"],["t"]]]],[11,"from","","",484,[[["t"]],["t"]]],[11,"into_iter","","",484,[[],["i"]]],[11,"try_from","","",484,[[["u"]],["result"]]],[11,"into","","",484,[[],["u"]]],[11,"try_into","","",484,[[],["result"]]],[11,"borrow","","",484,[[["self"]],["t"]]],[11,"borrow_mut","","",484,[[["self"]],["t"]]],[11,"type_id","","",484,[[["self"]],["typeid"]]],[11,"to_owned","","",484,[[["self"]],["t"]]],[11,"clone_into","","",484,[[["self"],["t"]]]],[11,"from","","",485,[[["t"]],["t"]]],[11,"into_iter","","",485,[[],["i"]]],[11,"try_from","","",485,[[["u"]],["result"]]],[11,"into","","",485,[[],["u"]]],[11,"try_into","","",485,[[],["result"]]],[11,"borrow","","",485,[[["self"]],["t"]]],[11,"borrow_mut","","",485,[[["self"]],["t"]]],[11,"type_id","","",485,[[["self"]],["typeid"]]],[11,"to_owned","","",485,[[["self"]],["t"]]],[11,"clone_into","","",485,[[["self"],["t"]]]],[11,"from","","",486,[[["t"]],["t"]]],[11,"into_iter","","",486,[[],["i"]]],[11,"try_from","","",486,[[["u"]],["result"]]],[11,"into","","",486,[[],["u"]]],[11,"try_into","","",486,[[],["result"]]],[11,"borrow","","",486,[[["self"]],["t"]]],[11,"borrow_mut","","",486,[[["self"]],["t"]]],[11,"type_id","","",486,[[["self"]],["typeid"]]],[11,"to_owned","","",486,[[["self"]],["t"]]],[11,"clone_into","","",486,[[["self"],["t"]]]],[11,"from","","",487,[[["t"]],["t"]]],[11,"into_iter","","",487,[[],["i"]]],[11,"try_from","","",487,[[["u"]],["result"]]],[11,"into","","",487,[[],["u"]]],[11,"try_into","","",487,[[],["result"]]],[11,"borrow","","",487,[[["self"]],["t"]]],[11,"borrow_mut","","",487,[[["self"]],["t"]]],[11,"type_id","","",487,[[["self"]],["typeid"]]],[11,"to_owned","","",487,[[["self"]],["t"]]],[11,"clone_into","","",487,[[["self"],["t"]]]],[11,"from","","",488,[[["t"]],["t"]]],[11,"into_iter","","",488,[[],["i"]]],[11,"try_from","","",488,[[["u"]],["result"]]],[11,"into","","",488,[[],["u"]]],[11,"try_into","","",488,[[],["result"]]],[11,"borrow","","",488,[[["self"]],["t"]]],[11,"borrow_mut","","",488,[[["self"]],["t"]]],[11,"type_id","","",488,[[["self"]],["typeid"]]],[11,"to_owned","","",488,[[["self"]],["t"]]],[11,"clone_into","","",488,[[["self"],["t"]]]],[11,"from","","",489,[[["t"]],["t"]]],[11,"into_iter","","",489,[[],["i"]]],[11,"try_from","","",489,[[["u"]],["result"]]],[11,"into","","",489,[[],["u"]]],[11,"try_into","","",489,[[],["result"]]],[11,"borrow","","",489,[[["self"]],["t"]]],[11,"borrow_mut","","",489,[[["self"]],["t"]]],[11,"type_id","","",489,[[["self"]],["typeid"]]],[11,"to_owned","","",489,[[["self"]],["t"]]],[11,"clone_into","","",489,[[["self"],["t"]]]],[11,"from","","",490,[[["t"]],["t"]]],[11,"into_iter","","",490,[[],["i"]]],[11,"try_from","","",490,[[["u"]],["result"]]],[11,"into","","",490,[[],["u"]]],[11,"try_into","","",490,[[],["result"]]],[11,"borrow","","",490,[[["self"]],["t"]]],[11,"borrow_mut","","",490,[[["self"]],["t"]]],[11,"type_id","","",490,[[["self"]],["typeid"]]],[11,"to_owned","","",490,[[["self"]],["t"]]],[11,"clone_into","","",490,[[["self"],["t"]]]],[11,"from","no_std_compat::marker","",491,[[["t"]],["t"]]],[11,"try_from","","",491,[[["u"]],["result"]]],[11,"into","","",491,[[],["u"]]],[11,"try_into","","",491,[[],["result"]]],[11,"borrow","","",491,[[["self"]],["t"]]],[11,"borrow_mut","","",491,[[["self"]],["t"]]],[11,"type_id","","",491,[[["self"]],["typeid"]]],[11,"to_owned","","",491,[[["self"]],["t"]]],[11,"clone_into","","",491,[[["self"],["t"]]]],[11,"from","","",492,[[["t"]],["t"]]],[11,"try_from","","",492,[[["u"]],["result"]]],[11,"into","","",492,[[],["u"]]],[11,"try_into","","",492,[[],["result"]]],[11,"borrow","","",492,[[["self"]],["t"]]],[11,"borrow_mut","","",492,[[["self"]],["t"]]],[11,"type_id","","",492,[[["self"]],["typeid"]]],[11,"to_owned","","",492,[[["self"]],["t"]]],[11,"clone_into","","",492,[[["self"],["t"]]]],[11,"from","no_std_compat::mem","",493,[[["t"]],["t"]]],[11,"try_from","","",493,[[["u"]],["result"]]],[11,"into","","",493,[[],["u"]]],[11,"try_into","","",493,[[],["result"]]],[11,"borrow","","",493,[[["self"]],["t"]]],[11,"borrow_mut","","",493,[[["self"]],["t"]]],[11,"type_id","","",493,[[["self"]],["typeid"]]],[11,"to_owned","","",493,[[["self"]],["t"]]],[11,"clone_into","","",493,[[["self"],["t"]]]],[11,"from","","",494,[[["t"]],["t"]]],[11,"try_from","","",494,[[["u"]],["result"]]],[11,"into","","",494,[[],["u"]]],[11,"try_into","","",494,[[],["result"]]],[11,"borrow","","",494,[[["self"]],["t"]]],[11,"borrow_mut","","",494,[[["self"]],["t"]]],[11,"type_id","","",494,[[["self"]],["typeid"]]],[11,"to_owned","","",494,[[["self"]],["t"]]],[11,"clone_into","","",494,[[["self"],["t"]]]],[11,"from","","",495,[[["t"]],["t"]]],[11,"try_from","","",495,[[["u"]],["result"]]],[11,"into","","",495,[[],["u"]]],[11,"try_into","","",495,[[],["result"]]],[11,"borrow","","",495,[[["self"]],["t"]]],[11,"borrow_mut","","",495,[[["self"]],["t"]]],[11,"type_id","","",495,[[["self"]],["typeid"]]],[11,"to_owned","","",495,[[["self"]],["t"]]],[11,"clone_into","","",495,[[["self"],["t"]]]],[11,"from","no_std_compat::ops","",142,[[["t"]],["t"]]],[11,"into_iter","","",142,[[],["i"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"into","","",142,[[],["u"]]],[11,"try_into","","",142,[[],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"type_id","","",142,[[["self"]],["typeid"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,[[["self"],["t"]]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"into_iter","","",143,[[],["i"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"into","","",143,[[],["u"]]],[11,"try_into","","",143,[[],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"type_id","","",143,[[["self"]],["typeid"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,[[["self"],["t"]]]],[11,"from","","",496,[[["t"]],["t"]]],[11,"try_from","","",496,[[["u"]],["result"]]],[11,"into","","",496,[[],["u"]]],[11,"try_into","","",496,[[],["result"]]],[11,"borrow","","",496,[[["self"]],["t"]]],[11,"borrow_mut","","",496,[[["self"]],["t"]]],[11,"type_id","","",496,[[["self"]],["typeid"]]],[11,"to_owned","","",496,[[["self"]],["t"]]],[11,"clone_into","","",496,[[["self"],["t"]]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"into","","",144,[[],["u"]]],[11,"try_into","","",144,[[],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"type_id","","",144,[[["self"]],["typeid"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,[[["self"],["t"]]]],[11,"from","","",497,[[["t"]],["t"]]],[11,"into_iter","","",497,[[],["i"]]],[11,"try_from","","",497,[[["u"]],["result"]]],[11,"into","","",497,[[],["u"]]],[11,"try_into","","",497,[[],["result"]]],[11,"borrow","","",497,[[["self"]],["t"]]],[11,"borrow_mut","","",497,[[["self"]],["t"]]],[11,"type_id","","",497,[[["self"]],["typeid"]]],[11,"to_owned","","",497,[[["self"]],["t"]]],[11,"clone_into","","",497,[[["self"],["t"]]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"into","","",146,[[],["u"]]],[11,"try_into","","",146,[[],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"type_id","","",146,[[["self"]],["typeid"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,[[["self"],["t"]]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"into","","",149,[[],["u"]]],[11,"try_into","","",149,[[],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"type_id","","",149,[[["self"]],["typeid"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,[[["self"],["t"]]]],[11,"from","no_std_compat::option","",498,[[["t"]],["t"]]],[11,"into_iter","","",498,[[],["i"]]],[11,"try_from","","",498,[[["u"]],["result"]]],[11,"into","","",498,[[],["u"]]],[11,"try_into","","",498,[[],["result"]]],[11,"borrow","","",498,[[["self"]],["t"]]],[11,"borrow_mut","","",498,[[["self"]],["t"]]],[11,"type_id","","",498,[[["self"]],["typeid"]]],[11,"to_owned","","",498,[[["self"]],["t"]]],[11,"clone_into","","",498,[[["self"],["t"]]]],[11,"from","","",499,[[["t"]],["t"]]],[11,"into_iter","","",499,[[],["i"]]],[11,"try_from","","",499,[[["u"]],["result"]]],[11,"into","","",499,[[],["u"]]],[11,"try_into","","",499,[[],["result"]]],[11,"borrow","","",499,[[["self"]],["t"]]],[11,"borrow_mut","","",499,[[["self"]],["t"]]],[11,"type_id","","",499,[[["self"]],["typeid"]]],[11,"from","","",500,[[["t"]],["t"]]],[11,"into_iter","","",500,[[],["i"]]],[11,"try_from","","",500,[[["u"]],["result"]]],[11,"into","","",500,[[],["u"]]],[11,"try_into","","",500,[[],["result"]]],[11,"borrow","","",500,[[["self"]],["t"]]],[11,"borrow_mut","","",500,[[["self"]],["t"]]],[11,"type_id","","",500,[[["self"]],["typeid"]]],[11,"to_owned","","",500,[[["self"]],["t"]]],[11,"clone_into","","",500,[[["self"],["t"]]]],[11,"from","","",501,[[["t"]],["t"]]],[11,"try_from","","",501,[[["u"]],["result"]]],[11,"into","","",501,[[],["u"]]],[11,"try_into","","",501,[[],["result"]]],[11,"borrow","","",501,[[["self"]],["t"]]],[11,"borrow_mut","","",501,[[["self"]],["t"]]],[11,"type_id","","",501,[[["self"]],["typeid"]]],[11,"to_owned","","",501,[[["self"]],["t"]]],[11,"clone_into","","",501,[[["self"],["t"]]]],[11,"from","no_std_compat::pin","",502,[[["t"]],["t"]]],[11,"try_from","","",502,[[["u"]],["result"]]],[11,"into","","",502,[[],["u"]]],[11,"try_into","","",502,[[],["result"]]],[11,"borrow","","",502,[[["self"]],["t"]]],[11,"borrow_mut","","",502,[[["self"]],["t"]]],[11,"type_id","","",502,[[["self"]],["typeid"]]],[11,"to_owned","","",502,[[["self"]],["t"]]],[11,"clone_into","","",502,[[["self"],["t"]]]],[11,"to_string","","",502,[[["self"]],["string"]]],[11,"from","no_std_compat::ptr","",503,[[["t"]],["t"]]],[11,"try_from","","",503,[[["u"]],["result"]]],[11,"into","","",503,[[],["u"]]],[11,"try_into","","",503,[[],["result"]]],[11,"borrow","","",503,[[["self"]],["t"]]],[11,"borrow_mut","","",503,[[["self"]],["t"]]],[11,"type_id","","",503,[[["self"]],["typeid"]]],[11,"to_owned","","",503,[[["self"]],["t"]]],[11,"clone_into","","",503,[[["self"],["t"]]]],[11,"from","no_std_compat::raw","",150,[[["t"]],["t"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"into","","",150,[[],["u"]]],[11,"try_into","","",150,[[],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"type_id","","",150,[[["self"]],["typeid"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,[[["self"],["t"]]]],[11,"from","no_std_compat::result","",504,[[["t"]],["t"]]],[11,"into_iter","","",504,[[],["i"]]],[11,"try_from","","",504,[[["u"]],["result"]]],[11,"into","","",504,[[],["u"]]],[11,"try_into","","",504,[[],["result"]]],[11,"borrow","","",504,[[["self"]],["t"]]],[11,"borrow_mut","","",504,[[["self"]],["t"]]],[11,"type_id","","",504,[[["self"]],["typeid"]]],[11,"to_owned","","",504,[[["self"]],["t"]]],[11,"clone_into","","",504,[[["self"],["t"]]]],[11,"from","","",505,[[["t"]],["t"]]],[11,"into_iter","","",505,[[],["i"]]],[11,"try_from","","",505,[[["u"]],["result"]]],[11,"into","","",505,[[],["u"]]],[11,"try_into","","",505,[[],["result"]]],[11,"borrow","","",505,[[["self"]],["t"]]],[11,"borrow_mut","","",505,[[["self"]],["t"]]],[11,"type_id","","",505,[[["self"]],["typeid"]]],[11,"from","","",506,[[["t"]],["t"]]],[11,"into_iter","","",506,[[],["i"]]],[11,"try_from","","",506,[[["u"]],["result"]]],[11,"into","","",506,[[],["u"]]],[11,"try_into","","",506,[[],["result"]]],[11,"borrow","","",506,[[["self"]],["t"]]],[11,"borrow_mut","","",506,[[["self"]],["t"]]],[11,"type_id","","",506,[[["self"]],["typeid"]]],[11,"to_owned","","",506,[[["self"]],["t"]]],[11,"clone_into","","",506,[[["self"],["t"]]]],[11,"shr_assign","no_std_compat::num","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"shr_assign","","",43,[[["self"],["usize"]]]],[11,"next","no_std_compat::iter","",473,[[["self"]],["option"]]],[11,"size_hint","","",473,[[["self"]]]],[11,"nth","","",473,[[["self"],["usize"]],["option"]]],[11,"try_fold","","",473,[[["self"],["acc"],["f"]],["r"]]],[11,"next","","",488,[[["self"]],["option"]]],[11,"size_hint","","",488,[[["self"]]]],[11,"try_fold","","",488,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","no_std_compat::slice","",388,[[["self"]],["option"]]],[11,"size_hint","","",388,[[["self"]]]],[11,"count","","",388,[[],["usize"]]],[11,"nth","","",388,[[["self"],["usize"]],["option"]]],[11,"last","","",388,[[],["option"]]],[11,"next","","",382,[[["self"]],["option"]]],[11,"size_hint","","",382,[[["self"]]]],[11,"next","no_std_compat::result","",506,[[["self"]],["option"]]],[11,"size_hint","","",506,[[["self"]]]],[11,"next","no_std_compat::ascii","",162,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"size_hint","","",162,[[["self"]]]],[11,"last","","",162,[[],[["option",["u8"]],["u8"]]]],[11,"next","no_std_compat::str","",416,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","","",422,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","no_std_compat::iter","",471,[[["self"]],["option"]]],[11,"size_hint","","",471,[[["self"]]]],[11,"try_fold","","",471,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",471,[[["acc"],["fold"]],["acc"]]],[11,"next","","",464,[[["self"]],["option"]]],[11,"size_hint","","",464,[[["self"]]]],[11,"next","no_std_compat::char","",451,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",451,[[["self"]]]],[11,"count","","",451,[[],["usize"]]],[11,"nth","","",451,[[["self"],["usize"]],[["option",["char"]],["char"]]]],[11,"last","","",451,[[],[["option",["char"]],["char"]]]],[11,"next","no_std_compat::ops","",143,[[["self"]],["option"]]],[11,"size_hint","","",143,[[["self"]]]],[11,"nth","","",143,[[["self"],["usize"]],["option"]]],[11,"next","no_std_compat::slice","",386,[[["self"]],["option"]]],[11,"size_hint","","",386,[[["self"]]]],[11,"count","","",386,[[],["usize"]]],[11,"nth","","",386,[[["self"],["usize"]],["option"]]],[11,"last","","",386,[[],["option"]]],[11,"next","no_std_compat::char","",450,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",450,[[["self"]]]],[11,"count","","",450,[[],["usize"]]],[11,"last","","",450,[[],[["option",["char"]],["char"]]]],[11,"next","no_std_compat::str","",420,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","no_std_compat::char","",453,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",453,[[["self"]]]],[11,"next","no_std_compat::str","",417,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","","",409,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",409,[[["self"]]]],[11,"try_fold","","",409,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",409,[[["acc"],["fold"]],["acc"]]],[11,"next","no_std_compat::option","",500,[[["self"]],["option"]]],[11,"size_hint","","",500,[[["self"]]]],[11,"next","no_std_compat::slice","",381,[[["self"]],["option"]]],[11,"size_hint","","",381,[[["self"]]]],[11,"count","","",381,[[],["usize"]]],[11,"nth","","",381,[[["self"],["usize"]],["option"]]],[11,"last","","",381,[[],["option"]]],[11,"next","no_std_compat::iter","",483,[[["self"]],["option"]]],[11,"count","","",483,[[],["usize"]]],[11,"nth","","",483,[[["self"],["usize"]],["option"]]],[11,"last","","",483,[[],["option"]]],[11,"size_hint","","",483,[[["self"]]]],[11,"try_fold","","",483,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",483,[[["acc"],["fold"]],["acc"]]],[11,"next","","",487,[[["self"]],["option"]]],[11,"nth","","",487,[[["self"],["usize"]],["option"]]],[11,"size_hint","","",487,[[["self"]]]],[11,"try_fold","","",487,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","","",479,[[["self"]],["option"]]],[11,"size_hint","","",479,[[["self"]]]],[11,"try_fold","","",479,[[["self"],["acc"],["g"]],["r"]]],[11,"fold","","",479,[[["acc"],["g"]],["acc"]]],[11,"next","no_std_compat::slice","",392,[[["self"]],["option"]]],[11,"size_hint","","",392,[[["self"]]]],[11,"next","no_std_compat::str","",408,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",408,[[["self"]]]],[11,"try_fold","","",408,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",408,[[["acc"],["fold"]],["acc"]]],[11,"next","no_std_compat::slice","",390,[[["self"]],["option"]]],[11,"size_hint","","",390,[[["self"]]]],[11,"next","no_std_compat::str","",407,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",407,[[["self"]]]],[11,"try_fold","","",407,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",407,[[["acc"],["fold"]],["acc"]]],[11,"next","no_std_compat::iter","",463,[[["self"]],["option"]]],[11,"next","no_std_compat::slice","",389,[[["self"]],["option"]]],[11,"size_hint","","",389,[[["self"]]]],[11,"count","","",389,[[],["usize"]]],[11,"nth","","",389,[[["self"],["usize"]],["option"]]],[11,"last","","",389,[[],["option"]]],[11,"next","no_std_compat::iter","",480,[[["self"]],["option"]]],[11,"size_hint","","",480,[[["self"]]]],[11,"nth","","",480,[[["self"],["usize"]],["option"]]],[11,"try_fold","","",480,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",480,[[["acc"],["f"]],["acc"]]],[11,"find","","",480,[[["self"],["p"]],["option"]]],[11,"next","","",475,[[["self"]],["option"]]],[11,"size_hint","","",475,[[["self"]]]],[11,"try_fold","","",475,[[["self"],["acc"],["f"]],["r"]]],[11,"next","no_std_compat::char","",457,[[["self"]],[["result",["char","decodeutf16error"]],["option",["result"]]]]],[11,"size_hint","","",457,[[["self"]]]],[11,"next","no_std_compat::slice","",378,[[["self"]],["option"]]],[11,"size_hint","","",378,[[["self"]]]],[11,"count","","",378,[[],["usize"]]],[11,"nth","","",378,[[["self"],["usize"]],["option"]]],[11,"last","","",378,[[],["option"]]],[11,"next","no_std_compat::iter","",474,[[["self"]],["option"]]],[11,"count","","",474,[[],["usize"]]],[11,"try_fold","","",474,[[["self"],["acc"],["f"]],["r"]]],[11,"fold","","",474,[[["acc"],["f"]],["acc"]]],[11,"nth","","",474,[[["self"],["usize"]],["option"]]],[11,"find","","",474,[[["self"],["p"]],["option"]]],[11,"last","","",474,[[],["option"]]],[11,"size_hint","","",474,[[["self"]]]],[11,"next","no_std_compat::result","",504,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",504,[[["self"]]]],[11,"next","no_std_compat::slice","",391,[[["self"]],["option"]]],[11,"size_hint","","",391,[[["self"]]]],[11,"next","no_std_compat::str","",411,[[["self"]],[["option",["str"]],["str"]]]],[11,"size_hint","","",411,[[["self"]]]],[11,"last","","",411,[[],[["option",["str"]],["str"]]]],[11,"next","","",402,[[["self"]],[["option",["str"]],["str"]]]],[11,"size_hint","","",402,[[["self"]]]],[11,"last","","",402,[[],[["option",["str"]],["str"]]]],[11,"next","no_std_compat::iter","",470,[[["self"]],["option"]]],[11,"size_hint","","",470,[[["self"]]]],[11,"try_fold","","",470,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",470,[[["acc"],["f"]],["acc"]]],[11,"next","","",490,[[["self"]],["option"]]],[11,"size_hint","","",490,[[["self"]]]],[11,"try_fold","","",490,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",490,[[["acc"],["fold"]],["acc"]]],[11,"next","no_std_compat::str","",403,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"size_hint","","",403,[[["self"]]]],[11,"count","","",403,[[],["usize"]]],[11,"last","","",403,[[],["option"]]],[11,"nth","","",403,[[["self"],["usize"]],["option"]]],[11,"all","","",403,[[["self"],["f"]],["bool"]]],[11,"any","","",403,[[["self"],["f"]],["bool"]]],[11,"find","","",403,[[["self"],["p"]],["option"]]],[11,"position","","",403,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","",403,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"next","no_std_compat::slice","",394,[[["self"]],["option"]]],[11,"size_hint","","",394,[[["self"]]]],[11,"next","no_std_compat::array","",442,[[["self"]],["option"]]],[11,"size_hint","","",442,[[["self"]]]],[11,"count","","",442,[[],["usize"]]],[11,"last","","",442,[[],["option"]]],[11,"next","no_std_compat::str","",400,[[["self"]],[["option",["u16"]],["u16"]]]],[11,"size_hint","","",400,[[["self"]]]],[11,"next","no_std_compat::slice","",383,[[["self"]],["option"]]],[11,"size_hint","","",383,[[["self"]]]],[11,"next","","",387,[[["self"]],["option"]]],[11,"size_hint","","",387,[[["self"]]]],[11,"count","","",387,[[],["usize"]]],[11,"nth","","",387,[[["self"],["usize"]],["option"]]],[11,"last","","",387,[[],["option"]]],[11,"next","no_std_compat::iter","",472,[[["self"]],["option"]]],[11,"size_hint","","",472,[[["self"]]]],[11,"try_fold","","",472,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","no_std_compat::str","",413,[[["self"]],["option"]]],[11,"next","","",421,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","no_std_compat::iter","",484,[[["self"]],["option"]]],[11,"size_hint","","",484,[[["self"]]]],[11,"try_fold","","",484,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","no_std_compat::str","",404,[[["self"]],["option"]]],[11,"count","","",404,[[],["usize"]]],[11,"size_hint","","",404,[[["self"]]]],[11,"last","","",404,[[],["option"]]],[11,"next","no_std_compat::slice","",385,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",385,[[["self"]]]],[11,"count","","",385,[[],["usize"]]],[11,"nth","","",385,[[["self"],["usize"]],[["option"],["t"]]]],[11,"last","","",385,[[],[["option"],["t"]]]],[11,"position","","",385,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","",385,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"next","no_std_compat::result","",505,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",505,[[["self"]]]],[11,"next","no_std_compat::iter","",485,[[["self"]],["option"]]],[11,"nth","","",485,[[["self"],["usize"]],["option"]]],[11,"count","","",485,[[],["usize"]]],[11,"last","","",485,[[],["option"]]],[11,"size_hint","","",485,[[["self"]]]],[11,"try_fold","","",485,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",485,[[["acc"],["fold"]],["acc"]]],[11,"next","","",468,[[["self"]],["option"]]],[11,"size_hint","","",468,[[["self"]]]],[11,"next","no_std_compat::str","",412,[[["self"]],[["option",["str"]],["str"]]]],[11,"size_hint","","",412,[[["self"]]]],[11,"next","no_std_compat::iter","",481,[[["self"]],["option"]]],[11,"size_hint","","",481,[[["self"]]]],[11,"nth","","",481,[[["self"],["usize"]],["option"]]],[11,"next","no_std_compat::slice","",379,[[["self"]],["option"]]],[11,"size_hint","","",379,[[["self"]]]],[11,"count","","",379,[[],["usize"]]],[11,"nth","","",379,[[["self"],["usize"]],["option"]]],[11,"last","","",379,[[],["option"]]],[11,"next","no_std_compat::iter","",486,[[["self"]],["option"]]],[11,"size_hint","","",486,[[["self"]]]],[11,"try_fold","","",486,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",486,[[["acc"],["fold"]],["acc"]]],[11,"next","","",489,[[["self"]],["option"]]],[11,"nth","","",489,[[["self"],["usize"]],["option"]]],[11,"last","","",489,[[],["option"]]],[11,"count","","",489,[[],["usize"]]],[11,"size_hint","","",489,[[["self"]]]],[11,"try_fold","","",489,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",489,[[["acc"],["fold"]],["acc"]]],[11,"next","","",465,[[["self"]],["option"]]],[11,"size_hint","","",465,[[["self"]]]],[11,"next","","",489,[[["self"]],["option"]]],[11,"nth","","",489,[[["self"],["usize"]],["option"]]],[11,"last","","",489,[[],["option"]]],[11,"count","","",489,[[],["usize"]]],[11,"size_hint","","",489,[[["self"]]]],[11,"try_fold","","",489,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",489,[[["acc"],["fold"]],["acc"]]],[11,"next","no_std_compat::str","",414,[[["self"]],["option"]]],[11,"next","no_std_compat::iter","",462,[[["self"]],["option"]]],[11,"size_hint","","",462,[[["self"]]]],[11,"next","","",477,[[["self"]],["option"]]],[11,"size_hint","","",477,[[["self"]]]],[11,"count","","",477,[[],["usize"]]],[11,"try_fold","","",477,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",477,[[["acc"],["fold"]],["acc"]]],[11,"next","no_std_compat::char","",454,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",454,[[["self"]]]],[11,"next","no_std_compat::iter","",466,[[["self"]],["option"]]],[11,"size_hint","","",466,[[["self"]]]],[11,"next","no_std_compat::str","",419,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","no_std_compat::slice","",395,[[["self"]],["option"]]],[11,"size_hint","","",395,[[["self"]]]],[11,"next","no_std_compat::str","",415,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","","",418,[[["self"]],[["option",["str"]],["str"]]]],[11,"next","no_std_compat::ops","",497,[[["self"]],["option"]]],[11,"size_hint","","",497,[[["self"]]]],[11,"nth","","",497,[[["self"],["usize"]],["option"]]],[11,"try_fold","","",497,[[["self"],["b"],["f"]],["r"]]],[11,"last","","",497,[[],["option"]]],[11,"min","","",497,[[],["option"]]],[11,"max","","",497,[[],["option"]]],[11,"next","no_std_compat::iter","Overflow Behavior",476,[[["self"]],["option"]]],[11,"size_hint","","",476,[[["self"]]]],[11,"nth","","",476,[[["self"],["usize"]],["option"]]],[11,"count","","",476,[[],["usize"]]],[11,"try_fold","","",476,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",476,[[["acc"],["fold"]],["acc"]]],[11,"next","no_std_compat::slice","",377,[[["self"]],["option"]]],[11,"size_hint","","",377,[[["self"]]]],[11,"count","","",377,[[],["usize"]]],[11,"nth","","",377,[[["self"],["usize"]],["option"]]],[11,"last","","",377,[[],["option"]]],[11,"next","no_std_compat::char","",452,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",452,[[["self"]]]],[11,"next","no_std_compat::str","",405,[[["self"]],[["option",["char"]],["char"]]]],[11,"count","","",405,[[],["usize"]]],[11,"size_hint","","",405,[[["self"]]]],[11,"last","","",405,[[],[["option",["char"]],["char"]]]],[11,"next","no_std_compat::option","",498,[[["self"]],[["option"],["a"]]]],[11,"size_hint","","",498,[[["self"]]]],[11,"next","no_std_compat::iter","",467,[[["self"]],["option"]]],[11,"size_hint","","",467,[[["self"]]]],[11,"next","","",482,[[["self"]],["option"]]],[11,"size_hint","","",482,[[["self"]]]],[11,"try_fold","","",482,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",482,[[["acc"],["fold"]],["acc"]]],[11,"next","","",478,[[["self"]],["option"]]],[11,"size_hint","","",478,[[["self"]]]],[11,"try_fold","","",478,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",478,[[["acc"],["fold"]],["acc"]]],[11,"next","","",469,[[["self"]],["option"]]],[11,"size_hint","","",469,[[["self"]]]],[11,"try_fold","","",469,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",469,[[["acc"],["f"]],["acc"]]],[11,"next","no_std_compat::slice","",384,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",384,[[["self"]]]],[11,"count","","",384,[[],["usize"]]],[11,"nth","","",384,[[["self"],["usize"]],[["t"],["option"]]]],[11,"last","","",384,[[],[["t"],["option"]]]],[11,"position","","",384,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","",384,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"is_sorted_by","","",384,[[["f"]],["bool"]]],[11,"next","","",380,[[["self"]],["option"]]],[11,"size_hint","","",380,[[["self"]]]],[11,"count","","",380,[[],["usize"]]],[11,"nth","","",380,[[["self"],["usize"]],["option"]]],[11,"last","","",380,[[],["option"]]],[11,"next","","",393,[[["self"]],["option"]]],[11,"size_hint","","",393,[[["self"]]]],[11,"next","no_std_compat::str","",401,[[["self"]],[["option",["str"]],["str"]]]],[11,"size_hint","","",401,[[["self"]]]],[11,"last","","",401,[[],[["option",["str"]],["str"]]]],[11,"next","no_std_compat::option","",499,[[["self"]],[["a"],["option"]]]],[11,"size_hint","","",499,[[["self"]]]],[11,"next","no_std_compat::ops","",142,[[["self"]],["option"]]],[11,"size_hint","","",142,[[["self"]]]],[11,"nth","","",142,[[["self"],["usize"]],["option"]]],[11,"last","","",142,[[],["option"]]],[11,"min","","",142,[[],["option"]]],[11,"max","","",142,[[],["option"]]],[11,"sum","no_std_compat::num","",43,[[["i"]],[["wrapping",["u128"]],["u128"]]]],[11,"sum","no_std_compat::time","",356,[[["i"]],["duration"]]],[11,"sum","no_std_compat::num","",43,[[["i"]],[["wrapping",["i8"]],["i8"]]]],[11,"sum","","",43,[[["i"]],[["isize"],["wrapping",["isize"]]]]],[11,"sum","","",43,[[["i"]],[["wrapping",["u128"]],["u128"]]]],[11,"sum","","",43,[[["i"]],[["wrapping",["i128"]],["i128"]]]],[11,"sum","no_std_compat::prelude::v1","Takes each element in the `Iterator`: if it is a `None`,…",13,[[["i"]],["option"]]],[11,"sum","no_std_compat::num","",43,[[["i"]],[["wrapping",["u64"]],["u64"]]]],[11,"sum","","",43,[[["i"]],[["u32"],["wrapping",["u32"]]]]],[11,"sum","","",43,[[["i"]],[["wrapping",["i128"]],["i128"]]]],[11,"sum","","",43,[[["i"]],[["u16"],["wrapping",["u16"]]]]],[11,"sum","","",43,[[["i"]],[["i64"],["wrapping",["i64"]]]]],[11,"sum","","",43,[[["i"]],[["wrapping",["i8"]],["i8"]]]],[11,"sum","","",43,[[["i"]],[["wrapping",["usize"]],["usize"]]]],[11,"sum","","",43,[[["i"]],[["u16"],["wrapping",["u16"]]]]],[11,"sum","","",43,[[["i"]],[["wrapping",["i16"]],["i16"]]]],[11,"sum","","",43,[[["i"]],[["wrapping",["usize"]],["usize"]]]],[11,"sum","","",43,[[["i"]],[["wrapping",["i16"]],["i16"]]]],[11,"sum","","",43,[[["i"]],[["u32"],["wrapping",["u32"]]]]],[11,"sum","no_std_compat::time","",356,[[["i"]],["duration"]]],[11,"sum","no_std_compat::num","",43,[[["i"]],[["wrapping",["i32"]],["i32"]]]],[11,"sum","","",43,[[["i"]],[["isize"],["wrapping",["isize"]]]]],[11,"sum","","",43,[[["i"]],[["i64"],["wrapping",["i64"]]]]],[11,"sum","","",43,[[["i"]],[["wrapping",["u8"]],["u8"]]]],[11,"sum","","",43,[[["i"]],[["wrapping",["i32"]],["i32"]]]],[11,"sum","","",43,[[["i"]],[["wrapping",["u8"]],["u8"]]]],[11,"sum","no_std_compat::prelude::v1","Takes each element in the `Iterator`: if it is an `Err`,…",14,[[["i"]],["result"]]],[11,"sum","no_std_compat::num","",43,[[["i"]],[["wrapping",["u64"]],["u64"]]]],[11,"not","","",43,[[],[["wrapping",["u128"]],["u128"]]]],[11,"not","","",43,[[],[["isize"],["wrapping",["isize"]]]]],[11,"not","","",43,[[],[["wrapping",["i8"]],["i8"]]]],[11,"not","","",43,[[],[["wrapping",["u64"]],["u64"]]]],[11,"not","","",43,[[],[["wrapping",["i16"]],["i16"]]]],[11,"not","","",43,[[],[["wrapping",["usize"]],["usize"]]]],[11,"not","","",43,[[],[["u32"],["wrapping",["u32"]]]]],[11,"not","","",43,[[],[["wrapping",["u8"]],["u8"]]]],[11,"not","","",43,[[],[["i64"],["wrapping",["i64"]]]]],[11,"not","","",43,[[],[["wrapping",["i128"]],["i128"]]]],[11,"not","","",43,[[],[["u16"],["wrapping",["u16"]]]]],[11,"not","","",43,[[],[["wrapping",["i32"]],["i32"]]]],[11,"from_str","","",297,[[["str"]],[["result",["nonzerousize"]],["nonzerousize"]]]],[11,"from_str","","",286,[[["str"]],[["result",["nonzeroi128"]],["nonzeroi128"]]]],[11,"from_str","","",287,[[["str"]],[["nonzeroi16"],["result",["nonzeroi16"]]]]],[11,"from_str","","",292,[[["str"]],[["result",["nonzerou128"]],["nonzerou128"]]]],[11,"from_str","","",294,[[["str"]],[["nonzerou32"],["result",["nonzerou32"]]]]],[11,"from_str","","",296,[[["str"]],[["nonzerou8"],["result",["nonzerou8"]]]]],[11,"from_str","","",293,[[["str"]],[["result",["nonzerou16"]],["nonzerou16"]]]],[11,"from_str","","",295,[[["str"]],[["result",["nonzerou64"]],["nonzerou64"]]]],[11,"from_str","","",290,[[["str"]],[["result",["nonzeroi8"]],["nonzeroi8"]]]],[11,"from_str","","",291,[[["str"]],[["result",["nonzeroisize"]],["nonzeroisize"]]]],[11,"from_str","","",288,[[["str"]],[["result",["nonzeroi32"]],["nonzeroi32"]]]],[11,"from_str","","",289,[[["str"]],[["result",["nonzeroi64"]],["nonzeroi64"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"shl_assign","","",43,[[["self"],["usize"]]]],[11,"bitand_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",43,[[["wrapping",["u64"]],["self"],["u64"]]]],[11,"bitand_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",43,[[["wrapping"],["self"]]]],[11,"bitand_assign","","",43,[[["self"],["u32"],["wrapping",["u32"]]]]],[11,"bitand_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",43,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"bitand_assign","","",43,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"bitand_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",43,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"bitand_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",43,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"bitand_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",43,[[["self"],["wrapping",["usize"]],["usize"]]]],[11,"bitand_assign","","",43,[[["wrapping"],["self"]]]],[11,"bitand_assign","","",43,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"bitand_assign","","",43,[[["wrapping"],["self"]]]],[11,"bitand_assign","","",43,[[["self"],["wrapping",["i128"]],["i128"]]]],[11,"bitand_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",43,[[["wrapping",["u8"]],["self"],["u8"]]]],[11,"bitand_assign","","",43,[[["self"],["wrapping",["u128"]],["u128"]]]],[11,"bitand_assign","","",43,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"fmt","no_std_compat::ptr","",503,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::pin","",502,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::atomic","",330,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"shl","no_std_compat::num","",43,[[["usize"]]]],[11,"shl","","",43,[[["usize"]]]],[11,"shl","","",43,[[["usize"]]]],[11,"shl","","",43,[[["usize"]],[["wrapping",["i8"]],["i8"]]]],[11,"shl","","",43,[[["usize"]],[["wrapping",["i16"]],["i16"]]]],[11,"shl","","",43,[[["usize"]]]],[11,"shl","","",43,[[["usize"]]]],[11,"shl","","",43,[[["usize"]]]],[11,"shl","","",43,[[["usize"]],[["isize"],["wrapping",["isize"]]]]],[11,"shl","","",43,[[["usize"]],[["wrapping",["u128"]],["u128"]]]],[11,"shl","","",43,[[["usize"]]]],[11,"shl","","",43,[[["usize"]],[["u32"],["wrapping",["u32"]]]]],[11,"shl","","",43,[[["usize"]]]],[11,"shl","","",43,[[["usize"]],[["wrapping",["i128"]],["i128"]]]],[11,"shl","","",43,[[["usize"]]]],[11,"shl","","",43,[[["usize"]],[["wrapping",["i32"]],["i32"]]]],[11,"shl","","",43,[[["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"shl","","",43,[[["usize"]],[["i64"],["wrapping",["i64"]]]]],[11,"shl","","",43,[[["usize"]]]],[11,"shl","","",43,[[["usize"]],[["wrapping",["u64"]],["u64"]]]],[11,"shl","","",43,[[["usize"]],[["wrapping",["u8"]],["u8"]]]],[11,"shl","","",43,[[["usize"]]]],[11,"shl","","",43,[[["usize"]],[["u16"],["wrapping",["u16"]]]]],[11,"shl","","",43,[[["usize"]]]],[11,"rem_assign","","",43,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"rem_assign","","",43,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"rem_assign","","",43,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"rem_assign","","",43,[[["self"],["wrapping"]]]],[11,"rem_assign","","",43,[[["wrapping"],["self"]]]],[11,"rem_assign","","",43,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"rem_assign","","",43,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"rem_assign","","",43,[[["wrapping",["u8"]],["self"],["u8"]]]],[11,"rem_assign","","",43,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"rem_assign","","",43,[[["self"],["wrapping"]]]],[11,"rem_assign","","",43,[[["self"],["wrapping",["i128"]],["i128"]]]],[11,"rem_assign","","",43,[[["self"],["wrapping"]]]],[11,"rem_assign","","",43,[[["self"],["wrapping"]]]],[11,"rem_assign","","",43,[[["self"],["wrapping"]]]],[11,"rem_assign","","",43,[[["wrapping"],["self"]]]],[11,"rem_assign","","",43,[[["self"],["wrapping"]]]],[11,"rem_assign","","",43,[[["wrapping",["u64"]],["self"],["u64"]]]],[11,"rem_assign","","",43,[[["self"],["wrapping",["usize"]],["usize"]]]],[11,"rem_assign","","",43,[[["wrapping"],["self"]]]],[11,"rem_assign","","",43,[[["self"],["wrapping"]]]],[11,"rem_assign","","",43,[[["self"],["wrapping",["u128"]],["u128"]]]],[11,"rem_assign","","",43,[[["self"],["wrapping"]]]],[11,"rem_assign","","",43,[[["self"],["u32"],["wrapping",["u32"]]]]],[11,"rem_assign","","",43,[[["self"],["wrapping"]]]],[11,"sub_assign","","",43,[[["self"],["wrapping"]]]],[11,"sub_assign","","",43,[[["self"],["wrapping",["i128"]],["i128"]]]],[11,"sub_assign","","",43,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"sub_assign","","",43,[[["wrapping",["u64"]],["self"],["u64"]]]],[11,"sub_assign","","",43,[[["self"],["wrapping"]]]],[11,"sub_assign","","",43,[[["wrapping",["u8"]],["self"],["u8"]]]],[11,"sub_assign","","",43,[[["self"],["wrapping"]]]],[11,"sub_assign","","",43,[[["self"],["wrapping",["usize"]],["usize"]]]],[11,"sub_assign","","",43,[[["self"],["wrapping"]]]],[11,"sub_assign","","",43,[[["self"],["wrapping",["u128"]],["u128"]]]],[11,"sub_assign","","",43,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"sub_assign","","",43,[[["wrapping"],["self"]]]],[11,"sub_assign","","",43,[[["wrapping"],["self"]]]],[11,"sub_assign","","",43,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"sub_assign","","",43,[[["wrapping"],["self"]]]],[11,"sub_assign","","",43,[[["self"],["u32"],["wrapping",["u32"]]]]],[11,"sub_assign","","",43,[[["self"],["wrapping"]]]],[11,"sub_assign","","",43,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"sub_assign","","",43,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"sub_assign","","",43,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"sub_assign","","",43,[[["self"],["wrapping"]]]],[11,"sub_assign","","",43,[[["self"],["wrapping"]]]],[11,"sub_assign","","",43,[[["self"],["wrapping"]]]],[11,"sub_assign","","",43,[[["self"],["wrapping"]]]],[11,"sub_assign","no_std_compat::time","",356,[[["duration"],["self"]]]],[11,"clone","no_std_compat::iter","",462,[[["self"]],["empty"]]],[11,"clone","","",485,[[["self"]],["skip"]]],[11,"clone","","",486,[[["self"]],["skipwhile"]]],[11,"clone","no_std_compat::str","",420,[[["self"]],["splitn"]]],[11,"clone","","",408,[[["self"]],["escapedefault"]]],[11,"clone","no_std_compat::iter","",465,[[["self"]],["oncewith"]]],[11,"clone","no_std_compat::slice","",382,[[["self"]],["split"]]],[11,"clone","no_std_compat::result","",506,[[["self"]],["intoiter"]]],[11,"clone","no_std_compat::prelude::v1","",13,[[["self"]],["option"]]],[11,"clone_from","","",13,[[["self"],["option"]]]],[11,"clone","no_std_compat::num","",44,[[["self"]],["fpcategory"]]],[11,"clone","no_std_compat::array","",441,[[["self"]],["tryfromsliceerror"]]],[11,"clone","no_std_compat::num","",285,[[["self"]],["tryfrominterror"]]],[11,"clone","no_std_compat::mem","",494,[[["self"]],["manuallydrop"]]],[11,"clone","no_std_compat::str","",405,[[["self"]],["chars"]]],[11,"clone","no_std_compat::iter","",482,[[["self"]],["flatmap"]]],[11,"clone","no_std_compat::num","",297,[[["self"]],["nonzerousize"]]],[11,"clone","no_std_compat::arch::x86_64","",431,[[["self"]],["__m64"]]],[11,"clone","no_std_compat::char","",451,[[["self"]],["escapedefault"]]],[11,"clone","no_std_compat::iter","",484,[[["self"]],["scan"]]],[11,"clone","no_std_compat::str::pattern","",398,[[["self"]],["charpredicatesearcher"]]],[11,"clone","no_std_compat::str","",407,[[["self"]],["escapedebug"]]],[11,"clone","","",417,[[["self"]],["rsplit"]]],[11,"clone","no_std_compat::array","",442,[[["self"]],["intoiter"]]],[11,"clone","no_std_compat::ops","",143,[[["self"]],["rangefrom"]]],[11,"clone","no_std_compat::iter","",463,[[["self"]],["fromfn"]]],[11,"clone","","",477,[[["self"]],["filter"]]],[11,"clone","no_std_compat::num","",283,[[["self"]],["parsefloaterror"]]],[11,"clone","no_std_compat::str","",418,[[["self"]],["split"]]],[11,"clone","no_std_compat::iter","",476,[[["self"]],["enumerate"]]],[11,"clone","no_std_compat::num","",288,[[["self"]],["nonzeroi32"]]],[11,"clone","no_std_compat::arch::x86_64","",438,[[["self"]],["__m512i"]]],[11,"clone","no_std_compat::alloc","",362,[[["self"]],["allocerr"]]],[11,"clone","","",364,[[["self"]],["layouterr"]]],[11,"clone","no_std_compat::str","",422,[[["self"]],["splitterminator"]]],[11,"clone","","",421,[[["self"]],["rsplitterminator"]]],[11,"clone","no_std_compat::iter","",488,[[["self"]],["takewhile"]]],[11,"clone","no_std_compat::str::pattern","",397,[[["self"]],["charslicesearcher"]]],[11,"clone","no_std_compat::arch::x86_64","",432,[[["self"]],["__m128i"]]],[11,"clone","","",437,[[["self"]],["__m256d"]]],[11,"clone","no_std_compat::iter","",469,[[["self"]],["cloned"]]],[11,"clone","no_std_compat::option","",500,[[["self"]],["intoiter"]]],[11,"clone","no_std_compat::num","",287,[[["self"]],["nonzeroi16"]]],[11,"clone","no_std_compat::str","",414,[[["self"]],["rmatchindices"]]],[11,"clone","no_std_compat::num","",291,[[["self"]],["nonzeroisize"]]],[11,"clone","no_std_compat::any","",430,[[["self"]],["typeid"]]],[11,"clone","no_std_compat::str","",416,[[["self"]],["rmatches"]]],[11,"clone","no_std_compat::char","",104,[[["self"]],["unicodeversion"]]],[11,"clone","no_std_compat::task","",360,[[["self"]],["waker"]]],[11,"clone","no_std_compat::ops","",146,[[["self"]],["rangetoinclusive"]]],[11,"clone","no_std_compat::num","",290,[[["self"]],["nonzeroi8"]]],[11,"clone","no_std_compat::iter","",489,[[["self"]],["fuse"]]],[11,"clone","","",464,[[["self"]],["once"]]],[11,"clone","no_std_compat::str","",403,[[["self"]],["bytes"]]],[11,"clone","no_std_compat::arch::x86_64","",434,[[["self"]],["__m128d"]]],[11,"clone","no_std_compat::option","",498,[[["self"]],["iter"]]],[11,"clone","no_std_compat::char","",455,[[["self"]],["chartryfromerror"]]],[11,"clone","no_std_compat::str::pattern","",396,[[["self"]],["charsearcher"]]],[11,"clone","no_std_compat::ascii","",162,[[["self"]],["escapedefault"]]],[11,"clone","no_std_compat::task","",359,[[["self"]],["rawwakervtable"]]],[11,"clone","no_std_compat::cmp","",105,[[["self"]],["ordering"]]],[11,"clone","no_std_compat::iter","",473,[[["self"]],["stepby"]]],[11,"clone","no_std_compat::str","",411,[[["self"]],["lines"]]],[11,"clone","no_std_compat::iter","",467,[[["self"]],["repeatwith"]]],[11,"clone","no_std_compat::str","",415,[[["self"]],["matches"]]],[11,"clone","no_std_compat::slice","",384,[[["self"]],["iter"]]],[11,"clone","no_std_compat::alloc","",363,[[["self"]],["cannotreallocinplace"]]],[11,"clone","no_std_compat::ops","",497,[[["self"]],["rangeinclusive"]]],[11,"clone","no_std_compat::char","",452,[[["self"]],["escapedebug"]]],[11,"clone","no_std_compat::hash","",460,[[["self"]],["buildhasherdefault"]]],[11,"clone","no_std_compat::num","",296,[[["self"]],["nonzerou8"]]],[11,"clone","no_std_compat::str","",406,[[["self"]],["parseboolerror"]]],[11,"clone","no_std_compat::char","",458,[[["self"]],["decodeutf16error"]]],[11,"clone","no_std_compat::cell","",443,[[["self"]],["cell"]]],[11,"clone","no_std_compat::pin","",502,[[["self"]],["pin"]]],[11,"clone","no_std_compat::hash","",461,[[["self"]],["siphasher"]]],[11,"clone","no_std_compat::char","",453,[[["self"]],["tolowercase"]]],[11,"clone","no_std_compat::num","",295,[[["self"]],["nonzerou64"]]],[11,"clone","no_std_compat::arch::x86_64","",435,[[["self"]],["__m256i"]]],[11,"clone","no_std_compat::result","",504,[[["self"]],["iter"]]],[11,"clone","no_std_compat::num","",286,[[["self"]],["nonzeroi128"]]],[11,"clone","no_std_compat::ffi","",242,[[["self"]],["valistimpl"]]],[11,"clone","no_std_compat::str","",402,[[["self"]],["splitwhitespace"]]],[11,"clone","no_std_compat::convert","",459,[[["self"]],["infallible"]]],[11,"clone","no_std_compat::str","",412,[[["self"]],["linesany"]]],[11,"clone","no_std_compat::iter","",468,[[["self"]],["successors"]]],[11,"clone","","",471,[[["self"]],["flatten"]]],[11,"clone","no_std_compat::num","",289,[[["self"]],["nonzeroi64"]]],[11,"clone","no_std_compat::mem","",493,[[["self"]],["discriminant"]]],[11,"clone","no_std_compat::str::pattern","",97,[[["self"]],["searchstep"]]],[11,"clone","no_std_compat::raw","",150,[[["self"]],["traitobject"]]],[11,"clone","no_std_compat::iter","",479,[[["self"]],["map"]]],[11,"clone","no_std_compat::str","",413,[[["self"]],["matchindices"]]],[11,"clone","no_std_compat::arch::x86_64","",102,[[["self"]],["cpuidresult"]]],[11,"clone","no_std_compat::iter","",487,[[["self"]],["take"]]],[11,"clone","no_std_compat::char","",454,[[["self"]],["touppercase"]]],[11,"clone","","",456,[[["self"]],["parsecharerror"]]],[11,"clone","no_std_compat::slice","",377,[[["self"]],["chunks"]]],[11,"clone","no_std_compat::ops","",144,[[["self"]],["rangeto"]]],[11,"clone","","",142,[[["self"]],["range"]]],[11,"clone","no_std_compat::cmp","",106,[[["self"]],["reverse"]]],[11,"clone","no_std_compat::iter","",483,[[["self"]],["peekable"]]],[11,"clone","","",478,[[["self"]],["filtermap"]]],[11,"clone","no_std_compat::mem","",495,[[["self"]],["maybeuninit"]]],[11,"clone","no_std_compat::fmt","",368,[[["self"]],["arguments"]]],[11,"clone","no_std_compat::iter","",475,[[["self"]],["cycle"]]],[11,"clone","no_std_compat::cell","Panics",444,[[["self"]],["refcell"]]],[11,"clone","no_std_compat::marker","",492,[[["self"]],["phantompinned"]]],[11,"clone","no_std_compat::prelude::v1","",14,[[["self"]],["result"]]],[11,"clone_from","","",14,[[["self"],["result"]]]],[11,"clone","no_std_compat::num","",284,[[["self"]],["parseinterror"]]],[11,"clone","no_std_compat::iter","",472,[[["self"]],["mapwhile"]]],[11,"clone","no_std_compat::num","",292,[[["self"]],["nonzerou128"]]],[11,"clone","no_std_compat::slice","",387,[[["self"]],["rchunksexact"]]],[11,"clone","no_std_compat::num","",294,[[["self"]],["nonzerou32"]]],[11,"clone","no_std_compat::sync::atomic","",73,[[["self"]],["ordering"]]],[11,"clone","no_std_compat::str","",404,[[["self"]],["charindices"]]],[11,"clone","","",409,[[["self"]],["escapeunicode"]]],[11,"clone","no_std_compat::marker","",491,[[["self"]],["phantomdata"]]],[11,"clone","no_std_compat::task","",75,[[["self"]],["poll"]]],[11,"clone","no_std_compat::str","",419,[[["self"]],["rsplitn"]]],[11,"clone","no_std_compat::iter","",474,[[["self"]],["chain"]]],[11,"clone","no_std_compat::str","",401,[[["self"]],["splitasciiwhitespace"]]],[11,"clone","no_std_compat::iter","",490,[[["self"]],["inspect"]]],[11,"clone","no_std_compat::ops","",149,[[["self"]],["generatorstate"]]],[11,"clone","no_std_compat::slice","",386,[[["self"]],["rchunks"]]],[11,"clone","no_std_compat::arch::x86_64","",433,[[["self"]],["__m128"]]],[11,"clone","no_std_compat::char","",457,[[["self"]],["decodeutf16"]]],[11,"clone","no_std_compat::str::pattern","",399,[[["self"]],["strsearcher"]]],[11,"clone","no_std_compat::alloc","",365,[[["self"]],["layout"]]],[11,"clone","no_std_compat::option","",501,[[["self"]],["noneerror"]]],[11,"clone","no_std_compat::ops","",26,[[["self"]],["bound"]]],[11,"clone","no_std_compat::iter","",466,[[["self"]],["repeat"]]],[11,"clone","no_std_compat::char","",450,[[["self"]],["escapeunicode"]]],[11,"clone","no_std_compat::slice","",378,[[["self"]],["windows"]]],[11,"clone","no_std_compat::num","",293,[[["self"]],["nonzerou16"]]],[11,"clone","no_std_compat::arch::x86_64","",439,[[["self"]],["__m512"]]],[11,"clone","no_std_compat::fmt","",367,[[["self"]],["error"]]],[11,"clone","no_std_compat::ops","",496,[[["self"]],["rangefull"]]],[11,"clone","no_std_compat::slice","",379,[[["self"]],["chunksexact"]]],[11,"clone","no_std_compat::num","",43,[[["self"]],["wrapping"]]],[11,"clone","no_std_compat::str","",410,[[["self"]],["utf8error"]]],[11,"clone","no_std_compat::iter","",481,[[["self"]],["zip"]]],[11,"clone","no_std_compat::slice","",390,[[["self"]],["rsplit"]]],[11,"clone","no_std_compat::arch::x86_64","",436,[[["self"]],["__m256"]]],[11,"clone","no_std_compat::ptr","",503,[[["self"]],["nonnull"]]],[11,"clone","no_std_compat::iter","",480,[[["self"]],["rev"]]],[11,"clone","no_std_compat::time","",356,[[["self"]],["duration"]]],[11,"clone","no_std_compat::num","",45,[[["self"]],["interrorkind"]]],[11,"clone","no_std_compat::iter","",470,[[["self"]],["copied"]]],[11,"clone","no_std_compat::arch::x86_64","",440,[[["self"]],["__m512d"]]],[11,"clone","no_std_compat::str","",400,[[["self"]],["encodeutf16"]]],[11,"write","no_std_compat::hash","",461,[[["self"]]]],[11,"finish","","",461,[[["self"]],["u64"]]],[11,"bitxor","no_std_compat::num","",43,[[["wrapping"]]]],[11,"bitxor","","",43,[[["wrapping"]]]],[11,"bitxor","","",43,[[["wrapping"]]]],[11,"bitxor","","",43,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"bitxor","","",43,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"bitxor","","",43,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"bitxor","","",43,[[["wrapping"]]]],[11,"bitxor","","",43,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"bitxor","","",43,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"bitxor","","",43,[[["wrapping"]]]],[11,"bitxor","","",43,[[["wrapping"]]]],[11,"bitxor","","",43,[[["wrapping"]]]],[11,"bitxor","","",43,[[["wrapping"]]]],[11,"bitxor","","",43,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"bitxor","","",43,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"bitxor","","",43,[[["wrapping"]]]],[11,"bitxor","","",43,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"bitxor","","",43,[[["wrapping"]]]],[11,"bitxor","","",43,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"bitxor","","",43,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"bitxor","","",43,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"bitxor","","",43,[[["wrapping"]]]],[11,"bitxor","","",43,[[["wrapping"]]]],[11,"bitxor","","",43,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"build_hasher","no_std_compat::hash","",460,[[["self"]],["h"]]],[11,"next_back","no_std_compat::str::pattern","",396,[[["self"]],["searchstep"]]],[11,"next_match_back","","",396,[[["self"]],["option"]]],[11,"next_back","","",398,[[["self"]],["searchstep"]]],[11,"next_match_back","","",398,[[["self"]],["option"]]],[11,"next_reject_back","","",398,[[["self"]],["option"]]],[11,"next_back","","",397,[[["self"]],["searchstep"]]],[11,"next_match_back","","",397,[[["self"]],["option"]]],[11,"next_reject_back","","",397,[[["self"]],["option"]]],[11,"next_back","","",399,[[["self"]],["searchstep"]]],[11,"next_match_back","","",399,[[["self"]],["option"]]],[11,"fmt","no_std_compat::num","",283,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",285,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::panic","",303,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",43,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",289,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::convert","",459,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",292,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",296,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::alloc","",364,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",290,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::cell","",448,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::fmt","",368,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::char","",453,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",295,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",297,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::cell","",447,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::char","",452,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",287,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",406,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",410,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::cell","",445,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",407,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",286,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",284,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::char","",454,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",291,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",408,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",294,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::array","",441,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::char","",456,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",458,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",451,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ascii","",162,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::fmt","",367,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",293,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::panic","",304,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::cell","",446,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",409,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::pin","",502,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::alloc","",362,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::char","",455,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",288,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::alloc","",363,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::char","",450,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"drop","no_std_compat::ffi","",242,[[["self"]]]],[11,"drop","no_std_compat::task","",360,[[["self"]]]],[11,"drop","no_std_compat::array","",442,[[["self"]]]],[11,"bitor","no_std_compat::num","",43,[[["wrapping"]]]],[11,"bitor","","",43,[[["wrapping"]]]],[11,"bitor","","",43,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"bitor","","",43,[[["wrapping"]]]],[11,"bitor","","",43,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"bitor","","",43,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"bitor","","",43,[[["wrapping"]]]],[11,"bitor","","",43,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"bitor","","",43,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"bitor","","",43,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"bitor","","",43,[[["wrapping"]]]],[11,"bitor","","",43,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"bitor","","",43,[[["wrapping"]]]],[11,"bitor","","",43,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"bitor","","",43,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"bitor","","",43,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"bitor","","",43,[[["wrapping"]]]],[11,"bitor","","",43,[[["wrapping"]]]],[11,"bitor","","",43,[[["wrapping"]]]],[11,"bitor","","",43,[[["wrapping"]]]],[11,"bitor","","",43,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"bitor","","",43,[[["wrapping"]]]],[11,"bitor","","",43,[[["wrapping"]]]],[11,"bitor","","",43,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"eq","no_std_compat::ptr","",503,[[["nonnull"],["self"]],["bool"]]],[11,"eq","no_std_compat::num","",43,[[["wrapping"],["self"]],["bool"]]],[11,"ne","","",43,[[["wrapping"],["self"]],["bool"]]],[11,"eq","no_std_compat::str","",410,[[["utf8error"],["self"]],["bool"]]],[11,"ne","","",410,[[["utf8error"],["self"]],["bool"]]],[11,"eq","no_std_compat::num","",291,[[["self"],["nonzeroisize"]],["bool"]]],[11,"ne","","",291,[[["self"],["nonzeroisize"]],["bool"]]],[11,"eq","no_std_compat::ops","",496,[[["rangefull"],["self"]],["bool"]]],[11,"eq","no_std_compat::num","",284,[[["parseinterror"],["self"]],["bool"]]],[11,"ne","","",284,[[["parseinterror"],["self"]],["bool"]]],[11,"eq","no_std_compat::mem","",493,[[["self"],["discriminant"]],["bool"]]],[11,"eq","no_std_compat::ops","",144,[[["rangeto"],["self"]],["bool"]]],[11,"ne","","",144,[[["rangeto"],["self"]],["bool"]]],[11,"eq","no_std_compat::prelude::v1","",14,[[["result"],["self"]],["bool"]]],[11,"ne","","",14,[[["result"],["self"]],["bool"]]],[11,"eq","no_std_compat::mem","",494,[[["manuallydrop"],["self"]],["bool"]]],[11,"ne","","",494,[[["manuallydrop"],["self"]],["bool"]]],[11,"eq","no_std_compat::hash","",460,[[["self"],["buildhasherdefault"]],["bool"]]],[11,"eq","no_std_compat::marker","",492,[[["phantompinned"],["self"]],["bool"]]],[11,"eq","","",491,[[["self"],["phantomdata"]],["bool"]]],[11,"eq","no_std_compat::cmp","",106,[[["self"],["reverse"]],["bool"]]],[11,"ne","","",106,[[["self"],["reverse"]],["bool"]]],[11,"eq","no_std_compat::alloc","",362,[[["allocerr"],["self"]],["bool"]]],[11,"eq","","",364,[[["layouterr"],["self"]],["bool"]]],[11,"ne","","",364,[[["layouterr"],["self"]],["bool"]]],[11,"eq","no_std_compat::num","",292,[[["self"],["nonzerou128"]],["bool"]]],[11,"ne","","",292,[[["self"],["nonzerou128"]],["bool"]]],[11,"eq","no_std_compat::sync::atomic","",73,[[["self"],["ordering"]],["bool"]]],[11,"eq","no_std_compat::num","",285,[[["tryfrominterror"],["self"]],["bool"]]],[11,"ne","","",285,[[["tryfrominterror"],["self"]],["bool"]]],[11,"eq","no_std_compat::str::pattern","",97,[[["self"],["searchstep"]],["bool"]]],[11,"ne","","",97,[[["self"],["searchstep"]],["bool"]]],[11,"eq","no_std_compat::ops","",26,[[["self"],["bound"]],["bool"]]],[11,"ne","","",26,[[["self"],["bound"]],["bool"]]],[11,"eq","no_std_compat::task","",358,[[["rawwaker"],["self"]],["bool"]]],[11,"ne","","",358,[[["rawwaker"],["self"]],["bool"]]],[11,"eq","no_std_compat::cell","Panics",444,[[["refcell"],["self"]],["bool"]]],[11,"eq","no_std_compat::ops","",497,[[["rangeinclusive"],["self"]],["bool"]]],[11,"eq","no_std_compat::num","",44,[[["self"],["fpcategory"]],["bool"]]],[11,"eq","","",290,[[["self"],["nonzeroi8"]],["bool"]]],[11,"ne","","",290,[[["self"],["nonzeroi8"]],["bool"]]],[11,"eq","","",295,[[["nonzerou64"],["self"]],["bool"]]],[11,"ne","","",295,[[["nonzerou64"],["self"]],["bool"]]],[11,"eq","","",286,[[["self"],["nonzeroi128"]],["bool"]]],[11,"ne","","",286,[[["self"],["nonzeroi128"]],["bool"]]],[11,"eq","no_std_compat::arch::x86_64","",102,[[["self"],["cpuidresult"]],["bool"]]],[11,"ne","","",102,[[["self"],["cpuidresult"]],["bool"]]],[11,"eq","no_std_compat::ops","",142,[[["range"],["self"]],["bool"]]],[11,"ne","","",142,[[["range"],["self"]],["bool"]]],[11,"eq","no_std_compat::any","",430,[[["typeid"],["self"]],["bool"]]],[11,"ne","","",430,[[["typeid"],["self"]],["bool"]]],[11,"eq","no_std_compat::alloc","",365,[[["self"],["layout"]],["bool"]]],[11,"ne","","",365,[[["self"],["layout"]],["bool"]]],[11,"eq","no_std_compat::cmp","",105,[[["self"],["ordering"]],["bool"]]],[11,"eq","no_std_compat::num","",288,[[["nonzeroi32"],["self"]],["bool"]]],[11,"ne","","",288,[[["nonzeroi32"],["self"]],["bool"]]],[11,"eq","","",289,[[["self"],["nonzeroi64"]],["bool"]]],[11,"ne","","",289,[[["self"],["nonzeroi64"]],["bool"]]],[11,"eq","","",283,[[["self"],["parsefloaterror"]],["bool"]]],[11,"ne","","",283,[[["self"],["parsefloaterror"]],["bool"]]],[11,"eq","","",287,[[["self"],["nonzeroi16"]],["bool"]]],[11,"ne","","",287,[[["self"],["nonzeroi16"]],["bool"]]],[11,"eq","","",293,[[["nonzerou16"],["self"]],["bool"]]],[11,"ne","","",293,[[["nonzerou16"],["self"]],["bool"]]],[11,"eq","no_std_compat::convert","",459,[[["self"],["infallible"]],["bool"]]],[11,"eq","no_std_compat::char","",458,[[["self"],["decodeutf16error"]],["bool"]]],[11,"ne","","",458,[[["self"],["decodeutf16error"]],["bool"]]],[11,"eq","","",456,[[["self"],["parsecharerror"]],["bool"]]],[11,"ne","","",456,[[["self"],["parsecharerror"]],["bool"]]],[11,"eq","no_std_compat::str","",406,[[["self"],["parseboolerror"]],["bool"]]],[11,"ne","","",406,[[["self"],["parseboolerror"]],["bool"]]],[11,"eq","no_std_compat::cell","",443,[[["cell"],["self"]],["bool"]]],[11,"eq","no_std_compat::ops","",143,[[["rangefrom"],["self"]],["bool"]]],[11,"ne","","",143,[[["rangefrom"],["self"]],["bool"]]],[11,"eq","no_std_compat::time","",356,[[["self"],["duration"]],["bool"]]],[11,"ne","","",356,[[["self"],["duration"]],["bool"]]],[11,"eq","no_std_compat::option","",501,[[["noneerror"],["self"]],["bool"]]],[11,"eq","no_std_compat::task","",359,[[["self"],["rawwakervtable"]],["bool"]]],[11,"ne","","",359,[[["self"],["rawwakervtable"]],["bool"]]],[11,"eq","no_std_compat::ops","",149,[[["self"],["generatorstate"]],["bool"]]],[11,"ne","","",149,[[["self"],["generatorstate"]],["bool"]]],[11,"eq","no_std_compat::task","",75,[[["poll"],["self"]],["bool"]]],[11,"ne","","",75,[[["poll"],["self"]],["bool"]]],[11,"eq","no_std_compat::pin","",502,[[["pin"],["self"]],["bool"]]],[11,"ne","","",502,[[["pin"],["self"]],["bool"]]],[11,"eq","no_std_compat::char","",455,[[["self"],["chartryfromerror"]],["bool"]]],[11,"ne","","",455,[[["self"],["chartryfromerror"]],["bool"]]],[11,"eq","no_std_compat::ops","",146,[[["rangetoinclusive"],["self"]],["bool"]]],[11,"ne","","",146,[[["rangetoinclusive"],["self"]],["bool"]]],[11,"eq","no_std_compat::num","",45,[[["interrorkind"],["self"]],["bool"]]],[11,"eq","","",297,[[["self"],["nonzerousize"]],["bool"]]],[11,"ne","","",297,[[["self"],["nonzerousize"]],["bool"]]],[11,"eq","no_std_compat::prelude::v1","",13,[[["self"],["option"]],["bool"]]],[11,"ne","","",13,[[["self"],["option"]],["bool"]]],[11,"eq","no_std_compat::char","",104,[[["unicodeversion"],["self"]],["bool"]]],[11,"ne","","",104,[[["unicodeversion"],["self"]],["bool"]]],[11,"eq","no_std_compat::fmt","",367,[[["error"],["self"]],["bool"]]],[11,"eq","no_std_compat::num","",296,[[["nonzerou8"],["self"]],["bool"]]],[11,"ne","","",296,[[["nonzerou8"],["self"]],["bool"]]],[11,"eq","no_std_compat::alloc","",363,[[["self"],["cannotreallocinplace"]],["bool"]]],[11,"eq","no_std_compat::num","",294,[[["nonzerou32"],["self"]],["bool"]]],[11,"ne","","",294,[[["nonzerou32"],["self"]],["bool"]]],[11,"neg","","",43,[[],[["wrapping",["u64"]],["u64"]]]],[11,"neg","","",43,[[],[["wrapping",["u128"]],["u128"]]]],[11,"neg","","",43,[[],[["wrapping",["i8"]],["i8"]]]],[11,"neg","","",43,[[],[["i64"],["wrapping",["i64"]]]]],[11,"neg","","",43,[[],[["u32"],["wrapping",["u32"]]]]],[11,"neg","","",43,[[],[["u16"],["wrapping",["u16"]]]]],[11,"neg","","",43,[[],[["isize"],["wrapping",["isize"]]]]],[11,"neg","","",43,[[],[["wrapping",["i16"]],["i16"]]]],[11,"neg","","",43,[[],[["wrapping",["usize"]],["usize"]]]],[11,"neg","","",43,[[],[["wrapping",["u8"]],["u8"]]]],[11,"neg","","",43,[[],[["wrapping",["i128"]],["i128"]]]],[11,"neg","","",43,[[],[["wrapping",["i32"]],["i32"]]]],[11,"div","","",43,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"div","","",43,[[["wrapping"]]]],[11,"div","no_std_compat::time","",356,[[["u32"]],["duration"]]],[11,"div","no_std_compat::num","",43,[[["wrapping"]]]],[11,"div","","",43,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"div","","",43,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"div","","",43,[[["wrapping"]]]],[11,"div","","",43,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"div","","",43,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"div","","",43,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"div","","",43,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"div","","",43,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"div","","",43,[[["wrapping"]]]],[11,"div","","",43,[[["wrapping"]]]],[11,"div","","",43,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"div","","",43,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"div","","",43,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"div","","",43,[[["wrapping"]]]],[11,"div","","",43,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"div","","",43,[[["wrapping"]]]],[11,"div","","",43,[[["wrapping"]]]],[11,"div","","",43,[[["wrapping"]]]],[11,"div","","",43,[[["wrapping"]]]],[11,"div","","",43,[[["wrapping"]]]],[11,"div","","",43,[[["wrapping"]]]],[11,"get","no_std_compat::ops","",143,[[["str"]],["option"]]],[11,"get_mut","","",143,[[["str"]],["option"]]],[11,"get_unchecked","","",143,[[["str"]]]],[11,"get_unchecked_mut","","",143,[[["str"]]]],[11,"index","","",143,[[["str"]]]],[11,"index_mut","","",143,[[["str"]]]],[11,"get","","",146,[[["str"]],["option"]]],[11,"get_mut","","",146,[[["str"]],["option"]]],[11,"get_unchecked","","",146,[[["str"]]]],[11,"get_unchecked_mut","","",146,[[["str"]]]],[11,"index","","",146,[[["str"]]]],[11,"index_mut","","",146,[[["str"]]]],[11,"get","","",144,[[],["option"]]],[11,"get_mut","","",144,[[],["option"]]],[11,"get_unchecked","","",144,[[]]],[11,"get_unchecked_mut","","",144,[[]]],[11,"index","","",144,[[]]],[11,"index_mut","","",144,[[]]],[11,"get","","",146,[[],["option"]]],[11,"get_mut","","",146,[[],["option"]]],[11,"get_unchecked","","",146,[[]]],[11,"get_unchecked_mut","","",146,[[]]],[11,"index","","",146,[[]]],[11,"index_mut","","",146,[[]]],[11,"get","","",142,[[],["option"]]],[11,"get_mut","","",142,[[],["option"]]],[11,"get_unchecked","","",142,[[]]],[11,"get_unchecked_mut","","",142,[[]]],[11,"index","","",142,[[]]],[11,"index_mut","","",142,[[]]],[11,"get","","",144,[[["str"]],["option"]]],[11,"get_mut","","",144,[[["str"]],["option"]]],[11,"get_unchecked","","",144,[[["str"]]]],[11,"get_unchecked_mut","","",144,[[["str"]]]],[11,"index","","",144,[[["str"]]]],[11,"index_mut","","",144,[[["str"]]]],[11,"get","","",497,[[["str"]],["option"]]],[11,"get_mut","","",497,[[["str"]],["option"]]],[11,"get_unchecked","","",497,[[["str"]]]],[11,"get_unchecked_mut","","",497,[[["str"]]]],[11,"index","","",497,[[["str"]]]],[11,"index_mut","","",497,[[["str"]]]],[11,"get","","",143,[[],["option"]]],[11,"get_mut","","",143,[[],["option"]]],[11,"get_unchecked","","",143,[[]]],[11,"get_unchecked_mut","","",143,[[]]],[11,"index","","",143,[[]]],[11,"index_mut","","",143,[[]]],[11,"get","","",497,[[],["option"]]],[11,"get_mut","","",497,[[],["option"]]],[11,"get_unchecked","","",497,[[]]],[11,"get_unchecked_mut","","",497,[[]]],[11,"index","","",497,[[]]],[11,"index_mut","","",497,[[]]],[11,"get","","",496,[[],["option"]]],[11,"get_mut","","",496,[[],["option"]]],[11,"get_unchecked","","",496,[[]]],[11,"get_unchecked_mut","","",496,[[]]],[11,"index","","",496,[[]]],[11,"index_mut","","",496,[[]]],[11,"get","","",142,[[["str"]],["option"]]],[11,"get_mut","","",142,[[["str"]],["option"]]],[11,"get_unchecked","","",142,[[["str"]]]],[11,"get_unchecked_mut","","",142,[[["str"]]]],[11,"index","","",142,[[["str"]]]],[11,"index_mut","","",142,[[["str"]]]],[11,"get","","",496,[[["str"]],["option"]]],[11,"get_mut","","",496,[[["str"]],["option"]]],[11,"get_unchecked","","",496,[[["str"]]]],[11,"get_unchecked_mut","","",496,[[["str"]]]],[11,"index","","",496,[[["str"]]]],[11,"index_mut","","",496,[[["str"]]]],[11,"product","no_std_compat::prelude::v1","Takes each element in the `Iterator`: if it is a `None`,…",13,[[["i"]],["option"]]],[11,"product","no_std_compat::num","",43,[[["i"]],[["i64"],["wrapping",["i64"]]]]],[11,"product","","",43,[[["i"]],[["u32"],["wrapping",["u32"]]]]],[11,"product","","",43,[[["i"]],[["wrapping",["usize"]],["usize"]]]],[11,"product","","",43,[[["i"]],[["wrapping",["u8"]],["u8"]]]],[11,"product","no_std_compat::prelude::v1","Takes each element in the `Iterator`: if it is an `Err`,…",14,[[["i"]],["result"]]],[11,"product","no_std_compat::num","",43,[[["i"]],[["wrapping",["i8"]],["i8"]]]],[11,"product","","",43,[[["i"]],[["wrapping",["i128"]],["i128"]]]],[11,"product","","",43,[[["i"]],[["wrapping",["i16"]],["i16"]]]],[11,"product","","",43,[[["i"]],[["isize"],["wrapping",["isize"]]]]],[11,"product","","",43,[[["i"]],[["u16"],["wrapping",["u16"]]]]],[11,"product","","",43,[[["i"]],[["wrapping",["i16"]],["i16"]]]],[11,"product","","",43,[[["i"]],[["wrapping",["i128"]],["i128"]]]],[11,"product","","",43,[[["i"]],[["wrapping",["i32"]],["i32"]]]],[11,"product","","",43,[[["i"]],[["wrapping",["u128"]],["u128"]]]],[11,"product","","",43,[[["i"]],[["wrapping",["u64"]],["u64"]]]],[11,"product","","",43,[[["i"]],[["wrapping",["u64"]],["u64"]]]],[11,"product","","",43,[[["i"]],[["wrapping",["usize"]],["usize"]]]],[11,"product","","",43,[[["i"]],[["wrapping",["i32"]],["i32"]]]],[11,"product","","",43,[[["i"]],[["wrapping",["u8"]],["u8"]]]],[11,"product","","",43,[[["i"]],[["u16"],["wrapping",["u16"]]]]],[11,"product","","",43,[[["i"]],[["isize"],["wrapping",["isize"]]]]],[11,"product","","",43,[[["i"]],[["u32"],["wrapping",["u32"]]]]],[11,"product","","",43,[[["i"]],[["wrapping",["i8"]],["i8"]]]],[11,"product","","",43,[[["i"]],[["i64"],["wrapping",["i64"]]]]],[11,"product","","",43,[[["i"]],[["wrapping",["u128"]],["u128"]]]],[11,"fmt","no_std_compat::char","",451,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::pin","",502,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::cmp","",105,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",485,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::arch::x86_64","",433,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ops","",142,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::option","",500,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",406,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",476,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",422,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",464,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::fmt","",368,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",381,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::task","",75,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",382,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::mem","",494,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::cmp","",106,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",393,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::char","",452,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::arch::x86_64","",432,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ops","",26,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::cell","",445,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::atomic","",73,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",404,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",410,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",45,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ops","",149,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",293,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",472,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::option","",498,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::task","",357,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",291,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",483,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::prelude::v1","",14,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ops","",144,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::any","",101,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::mem","",495,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::os::raw","",240,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ascii","",162,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",466,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::arch::x86_64","",436,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::char","",457,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",409,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::arch::x86_64","",437,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",383,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str::pattern","",398,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",286,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::char","",454,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",394,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::cell","",448,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::char","",456,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",384,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",284,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::task","",358,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str::pattern","",97,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::marker","",492,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::task","",360,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",489,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::any","",430,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",419,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str::pattern","",397,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",411,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::prelude::v1","",13,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",416,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",43,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::arch::x86_64","",439,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",440,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",469,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",385,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",467,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::arch::x86_64","",435,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",283,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",474,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::array","",442,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::option","",499,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::arch::x86_64","",438,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",471,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::convert","",459,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::arch::x86_64","",434,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::atomic","",332,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::fmt","",82,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",297,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",478,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::mem","",493,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",400,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",288,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::char","",453,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::array","",441,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str::pattern","",399,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::task","",359,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",465,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",292,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",403,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::atomic","",340,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",473,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",390,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::alloc","",363,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::any","",101,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",402,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::time","",356,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::atomic","",339,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",395,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::alloc","",362,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::atomic","",329,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",289,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::alloc","",364,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",482,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ffi","",241,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",420,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",421,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",475,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",378,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",290,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::result","",506,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",408,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",295,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",490,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::char","",450,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::result","",505,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",389,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",386,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",413,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",486,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",296,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ops","",146,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",377,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::atomic","",335,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",487,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",417,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",401,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",488,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",407,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",388,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",294,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",379,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",287,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::panic","",304,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ops","",143,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::hash","",460,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",479,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::any","",101,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::char","",104,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::result","",504,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::cell","",449,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::alloc","",365,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",415,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::atomic","",338,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::cell","",443,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",418,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",484,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",481,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",477,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",468,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::atomic","",333,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",405,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::atomic","",331,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::char","",455,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::panic","",303,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::atomic","",337,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",336,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",44,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str::pattern","",396,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ffi","",242,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::cell","",446,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",463,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::marker","",491,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::char","",458,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::atomic","",334,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::hash","",461,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",480,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",380,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",391,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::option","",501,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::cell","",447,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::fmt","",367,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",387,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::arch::x86_64","",102,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",462,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::num","",285,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::iter","",470,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::cell","",444,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",414,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::arch::x86_64","",431,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::atomic","",330,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ptr","",503,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::slice","",392,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ops","",497,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",496,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::str","",412,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"bitand","no_std_compat::num","",43,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"bitand","","",43,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"bitand","","",43,[[["wrapping"]]]],[11,"bitand","","",43,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"bitand","","",43,[[["wrapping"]]]],[11,"bitand","","",43,[[["wrapping"]]]],[11,"bitand","","",43,[[["wrapping"]]]],[11,"bitand","","",43,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"bitand","","",43,[[["wrapping"]]]],[11,"bitand","","",43,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"bitand","","",43,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"bitand","","",43,[[["wrapping"]]]],[11,"bitand","","",43,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"bitand","","",43,[[["wrapping"]]]],[11,"bitand","","",43,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"bitand","","",43,[[["wrapping"]]]],[11,"bitand","","",43,[[["wrapping"]]]],[11,"bitand","","",43,[[["wrapping"]]]],[11,"bitand","","",43,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"bitand","","",43,[[["wrapping"]]]],[11,"bitand","","",43,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"bitand","","",43,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"bitand","","",43,[[["wrapping"]]]],[11,"bitand","","",43,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"bitor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",43,[[["self"],["u32"],["wrapping",["u32"]]]]],[11,"bitor_assign","","",43,[[["self"],["wrapping",["usize"]],["usize"]]]],[11,"bitor_assign","","",43,[[["wrapping"],["self"]]]],[11,"bitor_assign","","",43,[[["wrapping"],["self"]]]],[11,"bitor_assign","","",43,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"bitor_assign","","",43,[[["wrapping",["u64"]],["self"],["u64"]]]],[11,"bitor_assign","","",43,[[["self"],["wrapping",["i128"]],["i128"]]]],[11,"bitor_assign","","",43,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"bitor_assign","","",43,[[["self"],["wrapping",["u128"]],["u128"]]]],[11,"bitor_assign","","",43,[[["wrapping"],["self"]]]],[11,"bitor_assign","","",43,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"bitor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",43,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"bitor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",43,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"bitor_assign","","",43,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"bitor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",43,[[["wrapping",["u8"]],["self"],["u8"]]]],[11,"cmp","","",296,[[["nonzerou8"],["self"]],["ordering"]]],[11,"cmp","","",288,[[["nonzeroi32"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::time","",356,[[["self"],["duration"]],["ordering"]]],[11,"cmp","no_std_compat::num","",43,[[["wrapping"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::pin","",502,[[["pin"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::num","",295,[[["nonzerou64"],["self"]],["ordering"]]],[11,"cmp","","",291,[[["self"],["nonzeroisize"]],["ordering"]]],[11,"cmp","no_std_compat::task","",75,[[["poll"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::prelude::v1","",14,[[["result"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::cmp","",105,[[["self"],["ordering"]],["ordering"]]],[11,"cmp","no_std_compat::fmt","",367,[[["error"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::num","",289,[[["self"],["nonzeroi64"]],["ordering"]]],[11,"cmp","no_std_compat::ptr","",503,[[["nonnull"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::cmp","",106,[[["self"],["reverse"]],["ordering"]]],[11,"cmp","no_std_compat::option","",501,[[["noneerror"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::num","",290,[[["self"],["nonzeroi8"]],["ordering"]]],[11,"cmp","","",294,[[["nonzerou32"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::any","",430,[[["typeid"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::num","",297,[[["self"],["nonzerousize"]],["ordering"]]],[11,"cmp","","",292,[[["self"],["nonzerou128"]],["ordering"]]],[11,"cmp","no_std_compat::mem","",494,[[["manuallydrop"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::cell","",443,[[["cell"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::ops","",149,[[["self"],["generatorstate"]],["ordering"]]],[11,"cmp","no_std_compat::prelude::v1","",13,[[["self"],["option"]],["ordering"]]],[11,"cmp","no_std_compat::num","",287,[[["self"],["nonzeroi16"]],["ordering"]]],[11,"cmp","","",286,[[["self"],["nonzeroi128"]],["ordering"]]],[11,"cmp","no_std_compat::char","",104,[[["unicodeversion"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::marker","",492,[[["phantompinned"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::arch::x86_64","",102,[[["self"],["cpuidresult"]],["ordering"]]],[11,"cmp","no_std_compat::cell","Panics",444,[[["refcell"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::num","",293,[[["nonzerou16"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::marker","",491,[[["self"],["phantomdata"]],["ordering"]]],[11,"cmp","no_std_compat::convert","",459,[[["self"],["infallible"]],["ordering"]]],[11,"mul","no_std_compat::num","",43,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"mul","","",43,[[["wrapping"]]]],[11,"mul","","",43,[[["wrapping"]]]],[11,"mul","","",43,[[["wrapping"]]]],[11,"mul","","",43,[[["wrapping"]]]],[11,"mul","","",43,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"mul","","",43,[[["wrapping"]]]],[11,"mul","","",43,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"mul","","",43,[[["wrapping"]]]],[11,"mul","","",43,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"mul","","",43,[[["wrapping"]]]],[11,"mul","","",43,[[["wrapping"]]]],[11,"mul","","",43,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"mul","","",43,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"mul","","",43,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"mul","no_std_compat::time","",356,[[["u32"]],["duration"]]],[11,"mul","no_std_compat::num","",43,[[["wrapping"]]]],[11,"mul","","",43,[[["wrapping"]]]],[11,"mul","","",43,[[["wrapping"]]]],[11,"mul","","",43,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"mul","","",43,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"mul","","",43,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"mul","","",43,[[["wrapping"]]]],[11,"mul","","",43,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"mul","","",43,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"fmt","","",43,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",292,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",290,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",286,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",296,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",297,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",293,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",295,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",288,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",294,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",291,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",287,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",289,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"poll","no_std_compat::pin","",502,[[["pin"],["pin",["pin"]],["context"]],["poll"]]],[11,"deref","","",502,[[["self"]]]],[11,"deref","no_std_compat::mem","",494,[[["self"]],["t"]]],[11,"deref","no_std_compat::cell","",447,[[["self"]],["t"]]],[11,"deref","no_std_compat::ffi","",241,[[["self"]],["valistimpl"]]],[11,"deref","no_std_compat::cell","",448,[[["self"]],["t"]]],[11,"as_ref","no_std_compat::slice","",384,[[["self"]]]],[11,"mul_assign","no_std_compat::num","",43,[[["wrapping"],["self"]]]],[11,"mul_assign","","",43,[[["wrapping"],["self"]]]],[11,"mul_assign","","",43,[[["self"],["wrapping",["i128"]],["i128"]]]],[11,"mul_assign","","",43,[[["self"],["wrapping",["u128"]],["u128"]]]],[11,"mul_assign","","",43,[[["self"],["wrapping"]]]],[11,"mul_assign","","",43,[[["self"],["wrapping"]]]],[11,"mul_assign","","",43,[[["wrapping"],["self"]]]],[11,"mul_assign","","",43,[[["self"],["wrapping"]]]],[11,"mul_assign","no_std_compat::time","",356,[[["self"],["u32"]]]],[11,"mul_assign","no_std_compat::num","",43,[[["self"],["wrapping"]]]],[11,"mul_assign","","",43,[[["self"],["wrapping"]]]],[11,"mul_assign","","",43,[[["self"],["wrapping"]]]],[11,"mul_assign","","",43,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"mul_assign","","",43,[[["self"],["wrapping"]]]],[11,"mul_assign","","",43,[[["wrapping",["u8"]],["self"],["u8"]]]],[11,"mul_assign","","",43,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"mul_assign","","",43,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"mul_assign","","",43,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"mul_assign","","",43,[[["self"],["wrapping"]]]],[11,"mul_assign","","",43,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"mul_assign","","",43,[[["self"],["wrapping",["usize"]],["usize"]]]],[11,"mul_assign","","",43,[[["self"],["u32"],["wrapping",["u32"]]]]],[11,"mul_assign","","",43,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"mul_assign","","",43,[[["wrapping",["u64"]],["self"],["u64"]]]],[11,"mul_assign","","",43,[[["self"],["wrapping"]]]],[11,"sub","","",43,[[["wrapping"]]]],[11,"sub","","",43,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"sub","","",43,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"sub","","",43,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"sub","","",43,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"sub","","",43,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"sub","no_std_compat::time","",356,[[["duration"]],["duration"]]],[11,"sub","no_std_compat::num","",43,[[["wrapping"]]]],[11,"sub","","",43,[[["wrapping"]]]],[11,"sub","","",43,[[["wrapping"]]]],[11,"sub","","",43,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"sub","","",43,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"sub","","",43,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"sub","","",43,[[["wrapping"]]]],[11,"sub","","",43,[[["wrapping"]]]],[11,"sub","","",43,[[["wrapping"]]]],[11,"sub","","",43,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"sub","","",43,[[["wrapping"]]]],[11,"sub","","",43,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"sub","","",43,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"sub","","",43,[[["wrapping"]]]],[11,"sub","","",43,[[["wrapping"]]]],[11,"sub","","",43,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"sub","","",43,[[["wrapping"]]]],[11,"sub","","",43,[[["wrapping"]]]],[11,"hash","no_std_compat::time","",356,[[["self"],["__h"]]]],[11,"hash","no_std_compat::ops","",497,[[["self"],["h"]]]],[11,"hash","no_std_compat::prelude::v1","",14,[[["self"],["__h"]]]],[11,"hash","no_std_compat::num","",297,[[["self"],["__h"]]]],[11,"hash","","",288,[[["self"],["__h"]]]],[11,"hash","no_std_compat::any","",430,[[["self"],["__h"]]]],[11,"hash","no_std_compat::num","",293,[[["self"],["__h"]]]],[11,"hash","","",291,[[["self"],["__h"]]]],[11,"hash","no_std_compat::ops","",26,[[["self"],["__h"]]]],[11,"hash","no_std_compat::num","",290,[[["self"],["__h"]]]],[11,"hash","no_std_compat::ptr","",503,[[["self"],["h"]]]],[11,"hash","no_std_compat::ops","",146,[[["self"],["__h"]]]],[11,"hash","","",142,[[["self"],["__h"]]]],[11,"hash","no_std_compat::num","",43,[[["self"],["__h"]]]],[11,"hash","no_std_compat::pin","",502,[[["self"],["h"]]]],[11,"hash","no_std_compat::num","",295,[[["self"],["__h"]]]],[11,"hash","no_std_compat::task","",75,[[["self"],["__h"]]]],[11,"hash","no_std_compat::ops","",143,[[["self"],["__h"]]]],[11,"hash","no_std_compat::mem","",494,[[["self"],["__h"]]]],[11,"hash","no_std_compat::num","",296,[[["self"],["__h"]]]],[11,"hash","no_std_compat::marker","",491,[[["self"],["h"]]]],[11,"hash","","",492,[[["self"],["__h"]]]],[11,"hash","no_std_compat::ops","",496,[[["self"],["__h"]]]],[11,"hash","no_std_compat::num","",292,[[["self"],["__h"]]]],[11,"hash","","",287,[[["self"],["__h"]]]],[11,"hash","no_std_compat::ops","",144,[[["self"],["__h"]]]],[11,"hash","no_std_compat::num","",289,[[["self"],["__h"]]]],[11,"hash","no_std_compat::fmt","",367,[[["self"],["__h"]]]],[11,"hash","no_std_compat::cmp","",106,[[["self"],["__h"]]]],[11,"hash","no_std_compat::sync::atomic","",73,[[["self"],["__h"]]]],[11,"hash","no_std_compat::cmp","",105,[[["self"],["__h"]]]],[11,"hash","no_std_compat::num","",286,[[["self"],["__h"]]]],[11,"hash","no_std_compat::mem","",493,[[["self"],["h"]]]],[11,"hash","no_std_compat::prelude::v1","",13,[[["self"],["__h"]]]],[11,"hash","no_std_compat::num","",294,[[["self"],["__h"]]]],[11,"hash","no_std_compat::option","",501,[[["self"],["__h"]]]],[11,"hash","no_std_compat::ops","",149,[[["self"],["__h"]]]],[11,"from_iter","no_std_compat::prelude::v1","Takes each element in the [`Iterator`]: if it is…",13,[[["i"]],["option"]]],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`,…",14,[[["i"]],["result"]]],[11,"shr","no_std_compat::num","",43,[[["usize"]]]],[11,"shr","","",43,[[["usize"]],[["wrapping",["u128"]],["u128"]]]],[11,"shr","","",43,[[["usize"]],[["i64"],["wrapping",["i64"]]]]],[11,"shr","","",43,[[["usize"]]]],[11,"shr","","",43,[[["usize"]],[["wrapping",["i8"]],["i8"]]]],[11,"shr","","",43,[[["usize"]]]],[11,"shr","","",43,[[["usize"]],[["wrapping",["i16"]],["i16"]]]],[11,"shr","","",43,[[["usize"]]]],[11,"shr","","",43,[[["usize"]],[["wrapping",["i128"]],["i128"]]]],[11,"shr","","",43,[[["usize"]]]],[11,"shr","","",43,[[["usize"]],[["wrapping",["u8"]],["u8"]]]],[11,"shr","","",43,[[["usize"]],[["wrapping",["u64"]],["u64"]]]],[11,"shr","","",43,[[["usize"]],[["u16"],["wrapping",["u16"]]]]],[11,"shr","","",43,[[["usize"]]]],[11,"shr","","",43,[[["usize"]]]],[11,"shr","","",43,[[["usize"]]]],[11,"shr","","",43,[[["usize"]],[["u32"],["wrapping",["u32"]]]]],[11,"shr","","",43,[[["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"shr","","",43,[[["usize"]]]],[11,"shr","","",43,[[["usize"]]]],[11,"shr","","",43,[[["usize"]]]],[11,"shr","","",43,[[["usize"]]]],[11,"shr","","",43,[[["usize"]],[["isize"],["wrapping",["isize"]]]]],[11,"shr","","",43,[[["usize"]],[["wrapping",["i32"]],["i32"]]]],[11,"fmt","","",293,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",297,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",296,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",291,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",294,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",289,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",288,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",43,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",287,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",295,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",290,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",292,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",286,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"add","","",43,[[["wrapping"]]]],[11,"add","","",43,[[["wrapping"]]]],[11,"add","","",43,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"add","","",43,[[["wrapping"]]]],[11,"add","","",43,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"add","","",43,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"add","","",43,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"add","","",43,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"add","","",43,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"add","","",43,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"add","","",43,[[["wrapping"]]]],[11,"add","","",43,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"add","","",43,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"add","","",43,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"add","","",43,[[["wrapping"]]]],[11,"add","","",43,[[["wrapping"]]]],[11,"add","","",43,[[["wrapping"]]]],[11,"add","no_std_compat::time","",356,[[["duration"]],["duration"]]],[11,"add","no_std_compat::num","",43,[[["wrapping"]]]],[11,"add","","",43,[[["wrapping"]]]],[11,"add","","",43,[[["wrapping"]]]],[11,"add","","",43,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"add","","",43,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"add","","",43,[[["wrapping"]]]],[11,"add","","",43,[[["wrapping"]]]],[11,"start_bound","no_std_compat::ops","",143,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",143,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",142,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",142,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",146,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",146,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",146,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",146,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",144,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",144,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",496,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",496,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",142,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",142,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",144,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",144,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",497,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",497,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",497,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",497,[[["self"]],[["bound"],["t"]]]],[11,"start_bound","","",143,[[["self"]],[["bound"],["t"]]]],[11,"end_bound","","",143,[[["self"]],[["bound"],["t"]]]],[11,"write_str","no_std_compat::fmt","",374,[[["str"],["self"]],[["result",["error"]],["error"]]]],[11,"write_char","","",374,[[["self"],["char"]],[["result",["error"]],["error"]]]],[11,"write_fmt","","",374,[[["self"],["arguments"]],[["result",["error"]],["error"]]]],[11,"default","no_std_compat::sync::atomic","Creates a null `AtomicPtr<T>`.",330,[[],["atomicptr"]]],[11,"default","no_std_compat::cmp","",106,[[],["reverse"]]],[11,"default","no_std_compat::sync::atomic","",335,[[],["atomici32"]]],[11,"default","no_std_compat::fmt","",367,[[],["error"]]],[11,"default","no_std_compat::marker","",491,[[],["phantomdata"]]],[11,"default","no_std_compat::sync::atomic","",339,[[],["atomicisize"]]],[11,"default","","",338,[[],["atomicu64"]]],[11,"default","no_std_compat::time","",356,[[],["duration"]]],[11,"default","no_std_compat::sync::atomic","",333,[[],["atomici16"]]],[11,"default","no_std_compat::mem","",494,[[],["manuallydrop"]]],[11,"default","no_std_compat::sync::atomic","",331,[[],["atomici8"]]],[11,"default","","",340,[[],["atomicusize"]]],[11,"default","no_std_compat::num","",43,[[],["wrapping"]]],[11,"default","no_std_compat::sync::atomic","",336,[[],["atomicu32"]]],[11,"default","","",337,[[],["atomici64"]]],[11,"default","no_std_compat::cell","Creates an `UnsafeCell`, with the `Default` value for T.",449,[[],["unsafecell"]]],[11,"default","no_std_compat::sync::atomic","",334,[[],["atomicu16"]]],[11,"default","no_std_compat::cell","Creates a `Cell<T>`, with the `Default` value for T.",443,[[],["cell"]]],[11,"default","no_std_compat::sync::atomic","",332,[[],["atomicu8"]]],[11,"default","no_std_compat::iter","",462,[[],["empty"]]],[11,"default","no_std_compat::sync::atomic","Creates an `AtomicBool` initialized to `false`.",329,[[],["atomicbool"]]],[11,"default","no_std_compat::prelude::v1","Returns [`None`][Option::None].",13,[[],["option"]]],[11,"default","no_std_compat::cell","Creates a `RefCell<T>`, with the `Default` value for T.",444,[[],["refcell"]]],[11,"default","no_std_compat::hash","",461,[[],["siphasher"]]],[11,"default","","",460,[[],["buildhasherdefault"]]],[11,"from","no_std_compat::num","",289,[[["nonzeroi8"]],["nonzeroi64"]]],[11,"from","","",297,[[["nonzerou8"]],["nonzerousize"]]],[11,"from","no_std_compat::cell","",449,[[["t"]],["unsafecell"]]],[11,"from","no_std_compat::sync::atomic","Converts an `i64` into an `AtomicI64`.",337,[[["i64"]],["atomici64"]]],[11,"from","no_std_compat::prelude::v1","",13,[[["option"]],[["option"],["t"]]]],[11,"from","no_std_compat::num","",294,[[["nonzerou8"]],["nonzerou32"]]],[11,"from","no_std_compat::prelude::v1","",13,[[["option"]],[["t"],["option"]]]],[11,"from","no_std_compat::sync::atomic","",330,[[],["atomicptr"]]],[11,"from","no_std_compat::num","",292,[[["nonzerou8"]],["nonzerou128"]]],[11,"from","no_std_compat::sync::atomic","Converts an `u32` into an `AtomicU32`.",336,[[["u32"]],["atomicu32"]]],[11,"from","no_std_compat::num","",286,[[["nonzerou64"]],["nonzeroi128"]]],[11,"from","","",289,[[["nonzerou32"]],["nonzeroi64"]]],[11,"from","","",292,[[["nonzerou16"]],["nonzerou128"]]],[11,"from","","",292,[[["nonzerou32"]],["nonzerou128"]]],[11,"from","no_std_compat::ptr","",503,[[["t"]],["nonnull"]]],[11,"from","no_std_compat::num","",288,[[["nonzerou8"]],["nonzeroi32"]]],[11,"from","no_std_compat::sync::atomic","Converts an `usize` into an `AtomicUsize`.",340,[[["usize"]],["atomicusize"]]],[11,"from","no_std_compat::num","",287,[[["nonzerou8"]],["nonzeroi16"]]],[11,"from","","",285,[[["infallible"]],["tryfrominterror"]]],[11,"from","","",292,[[["nonzerou64"]],["nonzerou128"]]],[11,"from","","",286,[[["nonzeroi16"]],["nonzeroi128"]]],[11,"from","no_std_compat::sync::atomic","Converts an `u16` into an `AtomicU16`.",334,[[["u16"]],["atomicu16"]]],[11,"from","no_std_compat::num","",291,[[["nonzeroi16"]],["nonzeroisize"]]],[11,"from","","",288,[[["nonzeroi16"]],["nonzeroi32"]]],[11,"from","","",297,[[["nonzerou16"]],["nonzerousize"]]],[11,"from","","",294,[[["nonzerou16"]],["nonzerou32"]]],[11,"from","no_std_compat::sync::atomic","Converts an `u64` into an `AtomicU64`.",338,[[["u64"]],["atomicu64"]]],[11,"from","no_std_compat::num","",291,[[["nonzerou8"]],["nonzeroisize"]]],[11,"from","no_std_compat::convert","",459,[[],["infallible"]]],[11,"from","no_std_compat::cell","",443,[[["t"]],["cell"]]],[11,"from","no_std_compat::num","",287,[[["nonzeroi8"]],["nonzeroi16"]]],[11,"from","no_std_compat::sync::atomic","Converts an `u8` into an `AtomicU8`.",332,[[["u8"]],["atomicu8"]]],[11,"from","no_std_compat::prelude::v1","",13,[[["t"]],["option"]]],[11,"from","no_std_compat::num","",295,[[["nonzerou16"]],["nonzerou64"]]],[11,"from","no_std_compat::sync::atomic","Converts a `bool` into an `AtomicBool`.",329,[[["bool"]],["atomicbool"]]],[11,"from","no_std_compat::num","",295,[[["nonzerou8"]],["nonzerou64"]]],[11,"from","","",286,[[["nonzerou16"]],["nonzeroi128"]]],[11,"from","","",291,[[["nonzeroi8"]],["nonzeroisize"]]],[11,"from","","",289,[[["nonzeroi32"]],["nonzeroi64"]]],[11,"from","no_std_compat::ptr","",503,[[["unique"]],["nonnull"]]],[11,"from","no_std_compat::sync::atomic","Converts an `i16` into an `AtomicI16`.",333,[[["i16"]],["atomici16"]]],[11,"from","no_std_compat::num","",295,[[["nonzerou32"]],["nonzerou64"]]],[11,"from","","",286,[[["nonzeroi8"]],["nonzeroi128"]]],[11,"from","no_std_compat::sync::atomic","Converts an `i8` into an `AtomicI8`.",331,[[["i8"]],["atomici8"]]],[11,"from","no_std_compat::num","",289,[[["nonzerou16"]],["nonzeroi64"]]],[11,"from","no_std_compat::task","",75,[[["t"]],["poll"]]],[11,"from","no_std_compat::num","",289,[[["nonzeroi16"]],["nonzeroi64"]]],[11,"from","no_std_compat::array","",441,[[["infallible"]],["tryfromsliceerror"]]],[11,"from","no_std_compat::cell","",444,[[["t"]],["refcell"]]],[11,"from","no_std_compat::sync::atomic","Converts an `isize` into an `AtomicIsize`.",339,[[["isize"]],["atomicisize"]]],[11,"from","no_std_compat::num","",285,[[],["tryfrominterror"]]],[11,"from","","",286,[[["nonzeroi32"]],["nonzeroi128"]]],[11,"from","no_std_compat::ptr","",503,[[["t"]],["nonnull"]]],[11,"from","no_std_compat::num","",286,[[["nonzeroi64"]],["nonzeroi128"]]],[11,"from","","",286,[[["nonzerou8"]],["nonzeroi128"]]],[11,"from","","",288,[[["nonzeroi8"]],["nonzeroi32"]]],[11,"from","","",293,[[["nonzerou8"]],["nonzerou16"]]],[11,"from","","",288,[[["nonzerou16"]],["nonzeroi32"]]],[11,"from","","",289,[[["nonzerou8"]],["nonzeroi64"]]],[11,"from","","",286,[[["nonzerou32"]],["nonzeroi128"]]],[11,"from","no_std_compat::sync::atomic","Converts an `i32` into an `AtomicI32`.",335,[[["i32"]],["atomici32"]]],[11,"bitxor_assign","no_std_compat::num","",43,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",43,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"bitxor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",43,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"bitxor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",43,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"bitxor_assign","","",43,[[["wrapping"],["self"]]]],[11,"bitxor_assign","","",43,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"bitxor_assign","","",43,[[["self"],["u32"],["wrapping",["u32"]]]]],[11,"bitxor_assign","","",43,[[["self"],["wrapping",["i128"]],["i128"]]]],[11,"bitxor_assign","","",43,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"bitxor_assign","","",43,[[["wrapping"],["self"]]]],[11,"bitxor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",43,[[["self"],["wrapping",["u128"]],["u128"]]]],[11,"bitxor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",43,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",43,[[["wrapping",["u8"]],["self"],["u8"]]]],[11,"bitxor_assign","","",43,[[["wrapping"],["self"]]]],[11,"bitxor_assign","","",43,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"bitxor_assign","","",43,[[["wrapping",["u64"]],["self"],["u64"]]]],[11,"bitxor_assign","","",43,[[["self"],["wrapping",["usize"]],["usize"]]]],[11,"fmt","","",287,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",296,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",295,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",288,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",286,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",290,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",293,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",297,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",292,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",43,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",289,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",291,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",294,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"haystack","no_std_compat::str::pattern","",396,[[["self"]],["str"]]],[11,"next","","",396,[[["self"]],["searchstep"]]],[11,"next_match","","",396,[[["self"]],["option"]]],[11,"haystack","","",399,[[["self"]],["str"]]],[11,"next","","",399,[[["self"]],["searchstep"]]],[11,"next_match","","",399,[[["self"]],["option"]]],[11,"haystack","","",397,[[["self"]],["str"]]],[11,"next","","",397,[[["self"]],["searchstep"]]],[11,"next_match","","",397,[[["self"]],["option"]]],[11,"next_reject","","",397,[[["self"]],["option"]]],[11,"haystack","","",398,[[["self"]],["str"]]],[11,"next","","",398,[[["self"]],["searchstep"]]],[11,"next_match","","",398,[[["self"]],["option"]]],[11,"next_reject","","",398,[[["self"]],["option"]]],[11,"div_assign","no_std_compat::num","",43,[[["self"],["wrapping"]]]],[11,"div_assign","","",43,[[["self"],["wrapping",["usize"]],["usize"]]]],[11,"div_assign","","",43,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"div_assign","","",43,[[["self"],["u32"],["wrapping",["u32"]]]]],[11,"div_assign","","",43,[[["wrapping",["u64"]],["self"],["u64"]]]],[11,"div_assign","","",43,[[["self"],["wrapping"]]]],[11,"div_assign","","",43,[[["wrapping"],["self"]]]],[11,"div_assign","","",43,[[["wrapping",["u8"]],["self"],["u8"]]]],[11,"div_assign","","",43,[[["self"],["wrapping"]]]],[11,"div_assign","","",43,[[["self"],["wrapping"]]]],[11,"div_assign","","",43,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"div_assign","","",43,[[["wrapping"],["self"]]]],[11,"div_assign","","",43,[[["self"],["wrapping"]]]],[11,"div_assign","","",43,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"div_assign","","",43,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"div_assign","","",43,[[["self"],["wrapping",["u128"]],["u128"]]]],[11,"div_assign","","",43,[[["self"],["wrapping",["i128"]],["i128"]]]],[11,"div_assign","","",43,[[["self"],["wrapping"]]]],[11,"div_assign","no_std_compat::time","",356,[[["self"],["u32"]]]],[11,"div_assign","no_std_compat::num","",43,[[["self"],["wrapping"]]]],[11,"div_assign","","",43,[[["self"],["wrapping"]]]],[11,"div_assign","","",43,[[["wrapping"],["self"]]]],[11,"div_assign","","",43,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"div_assign","","",43,[[["self"],["wrapping"]]]],[11,"div_assign","","",43,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"add_assign","","",43,[[["wrapping"],["self"]]]],[11,"add_assign","","",43,[[["self"],["wrapping"]]]],[11,"add_assign","","",43,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"add_assign","","",43,[[["wrapping",["u8"]],["self"],["u8"]]]],[11,"add_assign","","",43,[[["self"],["wrapping"]]]],[11,"add_assign","","",43,[[["self"],["wrapping"]]]],[11,"add_assign","no_std_compat::time","",356,[[["duration"],["self"]]]],[11,"add_assign","no_std_compat::num","",43,[[["self"],["wrapping",["usize"]],["usize"]]]],[11,"add_assign","","",43,[[["self"],["u32"],["wrapping",["u32"]]]]],[11,"add_assign","","",43,[[["self"],["wrapping"]]]],[11,"add_assign","","",43,[[["self"],["wrapping"]]]],[11,"add_assign","","",43,[[["self"],["wrapping",["u128"]],["u128"]]]],[11,"add_assign","","",43,[[["wrapping",["i8"]],["self"],["i8"]]]],[11,"add_assign","","",43,[[["self"],["wrapping"]]]],[11,"add_assign","","",43,[[["self"],["wrapping"]]]],[11,"add_assign","","",43,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"add_assign","","",43,[[["self"],["wrapping",["i128"]],["i128"]]]],[11,"add_assign","","",43,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"add_assign","","",43,[[["self"],["wrapping",["i32"]],["i32"]]]],[11,"add_assign","","",43,[[["self"],["wrapping"]]]],[11,"add_assign","","",43,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"add_assign","","",43,[[["wrapping"],["self"]]]],[11,"add_assign","","",43,[[["wrapping",["u64"]],["self"],["u64"]]]],[11,"add_assign","","",43,[[["wrapping"],["self"]]]],[11,"add_assign","","",43,[[["self"],["wrapping"]]]],[11,"partial_cmp","no_std_compat::prelude::v1","",14,[[["result"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",14,[[["result"],["self"]],["bool"]]],[11,"le","","",14,[[["result"],["self"]],["bool"]]],[11,"gt","","",14,[[["result"],["self"]],["bool"]]],[11,"ge","","",14,[[["result"],["self"]],["bool"]]],[11,"partial_cmp","no_std_compat::any","",430,[[["typeid"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",430,[[["typeid"],["self"]],["bool"]]],[11,"le","","",430,[[["typeid"],["self"]],["bool"]]],[11,"gt","","",430,[[["typeid"],["self"]],["bool"]]],[11,"ge","","",430,[[["typeid"],["self"]],["bool"]]],[11,"partial_cmp","no_std_compat::mem","",494,[[["manuallydrop"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",494,[[["manuallydrop"],["self"]],["bool"]]],[11,"le","","",494,[[["manuallydrop"],["self"]],["bool"]]],[11,"gt","","",494,[[["manuallydrop"],["self"]],["bool"]]],[11,"ge","","",494,[[["manuallydrop"],["self"]],["bool"]]],[11,"partial_cmp","no_std_compat::marker","",492,[[["phantompinned"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",491,[[["self"],["phantomdata"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::fmt","",367,[[["error"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::num","",43,[[["wrapping"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",43,[[["wrapping"],["self"]],["bool"]]],[11,"le","","",43,[[["wrapping"],["self"]],["bool"]]],[11,"gt","","",43,[[["wrapping"],["self"]],["bool"]]],[11,"ge","","",43,[[["wrapping"],["self"]],["bool"]]],[11,"partial_cmp","","",296,[[["nonzerou8"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",296,[[["nonzerou8"],["self"]],["bool"]]],[11,"le","","",296,[[["nonzerou8"],["self"]],["bool"]]],[11,"gt","","",296,[[["nonzerou8"],["self"]],["bool"]]],[11,"ge","","",296,[[["nonzerou8"],["self"]],["bool"]]],[11,"partial_cmp","no_std_compat::cmp","",105,[[["self"],["ordering"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::time","",356,[[["self"],["duration"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",356,[[["self"],["duration"]],["bool"]]],[11,"le","","",356,[[["self"],["duration"]],["bool"]]],[11,"gt","","",356,[[["self"],["duration"]],["bool"]]],[11,"ge","","",356,[[["self"],["duration"]],["bool"]]],[11,"partial_cmp","no_std_compat::num","",287,[[["self"],["nonzeroi16"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",287,[[["self"],["nonzeroi16"]],["bool"]]],[11,"le","","",287,[[["self"],["nonzeroi16"]],["bool"]]],[11,"gt","","",287,[[["self"],["nonzeroi16"]],["bool"]]],[11,"ge","","",287,[[["self"],["nonzeroi16"]],["bool"]]],[11,"partial_cmp","","",291,[[["self"],["nonzeroisize"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",291,[[["self"],["nonzeroisize"]],["bool"]]],[11,"le","","",291,[[["self"],["nonzeroisize"]],["bool"]]],[11,"gt","","",291,[[["self"],["nonzeroisize"]],["bool"]]],[11,"ge","","",291,[[["self"],["nonzeroisize"]],["bool"]]],[11,"partial_cmp","no_std_compat::pin","",502,[[["pin"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",502,[[["pin"],["self"]],["bool"]]],[11,"le","","",502,[[["pin"],["self"]],["bool"]]],[11,"gt","","",502,[[["pin"],["self"]],["bool"]]],[11,"ge","","",502,[[["pin"],["self"]],["bool"]]],[11,"partial_cmp","no_std_compat::ops","",149,[[["self"],["generatorstate"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",149,[[["self"],["generatorstate"]],["bool"]]],[11,"le","","",149,[[["self"],["generatorstate"]],["bool"]]],[11,"gt","","",149,[[["self"],["generatorstate"]],["bool"]]],[11,"ge","","",149,[[["self"],["generatorstate"]],["bool"]]],[11,"partial_cmp","no_std_compat::num","",292,[[["self"],["nonzerou128"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",292,[[["self"],["nonzerou128"]],["bool"]]],[11,"le","","",292,[[["self"],["nonzerou128"]],["bool"]]],[11,"gt","","",292,[[["self"],["nonzerou128"]],["bool"]]],[11,"ge","","",292,[[["self"],["nonzerou128"]],["bool"]]],[11,"partial_cmp","no_std_compat::cmp","",106,[[["self"],["reverse"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",106,[[["self"],["reverse"]],["bool"]]],[11,"le","","",106,[[["self"],["reverse"]],["bool"]]],[11,"gt","","",106,[[["self"],["reverse"]],["bool"]]],[11,"ge","","",106,[[["self"],["reverse"]],["bool"]]],[11,"partial_cmp","no_std_compat::num","",288,[[["nonzeroi32"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",288,[[["nonzeroi32"],["self"]],["bool"]]],[11,"le","","",288,[[["nonzeroi32"],["self"]],["bool"]]],[11,"gt","","",288,[[["nonzeroi32"],["self"]],["bool"]]],[11,"ge","","",288,[[["nonzeroi32"],["self"]],["bool"]]],[11,"partial_cmp","no_std_compat::ptr","",503,[[["nonnull"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::num","",293,[[["nonzerou16"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",293,[[["nonzerou16"],["self"]],["bool"]]],[11,"le","","",293,[[["nonzerou16"],["self"]],["bool"]]],[11,"gt","","",293,[[["nonzerou16"],["self"]],["bool"]]],[11,"ge","","",293,[[["nonzerou16"],["self"]],["bool"]]],[11,"partial_cmp","","",286,[[["self"],["nonzeroi128"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",286,[[["self"],["nonzeroi128"]],["bool"]]],[11,"le","","",286,[[["self"],["nonzeroi128"]],["bool"]]],[11,"gt","","",286,[[["self"],["nonzeroi128"]],["bool"]]],[11,"ge","","",286,[[["self"],["nonzeroi128"]],["bool"]]],[11,"partial_cmp","no_std_compat::cell","Panics",444,[[["refcell"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","Panics",444,[[["refcell"],["self"]],["bool"]]],[11,"le","","Panics",444,[[["refcell"],["self"]],["bool"]]],[11,"gt","","Panics",444,[[["refcell"],["self"]],["bool"]]],[11,"ge","","Panics",444,[[["refcell"],["self"]],["bool"]]],[11,"partial_cmp","no_std_compat::num","",295,[[["nonzerou64"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",295,[[["nonzerou64"],["self"]],["bool"]]],[11,"le","","",295,[[["nonzerou64"],["self"]],["bool"]]],[11,"gt","","",295,[[["nonzerou64"],["self"]],["bool"]]],[11,"ge","","",295,[[["nonzerou64"],["self"]],["bool"]]],[11,"partial_cmp","no_std_compat::convert","",459,[[["self"],["infallible"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::num","",290,[[["self"],["nonzeroi8"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",290,[[["self"],["nonzeroi8"]],["bool"]]],[11,"le","","",290,[[["self"],["nonzeroi8"]],["bool"]]],[11,"gt","","",290,[[["self"],["nonzeroi8"]],["bool"]]],[11,"ge","","",290,[[["self"],["nonzeroi8"]],["bool"]]],[11,"partial_cmp","no_std_compat::prelude::v1","",13,[[["self"],["option"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",13,[[["self"],["option"]],["bool"]]],[11,"le","","",13,[[["self"],["option"]],["bool"]]],[11,"gt","","",13,[[["self"],["option"]],["bool"]]],[11,"ge","","",13,[[["self"],["option"]],["bool"]]],[11,"partial_cmp","no_std_compat::num","",297,[[["self"],["nonzerousize"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",297,[[["self"],["nonzerousize"]],["bool"]]],[11,"le","","",297,[[["self"],["nonzerousize"]],["bool"]]],[11,"gt","","",297,[[["self"],["nonzerousize"]],["bool"]]],[11,"ge","","",297,[[["self"],["nonzerousize"]],["bool"]]],[11,"partial_cmp","no_std_compat::cell","",443,[[["cell"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",443,[[["cell"],["self"]],["bool"]]],[11,"le","","",443,[[["cell"],["self"]],["bool"]]],[11,"gt","","",443,[[["cell"],["self"]],["bool"]]],[11,"ge","","",443,[[["cell"],["self"]],["bool"]]],[11,"partial_cmp","no_std_compat::task","",75,[[["poll"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",75,[[["poll"],["self"]],["bool"]]],[11,"le","","",75,[[["poll"],["self"]],["bool"]]],[11,"gt","","",75,[[["poll"],["self"]],["bool"]]],[11,"ge","","",75,[[["poll"],["self"]],["bool"]]],[11,"partial_cmp","no_std_compat::char","",104,[[["unicodeversion"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",104,[[["unicodeversion"],["self"]],["bool"]]],[11,"le","","",104,[[["unicodeversion"],["self"]],["bool"]]],[11,"gt","","",104,[[["unicodeversion"],["self"]],["bool"]]],[11,"ge","","",104,[[["unicodeversion"],["self"]],["bool"]]],[11,"partial_cmp","no_std_compat::num","",289,[[["self"],["nonzeroi64"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",289,[[["self"],["nonzeroi64"]],["bool"]]],[11,"le","","",289,[[["self"],["nonzeroi64"]],["bool"]]],[11,"gt","","",289,[[["self"],["nonzeroi64"]],["bool"]]],[11,"ge","","",289,[[["self"],["nonzeroi64"]],["bool"]]],[11,"partial_cmp","no_std_compat::option","",501,[[["noneerror"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::arch::x86_64","",102,[[["self"],["cpuidresult"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",102,[[["self"],["cpuidresult"]],["bool"]]],[11,"le","","",102,[[["self"],["cpuidresult"]],["bool"]]],[11,"gt","","",102,[[["self"],["cpuidresult"]],["bool"]]],[11,"ge","","",102,[[["self"],["cpuidresult"]],["bool"]]],[11,"partial_cmp","no_std_compat::num","",294,[[["nonzerou32"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",294,[[["nonzerou32"],["self"]],["bool"]]],[11,"le","","",294,[[["nonzerou32"],["self"]],["bool"]]],[11,"gt","","",294,[[["nonzerou32"],["self"]],["bool"]]],[11,"ge","","",294,[[["nonzerou32"],["self"]],["bool"]]],[11,"is_empty","no_std_compat::slice","",387,[[["self"]],["bool"]]],[11,"len","no_std_compat::iter","",464,[[["self"]],["usize"]]],[11,"len","no_std_compat::array","",442,[[["self"]],["usize"]]],[11,"is_empty","","",442,[[["self"]],["bool"]]],[11,"len","no_std_compat::iter","",476,[[["self"]],["usize"]]],[11,"is_empty","","",476,[[["self"]],["bool"]]],[11,"len","","",489,[[["self"]],["usize"]]],[11,"is_empty","","",489,[[["self"]],["bool"]]],[11,"is_empty","no_std_compat::slice","",380,[[["self"]],["bool"]]],[11,"is_empty","","",379,[[["self"]],["bool"]]],[11,"len","no_std_compat::iter","",469,[[["self"]],["usize"]]],[11,"is_empty","","",469,[[["self"]],["bool"]]],[11,"len","","",470,[[["self"]],["usize"]]],[11,"is_empty","","",470,[[["self"]],["bool"]]],[11,"len","","",479,[[["self"]],["usize"]]],[11,"is_empty","","",479,[[["self"]],["bool"]]],[11,"len","","",465,[[["self"]],["usize"]]],[11,"len","no_std_compat::slice","",385,[[["self"]],["usize"]]],[11,"is_empty","","",385,[[["self"]],["bool"]]],[11,"is_empty","","",388,[[["self"]],["bool"]]],[11,"len","no_std_compat::char","",450,[[["self"]],["usize"]]],[11,"len","no_std_compat::str","",403,[[["self"]],["usize"]]],[11,"is_empty","","",403,[[["self"]],["bool"]]],[11,"len","no_std_compat::iter","",462,[[["self"]],["usize"]]],[11,"len","","",480,[[["self"]],["usize"]]],[11,"is_empty","","",480,[[["self"]],["bool"]]],[11,"len","no_std_compat::char","",451,[[["self"]],["usize"]]],[11,"len","no_std_compat::iter","",490,[[["self"]],["usize"]]],[11,"is_empty","","",490,[[["self"]],["bool"]]],[11,"len","no_std_compat::slice","",384,[[["self"]],["usize"]]],[11,"is_empty","","",384,[[["self"]],["bool"]]],[11,"rem","no_std_compat::num","",43,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"rem","","",43,[[["wrapping"]]]],[11,"rem","","",43,[[["wrapping"]]]],[11,"rem","","",43,[[["wrapping"]]]],[11,"rem","","",43,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"rem","","",43,[[["wrapping"]]]],[11,"rem","","",43,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"rem","","",43,[[["wrapping"]]]],[11,"rem","","",43,[[["wrapping"]]]],[11,"rem","","",43,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"rem","","",43,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"rem","","",43,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"rem","","",43,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"rem","","",43,[[["wrapping"]]]],[11,"rem","","",43,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"rem","","",43,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"rem","","",43,[[["wrapping"]]]],[11,"rem","","",43,[[["wrapping"]]]],[11,"rem","","",43,[[["wrapping"]]]],[11,"rem","","",43,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"rem","","",43,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"rem","","",43,[[["wrapping"]]]],[11,"rem","","",43,[[["wrapping"]]]],[11,"rem","","",43,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"into_result","no_std_compat::task","",75,[[],["result"]]],[11,"from_error","","",75,[[],[["poll",["option"]],["option",["result"]]]]],[11,"from_ok","","",75,[[],[["poll",["option"]],["option",["result"]]]]],[11,"into_result","","",75,[[],["result"]]],[11,"from_error","","",75,[[],[["result"],["poll",["result"]]]]],[11,"from_ok","","",75,[[],[["result"],["poll",["result"]]]]],[11,"into_result","no_std_compat::prelude::v1","",13,[[],[["noneerror"],["result",["noneerror"]]]]],[11,"from_ok","","",13,[[["t"]],["option"]]],[11,"from_error","","",13,[[["noneerror"]],["option"]]],[11,"into_result","","",14,[[],["result"]]],[11,"from_ok","","",14,[[["t"]],["result"]]],[11,"from_error","","",14,[[["e"]],["result"]]],[11,"deref_mut","no_std_compat::ffi","",241,[[["self"]],["valistimpl"]]],[11,"deref_mut","no_std_compat::pin","",502,[[["self"]]]],[11,"deref_mut","no_std_compat::mem","",494,[[["self"]],["t"]]],[11,"deref_mut","no_std_compat::cell","",448,[[["self"]],["t"]]],[11,"into_iter","no_std_compat::prelude::v1","Returns a consuming iterator over the possibly contained…",14,[[],["intoiter"]]],[11,"into_iter","","Returns a consuming iterator over the possibly contained…",13,[[],["intoiter"]]],[11,"fmt","no_std_compat::num","",288,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",296,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",294,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",286,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",290,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",291,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",295,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",287,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",43,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",293,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",292,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",297,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",289,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"next_back","no_std_compat::iter","",489,[[["self"]],["option"]]],[11,"nth_back","","",489,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",489,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",489,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",473,[[["self"]],["option"]]],[11,"nth_back","","",473,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",473,[[["self"],["acc"],["f"]],["r"]]],[11,"next_back","no_std_compat::str","",405,[[["self"]],[["option",["char"]],["char"]]]],[11,"next_back","","",422,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","no_std_compat::slice","",390,[[["self"]],["option"]]],[11,"next_back","no_std_compat::array","",442,[[["self"]],["option"]]],[11,"next_back","no_std_compat::str","",401,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",404,[[["self"]],["option"]]],[11,"next_back","no_std_compat::iter","",462,[[["self"]],["option"]]],[11,"next_back","","",485,[[["self"]],["option"]]],[11,"nth_back","","",485,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",485,[[["self"],["acc"],["fold"]],["r"]]],[11,"next_back","no_std_compat::slice","",384,[[["self"]],[["t"],["option"]]]],[11,"nth_back","","",384,[[["self"],["usize"]],[["t"],["option"]]]],[11,"next_back","","",377,[[["self"]],["option"]]],[11,"nth_back","","",377,[[["self"],["usize"]],["option"]]],[11,"next_back","no_std_compat::str","",418,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",421,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",414,[[["self"]],["option"]]],[11,"next_back","no_std_compat::iter","",469,[[["self"]],["option"]]],[11,"try_rfold","","",469,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",469,[[["acc"],["f"]],["acc"]]],[11,"next_back","","",482,[[["self"]],["option"]]],[11,"try_rfold","","",482,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",482,[[["acc"],["fold"]],["acc"]]],[11,"next_back","no_std_compat::option","",498,[[["self"]],[["option"],["a"]]]],[11,"next_back","no_std_compat::iter","",466,[[["self"]],["option"]]],[11,"next_back","no_std_compat::str","",413,[[["self"]],["option"]]],[11,"next_back","no_std_compat::result","",505,[[["self"]],[["option"],["t"]]]],[11,"next_back","no_std_compat::iter","",477,[[["self"]],["option"]]],[11,"try_rfold","","",477,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",477,[[["acc"],["fold"]],["acc"]]],[11,"next_back","no_std_compat::slice","",385,[[["self"]],[["option"],["t"]]]],[11,"nth_back","","",385,[[["self"],["usize"]],[["option"],["t"]]]],[11,"next_back","","",389,[[["self"]],["option"]]],[11,"nth_back","","",389,[[["self"],["usize"]],["option"]]],[11,"next_back","no_std_compat::iter","",474,[[["self"]],["option"]]],[11,"nth_back","","",474,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",474,[[["self"],["acc"],["f"]],["r"]]],[11,"rfold","","",474,[[["acc"],["f"]],["acc"]]],[11,"next_back","no_std_compat::result","",504,[[["self"]],[["t"],["option"]]]],[11,"next_back","no_std_compat::ops","",142,[[["self"]],["option"]]],[11,"nth_back","","",142,[[["self"],["usize"]],["option"]]],[11,"next_back","no_std_compat::slice","",383,[[["self"]],["option"]]],[11,"next_back","no_std_compat::str","",412,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","no_std_compat::slice","",381,[[["self"]],["option"]]],[11,"nth_back","","",381,[[["self"],["usize"]],["option"]]],[11,"next_back","no_std_compat::str","",417,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","no_std_compat::result","",506,[[["self"]],["option"]]],[11,"next_back","no_std_compat::iter","",465,[[["self"]],["option"]]],[11,"next_back","no_std_compat::slice","",386,[[["self"]],["option"]]],[11,"nth_back","","",386,[[["self"],["usize"]],["option"]]],[11,"next_back","","",378,[[["self"]],["option"]]],[11,"nth_back","","",378,[[["self"],["usize"]],["option"]]],[11,"next_back","no_std_compat::iter","",480,[[["self"]],["option"]]],[11,"nth_back","","",480,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",480,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",480,[[["acc"],["f"]],["acc"]]],[11,"rfind","","",480,[[["self"],["p"]],["option"]]],[11,"next_back","no_std_compat::str","",415,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","no_std_compat::iter","",471,[[["self"]],["option"]]],[11,"try_rfold","","",471,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",471,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",478,[[["self"]],["option"]]],[11,"try_rfold","","",478,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",478,[[["acc"],["fold"]],["acc"]]],[11,"next_back","no_std_compat::slice","",380,[[["self"]],["option"]]],[11,"nth_back","","",380,[[["self"],["usize"]],["option"]]],[11,"next_back","no_std_compat::iter","",489,[[["self"]],["option"]]],[11,"nth_back","","",489,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",489,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",489,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",490,[[["self"]],["option"]]],[11,"try_rfold","","",490,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",490,[[["acc"],["fold"]],["acc"]]],[11,"next_back","no_std_compat::option","",499,[[["self"]],[["a"],["option"]]]],[11,"next_back","no_std_compat::iter","",487,[[["self"]],["option"]]],[11,"nth_back","","",487,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",487,[[["self"],["acc"],["fold"]],["r"]]],[11,"next_back","no_std_compat::str","",402,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","no_std_compat::slice","",391,[[["self"]],["option"]]],[11,"next_back","","",388,[[["self"]],["option"]]],[11,"nth_back","","",388,[[["self"],["usize"]],["option"]]],[11,"next_back","no_std_compat::iter","",479,[[["self"]],["option"]]],[11,"try_rfold","","",479,[[["self"],["acc"],["g"]],["r"]]],[11,"rfold","","",479,[[["acc"],["g"]],["acc"]]],[11,"next_back","no_std_compat::str","",416,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","no_std_compat::iter","",464,[[["self"]],["option"]]],[11,"next_back","no_std_compat::ascii","",162,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"next_back","no_std_compat::slice","",382,[[["self"]],["option"]]],[11,"next_back","no_std_compat::iter","",476,[[["self"]],["option"]]],[11,"nth_back","","",476,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",476,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",476,[[["acc"],["fold"]],["acc"]]],[11,"next_back","no_std_compat::slice","",379,[[["self"]],["option"]]],[11,"nth_back","","",379,[[["self"],["usize"]],["option"]]],[11,"next_back","no_std_compat::ops","",497,[[["self"]],["option"]]],[11,"nth_back","","",497,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",497,[[["self"],["b"],["f"]],["r"]]],[11,"next_back","no_std_compat::str","",411,[[["self"]],[["option",["str"]],["str"]]]],[11,"next_back","","",403,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"nth_back","","",403,[[["self"],["usize"]],["option"]]],[11,"rfind","","",403,[[["self"],["p"]],["option"]]],[11,"next_back","no_std_compat::slice","",387,[[["self"]],["option"]]],[11,"nth_back","","",387,[[["self"],["usize"]],["option"]]],[11,"next_back","no_std_compat::option","",500,[[["self"]],["option"]]],[11,"next_back","no_std_compat::iter","",470,[[["self"]],["option"]]],[11,"try_rfold","","",470,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",470,[[["acc"],["f"]],["acc"]]],[11,"next_back","","",481,[[["self"]],["option"]]],[11,"next_back","","",483,[[["self"]],["option"]]],[11,"try_rfold","","",483,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",483,[[["acc"],["fold"]],["acc"]]],[11,"resume","no_std_compat::pin","",502,[[["r"],["pin",["pin"]],["pin"]],["generatorstate"]]],[11,"from_iter","no_std_compat::collections","",180,[[["i"]],["hashset"]]],[11,"from_iter","","",164,[[["t"]],["hashmap"]]],[11,"from_iter","no_std_compat::path","",309,[[["i"]],["pathbuf"]]],[11,"to_socket_addrs","no_std_compat::net","",275,[[["self"]],[["intoiter",["socketaddr"]],["result",["intoiter","error"]],["error"]]]],[11,"to_socket_addrs","","",39,[[["self"]],[["intoiter",["socketaddr"]],["result",["intoiter","error"]],["error"]]]],[11,"to_socket_addrs","no_std_compat::prelude::v1","",152,[[["self"]],[["result",["intoiter","error"]],["intoiter",["socketaddr"]],["error"]]]],[11,"to_socket_addrs","no_std_compat::net","",274,[[["self"]],[["intoiter",["socketaddr"]],["result",["intoiter","error"]],["error"]]]],[11,"from","no_std_compat::rc","",375,[[["osstr"]],[["rc",["osstr"]],["osstr"]]]],[11,"from","","Converts a `PathBuf` into an `Rc` by moving the `PathBuf`…",375,[[["pathbuf"]],[["rc",["path"]],["path"]]]],[11,"from","no_std_compat::net","Converts a [`SocketAddrV4`] into a [`SocketAddr::V4`].",39,[[["socketaddrv4"]],["socketaddr"]]],[11,"from","","Converts a tuple struct (Into<[`IpAddr`]>, `u16`) into a…",39,[[],["socketaddr"]]],[11,"from","no_std_compat::ffi","",239,[[["cow",["osstr"]],["osstr"]],["osstring"]]],[11,"from","no_std_compat::sync","Converts a [`OsString`] into a [`Arc`]`<OsStr>` without…",327,[[["osstring"]],[["arc",["osstr"]],["osstr"]]]],[11,"from","no_std_compat::net","Creates an `IpAddr::V6` from a sixteen element byte array.",41,[[],["ipaddr"]]],[11,"from","no_std_compat::ffi","Converts a [`Box`]`<`[`OsStr`]`>` into a `OsString`…",239,[[["osstr"],["box",["osstr"]]],["osstring"]]],[11,"from","no_std_compat::path","",309,[[["cow",["path"]],["path"]],["pathbuf"]]],[11,"from","no_std_compat::borrow","",79,[[["cstring"]],[["cow",["cstr"]],["cstr"]]]],[11,"from","no_std_compat::prelude::v1","Converts a [`str`] into a box of dyn [`Error`].",151,[[["str"]],[["error"],["box",["error"]]]]],[11,"from","no_std_compat::sync::mpsc","",71,[[["recverror"]],["recvtimeouterror"]]],[11,"from","no_std_compat::borrow","",79,[[["osstring"]],[["cow",["osstr"]],["osstr"]]]],[11,"from","no_std_compat::process","Converts a `ChildStdout` into a `Stdio`",317,[[["childstdout"]],["stdio"]]],[11,"from","no_std_compat::prelude::v1","Converts a [`String`] into a box of dyn [`Error`].",151,[[["string"]],[["error"],["box",["error"]]]]],[11,"from","no_std_compat::ffi","Converts a [`String`] into a [`OsString`].",239,[[["string"]],["osstring"]]],[11,"from","no_std_compat::prelude::v1","",151,[[["osstr"]],[["osstr"],["box",["osstr"]]]]],[11,"from","no_std_compat::path","",309,[[["t"]],["pathbuf"]]],[11,"from","no_std_compat::ffi","Converts a [`Vec`]`<`[`NonZeroU8`]`>` into a [`CString`]…",235,[[["nonzerou8"],["vec",["nonzerou8"]]],["cstring"]]],[11,"from","no_std_compat::sync","Creates a new mutex in an unlocked state ready for use.…",345,[[["t"]],["mutex"]]],[11,"from","no_std_compat::path","Converts a `OsString` into a `PathBuf`",309,[[["osstring"]],["pathbuf"]]],[11,"from","no_std_compat::prelude::v1","Converts a [`String`] into a box of dyn [`Error`] +…",151,[[["string"]],[["error"],["box",["error"]]]]],[11,"from","no_std_compat::net","Creates an `Ipv4Addr` from a four element byte array.",276,[[],["ipv4addr"]]],[11,"from","no_std_compat::ffi","Converts a [`Box`]`<CStr>` into a [`CString`] without…",235,[[["box",["cstr"]],["cstr"]],["cstring"]]],[11,"from","no_std_compat::path","Converts a `String` into a `PathBuf`",309,[[["string"]],["pathbuf"]]],[11,"from","no_std_compat::sync::mpsc","",70,[[["recverror"]],["tryrecverror"]]],[11,"from","no_std_compat::sync","",327,[[["osstr"]],[["arc",["osstr"]],["osstr"]]]],[11,"from","no_std_compat::rc","Converts a [`CString`] into a [`Rc`]`<CStr>` without…",375,[[["cstring"]],[["rc",["cstr"]],["cstr"]]]],[11,"from","","Converts a [`OsString`] into a [`Rc`]`<OsStr>` without…",375,[[["osstring"]],[["rc",["osstr"]],["osstr"]]]],[11,"from","no_std_compat::prelude::v1","",151,[[["path"]],[["path"],["box",["path"]]]]],[11,"from","no_std_compat::path","Converts a `Box<Path>` into a `PathBuf`",309,[[["path"],["box",["path"]]],["pathbuf"]]],[11,"from","no_std_compat::rc","Converts a `Path` into an `Rc` by copying the `Path` data…",375,[[["path"]],[["rc",["path"]],["path"]]]],[11,"from","no_std_compat::borrow","",79,[[["path"]],[["cow",["path"]],["path"]]]],[11,"from","no_std_compat::io","Converts a [`NulError`] into a [`io::Error`].",264,[[["nulerror"]],["error"]]],[11,"from","no_std_compat::sync","",327,[[["cstr"]],[["arc",["cstr"]],["cstr"]]]],[11,"from","no_std_compat::ffi","",235,[[["cow",["cstr"]],["cstr"]],["cstring"]]],[11,"from","no_std_compat::sync","Converts a [`CString`] into a [`Arc`]`<CStr>` without…",327,[[["cstring"]],[["arc",["cstr"]],["cstr"]]]],[11,"from","","",74,[[["poisonerror"]],["trylockerror"]]],[11,"from","no_std_compat::io","Converts an [`ErrorKind`] into an [`Error`].",264,[[["errorkind"]],["error"]]],[11,"from","no_std_compat::net","Converts a host byte order `u32` into an `Ipv4Addr`.",276,[[["u32"]],["ipv4addr"]]],[11,"from","no_std_compat::process","Converts a `ChildStderr` into a `Stdio`",317,[[["childstderr"]],["stdio"]]],[11,"from","no_std_compat::prelude::v1","Converts a [`str`] into a box of dyn [`Error`] + [`Send`]…",151,[[["str"]],[["box",["error"]],["error"]]]],[11,"from","no_std_compat::rc","",375,[[["cstr"]],[["rc",["cstr"]],["cstr"]]]],[11,"from","no_std_compat::net","Creates an `Ipv6Addr` from an eight element 16-bit array.",277,[[],["ipv6addr"]]],[11,"from","no_std_compat::prelude::v1","",151,[[["cstr"]],[["box",["cstr"]],["cstr"]]]],[11,"from","no_std_compat::net","Copies this address to a new `IpAddr::V6`.",41,[[["ipv6addr"]],["ipaddr"]]],[11,"from","no_std_compat::io","",264,[[["intoinnererror"]],["error"]]],[11,"from","no_std_compat::prelude::v1","Converts a type of [`Error`] into a box of dyn [`Error`].",151,[[["e"]],[["error"],["box",["error"]]]]],[11,"from","no_std_compat::process","Converts a `ChildStdin` into a `Stdio`",317,[[["childstdin"]],["stdio"]]],[11,"from","no_std_compat::prelude::v1","Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`]…",151,[[["str"],["cow",["str"]]],[["box",["error"]],["error"]]]],[11,"from","","Converts a type of [`Error`] + [`Send`] + [`Sync`] into a…",151,[[["e"]],[["box",["error"]],["error"]]]],[11,"from","","Converts a [`CString`] into a [`Box`]`<CStr>` without…",151,[[["cstring"]],[["box",["cstr"]],["cstr"]]]],[11,"from","no_std_compat::ffi","",235,[[["cstr"]],["cstring"]]],[11,"from","no_std_compat::borrow","",79,[[["osstr"]],[["cow",["osstr"]],["osstr"]]]],[11,"from","no_std_compat::prelude::v1","Converts a [`OsString`] into a [`Box`]`<OsStr>` without…",151,[[["osstring"]],[["osstr"],["box",["osstr"]]]]],[11,"from","no_std_compat::sync","Converts a `Path` into an `Arc` by copying the `Path` data…",327,[[["path"]],[["path"],["arc",["path"]]]]],[11,"from","no_std_compat::net","Convert a host byte order `u128` into an `Ipv6Addr`.",277,[[["u128"]],["ipv6addr"]]],[11,"from","no_std_compat::ffi","Converts a `PathBuf` into a `OsString`",239,[[["pathbuf"]],["osstring"]]],[11,"from","","",239,[[["t"]],["osstring"]]],[11,"from","no_std_compat::process","Converts a `File` into a `Stdio`",317,[[["file"]],["stdio"]]],[11,"from","no_std_compat::borrow","",79,[[["cstring"]],[["cow",["cstr"]],["cstr"]]]],[11,"from","no_std_compat::sync::mpsc","",72,[[["senderror"]],["trysenderror"]]],[11,"from","no_std_compat::net","Copies this address to a new `IpAddr::V4`.",41,[[["ipv4addr"]],["ipaddr"]]],[11,"from","no_std_compat::sync","Creates a new instance of an `RwLock<T>` which is…",349,[[["t"]],["rwlock"]]],[11,"from","no_std_compat::net","Creates an `IpAddr::V4` from a four element byte array.",41,[[],["ipaddr"]]],[11,"from","","Creates an `Ipv6Addr` from a sixteen element byte array.",277,[[],["ipv6addr"]]],[11,"from","no_std_compat::prelude::v1","Converts a `PathBuf` into a `Box<Path>`",151,[[["pathbuf"]],[["path"],["box",["path"]]]]],[11,"from","no_std_compat::borrow","",79,[[["pathbuf"]],[["cow",["path"]],["path"]]]],[11,"from","no_std_compat::net","Converts a [`SocketAddrV6`] into a [`SocketAddr::V6`].",39,[[["socketaddrv6"]],["socketaddr"]]],[11,"from","no_std_compat::borrow","",79,[[["pathbuf"]],[["cow",["path"]],["path"]]]],[11,"from","no_std_compat::prelude::v1","Converts a [`Cow`] into a box of dyn [`Error`].",151,[[["str"],["cow",["str"]]],[["error"],["box",["error"]]]]],[11,"from","no_std_compat::prelude::v1::vec","Converts a [`CString`] into a [`Vec`]`<u8>`.",153,[[["cstring"]],[["u8"],["vec",["u8"]]]]],[11,"from","no_std_compat::sync","Converts a `PathBuf` into an `Arc` by moving the `PathBuf`…",327,[[["pathbuf"]],[["path"],["arc",["path"]]]]],[11,"from","no_std_compat::borrow","",79,[[["cstr"]],[["cow",["cstr"]],["cstr"]]]],[11,"from","no_std_compat::net","Creates an `IpAddr::V6` from an eight element 16-bit array.",41,[[],["ipaddr"]]],[11,"from","no_std_compat::borrow","",79,[[["osstring"]],[["cow",["osstr"]],["osstr"]]]],[11,"into_iter","no_std_compat::collections","Creates a consuming iterator, that is, one that moves each…",180,[[],["intoiter"]]],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each…",164,[[],["intoiter"]]],[11,"into_iter","no_std_compat::sync::mpsc","",320,[[],["intoiter"]]],[11,"clone","no_std_compat::net","",274,[[["self"]],["socketaddrv4"]]],[11,"clone","no_std_compat::thread","",156,[[["self"]],["thread"]]],[11,"clone","no_std_compat::fs","",249,[[["self"]],["filetype"]]],[11,"clone","","",244,[[["self"]],["metadata"]]],[11,"clone","no_std_compat::net","",276,[[["self"]],["ipv4addr"]]],[11,"clone","","",38,[[["self"]],["shutdown"]]],[11,"clone","no_std_compat::collections::hash_map","",179,[[["self"]],["defaulthasher"]]],[11,"clone","","",165,[[["self"]],["iter"]]],[11,"clone","no_std_compat::net","",275,[[["self"]],["socketaddrv6"]]],[11,"clone","no_std_compat::collections::hash_map","",168,[[["self"]],["keys"]]],[11,"clone","no_std_compat::collections::hash_set","",186,[[["self"]],["symmetricdifference"]]],[11,"clone","no_std_compat::process","",318,[[["self"]],["exitstatus"]]],[11,"clone","no_std_compat::os::unix::net","",298,[[["self"]],["socketaddr"]]],[11,"clone","no_std_compat::sync::mpsc","",72,[[["self"]],["trysenderror"]]],[11,"clone","no_std_compat::ffi","",236,[[["self"]],["intostringerror"]]],[11,"clone","no_std_compat::io","",263,[[["self"]],["cursor"]]],[11,"clone","no_std_compat::collections::hash_set","",185,[[["self"]],["difference"]]],[11,"clone","no_std_compat::sync::mpsc","",324,[[["self"]],["sender"]]],[11,"clone","no_std_compat::error","",232,[[["self"]],["chain"]]],[11,"clone","no_std_compat::fs","",248,[[["self"]],["permissions"]]],[11,"clone","no_std_compat::path","",65,[[["self"]],["component"]]],[11,"clone","no_std_compat::sync::mpsc","",71,[[["self"]],["recvtimeouterror"]]],[11,"clone","no_std_compat::prelude::v1","",151,[[["self"]],[["box",["cstr"]],["cstr"]]]],[11,"clone","no_std_compat::path","",309,[[["self"]],["pathbuf"]]],[11,"clone","no_std_compat::thread","",158,[[["self"]],["accesserror"]]],[11,"clone","no_std_compat::net","",42,[[["self"]],["ipv6multicastscope"]]],[11,"clone","no_std_compat::path","",311,[[["self"]],["stripprefixerror"]]],[11,"clone","","",307,[[["self"]],["iter"]]],[11,"clone","no_std_compat::os::linux::raw","",47,[[["self"]],["stat"]]],[11,"clone","no_std_compat::prelude::v1","",151,[[["self"]],[["path"],["box",["path"]]]]],[11,"clone","no_std_compat::sync::mpsc","",326,[[["self"]],["recverror"]]],[11,"clone","no_std_compat::thread","",155,[[["self"]],["threadid"]]],[11,"clone","no_std_compat::net","",277,[[["self"]],["ipv6addr"]]],[11,"clone","no_std_compat::fs","",247,[[["self"]],["openoptions"]]],[11,"clone","no_std_compat::path","",306,[[["self"]],["components"]]],[11,"clone","","",64,[[["self"]],["prefix"]]],[11,"clone","no_std_compat::collections::hash_map","",169,[[["self"]],["values"]]],[11,"clone","no_std_compat::ffi","",235,[[["self"]],["cstring"]]],[11,"clone","no_std_compat::sync::mpsc","",69,[[["self"]],["senderror"]]],[11,"clone","no_std_compat::ffi","",239,[[["self"]],["osstring"]]],[11,"clone","no_std_compat::collections::hash_set","",187,[[["self"]],["union"]]],[11,"clone","no_std_compat::io","",36,[[["self"]],["seekfrom"]]],[11,"clone","no_std_compat::sync::mpsc","",70,[[["self"]],["tryrecverror"]]],[11,"clone","no_std_compat::collections","",164,[[["self"]],["hashmap"]]],[11,"clone","no_std_compat::prelude::v1","",151,[[["self"]],[["osstr"],["box",["osstr"]]]]],[11,"clone","no_std_compat::process","",319,[[["self"]],["exitcode"]]],[11,"clone","no_std_compat::collections","",180,[[["self"]],["hashset"]]],[11,"clone","no_std_compat::sync::mpsc","",325,[[["self"]],["syncsender"]]],[11,"clone","no_std_compat::net","",278,[[["self"]],["addrparseerror"]]],[11,"clone","no_std_compat::collections::hash_set","",181,[[["self"]],["iter"]]],[11,"clone","no_std_compat::alloc","",361,[[["self"]],["system"]]],[11,"clone","no_std_compat::net","",41,[[["self"]],["ipaddr"]]],[11,"clone","no_std_compat::process","",67,[[["self"]],["output"]]],[11,"clone","no_std_compat::ffi","",233,[[["self"]],["frombyteswithnulerror"]]],[11,"clone","no_std_compat::sync","",344,[[["self"]],["waittimeoutresult"]]],[11,"clone","no_std_compat::time","",355,[[["self"]],["systemtimeerror"]]],[11,"clone","no_std_compat::path","",308,[[["self"]],["ancestors"]]],[11,"clone","","",305,[[["self"]],["prefixcomponent"]]],[11,"clone","no_std_compat::time","",353,[[["self"]],["instant"]]],[11,"clone","no_std_compat::io","",37,[[["self"]],["errorkind"]]],[11,"clone","no_std_compat::net","",39,[[["self"]],["socketaddr"]]],[11,"clone","no_std_compat::ffi","",237,[[["self"]],["nulerror"]]],[11,"clone","no_std_compat::collections::hash_set","",184,[[["self"]],["intersection"]]],[11,"clone","no_std_compat::env","",30,[[["self"]],["varerror"]]],[11,"clone","no_std_compat::collections::hash_map","",178,[[["self"]],["randomstate"]]],[11,"clone","no_std_compat::time","",354,[[["self"]],["systemtime"]]],[11,"report","no_std_compat::process","",319,[[],["i32"]]],[11,"report","no_std_compat::prelude::v1","",14,[[],["i32"]]],[11,"report","","",14,[[],["i32"]]],[11,"is_block_device","no_std_compat::fs","",249,[[["self"]],["bool"]]],[11,"is_char_device","","",249,[[["self"]],["bool"]]],[11,"is_fifo","","",249,[[["self"]],["bool"]]],[11,"is_socket","","",249,[[["self"]],["bool"]]],[11,"extend","no_std_compat::collections","",164,[[["self"],["t"]]]],[11,"extend","","",180,[[["self"],["i"]]]],[11,"extend","","",180,[[["self"],["i"]]]],[11,"extend","no_std_compat::path","",309,[[["self"],["i"]]]],[11,"extend","no_std_compat::collections","",164,[[["self"],["t"]]]],[11,"fmt","no_std_compat::net","",276,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::mpsc","",70,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ffi","",236,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::path","",311,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::mpsc","",69,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::thread","",158,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",274,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::time","",355,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",41,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::process","",318,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",346,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ffi","",233,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::mpsc","",72,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",39,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::backtrace","",163,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",278,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::mpsc","",326,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",277,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::path","",312,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",350,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",351,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",352,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ffi","",237,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::env","",229,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",264,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::env","",30,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::mpsc","",71,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",259,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",74,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",275,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"deref","no_std_compat::ffi","",235,[[["self"]],["cstr"]]],[11,"deref","no_std_compat::io","",252,[[["self"]]]],[11,"deref","no_std_compat::path","",309,[[["self"]],["path"]]],[11,"deref","no_std_compat::io","",251,[[["self"]]]],[11,"deref","no_std_compat::ffi","",239,[[["self"]],["osstr"]]],[11,"deref","no_std_compat::sync","",350,[[["self"]],["t"]]],[11,"deref","","",351,[[["self"]],["t"]]],[11,"deref","","",346,[[["self"]],["t"]]],[11,"deref","no_std_compat::panic","",63,[[["self"]],["t"]]],[11,"as_ref","no_std_compat::path","",307,[[["self"]],["path"]]],[11,"as_ref","","",310,[[["self"]],["path"]]],[11,"as_ref","no_std_compat::borrow","",79,[[["self"]],["path"]]],[11,"as_ref","no_std_compat::prelude::v1","",152,[[["self"]],["path"]]],[11,"as_ref","no_std_compat::path","",65,[[["self"]],["osstr"]]],[11,"as_ref","","",306,[[["self"]],["osstr"]]],[11,"as_ref","no_std_compat::ffi","",238,[[["self"]],["path"]]],[11,"as_ref","","",235,[[["self"]],["cstr"]]],[11,"as_ref","no_std_compat::path","",65,[[["self"]],["path"]]],[11,"as_ref","no_std_compat::ffi","",234,[[["self"]],["cstr"]]],[11,"as_ref","no_std_compat::path","",306,[[["self"]],["path"]]],[11,"as_ref","","",310,[[["self"]],["osstr"]]],[11,"as_ref","no_std_compat::ffi","",239,[[["self"]],["osstr"]]],[11,"as_ref","no_std_compat::prelude::v1","",152,[[["self"]],["osstr"]]],[11,"as_ref","no_std_compat::path","",309,[[["self"]],["osstr"]]],[11,"as_ref","no_std_compat::ffi","",238,[[["self"]],["osstr"]]],[11,"as_ref","","",239,[[["self"]],["path"]]],[11,"as_ref","no_std_compat::path","",307,[[["self"]],["osstr"]]],[11,"as_ref","","",309,[[["self"]],["path"]]],[11,"poll","no_std_compat::panic","",63,[[["pin",["assertunwindsafe"]],["assertunwindsafe"],["context"]],["poll"]]],[11,"write","no_std_compat::io","",263,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",263,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"flush","","",263,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","","",273,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",273,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"flush","","",273,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","","",261,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",261,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"flush","","",261,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","no_std_compat::net","",281,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",281,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"flush","","",281,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","no_std_compat::io","",265,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",265,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"flush","","",265,[[["self"]],[["error"],["result",["error"]]]]],[11,"write_all","","",265,[[["self"]],[["error"],["result",["error"]]]]],[11,"write_fmt","","",265,[[["self"],["arguments"]],[["error"],["result",["error"]]]]],[11,"write","no_std_compat::prelude::v1","",151,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",151,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"flush","","",151,[[["self"]],[["error"],["result",["error"]]]]],[11,"write_all","","",151,[[["self"]],[["error"],["result",["error"]]]]],[11,"write_fmt","","",151,[[["self"],["arguments"]],[["error"],["result",["error"]]]]],[11,"write","no_std_compat::io","",263,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",263,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"flush","","",263,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","","",268,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",268,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"flush","","",268,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","no_std_compat::fs","",243,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",243,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"flush","","",243,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","no_std_compat::io","",262,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",262,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"flush","","",262,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","no_std_compat::os::unix::net","",299,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",299,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"flush","","",299,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","no_std_compat::io","",263,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",263,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"flush","","",263,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","no_std_compat::process","",313,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",313,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"flush","","",313,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","no_std_compat::io","",263,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",263,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"flush","","",263,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","no_std_compat::prelude::v1::vec","",153,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",153,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_all","","",153,[[["self"]],[["error"],["result",["error"]]]]],[11,"flush","","",153,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","no_std_compat::io","",270,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",270,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"flush","","",270,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","","",267,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_vectored","","",267,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"flush","","",267,[[["self"]],[["error"],["result",["error"]]]]],[11,"write_all","","",267,[[["self"]],[["error"],["result",["error"]]]]],[11,"write_fmt","","",267,[[["self"],["arguments"]],[["error"],["result",["error"]]]]],[11,"from_raw","no_std_compat::process","",318,[[["i32"]],["exitstatus"]]],[11,"signal","","",318,[[["self"]],[["option",["i32"]],["i32"]]]],[11,"as_raw_fd","no_std_compat::io","",270,[[["self"]],["i32"]]],[11,"as_raw_fd","","",266,[[["self"]],["i32"]]],[11,"as_raw_fd","","",267,[[["self"]],["i32"]]],[11,"as_raw_fd","","",268,[[["self"]],["i32"]]],[11,"as_raw_fd","no_std_compat::process","",313,[[["self"]],["i32"]]],[11,"as_raw_fd","no_std_compat::io","",265,[[["self"]],["i32"]]],[11,"as_raw_fd","no_std_compat::process","",315,[[["self"]],["i32"]]],[11,"as_raw_fd","no_std_compat::net","",282,[[["self"]],["i32"]]],[11,"as_raw_fd","no_std_compat::fs","",243,[[["self"]],["i32"]]],[11,"as_raw_fd","no_std_compat::net","",281,[[["self"]],["i32"]]],[11,"as_raw_fd","","",280,[[["self"]],["i32"]]],[11,"as_raw_fd","no_std_compat::io","",269,[[["self"]],["i32"]]],[11,"as_raw_fd","no_std_compat::process","",314,[[["self"]],["i32"]]],[11,"as_raw_fd","no_std_compat::os::unix::net","",302,[[["self"]],["i32"]]],[11,"as_raw_fd","","",299,[[["self"]],["i32"]]],[11,"as_raw_fd","","",300,[[["self"]],["i32"]]],[11,"mode","no_std_compat::fs","",248,[[["self"]],["u32"]]],[11,"set_mode","","",248,[[["self"],["u32"]]]],[11,"from_mode","","",248,[[["u32"]],["permissions"]]],[11,"uid","no_std_compat::process","",316,[[["self"],["u32"]],["command"]]],[11,"gid","","",316,[[["self"],["u32"]],["command"]]],[11,"pre_exec","","",316,[[["self"],["f"]],["command"]]],[11,"exec","","",316,[[["self"]],["error"]]],[11,"arg0","","",316,[[["self"],["s"]],["command"]]],[11,"as_pthread_t","no_std_compat::thread","",157,[[["self"]],["u64"]]],[11,"into_pthread_t","","",157,[[],["u64"]]],[11,"alloc","no_std_compat::alloc","",361,[[["self"],["layout"]]]],[11,"alloc_zeroed","","",361,[[["self"],["layout"]]]],[11,"dealloc","","",361,[[["self"],["layout"]]]],[11,"realloc","","",361,[[["usize"],["self"],["layout"]]]],[11,"fmt","no_std_compat::io","",269,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",351,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",263,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",342,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::path","",309,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::time","",354,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::env","",231,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_map","",166,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::process","",313,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",42,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",344,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::fs","",243,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_set","",184,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::path","",310,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",270,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",258,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_map","",175,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ffi","",237,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",341,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::os::unix::net","",302,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",278,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_map","",178,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",350,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",348,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::mpsc","",72,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",41,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ffi","",236,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",273,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::thread","",159,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",267,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::process","",318,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",260,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",74,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",271,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::env","",227,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::fs","",245,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::thread","",157,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",37,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",345,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_map","",172,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",346,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",272,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::os::unix::net","",300,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::mpsc","",326,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",347,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::process","",319,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::backtrace","",163,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",268,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::path","",305,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::fs","",250,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",247,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",251,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::fs","",248,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",274,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",261,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::fs","",249,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",277,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",343,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::os::unix::net","",299,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::path","",308,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::thread","",161,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_set","",181,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_map","",171,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::fs","",246,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_map","",168,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::mpsc","",71,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::path","",307,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_set","",186,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",257,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::mpsc","",322,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::env","",226,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::thread","",160,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",262,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::thread","",158,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_set","",185,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::env","",230,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::path","",65,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ffi","",233,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",276,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",38,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",252,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::process","",314,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",259,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_map","",165,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::panic","",63,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",36,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::env","",30,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::alloc","",361,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections","",180,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",280,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::os::unix::net","",301,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_set","",182,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::process","",66,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ffi","",238,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::time","",353,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ffi","",234,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",275,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::time","",355,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",266,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",279,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::mpsc","",320,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",39,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",256,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_map","",179,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ffi","",239,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_set","",187,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::path","",312,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",352,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::mpsc","",325,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",281,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",253,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::path","",311,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",254,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::fs","",244,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::mpsc","",321,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::net","",282,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::thread","",154,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_map","",24,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::path","",306,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",265,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_map","",170,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::mpsc","",323,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",69,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_set","",183,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::backtrace","",23,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::process","",317,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",349,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::thread","",155,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_map","",173,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections","",164,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::error","",232,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_map","",177,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::path","",64,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::process","Format the program and arguments of a Command for display.…",316,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::ffi","",235,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_map","",167,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::process","",315,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::thread","",156,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::os::unix::net","",298,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::env","",229,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::mpsc","",70,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::env","",228,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_map","",169,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync::mpsc","",324,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::process","",67,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::io","",255,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",264,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::hash_map","",174,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",176,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",25,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"read","no_std_compat::process","",315,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_vectored","","",315,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"initializer","","",315,[[["self"]],["initializer"]]],[11,"read","no_std_compat::io","",254,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_vectored","","",254,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"initializer","","",254,[[["self"]],["initializer"]]],[11,"read","","",266,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_vectored","","",266,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"initializer","","",266,[[["self"]],["initializer"]]],[11,"read_to_end","","",266,[[["self"],["vec"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_to_string","","",266,[[["string"],["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_exact","","",266,[[["self"]],[["error"],["result",["error"]]]]],[11,"read","no_std_compat::fs","",243,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_vectored","","",243,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"initializer","","",243,[[["self"]],["initializer"]]],[11,"read","no_std_compat::io","",263,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_vectored","","",263,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_exact","","",263,[[["self"]],[["error"],["result",["error"]]]]],[11,"initializer","","",263,[[["self"]],["initializer"]]],[11,"read","","",260,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_vectored","","",260,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"initializer","","",260,[[["self"]],["initializer"]]],[11,"read","","",272,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_vectored","","",272,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"initializer","","",272,[[["self"]],["initializer"]]],[11,"read","no_std_compat::os::unix::net","",299,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_vectored","","",299,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"initializer","","",299,[[["self"]],["initializer"]]],[11,"read","no_std_compat::net","",281,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_vectored","","",281,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"initializer","","",281,[[["self"]],["initializer"]]],[11,"read","no_std_compat::prelude::v1","",151,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_vectored","","",151,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"initializer","","",151,[[["self"]],["initializer"]]],[11,"read_to_end","","",151,[[["self"],["vec"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_to_string","","",151,[[["string"],["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_exact","","",151,[[["self"]],[["error"],["result",["error"]]]]],[11,"read","no_std_compat::process","",314,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_vectored","","",314,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"initializer","","",314,[[["self"]],["initializer"]]],[11,"read","no_std_compat::io","",269,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_vectored","","",269,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"initializer","","",269,[[["self"]],["initializer"]]],[11,"read","","",271,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"initializer","","",271,[[["self"]],["initializer"]]],[11,"read","","",255,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"initializer","","",255,[[["self"]],["initializer"]]],[11,"read_to_end","","",255,[[["self"],["vec"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"build_hasher","no_std_compat::collections::hash_map","",178,[[["self"]],["defaulthasher"]]],[11,"hash","no_std_compat::path","",305,[[["self"],["h"]]]],[11,"hash","","",65,[[["self"],["__h"]]]],[11,"hash","","",310,[[["self"],["h"]]]],[11,"hash","no_std_compat::net","",275,[[["self"],["h"]]]],[11,"hash","","",274,[[["self"],["h"]]]],[11,"hash","no_std_compat::ffi","",239,[[["self"],["h"]]]],[11,"hash","no_std_compat::time","",353,[[["self"],["__h"]]]],[11,"hash","no_std_compat::path","",309,[[["self"],["h"]]]],[11,"hash","no_std_compat::ffi","",238,[[["self"],["h"]]]],[11,"hash","no_std_compat::net","",41,[[["self"],["__h"]]]],[11,"hash","","",39,[[["self"],["__h"]]]],[11,"hash","no_std_compat::path","",64,[[["self"],["__h"]]]],[11,"hash","no_std_compat::time","",354,[[["self"],["__h"]]]],[11,"hash","no_std_compat::ffi","",234,[[["self"],["__h"]]]],[11,"hash","no_std_compat::net","",276,[[["self"],["h"]]]],[11,"hash","","",42,[[["self"],["__h"]]]],[11,"hash","no_std_compat::fs","",249,[[["self"],["__h"]]]],[11,"hash","no_std_compat::io","",37,[[["self"],["__h"]]]],[11,"hash","no_std_compat::ffi","",235,[[["self"],["__h"]]]],[11,"hash","no_std_compat::thread","",155,[[["self"],["__h"]]]],[11,"hash","no_std_compat::net","",277,[[["self"],["h"]]]],[11,"description","no_std_compat::io","",264,[[["self"]],["str"]]],[11,"cause","","",264,[[["self"]],[["option",["error"]],["error"]]]],[11,"source","","",264,[[["self"]],[["error"],["option",["error"]]]]],[11,"description","no_std_compat::char","",456,[[["self"]],["str"]]],[11,"description","no_std_compat::array","",441,[[["self"]],["str"]]],[11,"description","no_std_compat::sync::mpsc","",326,[[["self"]],["str"]]],[11,"description","no_std_compat::num","",283,[[["self"]],["str"]]],[11,"description","no_std_compat::char","",458,[[["self"]],["str"]]],[11,"description","no_std_compat::string","",423,[[["self"]],["str"]]],[11,"description","no_std_compat::sync::mpsc","",72,[[["self"]],["str"]]],[11,"description","no_std_compat::io","",259,[[["self"]],["str"]]],[11,"description","no_std_compat::ffi","",236,[[["self"]],["str"]]],[11,"source","","",236,[[["self"]],[["error"],["option",["error"]]]]],[11,"description","no_std_compat::prelude::v1","",151,[[["self"]],["str"]]],[11,"cause","","",151,[[["self"]],[["option",["error"]],["error"]]]],[11,"source","","",151,[[["self"]],[["error"],["option",["error"]]]]],[11,"description","no_std_compat::time","",355,[[["self"]],["str"]]],[11,"description","no_std_compat::net","",278,[[["self"]],["str"]]],[11,"description","no_std_compat::path","",311,[[["self"]],["str"]]],[11,"description","no_std_compat::env","",30,[[["self"]],["str"]]],[11,"description","no_std_compat::ffi","",233,[[["self"]],["str"]]],[11,"description","no_std_compat::sync::mpsc","",69,[[["self"]],["str"]]],[11,"description","no_std_compat::str","",410,[[["self"]],["str"]]],[11,"description","","",406,[[["self"]],["str"]]],[11,"description","no_std_compat::cell","",446,[[["self"]],["str"]]],[11,"description","no_std_compat::fmt","",367,[[["self"]],["str"]]],[11,"description","no_std_compat::ffi","",237,[[["self"]],["str"]]],[11,"description","no_std_compat::string","",424,[[["self"]],["str"]]],[11,"description","no_std_compat::sync::mpsc","",70,[[["self"]],["str"]]],[11,"description","no_std_compat::num","",284,[[["self"]],["str"]]],[11,"description","no_std_compat::sync","",352,[[["self"]],["str"]]],[11,"description","no_std_compat::char","",455,[[["self"]],["str"]]],[11,"description","no_std_compat::num","",285,[[["self"]],["str"]]],[11,"description","no_std_compat::cell","",445,[[["self"]],["str"]]],[11,"description","no_std_compat::sync","",74,[[["self"]],["str"]]],[11,"cause","","",74,[[["self"]],[["option",["error"]],["error"]]]],[11,"description","no_std_compat::convert","",459,[[["self"]],["str"]]],[11,"description","no_std_compat::sync::mpsc","",71,[[["self"]],["str"]]],[11,"description","no_std_compat::env","",229,[[["self"]],["str"]]],[11,"sub_assign","no_std_compat::time","",353,[[["duration"],["self"]]]],[11,"sub_assign","","",354,[[["duration"],["self"]]]],[11,"partial_cmp","no_std_compat::ffi","",239,[[["path"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",239,[[["pathbuf"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::net","",41,[[["ipaddr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",41,[[["ipaddr"],["self"]],["bool"]]],[11,"le","","",41,[[["ipaddr"],["self"]],["bool"]]],[11,"gt","","",41,[[["ipaddr"],["self"]],["bool"]]],[11,"ge","","",41,[[["ipaddr"],["self"]],["bool"]]],[11,"partial_cmp","no_std_compat::path","",310,[[["path"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",309,[[["self"],["osstring"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::ffi","",239,[[["self"],["osstring"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",239,[[["self"],["osstring"]],["bool"]]],[11,"le","","",239,[[["self"],["osstring"]],["bool"]]],[11,"gt","","",239,[[["self"],["osstring"]],["bool"]]],[11,"ge","","",239,[[["self"],["osstring"]],["bool"]]],[11,"partial_cmp","","",239,[[["self"],["path"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::path","",310,[[["cow"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::ffi","",239,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::net","",276,[[["self"],["ipv4addr"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::borrow","",79,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::net","",41,[[["ipv6addr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::ffi","",235,[[["self"],["cstring"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",235,[[["self"],["cstring"]],["bool"]]],[11,"le","","",235,[[["self"],["cstring"]],["bool"]]],[11,"gt","","",235,[[["self"],["cstring"]],["bool"]]],[11,"ge","","",235,[[["self"],["cstring"]],["bool"]]],[11,"partial_cmp","","",239,[[["cow"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",238,[[["path"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",238,[[["str"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",239,[[["str"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",239,[[["self"],["cow"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::path","",310,[[["pathbuf"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::borrow","",79,[[["self"],["osstr"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::ffi","",238,[[["cow"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::path","",65,[[["component"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",65,[[["component"],["self"]],["bool"]]],[11,"le","","",65,[[["component"],["self"]],["bool"]]],[11,"gt","","",65,[[["component"],["self"]],["bool"]]],[11,"ge","","",65,[[["component"],["self"]],["bool"]]],[11,"partial_cmp","no_std_compat::net","",276,[[["ipaddr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::borrow","",79,[[["pathbuf"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::path","",64,[[["self"],["prefix"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",64,[[["self"],["prefix"]],["bool"]]],[11,"le","","",64,[[["self"],["prefix"]],["bool"]]],[11,"gt","","",64,[[["self"],["prefix"]],["bool"]]],[11,"ge","","",64,[[["self"],["prefix"]],["bool"]]],[11,"partial_cmp","no_std_compat::borrow","",79,[[["self"],["osstring"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::ffi","",238,[[["self"],["cow"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::net","",41,[[["self"],["ipv4addr"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::ffi","",238,[[["self"],["osstr"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",238,[[["self"],["osstr"]],["bool"]]],[11,"le","","",238,[[["self"],["osstr"]],["bool"]]],[11,"gt","","",238,[[["self"],["osstr"]],["bool"]]],[11,"ge","","",238,[[["self"],["osstr"]],["bool"]]],[11,"partial_cmp","","",239,[[["self"],["osstr"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::time","",354,[[["systemtime"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",354,[[["systemtime"],["self"]],["bool"]]],[11,"le","","",354,[[["systemtime"],["self"]],["bool"]]],[11,"gt","","",354,[[["systemtime"],["self"]],["bool"]]],[11,"ge","","",354,[[["systemtime"],["self"]],["bool"]]],[11,"partial_cmp","no_std_compat::net","",277,[[["ipv6addr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::path","",310,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",309,[[["path"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::borrow","",79,[[["path"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::path","",310,[[["self"],["osstring"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::borrow","",79,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::ffi","",238,[[["pathbuf"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::borrow","",79,[[["path"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::path","",306,[[["components"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::borrow","",79,[[["self"],["osstr"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::path","",309,[[["self"],["osstr"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::net","",277,[[["ipaddr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::path","",309,[[["osstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",310,[[["self"],["cow"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::time","",353,[[["self"],["instant"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",353,[[["self"],["instant"]],["bool"]]],[11,"le","","",353,[[["self"],["instant"]],["bool"]]],[11,"gt","","",353,[[["self"],["instant"]],["bool"]]],[11,"ge","","",353,[[["self"],["instant"]],["bool"]]],[11,"partial_cmp","no_std_compat::path","",305,[[["prefixcomponent"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::ffi","",238,[[["self"],["osstring"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::borrow","",79,[[["self"],["osstring"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",79,[[["self"],["path"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::path","",309,[[["pathbuf"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",309,[[["cow"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::borrow","",79,[[["path"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::ffi","",238,[[["self"],["path"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::path","",309,[[["self"],["path"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::io","",37,[[["self"],["errorkind"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::path","",310,[[["self"],["osstr"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::ffi","",234,[[["cstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::borrow","",79,[[["pathbuf"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::path","",309,[[["self"],["cow"]],[["option",["ordering"]],["ordering"]]]],[11,"next","no_std_compat::fs","",245,[[["self"]],[["option",["result"]],["result",["direntry","error"]]]]],[11,"next","no_std_compat::collections::hash_set","",186,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",186,[[["self"]]]],[11,"next","no_std_compat::path","",307,[[["self"]],[["option",["osstr"]],["osstr"]]]],[11,"next","","",308,[[["self"]],["option"]]],[11,"next","no_std_compat::sync::mpsc","",321,[[["self"]],["option"]]],[11,"next","no_std_compat::io","",257,[[["self"]],[["result",["vec","error"]],["option",["result"]]]]],[11,"next","no_std_compat::collections::hash_map","",167,[[["self"]],["option"]]],[11,"size_hint","","",167,[[["self"]]]],[11,"next","","",166,[[["self"]],["option"]]],[11,"size_hint","","",166,[[["self"]]]],[11,"next","no_std_compat::collections::hash_set","",185,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",185,[[["self"]]]],[11,"next","no_std_compat::io","",258,[[["self"]],[["result",["string","error"]],["option",["result"]]]]],[11,"next","","",256,[[["self"]],[["option",["result"]],["result",["u8","error"]]]]],[11,"next","no_std_compat::sync::mpsc","",322,[[["self"]],["option"]]],[11,"next","no_std_compat::collections::hash_map","",169,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",169,[[["self"]]]],[11,"next","","",165,[[["self"]],["option"]]],[11,"size_hint","","",165,[[["self"]]]],[11,"next","no_std_compat::env","",231,[[["self"]],[["option",["osstring"]],["osstring"]]]],[11,"size_hint","","",231,[[["self"]]]],[11,"next","","",230,[[["self"]],[["option",["string"]],["string"]]]],[11,"size_hint","","",230,[[["self"]]]],[11,"next","no_std_compat::sync::mpsc","",323,[[["self"]],["option"]]],[11,"next","no_std_compat::collections::hash_set","",183,[[["self"]],["option"]]],[11,"size_hint","","",183,[[["self"]]]],[11,"next","no_std_compat::env","",227,[[["self"]],["option"]]],[11,"size_hint","","",227,[[["self"]]]],[11,"next","","",228,[[["self"]],[["option",["pathbuf"]],["pathbuf"]]]],[11,"size_hint","","",228,[[["self"]]]],[11,"next","no_std_compat::os::unix::net","",301,[[["self"]],[["result",["unixstream","error"]],["option",["result"]]]]],[11,"size_hint","","",301,[[["self"]]]],[11,"next","no_std_compat::error","",232,[[["self"]],["option"]]],[11,"next","no_std_compat::env","",226,[[["self"]],["option"]]],[11,"size_hint","","",226,[[["self"]]]],[11,"next","no_std_compat::collections::hash_map","",168,[[["self"]],[["option"],["k"]]]],[11,"size_hint","","",168,[[["self"]]]],[11,"next","no_std_compat::collections::hash_set","",184,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",184,[[["self"]]]],[11,"next","no_std_compat::collections::hash_map","",171,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",171,[[["self"]]]],[11,"next","no_std_compat::collections::hash_set","",187,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",187,[[["self"]]]],[11,"next","no_std_compat::collections::hash_map","",170,[[["self"]],["option"]]],[11,"size_hint","","",170,[[["self"]]]],[11,"next","no_std_compat::net","",279,[[["self"]],[["result",["tcpstream","error"]],["option",["result"]]]]],[11,"next","no_std_compat::collections::hash_set","",181,[[["self"]],[["option"],["k"]]]],[11,"size_hint","","",181,[[["self"]]]],[11,"next","no_std_compat::path","",306,[[["self"]],[["option",["component"]],["component"]]]],[11,"next","no_std_compat::collections::hash_set","",182,[[["self"]],["option"]]],[11,"size_hint","","",182,[[["self"]]]],[11,"call_once","no_std_compat::panic","",63,[[],["r"]]],[11,"borrow","no_std_compat::ffi","",235,[[["self"]],["cstr"]]],[11,"borrow","","",239,[[["self"]],["osstr"]]],[11,"borrow","no_std_compat::path","",309,[[["self"]],["path"]]],[11,"len","no_std_compat::collections::hash_map","",167,[[["self"]],["usize"]]],[11,"len","no_std_compat::collections::hash_set","",183,[[["self"]],["usize"]]],[11,"len","no_std_compat::collections::hash_map","",165,[[["self"]],["usize"]]],[11,"len","","",170,[[["self"]],["usize"]]],[11,"len","no_std_compat::collections::hash_set","",181,[[["self"]],["usize"]]],[11,"len","no_std_compat::collections::hash_map","",168,[[["self"]],["usize"]]],[11,"len","","",166,[[["self"]],["usize"]]],[11,"len","","",169,[[["self"]],["usize"]]],[11,"len","","",171,[[["self"]],["usize"]]],[11,"len","no_std_compat::collections::hash_set","",182,[[["self"]],["usize"]]],[11,"len","no_std_compat::env","",231,[[["self"]],["usize"]]],[11,"is_empty","","",231,[[["self"]],["bool"]]],[11,"len","","",230,[[["self"]],["usize"]]],[11,"is_empty","","",230,[[["self"]],["bool"]]],[11,"alloc","no_std_compat::alloc","",361,[[["self"],["layout"]],[["allocerr"],["result",["allocerr"]]]]],[11,"alloc_zeroed","","",361,[[["self"],["layout"]],[["allocerr"],["result",["allocerr"]]]]],[11,"dealloc","","",361,[[["nonnull",["u8"]],["self"],["layout"],["u8"]]]],[11,"realloc","","",361,[[["nonnull",["u8"]],["usize"],["self"],["layout"],["u8"]],[["allocerr"],["result",["allocerr"]]]]],[11,"next_back","no_std_compat::path","",307,[[["self"]],[["option",["osstr"]],["osstr"]]]],[11,"next_back","no_std_compat::env","",231,[[["self"]],[["option",["osstring"]],["osstring"]]]],[11,"next_back","no_std_compat::path","",306,[[["self"]],[["option",["component"]],["component"]]]],[11,"next_back","no_std_compat::env","",230,[[["self"]],[["option",["string"]],["string"]]]],[11,"from_raw_fd","no_std_compat::fs","",243,[[["i32"]],["file"]]],[11,"from_raw_fd","no_std_compat::net","",281,[[["i32"]],["tcpstream"]]],[11,"from_raw_fd","no_std_compat::process","",317,[[["i32"]],["stdio"]]],[11,"from_raw_fd","no_std_compat::os::unix::net","",302,[[["i32"]],["unixdatagram"]]],[11,"from_raw_fd","","",300,[[["i32"]],["unixlistener"]]],[11,"from_raw_fd","no_std_compat::net","",280,[[["i32"]],["tcplistener"]]],[11,"from_raw_fd","","",282,[[["i32"]],["udpsocket"]]],[11,"from_raw_fd","no_std_compat::os::unix::net","",299,[[["i32"]],["unixstream"]]],[11,"dev","no_std_compat::fs","",244,[[["self"]],["u64"]]],[11,"ino","","",244,[[["self"]],["u64"]]],[11,"mode","","",244,[[["self"]],["u32"]]],[11,"nlink","","",244,[[["self"]],["u64"]]],[11,"uid","","",244,[[["self"]],["u32"]]],[11,"gid","","",244,[[["self"]],["u32"]]],[11,"rdev","","",244,[[["self"]],["u64"]]],[11,"size","","",244,[[["self"]],["u64"]]],[11,"atime","","",244,[[["self"]],["i64"]]],[11,"atime_nsec","","",244,[[["self"]],["i64"]]],[11,"mtime","","",244,[[["self"]],["i64"]]],[11,"mtime_nsec","","",244,[[["self"]],["i64"]]],[11,"ctime","","",244,[[["self"]],["i64"]]],[11,"ctime_nsec","","",244,[[["self"]],["i64"]]],[11,"blksize","","",244,[[["self"]],["u64"]]],[11,"blocks","","",244,[[["self"]],["u64"]]],[11,"mode","","",247,[[["self"],["u32"]],["openoptions"]]],[11,"custom_flags","","",247,[[["self"],["i32"]],["openoptions"]]],[11,"cmp","no_std_compat::ffi","",239,[[["self"],["osstring"]],["ordering"]]],[11,"cmp","","",235,[[["self"],["cstring"]],["ordering"]]],[11,"cmp","no_std_compat::io","",37,[[["self"],["errorkind"]],["ordering"]]],[11,"cmp","no_std_compat::path","",64,[[["self"],["prefix"]],["ordering"]]],[11,"cmp","no_std_compat::net","",277,[[["ipv6addr"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::ffi","",238,[[["self"],["osstr"]],["ordering"]]],[11,"cmp","no_std_compat::path","",309,[[["pathbuf"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::ffi","",234,[[["cstr"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::path","",306,[[["components"],["self"]],["ordering"]]],[11,"cmp","","",310,[[["path"],["self"]],["ordering"]]],[11,"cmp","","",65,[[["component"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::time","",353,[[["self"],["instant"]],["ordering"]]],[11,"cmp","no_std_compat::net","",41,[[["ipaddr"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::path","",305,[[["self"],["prefixcomponent"]],["ordering"]]],[11,"cmp","no_std_compat::time","",354,[[["systemtime"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::net","",276,[[["self"],["ipv4addr"]],["ordering"]]],[11,"from_bytes","no_std_compat::ffi","",238,[[],["osstr"]]],[11,"as_bytes","","",238,[[["self"]]]],[11,"deref_mut","no_std_compat::panic","",63,[[["self"]],["t"]]],[11,"deref_mut","no_std_compat::io","",251,[[["self"]]]],[11,"deref_mut","no_std_compat::sync","",346,[[["self"]],["t"]]],[11,"deref_mut","","",351,[[["self"]],["t"]]],[11,"sub","no_std_compat::time","",353,[[["instant"]],["duration"]]],[11,"sub","","",353,[[["duration"]],["instant"]]],[11,"sub","","",354,[[["duration"]],["systemtime"]]],[11,"to_owned","no_std_compat::ffi","",238,[[["self"]],["osstring"]]],[11,"clone_into","","",238,[[["osstring"],["self"]]]],[11,"to_owned","no_std_compat::path","",310,[[["self"]],["pathbuf"]]],[11,"clone_into","","",310,[[["pathbuf"],["self"]]]],[11,"to_owned","no_std_compat::ffi","",234,[[["self"]],["cstring"]]],[11,"from_vec","","",239,[[["vec",["u8"]],["u8"]],["osstring"]]],[11,"into_vec","","",239,[[],[["u8"],["vec",["u8"]]]]],[11,"default","no_std_compat::sync","Creates a `Mutex<T>`, with the `Default` value for T.",345,[[],["mutex"]]],[11,"default","no_std_compat::io","",263,[[],["cursor"]]],[11,"default","no_std_compat::alloc","",361,[[],["system"]]],[11,"default","no_std_compat::ffi","Constructs an empty `OsString`.",239,[[],["osstring"]]],[11,"default","no_std_compat::sync","Creates a new `RwLock<T>`, with the `Default` value for T.",349,[[],["rwlock"]]],[11,"default","no_std_compat::path","",309,[[],["pathbuf"]]],[11,"default","no_std_compat::ffi","Creates an empty `CString`.",235,[[],["cstring"]]],[11,"default","no_std_compat::sync","Creates a `Condvar` which is ready to be waited on and…",343,[[],["condvar"]]],[11,"default","no_std_compat::prelude::v1","",151,[[],[["osstr"],["box",["osstr"]]]]],[11,"default","no_std_compat::collections::hash_map","Creates a new `DefaultHasher` using `new`. See its…",179,[[],["defaulthasher"]]],[11,"default","no_std_compat::collections","Creates an empty `HashMap<K, V, S>`, with the `Default`…",164,[[],["hashmap"]]],[11,"default","no_std_compat::prelude::v1","",151,[[],[["box",["cstr"]],["cstr"]]]],[11,"default","no_std_compat::collections","Creates an empty `HashSet<T, S>` with the `Default` value…",180,[[],["hashset"]]],[11,"default","no_std_compat::collections::hash_map","Constructs a new `RandomState`.",178,[[],["randomstate"]]],[11,"from_str","no_std_compat::net","",39,[[["str"]],[["result",["socketaddr","addrparseerror"]],["socketaddr"],["addrparseerror"]]]],[11,"from_str","","",274,[[["str"]],[["result",["socketaddrv4","addrparseerror"]],["socketaddrv4"],["addrparseerror"]]]],[11,"from_str","","",41,[[["str"]],[["result",["ipaddr","addrparseerror"]],["ipaddr"],["addrparseerror"]]]],[11,"from_str","","",275,[[["str"]],[["socketaddrv6"],["addrparseerror"],["result",["socketaddrv6","addrparseerror"]]]]],[11,"from_str","no_std_compat::path","",309,[[["str"]],[["pathbuf"],["result",["pathbuf"]]]]],[11,"from_str","no_std_compat::net","",277,[[["str"]],[["ipv6addr"],["addrparseerror"],["result",["ipv6addr","addrparseerror"]]]]],[11,"from_str","","",276,[[["str"]],[["ipv4addr"],["addrparseerror"],["result",["ipv4addr","addrparseerror"]]]]],[11,"add_assign","no_std_compat::time","",354,[[["duration"],["self"]]]],[11,"add_assign","","",353,[[["duration"],["self"]]]],[11,"write","no_std_compat::collections::hash_map","",179,[[["self"]]]],[11,"finish","","",179,[[["self"]],["u64"]]],[11,"as_raw_stat","no_std_compat::fs","",244,[[["self"]],["stat"]]],[11,"st_dev","","",244,[[["self"]],["u64"]]],[11,"st_ino","","",244,[[["self"]],["u64"]]],[11,"st_mode","","",244,[[["self"]],["u32"]]],[11,"st_nlink","","",244,[[["self"]],["u64"]]],[11,"st_uid","","",244,[[["self"]],["u32"]]],[11,"st_gid","","",244,[[["self"]],["u32"]]],[11,"st_rdev","","",244,[[["self"]],["u64"]]],[11,"st_size","","",244,[[["self"]],["u64"]]],[11,"st_atime","","",244,[[["self"]],["i64"]]],[11,"st_atime_nsec","","",244,[[["self"]],["i64"]]],[11,"st_mtime","","",244,[[["self"]],["i64"]]],[11,"st_mtime_nsec","","",244,[[["self"]],["i64"]]],[11,"st_ctime","","",244,[[["self"]],["i64"]]],[11,"st_ctime_nsec","","",244,[[["self"]],["i64"]]],[11,"st_blksize","","",244,[[["self"]],["u64"]]],[11,"st_blocks","","",244,[[["self"]],["u64"]]],[11,"ino","","",246,[[["self"]],["u64"]]],[11,"index","no_std_compat::collections","Returns a reference to the value corresponding to the…",164,[[["self"],["q"]],["v"]]],[11,"index","no_std_compat::ffi","",239,[[["self"],["rangefull"]],["osstr"]]],[11,"index","","",235,[[["self"],["rangefull"]],["cstr"]]],[11,"fill_buf","no_std_compat::io","",271,[[["self"]],[["result",["error"]],["error"]]]],[11,"consume","","",271,[[["self"],["usize"]]]],[11,"fill_buf","","",269,[[["self"]],[["result",["error"]],["error"]]]],[11,"consume","","",269,[[["self"],["usize"]]]],[11,"fill_buf","no_std_compat::prelude::v1","",151,[[["self"]],[["result",["error"]],["error"]]]],[11,"consume","","",151,[[["self"],["usize"]]]],[11,"read_until","","",151,[[["self"],["vec"],["u8"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"read_line","","",151,[[["string"],["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"fill_buf","no_std_compat::io","",263,[[["self"]],[["result",["error"]],["error"]]]],[11,"consume","","",263,[[["self"],["usize"]]]],[11,"fill_buf","","",255,[[["self"]],[["result",["error"]],["error"]]]],[11,"consume","","",255,[[["self"],["usize"]]]],[11,"fill_buf","","",254,[[["self"]],[["result",["error"]],["error"]]]],[11,"consume","","",254,[[["self"],["usize"]]]],[11,"fill_buf","","",260,[[["self"]],[["result",["error"]],["error"]]]],[11,"consume","","",260,[[["self"],["usize"]]]],[11,"drop","no_std_compat::sync","",343,[[["self"]]]],[11,"drop","","",346,[[["self"]]]],[11,"drop","","",350,[[["self"]]]],[11,"drop","no_std_compat::sync::mpsc","",325,[[["self"]]]],[11,"drop","no_std_compat::io","",261,[[["self"]]]],[11,"drop","no_std_compat::sync::mpsc","",320,[[["self"]]]],[11,"drop","no_std_compat::sync","",349,[[["self"]]]],[11,"drop","","",351,[[["self"]]]],[11,"drop","","",345,[[["self"]]]],[11,"drop","no_std_compat::sync::mpsc","",324,[[["self"]]]],[11,"drop","no_std_compat::ffi","",235,[[["self"]]]],[11,"seek","no_std_compat::fs","",243,[[["self"],["seekfrom"]],[["error"],["u64"],["result",["u64","error"]]]]],[11,"seek","no_std_compat::io","Seek to the offset, in bytes, in the underlying writer.",261,[[["self"],["seekfrom"]],[["error"],["u64"],["result",["u64","error"]]]]],[11,"seek","","",263,[[["self"],["seekfrom"]],[["error"],["u64"],["result",["u64","error"]]]]],[11,"stream_len","","",263,[[["self"]],[["error"],["u64"],["result",["u64","error"]]]]],[11,"stream_position","","",263,[[["self"]],[["error"],["u64"],["result",["u64","error"]]]]],[11,"seek","no_std_compat::prelude::v1","",151,[[["self"],["seekfrom"]],[["error"],["u64"],["result",["u64","error"]]]]],[11,"seek","no_std_compat::io","Seek to an offset, in bytes, in the underlying reader.",260,[[["self"],["seekfrom"]],[["error"],["u64"],["result",["u64","error"]]]]],[11,"add","no_std_compat::time","Panics",353,[[["duration"]],["instant"]]],[11,"add","","Panics",354,[[["duration"]],["systemtime"]]],[11,"eq","no_std_compat::sync::mpsc","",70,[[["self"],["tryrecverror"]],["bool"]]],[11,"eq","no_std_compat::path","",309,[[["cow"],["self"]],["bool"]]],[11,"eq","","",310,[[["cow"],["self"]],["bool"]]],[11,"eq","no_std_compat::fs","",249,[[["self"],["filetype"]],["bool"]]],[11,"ne","","",249,[[["self"],["filetype"]],["bool"]]],[11,"eq","no_std_compat::borrow","",79,[[["self"],["osstring"]],["bool"]]],[11,"eq","no_std_compat::path","",305,[[["prefixcomponent"],["self"]],["bool"]]],[11,"eq","no_std_compat::ffi","",238,[[["cow"],["self"]],["bool"]]],[11,"eq","no_std_compat::path","",310,[[["self"],["cow"]],["bool"]]],[11,"eq","no_std_compat::ffi","",238,[[["self"],["cow"]],["bool"]]],[11,"eq","no_std_compat::net","",39,[[["socketaddr"],["self"]],["bool"]]],[11,"ne","","",39,[[["socketaddr"],["self"]],["bool"]]],[11,"eq","","",42,[[["ipv6multicastscope"],["self"]],["bool"]]],[11,"eq","no_std_compat::borrow","",79,[[["path"],["self"]],["bool"]]],[11,"eq","no_std_compat::thread","",155,[[["self"],["threadid"]],["bool"]]],[11,"ne","","",155,[[["self"],["threadid"]],["bool"]]],[11,"eq","no_std_compat::path","",309,[[["self"],["osstr"]],["bool"]]],[11,"eq","no_std_compat::collections","",164,[[["hashmap"],["self"]],["bool"]]],[11,"eq","no_std_compat::path","",65,[[["component"],["self"]],["bool"]]],[11,"ne","","",65,[[["component"],["self"]],["bool"]]],[11,"eq","no_std_compat::net","",276,[[["self"],["ipv4addr"]],["bool"]]],[11,"eq","no_std_compat::ffi","",239,[[["cow"],["self"]],["bool"]]],[11,"eq","no_std_compat::path","",310,[[["path"],["self"]],["bool"]]],[11,"eq","","",309,[[["pathbuf"],["self"]],["bool"]]],[11,"eq","no_std_compat::io","",37,[[["self"],["errorkind"]],["bool"]]],[11,"eq","no_std_compat::time","",354,[[["systemtime"],["self"]],["bool"]]],[11,"ne","","",354,[[["systemtime"],["self"]],["bool"]]],[11,"eq","no_std_compat::ffi","",235,[[["self"],["cstring"]],["bool"]]],[11,"ne","","",235,[[["self"],["cstring"]],["bool"]]],[11,"eq","no_std_compat::path","",310,[[["self"],["osstring"]],["bool"]]],[11,"eq","no_std_compat::backtrace","",23,[[["self"],["backtracestatus"]],["bool"]]],[11,"eq","no_std_compat::net","",277,[[["ipv6addr"],["self"]],["bool"]]],[11,"eq","no_std_compat::ffi","",239,[[["self"],["cow"]],["bool"]]],[11,"eq","no_std_compat::sync::mpsc","",69,[[["senderror"],["self"]],["bool"]]],[11,"ne","","",69,[[["senderror"],["self"]],["bool"]]],[11,"eq","no_std_compat::ffi","",238,[[["self"],["osstr"]],["bool"]]],[11,"eq","","",234,[[["cstr"],["self"]],["bool"]]],[11,"eq","","",238,[[["pathbuf"],["self"]],["bool"]]],[11,"eq","","",237,[[["nulerror"],["self"]],["bool"]]],[11,"ne","","",237,[[["nulerror"],["self"]],["bool"]]],[11,"eq","no_std_compat::env","",30,[[["varerror"],["self"]],["bool"]]],[11,"ne","","",30,[[["varerror"],["self"]],["bool"]]],[11,"eq","no_std_compat::borrow","",79,[[["self"],["osstr"]],["bool"]]],[11,"eq","","",79,[[["pathbuf"],["self"]],["bool"]]],[11,"eq","no_std_compat::ffi","",239,[[["self"],["path"]],["bool"]]],[11,"eq","no_std_compat::path","",306,[[["components"],["self"]],["bool"]]],[11,"eq","","",309,[[["path"],["self"]],["bool"]]],[11,"eq","","",311,[[["stripprefixerror"],["self"]],["bool"]]],[11,"ne","","",311,[[["stripprefixerror"],["self"]],["bool"]]],[11,"eq","no_std_compat::borrow","",79,[[["osstr"],["self"]],["bool"]]],[11,"eq","no_std_compat::path","",310,[[["osstr"],["self"]],["bool"]]],[11,"eq","no_std_compat::io","",263,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",263,[[["self"],["cursor"]],["bool"]]],[11,"eq","no_std_compat::ffi","",239,[[["osstr"],["self"]],["bool"]]],[11,"eq","no_std_compat::time","",353,[[["self"],["instant"]],["bool"]]],[11,"ne","","",353,[[["self"],["instant"]],["bool"]]],[11,"eq","no_std_compat::fs","",248,[[["permissions"],["self"]],["bool"]]],[11,"ne","","",248,[[["permissions"],["self"]],["bool"]]],[11,"eq","no_std_compat::process","",318,[[["exitstatus"],["self"]],["bool"]]],[11,"ne","","",318,[[["exitstatus"],["self"]],["bool"]]],[11,"eq","no_std_compat::path","",309,[[["self"],["osstring"]],["bool"]]],[11,"eq","no_std_compat::collections","",180,[[["hashset"],["self"]],["bool"]]],[11,"eq","no_std_compat::ffi","",238,[[["self"],["path"]],["bool"]]],[11,"eq","no_std_compat::sync::mpsc","",71,[[["self"],["recvtimeouterror"]],["bool"]]],[11,"eq","no_std_compat::net","",275,[[["socketaddrv6"],["self"]],["bool"]]],[11,"eq","","",41,[[["ipaddr"],["self"]],["bool"]]],[11,"ne","","",41,[[["ipaddr"],["self"]],["bool"]]],[11,"eq","no_std_compat::borrow","",79,[[["path"],["self"]],["bool"]]],[11,"eq","","",79,[[["self"],["path"]],["bool"]]],[11,"eq","no_std_compat::ffi","",236,[[["intostringerror"],["self"]],["bool"]]],[11,"ne","","",236,[[["intostringerror"],["self"]],["bool"]]],[11,"eq","no_std_compat::net","",274,[[["socketaddrv4"],["self"]],["bool"]]],[11,"eq","no_std_compat::path","",64,[[["self"],["prefix"]],["bool"]]],[11,"ne","","",64,[[["self"],["prefix"]],["bool"]]],[11,"eq","no_std_compat::ffi","",238,[[["path"],["self"]],["bool"]]],[11,"eq","","",239,[[["str"],["self"]],["bool"]]],[11,"eq","no_std_compat::net","",278,[[["self"],["addrparseerror"]],["bool"]]],[11,"ne","","",278,[[["self"],["addrparseerror"]],["bool"]]],[11,"eq","no_std_compat::path","",309,[[["self"],["cow"]],["bool"]]],[11,"eq","no_std_compat::net","",41,[[["ipv6addr"],["self"]],["bool"]]],[11,"eq","","",38,[[["shutdown"],["self"]],["bool"]]],[11,"eq","no_std_compat::thread","",158,[[["self"],["accesserror"]],["bool"]]],[11,"ne","","",158,[[["self"],["accesserror"]],["bool"]]],[11,"eq","no_std_compat::io","",36,[[["self"],["seekfrom"]],["bool"]]],[11,"ne","","",36,[[["self"],["seekfrom"]],["bool"]]],[11,"eq","no_std_compat::borrow","",79,[[["path"],["self"]],["bool"]]],[11,"eq","","",79,[[["self"],["osstr"]],["bool"]]],[11,"eq","no_std_compat::ffi","",239,[[["self"],["osstr"]],["bool"]]],[11,"eq","no_std_compat::process","",67,[[["self"],["output"]],["bool"]]],[11,"ne","","",67,[[["self"],["output"]],["bool"]]],[11,"eq","no_std_compat::sync","",344,[[["waittimeoutresult"],["self"]],["bool"]]],[11,"ne","","",344,[[["waittimeoutresult"],["self"]],["bool"]]],[11,"eq","no_std_compat::ffi","",239,[[["path"],["self"]],["bool"]]],[11,"eq","no_std_compat::sync::mpsc","",72,[[["self"],["trysenderror"]],["bool"]]],[11,"ne","","",72,[[["self"],["trysenderror"]],["bool"]]],[11,"eq","no_std_compat::borrow","",79,[[["osstr"],["self"]],["bool"]]],[11,"eq","no_std_compat::ffi","",238,[[["self"],["osstring"]],["bool"]]],[11,"eq","no_std_compat::path","",310,[[["self"],["osstr"]],["bool"]]],[11,"eq","no_std_compat::net","",277,[[["ipaddr"],["self"]],["bool"]]],[11,"eq","no_std_compat::ffi","",239,[[["self"],["osstring"]],["bool"]]],[11,"eq","no_std_compat::path","",309,[[["osstr"],["self"]],["bool"]]],[11,"eq","","",309,[[["self"],["path"]],["bool"]]],[11,"eq","no_std_compat::sync::mpsc","",326,[[["recverror"],["self"]],["bool"]]],[11,"eq","no_std_compat::ffi","",239,[[["pathbuf"],["self"]],["bool"]]],[11,"eq","no_std_compat::borrow","",79,[[["self"],["osstring"]],["bool"]]],[11,"eq","no_std_compat::path","",310,[[["pathbuf"],["self"]],["bool"]]],[11,"eq","no_std_compat::net","",41,[[["self"],["ipv4addr"]],["bool"]]],[11,"eq","no_std_compat::ffi","",233,[[["frombyteswithnulerror"],["self"]],["bool"]]],[11,"ne","","",233,[[["frombyteswithnulerror"],["self"]],["bool"]]],[11,"eq","","",238,[[["str"],["self"]],["bool"]]],[11,"eq","","",239,[[["self"],["str"]],["bool"]]],[11,"eq","no_std_compat::net","",276,[[["ipaddr"],["self"]],["bool"]]],[11,"eq","no_std_compat::borrow","",79,[[["pathbuf"],["self"]],["bool"]]],[11,"into_raw_fd","no_std_compat::net","",282,[[],["i32"]]],[11,"into_raw_fd","no_std_compat::process","",313,[[],["i32"]]],[11,"into_raw_fd","no_std_compat::net","",281,[[],["i32"]]],[11,"into_raw_fd","no_std_compat::os::unix::net","",300,[[],["i32"]]],[11,"into_raw_fd","no_std_compat::process","",314,[[],["i32"]]],[11,"into_raw_fd","no_std_compat::net","",280,[[],["i32"]]],[11,"into_raw_fd","no_std_compat::fs","",243,[[],["i32"]]],[11,"into_raw_fd","no_std_compat::os::unix::net","",299,[[],["i32"]]],[11,"into_raw_fd","no_std_compat::process","",315,[[],["i32"]]],[11,"into_raw_fd","no_std_compat::os::unix::net","",302,[[],["i32"]]],[11,"mode","no_std_compat::fs","",250,[[["self"],["u32"]],["dirbuilder"]]],[11,"read_at","","",243,[[["u64"],["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"write_at","","",243,[[["self"],["u64"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"from_iter","no_std_compat::borrow","",79,[[["i"]],[["str"],["cow",["str"]]]]],[11,"from_iter","","",79,[[["i"]],[["str"],["cow",["str"]]]]],[11,"from_iter","no_std_compat::collections","",214,[[["i"]],["linkedlist"]]],[11,"from_iter","no_std_compat::prelude::v1","",152,[[["i"]],["string"]]],[11,"from_iter","no_std_compat::borrow","",79,[[["i"]],["cow"]]],[11,"from_iter","no_std_compat::prelude::v1","",151,[[["t"]],["box"]]],[11,"from_iter","no_std_compat::collections","",211,[[["i"]],["btreeset"]]],[11,"from_iter","","",195,[[["t"]],["btreemap"]]],[11,"from_iter","no_std_compat::prelude::v1::vec","",153,[[["i"]],["vec"]]],[11,"from_iter","no_std_compat::collections","",221,[[["t"]],["vecdeque"]]],[11,"from_iter","no_std_compat::prelude::v1","",152,[[["i"]],["string"]]],[11,"from_iter","no_std_compat::sync","Takes each element in the `Iterator` and collects it into…",327,[[["i"]],["arc"]]],[11,"from_iter","no_std_compat::prelude::v1","",152,[[["i"]],["string"]]],[11,"from_iter","no_std_compat::rc","Takes each element in the `Iterator` and collects it into…",375,[[["i"]],["rc"]]],[11,"from_iter","no_std_compat::prelude::v1","",152,[[["i"]],["string"]]],[11,"from_iter","","",152,[[["i"]],["string"]]],[11,"from_iter","no_std_compat::collections","",188,[[["i"]],["binaryheap"]]],[11,"from_iter","no_std_compat::borrow","",79,[[["i"]],[["str"],["cow",["str"]]]]],[11,"from","","",79,[[["string"]],[["str"],["cow",["str"]]]]],[11,"from","no_std_compat::prelude::v1::vec","",153,[[["str"]],[["u8"],["vec",["u8"]]]]],[11,"from","no_std_compat::sync","",327,[[["box"]],["arc"]]],[11,"from","","",327,[[],["arc"]]],[11,"from","no_std_compat::prelude::v1","Converts a `&str` into a `Box<str>`",151,[[["str"]],[["box",["str"]],["str"]]]],[11,"from","no_std_compat::rc","",375,[[],["rc"]]],[11,"from","","",375,[[["box"]],["rc"]]],[11,"from","no_std_compat::sync","",327,[[["string"]],[["str"],["arc",["str"]]]]],[11,"from","no_std_compat::rc","",375,[[["str"]],[["rc",["str"]],["str"]]]],[11,"from","","",375,[[["string"]],[["rc",["str"]],["str"]]]],[11,"from","no_std_compat::pin","Converts a `Box<T>` into a `Pin<Box<T>>`",502,[[["box"]],[["pin",["box"]],["box"]]]],[11,"from","no_std_compat::rc","",375,[[["t"]],["rc"]]],[11,"from","no_std_compat::sync","",327,[[["t"]],["arc"]]],[11,"from","no_std_compat::borrow","",79,[[["string"]],[["str"],["cow",["str"]]]]],[11,"from","no_std_compat::sync","",327,[[["vec"]],["arc"]]],[11,"from","no_std_compat::prelude::v1::vec","",153,[[],["vec"]]],[11,"from","no_std_compat::prelude::v1","Converts a `Box<str>>` into a `Box<[u8]>`",151,[[["box",["str"]],["str"]],["box"]]],[11,"from","no_std_compat::prelude::v1::vec","",153,[[["box"]],["vec"]]],[11,"from","no_std_compat::prelude::v1","Converts a generic type `T` into a `Box<T>`",151,[[["t"]],["box"]]],[11,"from","","Converts the given boxed `str` slice to a `String`. It is…",152,[[["box",["str"]],["str"]],["string"]]],[11,"from","no_std_compat::collections","",28,[[["layouterr"]],["tryreserveerror"]]],[11,"from","no_std_compat::prelude::v1","",152,[[["str"],["cow",["str"]]],["string"]]],[11,"from","","Converts a `&[T]` into a `Box<[T]>`",151,[[],["box"]]],[11,"from","no_std_compat::borrow","",79,[[["vec"]],["cow"]]],[11,"from","","",79,[[["vec"]],["cow"]]],[11,"from","no_std_compat::sync","",327,[[["str"]],[["str"],["arc",["str"]]]]],[11,"from","no_std_compat::prelude::v1::vec","",153,[[],["vec"]]],[11,"from","","",153,[[["cow"]],["vec"]]],[11,"from","no_std_compat::rc","",375,[[["vec"]],["rc"]]],[11,"from","no_std_compat::prelude::v1","",152,[[["str"]],["string"]]],[11,"from","no_std_compat::collections","Converts a `Vec<T>` into a `BinaryHeap<T>`.",188,[[["vec"]],["binaryheap"]]],[11,"from","no_std_compat::prelude::v1","Converts the given `String` to a boxed `str` slice that is…",151,[[["string"]],[["box",["str"]],["str"]]]],[11,"from","no_std_compat::prelude::v1::vec","Turn a [`VecDeque<T>`] into a [`Vec<T>`].",153,[[["vecdeque"]],["vec"]]],[11,"from","no_std_compat::prelude::v1","",151,[[["vec"]],["box"]]],[11,"from","no_std_compat::borrow","",79,[[["str"]],[["str"],["cow",["str"]]]]],[11,"from","","",79,[[],["cow"]]],[11,"from","no_std_compat::collections","Turn a [`Vec<T>`] into a [`VecDeque<T>`].",221,[[["vec"]],["vecdeque"]]],[11,"from","no_std_compat::prelude::v1","",152,[[["string"]],["string"]]],[11,"from","no_std_compat::prelude::v1::vec","Converts the given `String` to a vector `Vec` that holds…",153,[[["string"]],[["u8"],["vec",["u8"]]]]],[11,"from","","",153,[[["binaryheap"]],["vec"]]],[11,"into_iter","no_std_compat::collections","Consumes the `VecDeque` into a front-to-back iterator…",221,[[],["intoiter"]]],[11,"into_iter","","Gets an iterator for moving out the `BTreeSet`'s contents.",211,[[],["intoiter"]]],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each…",188,[[],["intoiter"]]],[11,"into_iter","no_std_compat::prelude::v1::vec","Creates a consuming iterator, that is, one that moves each…",153,[[],["intoiter"]]],[11,"into_iter","no_std_compat::collections","Consumes the list into an iterator yielding elements by…",214,[[],["intoiter"]]],[11,"into_iter","","",195,[[],["intoiter"]]],[11,"write_str","no_std_compat::prelude::v1","",152,[[["str"],["self"]],[["result",["error"]],["error"]]]],[11,"write_char","","",152,[[["self"],["char"]],[["result",["error"]],["error"]]]],[11,"clone","no_std_compat::collections::vec_deque","",222,[[["self"]],["iter"]]],[11,"clone","no_std_compat::collections::btree_set","",213,[[["self"]],["range"]]],[11,"clone","no_std_compat::collections::binary_heap","",192,[[["self"]],["intoitersorted"]]],[11,"clone","no_std_compat::collections::btree_map","",199,[[["self"]],["values"]]],[11,"clone","no_std_compat::collections::btree_set","",208,[[["self"]],["symmetricdifference"]]],[11,"clone","no_std_compat::rc","Makes a clone of the `Rc` pointer.",375,[[["self"]],["rc"]]],[11,"clone","no_std_compat::collections::btree_set","",210,[[["self"]],["union"]]],[11,"clone","no_std_compat::prelude::v1","",152,[[["self"]],["string"]]],[11,"clone_from","","",152,[[["self"],["string"]]]],[11,"clone","no_std_compat::collections","",214,[[["self"]],["linkedlist"]]],[11,"clone_from","","",214,[[["self"],["linkedlist"]]]],[11,"clone","no_std_compat::alloc","",366,[[["self"]],["global"]]],[11,"clone","no_std_compat::sync","Makes a clone of the `Arc` pointer.",327,[[["self"]],["arc"]]],[11,"clone","no_std_compat::collections::binary_heap","",190,[[["self"]],["iter"]]],[11,"clone","no_std_compat::sync","Makes a clone of the `Weak` pointer that points to the…",328,[[["self"]],["weak"]]],[11,"clone","no_std_compat::collections::linked_list","",217,[[["self"]],["intoiter"]]],[11,"clone","no_std_compat::collections::btree_set","",209,[[["self"]],["intersection"]]],[11,"clone","no_std_compat::collections::btree_map","",200,[[["self"]],["range"]]],[11,"clone","no_std_compat::prelude::v1","",151,[[["self"]],["box"]]],[11,"clone","no_std_compat::collections","",211,[[["self"]],["btreeset"]]],[11,"clone_from","","",211,[[["self"],["btreeset"]]]],[11,"clone","no_std_compat::prelude::v1::vec","",426,[[["self"]],["intoiter"]]],[11,"clone","no_std_compat::prelude::v1","",151,[[["self"]],[["box",["str"]],["str"]]]],[11,"clone","no_std_compat::collections::btree_set","",206,[[["self"]],["iter"]]],[11,"clone","no_std_compat::collections::vec_deque","",224,[[["self"]],["intoiter"]]],[11,"clone","no_std_compat::borrow","",79,[[["self"]],["cow"]]],[11,"clone_from","","",79,[[["self"],["cow"]]]],[11,"clone","no_std_compat::collections","",28,[[["self"]],["tryreserveerror"]]],[11,"clone","no_std_compat::string","",423,[[["self"]],["fromutf8error"]]],[11,"clone","no_std_compat::collections::linked_list","",215,[[["self"]],["iter"]]],[11,"clone","no_std_compat::collections","",188,[[["self"]],["binaryheap"]]],[11,"clone_from","","",188,[[["self"],["binaryheap"]]]],[11,"clone","no_std_compat::prelude::v1::vec","",153,[[["self"]],["vec"]]],[11,"clone_from","","",153,[[["self"],["vec"]]]],[11,"clone","no_std_compat::collections::binary_heap","",191,[[["self"]],["intoiter"]]],[11,"clone","no_std_compat::collections::btree_map","",197,[[["self"]],["iter"]]],[11,"clone","no_std_compat::collections::btree_set","",207,[[["self"]],["difference"]]],[11,"clone","no_std_compat::collections","",221,[[["self"]],["vecdeque"]]],[11,"clone_from","","",221,[[["vecdeque"],["self"]]]],[11,"clone","no_std_compat::rc","Makes a clone of the `Weak` pointer that points to the…",376,[[["self"]],["weak"]]],[11,"clone","no_std_compat::collections::btree_map","",196,[[["self"]],["keys"]]],[11,"clone","no_std_compat::prelude::v1","Returns a new box with a `clone()` of this box's contents.",151,[[["self"]],["box"]]],[11,"clone_from","","Copies `source`'s contents into `self` without creating a…",151,[[["self"],["box"]]]],[11,"clone","no_std_compat::collections","",195,[[["self"]],["btreemap"]]],[11,"clone_from","","",195,[[["self"],["btreemap"]]]],[11,"extend","","",211,[[["self"],["iter"]]]],[11,"extend","","",211,[[["self"],["i"]]]],[11,"extend","","",188,[[["self"],["i"]]]],[11,"extend","no_std_compat::prelude::v1::vec","",153,[[["self"],["i"]]]],[11,"extend","no_std_compat::collections","",195,[[["self"],["i"]]]],[11,"extend","","",214,[[["self"],["i"]]]],[11,"extend","no_std_compat::prelude::v1","",152,[[["self"],["i"]]]],[11,"extend","no_std_compat::collections","",195,[[["self"],["t"]]]],[11,"extend","","",221,[[["self"],["i"]]]],[11,"extend","","",214,[[["self"],["i"]]]],[11,"extend","no_std_compat::prelude::v1","",152,[[["self"],["i"]]]],[11,"extend","no_std_compat::collections","",221,[[["self"],["t"]]]],[11,"extend","no_std_compat::prelude::v1::vec","",153,[[["self"],["i"]]]],[11,"extend","no_std_compat::prelude::v1","",152,[[["self"],["i"]]]],[11,"extend","","",152,[[["self"],["i"]]]],[11,"extend","","",152,[[["self"],["i"]]]],[11,"extend","no_std_compat::collections","",188,[[["self"],["i"]]]],[11,"fmt","no_std_compat::string","",423,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::prelude::v1","",152,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::rc","",375,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::string","",424,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::prelude::v1","",151,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::borrow","",79,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",327,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"deref","no_std_compat::collections::binary_heap","",189,[[["self"]],["t"]]],[11,"deref","no_std_compat::borrow","",79,[[["self"]],["b"]]],[11,"deref","no_std_compat::prelude::v1","",151,[[["self"]],["t"]]],[11,"deref","no_std_compat::sync","",327,[[["self"]],["t"]]],[11,"deref","no_std_compat::rc","",375,[[["self"]],["t"]]],[11,"deref","no_std_compat::prelude::v1::vec","",153,[[["self"]]]],[11,"deref","no_std_compat::prelude::v1","",152,[[["self"]],["str"]]],[11,"as_ref","no_std_compat::sync","",327,[[["self"]],["t"]]],[11,"as_ref","no_std_compat::prelude::v1","",152,[[["self"]],["str"]]],[11,"as_ref","no_std_compat::rc","",375,[[["self"]],["t"]]],[11,"as_ref","no_std_compat::prelude::v1::vec","",153,[[["self"]]]],[11,"as_ref","no_std_compat::prelude::v1","",152,[[["self"]]]],[11,"as_ref","no_std_compat::prelude::v1::vec","",153,[[["self"]],["vec"]]],[11,"as_ref","no_std_compat::prelude::v1","",151,[[["self"]],["t"]]],[11,"as_ref","no_std_compat::borrow","",79,[[["self"]],["t"]]],[11,"resume","no_std_compat::pin","",502,[[["pin",["pin"]],["pin"],["r"]],["generatorstate"]]],[11,"resume","no_std_compat::prelude::v1","",151,[[["pin",["box"]],["box"],["r"]],["generatorstate"]]],[11,"poll","","",151,[[["pin",["box"]],["context"],["box"]],["poll"]]],[11,"call_mut","","",151,[[["a"],["self"]]]],[11,"hash","no_std_compat::collections","",211,[[["self"],["__h"]]]],[11,"hash","","",221,[[["self"],["h"]]]],[11,"hash","","",214,[[["self"],["h"]]]],[11,"hash","no_std_compat::rc","",375,[[["self"],["h"]]]],[11,"hash","no_std_compat::collections","",195,[[["self"],["h"]]]],[11,"hash","no_std_compat::sync","",327,[[["self"],["h"]]]],[11,"hash","no_std_compat::prelude::v1","",151,[[["self"],["h"]]]],[11,"hash","no_std_compat::prelude::v1::vec","",153,[[["self"],["h"]]]],[11,"hash","no_std_compat::borrow","",79,[[["self"],["h"]]]],[11,"hash","no_std_compat::prelude::v1","",152,[[["self"],["h"]]]],[11,"fmt","no_std_compat::collections::binary_heap","",191,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::vec_deque","",225,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::linked_list","",218,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::btree_map","",197,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections","",188,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::btree_set","",210,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::prelude::v1::vec","",428,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::vec_deque","",222,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::btree_map","",200,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::rc","",376,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections","",195,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::btree_map","",199,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",203,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::prelude::v1","",151,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::btree_set","",206,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",212,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections","",221,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::string","",424,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::vec_deque","",224,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::string","",425,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::linked_list","",216,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",215,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",328,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::btree_map","",201,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",204,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::linked_list","",217,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::btree_map","",202,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::linked_list","",220,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::binary_heap","",192,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::prelude::v1::vec","",153,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::btree_set","",213,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::sync","",327,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::btree_map","",198,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::prelude::v1","",152,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections","",28,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::string","",423,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::binary_heap","",194,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::rc","",375,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections","",214,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::btree_set","",209,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::binary_heap","",189,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::btree_set","",207,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections","",211,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::prelude::v1::vec","",427,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::btree_map","",196,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::linked_list","",219,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::prelude::v1::vec","",429,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",426,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::btree_map","",205,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::borrow","",79,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::binary_heap","",193,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::btree_map","",27,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::btree_set","",208,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::binary_heap","",190,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::collections::vec_deque","",223,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::alloc","",366,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"partial_cmp","no_std_compat::prelude::v1::vec","",153,[[["vec"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::borrow","",79,[[["cow"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::prelude::v1","",152,[[["self"],["string"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",152,[[["self"],["string"]],["bool"]]],[11,"le","","",152,[[["self"],["string"]],["bool"]]],[11,"gt","","",152,[[["self"],["string"]],["bool"]]],[11,"ge","","",152,[[["self"],["string"]],["bool"]]],[11,"partial_cmp","no_std_compat::collections","",211,[[["self"],["btreeset"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",211,[[["self"],["btreeset"]],["bool"]]],[11,"le","","",211,[[["self"],["btreeset"]],["bool"]]],[11,"gt","","",211,[[["self"],["btreeset"]],["bool"]]],[11,"ge","","",211,[[["self"],["btreeset"]],["bool"]]],[11,"partial_cmp","","",195,[[["btreemap"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",221,[[["self"],["vecdeque"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::prelude::v1","",151,[[["box"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",151,[[["box"],["self"]],["bool"]]],[11,"le","","",151,[[["box"],["self"]],["bool"]]],[11,"ge","","",151,[[["box"],["self"]],["bool"]]],[11,"gt","","",151,[[["box"],["self"]],["bool"]]],[11,"partial_cmp","no_std_compat::collections","",214,[[["self"],["linkedlist"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","no_std_compat::sync","Partial comparison for two `Arc`s.",327,[[["self"],["arc"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","Less-than comparison for two `Arc`s.",327,[[["self"],["arc"]],["bool"]]],[11,"le","","'Less than or equal to' comparison for two `Arc`s.",327,[[["self"],["arc"]],["bool"]]],[11,"gt","","Greater-than comparison for two `Arc`s.",327,[[["self"],["arc"]],["bool"]]],[11,"ge","","'Greater than or equal to' comparison for two `Arc`s.",327,[[["self"],["arc"]],["bool"]]],[11,"partial_cmp","no_std_compat::rc","Partial comparison for two `Rc`s.",375,[[["rc"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","Less-than comparison for two `Rc`s.",375,[[["rc"],["self"]],["bool"]]],[11,"le","","'Less than or equal to' comparison for two `Rc`s.",375,[[["rc"],["self"]],["bool"]]],[11,"gt","","Greater-than comparison for two `Rc`s.",375,[[["rc"],["self"]],["bool"]]],[11,"ge","","'Greater than or equal to' comparison for two `Rc`s.",375,[[["rc"],["self"]],["bool"]]],[11,"next","no_std_compat::collections::vec_deque","",225,[[["self"]],["option"]]],[11,"size_hint","","",225,[[["self"]]]],[11,"next","no_std_compat::prelude::v1","",151,[[["self"]],["option"]]],[11,"size_hint","","",151,[[["self"]]]],[11,"nth","","",151,[[["self"],["usize"]],["option"]]],[11,"last","","",151,[[],["option"]]],[11,"next","no_std_compat::prelude::v1::vec","",428,[[["self"]],["option"]]],[11,"size_hint","","",428,[[["self"]]]],[11,"next","no_std_compat::collections::btree_map","",204,[[["self"]],["option"]]],[11,"size_hint","","",204,[[["self"]]]],[11,"last","","",204,[[],["option"]]],[11,"next","no_std_compat::collections::btree_set","",210,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",210,[[["self"]]]],[11,"next","no_std_compat::collections::btree_map","",200,[[["self"]],["option"]]],[11,"last","","",200,[[],["option"]]],[11,"next","","",199,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",199,[[["self"]]]],[11,"last","","",199,[[],[["option"],["v"]]]],[11,"next","no_std_compat::prelude::v1::vec","",427,[[["self"]],["option"]]],[11,"size_hint","","",427,[[["self"]]]],[11,"next","no_std_compat::string","",425,[[["self"]],[["option",["char"]],["char"]]]],[11,"size_hint","","",425,[[["self"]]]],[11,"last","","",425,[[],[["option",["char"]],["char"]]]],[11,"next","no_std_compat::collections::vec_deque","",224,[[["self"]],["option"]]],[11,"size_hint","","",224,[[["self"]]]],[11,"next","","",223,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",223,[[["self"]]]],[11,"fold","","",223,[[["acc"],["f"]],["acc"]]],[11,"nth","","",223,[[["self"],["usize"]],["option"]]],[11,"last","","",223,[[],[["option"],["t"]]]],[11,"next","no_std_compat::collections::binary_heap","",191,[[["self"]],["option"]]],[11,"size_hint","","",191,[[["self"]]]],[11,"next","no_std_compat::collections::linked_list","",215,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",215,[[["self"]]]],[11,"last","","",215,[[],[["t"],["option"]]]],[11,"next","no_std_compat::collections::btree_map","",197,[[["self"]],["option"]]],[11,"size_hint","","",197,[[["self"]]]],[11,"last","","",197,[[],["option"]]],[11,"next","no_std_compat::collections::linked_list","",220,[[["self"]],["option"]]],[11,"size_hint","","",220,[[["self"]]]],[11,"next","","",217,[[["self"]],["option"]]],[11,"size_hint","","",217,[[["self"]]]],[11,"next","","",216,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",216,[[["self"]]]],[11,"last","","",216,[[],[["option"],["t"]]]],[11,"next","no_std_compat::collections::binary_heap","",192,[[["self"]],["option"]]],[11,"size_hint","","",192,[[["self"]]]],[11,"next","no_std_compat::collections::btree_map","",205,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",205,[[["self"]]]],[11,"last","","",205,[[],[["option"],["v"]]]],[11,"next","no_std_compat::collections::btree_set","",209,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",209,[[["self"]]]],[11,"next","no_std_compat::collections::btree_map","",196,[[["self"]],[["option"],["k"]]]],[11,"size_hint","","",196,[[["self"]]]],[11,"last","","",196,[[],[["option"],["k"]]]],[11,"next","no_std_compat::collections::btree_set","",207,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",207,[[["self"]]]],[11,"next","no_std_compat::collections::btree_map","",201,[[["self"]],["option"]]],[11,"last","","",201,[[],["option"]]],[11,"next","no_std_compat::collections::btree_set","",212,[[["self"]],["option"]]],[11,"size_hint","","",212,[[["self"]]]],[11,"next","no_std_compat::collections::binary_heap","",193,[[["self"]],["option"]]],[11,"size_hint","","",193,[[["self"]]]],[11,"next","no_std_compat::collections::btree_map","",198,[[["self"]],["option"]]],[11,"size_hint","","",198,[[["self"]]]],[11,"next","no_std_compat::collections::btree_set","",208,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",208,[[["self"]]]],[11,"next","no_std_compat::prelude::v1::vec","",429,[[["self"]],["option"]]],[11,"size_hint","","",429,[[["self"]]]],[11,"next","no_std_compat::collections::btree_set","",206,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",206,[[["self"]]]],[11,"last","","",206,[[],[["t"],["option"]]]],[11,"next","no_std_compat::collections::binary_heap","",194,[[["self"]],["option"]]],[11,"size_hint","","",194,[[["self"]]]],[11,"next","no_std_compat::collections::vec_deque","",222,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",222,[[["self"]]]],[11,"fold","","",222,[[["acc"],["f"]],["acc"]]],[11,"try_fold","","",222,[[["self"],["b"],["f"]],["r"]]],[11,"nth","","",222,[[["self"],["usize"]],["option"]]],[11,"last","","",222,[[],[["t"],["option"]]]],[11,"next","no_std_compat::collections::btree_set","",213,[[["self"]],[["t"],["option"]]]],[11,"last","","",213,[[],[["t"],["option"]]]],[11,"next","no_std_compat::prelude::v1::vec","",426,[[["self"]],["option"]]],[11,"size_hint","","",426,[[["self"]]]],[11,"count","","",426,[[],["usize"]]],[11,"next","no_std_compat::collections::binary_heap","",190,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",190,[[["self"]]]],[11,"last","","",190,[[],[["t"],["option"]]]],[11,"call_once","no_std_compat::prelude::v1","",151,[[["a"]]]],[11,"borrow","no_std_compat::rc","",375,[[["self"]],["t"]]],[11,"borrow","no_std_compat::borrow","",79,[[["self"]],["b"]]],[11,"borrow","no_std_compat::sync","",327,[[["self"]],["t"]]],[11,"borrow","no_std_compat::prelude::v1::vec","",153,[[["self"]]]],[11,"borrow","no_std_compat::prelude::v1","",152,[[["self"]],["str"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"len","no_std_compat::collections::btree_map","",196,[[["self"]],["usize"]]],[11,"len","","",198,[[["self"]],["usize"]]],[11,"is_empty","no_std_compat::collections::vec_deque","",222,[[["self"]],["bool"]]],[11,"len","no_std_compat::collections::btree_map","",205,[[["self"]],["usize"]]],[11,"is_empty","no_std_compat::prelude::v1::vec","",426,[[["self"]],["bool"]]],[11,"is_empty","no_std_compat::collections::vec_deque","",223,[[["self"]],["bool"]]],[11,"len","no_std_compat::collections::btree_set","",212,[[["self"]],["usize"]]],[11,"is_empty","no_std_compat::collections::vec_deque","",224,[[["self"]],["bool"]]],[11,"len","no_std_compat::collections::btree_map","",204,[[["self"]],["usize"]]],[11,"len","","",199,[[["self"]],["usize"]]],[11,"is_empty","no_std_compat::prelude::v1::vec","",427,[[["self"]],["bool"]]],[11,"is_empty","no_std_compat::collections::binary_heap","",191,[[["self"]],["bool"]]],[11,"len","no_std_compat::collections::btree_map","",197,[[["self"]],["usize"]]],[11,"is_empty","no_std_compat::collections::binary_heap","",190,[[["self"]],["bool"]]],[11,"len","no_std_compat::collections::btree_set","",206,[[["self"]],["usize"]]],[11,"is_empty","no_std_compat::collections::binary_heap","",193,[[["self"]],["bool"]]],[11,"len","no_std_compat::prelude::v1","",151,[[["self"]],["usize"]]],[11,"is_empty","","",151,[[["self"]],["bool"]]],[11,"alloc","no_std_compat::alloc","",366,[[["self"],["layout"]],[["allocerr"],["result",["allocerr"]]]]],[11,"dealloc","","",366,[[["nonnull",["u8"]],["self"],["layout"],["u8"]]]],[11,"realloc","","",366,[[["nonnull",["u8"]],["usize"],["self"],["layout"],["u8"]],[["allocerr"],["result",["allocerr"]]]]],[11,"alloc_zeroed","","",366,[[["self"],["layout"]],[["allocerr"],["result",["allocerr"]]]]],[11,"next_back","no_std_compat::collections::btree_set","",213,[[["self"]],[["t"],["option"]]]],[11,"next_back","no_std_compat::collections::binary_heap","",190,[[["self"]],[["t"],["option"]]]],[11,"next_back","no_std_compat::collections::btree_map","",197,[[["self"]],["option"]]],[11,"next_back","no_std_compat::prelude::v1::vec","",426,[[["self"]],["option"]]],[11,"next_back","no_std_compat::string","",425,[[["self"]],[["option",["char"]],["char"]]]],[11,"next_back","no_std_compat::collections::btree_map","",196,[[["self"]],[["option"],["k"]]]],[11,"next_back","no_std_compat::prelude::v1","",151,[[["self"]],["option"]]],[11,"nth_back","","",151,[[["self"],["usize"]],["option"]]],[11,"next_back","no_std_compat::collections::vec_deque","",222,[[["self"]],[["t"],["option"]]]],[11,"rfold","","",222,[[["acc"],["f"]],["acc"]]],[11,"try_rfold","","",222,[[["self"],["b"],["f"]],["r"]]],[11,"next_back","no_std_compat::collections::binary_heap","",193,[[["self"]],["option"]]],[11,"next_back","no_std_compat::collections::vec_deque","",224,[[["self"]],["option"]]],[11,"next_back","no_std_compat::collections::btree_map","",205,[[["self"]],[["option"],["v"]]]],[11,"next_back","no_std_compat::collections::linked_list","",216,[[["self"]],[["option"],["t"]]]],[11,"next_back","no_std_compat::collections::btree_map","",198,[[["self"]],["option"]]],[11,"next_back","","",204,[[["self"]],["option"]]],[11,"next_back","no_std_compat::collections::vec_deque","",223,[[["self"]],[["option"],["t"]]]],[11,"rfold","","",223,[[["acc"],["f"]],["acc"]]],[11,"next_back","no_std_compat::collections::btree_map","",201,[[["self"]],["option"]]],[11,"next_back","no_std_compat::collections::btree_set","",206,[[["self"]],[["t"],["option"]]]],[11,"next_back","no_std_compat::collections::vec_deque","",225,[[["self"]],["option"]]],[11,"next_back","no_std_compat::prelude::v1::vec","",427,[[["self"]],["option"]]],[11,"next_back","no_std_compat::collections::binary_heap","",191,[[["self"]],["option"]]],[11,"next_back","no_std_compat::collections::linked_list","",217,[[["self"]],["option"]]],[11,"next_back","no_std_compat::collections::btree_map","",199,[[["self"]],[["option"],["v"]]]],[11,"next_back","no_std_compat::prelude::v1::vec","",428,[[["self"]],["option"]]],[11,"next_back","no_std_compat::collections::btree_map","",200,[[["self"]],["option"]]],[11,"next_back","no_std_compat::collections::linked_list","",215,[[["self"]],[["t"],["option"]]]],[11,"next_back","no_std_compat::collections::btree_set","",212,[[["self"]],["option"]]],[11,"cmp","no_std_compat::borrow","",79,[[["self"],["cow"]],["ordering"]]],[11,"cmp","no_std_compat::collections","",211,[[["self"],["btreeset"]],["ordering"]]],[11,"cmp","no_std_compat::prelude::v1::vec","",153,[[["vec"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::sync","Comparison for two `Arc`s.",327,[[["self"],["arc"]],["ordering"]]],[11,"cmp","no_std_compat::rc","Comparison for two `Rc`s.",375,[[["rc"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::collections","",195,[[["btreemap"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::prelude::v1","",152,[[["self"],["string"]],["ordering"]]],[11,"cmp","","",151,[[["box"],["self"]],["ordering"]]],[11,"cmp","no_std_compat::collections","",221,[[["self"],["vecdeque"]],["ordering"]]],[11,"cmp","","",214,[[["self"],["linkedlist"]],["ordering"]]],[11,"deref_mut","no_std_compat::prelude::v1","",152,[[["self"]],["str"]]],[11,"deref_mut","","",151,[[["self"]],["t"]]],[11,"deref_mut","no_std_compat::prelude::v1::vec","",153,[[["self"]]]],[11,"deref_mut","no_std_compat::collections::binary_heap","",189,[[["self"]],["t"]]],[11,"default","no_std_compat::alloc","",366,[[],["global"]]],[11,"default","no_std_compat::collections","Creates an empty `BTreeMap<K, V>`.",195,[[],["btreemap"]]],[11,"default","no_std_compat::borrow","Creates an owned Cow<'a, B> with the default value for the…",79,[[],["cow"]]],[11,"default","no_std_compat::prelude::v1","Creates an empty `String`.",152,[[],["string"]]],[11,"default","no_std_compat::collections","Creates an empty `LinkedList<T>`.",214,[[],["linkedlist"]]],[11,"default","","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",211,[[],["btreeset"]]],[11,"default","no_std_compat::rc","Constructs a new `Weak<T>`, allocating memory for `T`…",376,[[],["weak"]]],[11,"default","no_std_compat::sync","Constructs a new `Weak<T>`, without allocating memory.…",328,[[],["weak"]]],[11,"default","no_std_compat::prelude::v1","",151,[[],[["box",["str"]],["str"]]]],[11,"default","","",151,[[],["box"]]],[11,"default","no_std_compat::collections","Creates an empty `VecDeque<T>`.",221,[[],["vecdeque"]]],[11,"default","no_std_compat::rc","Creates a new `Rc<T>`, with the `Default` value for `T`.",375,[[],["rc"]]],[11,"default","no_std_compat::collections","Creates an empty `BinaryHeap<T>`.",188,[[],["binaryheap"]]],[11,"default","no_std_compat::sync","Creates a new `Arc<T>`, with the `Default` value for `T`.",327,[[],["arc"]]],[11,"default","no_std_compat::prelude::v1::vec","Creates an empty `Vec<T>`.",153,[[],["vec"]]],[11,"default","no_std_compat::prelude::v1","Creates a `Box<T>`, with the `Default` value for T.",151,[[],["box"]]],[11,"call","","",151,[[["a"],["self"]]]],[11,"as_mut","","",151,[[["self"]],["t"]]],[11,"as_mut","no_std_compat::prelude::v1::vec","",153,[[["self"]],["vec"]]],[11,"as_mut","","",153,[[["self"]]]],[11,"as_mut","no_std_compat::prelude::v1","",152,[[["self"]],["str"]]],[11,"from_str","","",152,[[["str"]],[["result",["string"]],["string"]]]],[11,"add_assign","no_std_compat::borrow","",79,[[["self"],["str"]]]],[11,"add_assign","","",79,[[["str"],["self"],["cow",["str"]]]]],[11,"add_assign","no_std_compat::prelude::v1","",152,[[["str"],["self"]]]],[11,"finish","","",151,[[["self"]],["u64"]]],[11,"write","","",151,[[["self"]]]],[11,"write_u8","","",151,[[["self"],["u8"]]]],[11,"write_u16","","",151,[[["u16"],["self"]]]],[11,"write_u32","","",151,[[["self"],["u32"]]]],[11,"write_u64","","",151,[[["self"],["u64"]]]],[11,"write_u128","","",151,[[["self"],["u128"]]]],[11,"write_usize","","",151,[[["self"],["usize"]]]],[11,"write_i8","","",151,[[["self"],["i8"]]]],[11,"write_i16","","",151,[[["self"],["i16"]]]],[11,"write_i32","","",151,[[["self"],["i32"]]]],[11,"write_i64","","",151,[[["i64"],["self"]]]],[11,"write_i128","","",151,[[["self"],["i128"]]]],[11,"write_isize","","",151,[[["isize"],["self"]]]],[11,"index","","",152,[[["rangefrom",["usize"]],["self"],["usize"]],["str"]]],[11,"index","no_std_compat::collections","Returns a reference to the value corresponding to the…",195,[[["self"],["q"]],["v"]]],[11,"index","","",221,[[["self"],["usize"]],["a"]]],[11,"index","no_std_compat::prelude::v1","",152,[[["rangeto",["usize"]],["self"],["usize"]],["str"]]],[11,"index","","",152,[[["usize"],["self"],["range",["usize"]]],["str"]]],[11,"index","no_std_compat::prelude::v1::vec","",153,[[["i"],["self"]]]],[11,"index","no_std_compat::prelude::v1","",152,[[["usize"],["self"],["rangeinclusive",["usize"]]],["str"]]],[11,"index","","",152,[[["rangetoinclusive",["usize"]],["self"],["usize"]],["str"]]],[11,"index","","",152,[[["self"],["rangefull"]],["str"]]],[11,"eq","no_std_compat::borrow","",79,[[["self"],["string"]],["bool"]]],[11,"ne","","",79,[[["self"],["string"]],["bool"]]],[11,"eq","no_std_compat::collections","",214,[[["self"],["linkedlist"]],["bool"]]],[11,"ne","","",214,[[["self"],["linkedlist"]],["bool"]]],[11,"eq","","",221,[[["self"]],["bool"]]],[11,"eq","no_std_compat::borrow","",79,[[["cow"],["self"]],["bool"]]],[11,"eq","no_std_compat::collections","",221,[[["self"],["vec"]],["bool"]]],[11,"eq","no_std_compat::borrow","",79,[[["self"]],["bool"]]],[11,"ne","","",79,[[["self"]],["bool"]]],[11,"eq","no_std_compat::rc","Equality for two `Rc`s.",375,[[["rc"],["self"]],["bool"]]],[11,"ne","","Inequality for two `Rc`s.",375,[[["rc"],["self"]],["bool"]]],[11,"eq","no_std_compat::prelude::v1","",151,[[["box"],["self"]],["bool"]]],[11,"ne","","",151,[[["box"],["self"]],["bool"]]],[11,"eq","no_std_compat::collections","",28,[[["self"],["tryreserveerror"]],["bool"]]],[11,"ne","","",28,[[["self"],["tryreserveerror"]],["bool"]]],[11,"eq","no_std_compat::prelude::v1::vec","",153,[[["self"]],["bool"]]],[11,"ne","","",153,[[["self"]],["bool"]]],[11,"eq","no_std_compat::prelude::v1","",152,[[["str"],["self"]],["bool"]]],[11,"ne","","",152,[[["str"],["self"]],["bool"]]],[11,"eq","","",152,[[["self"],["cow"]],["bool"]]],[11,"ne","","",152,[[["self"],["cow"]],["bool"]]],[11,"eq","no_std_compat::borrow","",79,[[["self"]],["bool"]]],[11,"ne","","",79,[[["self"]],["bool"]]],[11,"eq","","",79,[[["str"],["self"]],["bool"]]],[11,"ne","","",79,[[["str"],["self"]],["bool"]]],[11,"eq","no_std_compat::collections","",195,[[["btreemap"],["self"]],["bool"]]],[11,"eq","","",211,[[["self"],["btreeset"]],["bool"]]],[11,"ne","","",211,[[["self"],["btreeset"]],["bool"]]],[11,"eq","no_std_compat::prelude::v1","",152,[[["str"],["self"]],["bool"]]],[11,"ne","","",152,[[["str"],["self"]],["bool"]]],[11,"eq","no_std_compat::collections","",221,[[["self"]],["bool"]]],[11,"eq","no_std_compat::prelude::v1::vec","",153,[[["self"],["vec"]],["bool"]]],[11,"ne","","",153,[[["self"],["vec"]],["bool"]]],[11,"eq","","",153,[[["self"]],["bool"]]],[11,"ne","","",153,[[["self"]],["bool"]]],[11,"eq","no_std_compat::collections","",221,[[["self"]],["bool"]]],[11,"eq","","",221,[[["self"]],["bool"]]],[11,"eq","no_std_compat::borrow","",79,[[["self"],["vec"]],["bool"]]],[11,"ne","","",79,[[["self"],["vec"]],["bool"]]],[11,"eq","no_std_compat::prelude::v1::vec","",153,[[["self"]],["bool"]]],[11,"ne","","",153,[[["self"]],["bool"]]],[11,"eq","no_std_compat::string","",423,[[["fromutf8error"],["self"]],["bool"]]],[11,"ne","","",423,[[["fromutf8error"],["self"]],["bool"]]],[11,"eq","no_std_compat::prelude::v1","",152,[[["self"],["string"]],["bool"]]],[11,"ne","","",152,[[["self"],["string"]],["bool"]]],[11,"eq","no_std_compat::collections","",221,[[["self"],["vecdeque"]],["bool"]]],[11,"eq","","",221,[[["self"]],["bool"]]],[11,"eq","no_std_compat::borrow","",79,[[["str"],["self"]],["bool"]]],[11,"ne","","",79,[[["str"],["self"]],["bool"]]],[11,"eq","no_std_compat::sync","Equality for two `Arc`s.",327,[[["self"],["arc"]],["bool"]]],[11,"ne","","Inequality for two `Arc`s.",327,[[["self"],["arc"]],["bool"]]],[11,"eq","no_std_compat::prelude::v1::vec","",153,[[["self"]],["bool"]]],[11,"ne","","",153,[[["self"]],["bool"]]],[11,"drop","no_std_compat::sync","Drops the `Weak` pointer.",328,[[["self"]]]],[11,"drop","no_std_compat::collections::binary_heap","",189,[[["self"]]]],[11,"drop","no_std_compat::prelude::v1","",151,[[["self"]]]],[11,"drop","no_std_compat::prelude::v1::vec","",426,[[["self"]]]],[11,"drop","no_std_compat::sync","Drops the `Arc`.",327,[[["self"]]]],[11,"drop","no_std_compat::prelude::v1::vec","",427,[[["self"]]]],[11,"drop","no_std_compat::collections","",195,[[["self"]]]],[11,"drop","no_std_compat::rc","Drops the `Rc`.",375,[[["self"]]]],[11,"drop","no_std_compat::prelude::v1::vec","",153,[[["self"]]]],[11,"drop","no_std_compat::collections","",214,[[["self"]]]],[11,"drop","no_std_compat::prelude::v1::vec","",429,[[["self"]]]],[11,"drop","no_std_compat::collections::binary_heap","Removes heap elements in heap order.",194,[[["self"]]]],[11,"drop","no_std_compat::collections::vec_deque","",225,[[["self"]]]],[11,"drop","no_std_compat::rc","Drops the `Weak` pointer.",376,[[["self"]]]],[11,"drop","no_std_compat::collections::linked_list","",220,[[["self"]]]],[11,"drop","no_std_compat::string","",425,[[["self"]]]],[11,"drop","no_std_compat::collections","",221,[[["self"]]]],[11,"drop","no_std_compat::collections::btree_map","",198,[[["self"]]]],[11,"drop","no_std_compat::prelude::v1::vec","",428,[[["self"]]]],[11,"index_mut","no_std_compat::collections","",221,[[["self"],["usize"]],["a"]]],[11,"index_mut","no_std_compat::prelude::v1","",152,[[["self"],["rangeto",["usize"]],["usize"]],["str"]]],[11,"index_mut","","",152,[[["self"],["rangefull"]],["str"]]],[11,"index_mut","","",152,[[["rangetoinclusive",["usize"]],["self"],["usize"]],["str"]]],[11,"index_mut","","",152,[[["self"],["range",["usize"]],["usize"]],["str"]]],[11,"index_mut","","",152,[[["self"],["rangeinclusive",["usize"]],["usize"]],["str"]]],[11,"index_mut","","",152,[[["self"],["usize"],["rangefrom",["usize"]]],["str"]]],[11,"index_mut","no_std_compat::prelude::v1::vec","",153,[[["self"],["i"]]]],[11,"add","no_std_compat::borrow","",79,[[["str"],["cow",["str"]]]]],[11,"add","","",79,[[["str"]]]],[11,"add","no_std_compat::prelude::v1","",152,[[["str"]],["string"]]],[11,"to_string","no_std_compat::borrow","",79,[[["self"]],["string"]]],[11,"to_string","no_std_compat::prelude::v1","",152,[[["self"]],["string"]]],[11,"try_from","no_std_compat::sync","",327,[[["arc"]],[["arc"],["result",["arc"]]]]],[11,"try_from","no_std_compat::prelude::v1","",151,[[["box"]],[["box"],["result",["box"]]]]],[11,"try_from","no_std_compat::rc","",375,[[["rc"]],[["result",["rc"]],["rc"]]]],[11,"borrow_mut","no_std_compat::prelude::v1","",152,[[["self"]],["str"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"borrow_mut","no_std_compat::prelude::v1::vec","",153,[[["self"]]]],[11,"fmt","no_std_compat::sync","",327,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::prelude::v1","",151,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","no_std_compat::rc","",375,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"is_some","no_std_compat::prelude::v1","Returns `true` if the option is a [`Some`] value.",13,[[["self"]],["bool"]]],[11,"is_none","","Returns `true` if the option is a [`None`] value.",13,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if the option is a [`Some`] value…",13,[[["self"],["u"]],["bool"]]],[11,"as_ref","","Converts from `&Option<T>` to `Option<&T>`.",13,[[["self"]],[["option"],["t"]]]],[11,"as_mut","","Converts from `&mut Option<T>` to `Option<&mut T>`.",13,[[["self"]],[["option"],["t"]]]],[11,"as_pin_ref","","Converts from [`Pin`]`<&Option<T>>` to…",13,[[["pin",["option"]],["option"]],[["option",["pin"]],["pin"]]]],[11,"as_pin_mut","","Converts from [`Pin`]`<&mut Option<T>>` to…",13,[[["pin",["option"]],["option"]],[["option",["pin"]],["pin"]]]],[11,"expect","","Returns the contained [`Some`] value, consuming the `self`…",13,[[["str"]],["t"]]],[11,"unwrap","","Returns the contained [`Some`] value, consuming the `self`…",13,[[],["t"]]],[11,"unwrap_or","","Returns the contained [`Some`] value or a provided default.",13,[[["t"]],["t"]]],[11,"unwrap_or_else","","Returns the contained [`Some`] value or computes it from a…",13,[[["f"]],["t"]]],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function…",13,[[["f"]],["option"]]],[11,"map_or","","Applies a function to the contained value (if any), or…",13,[[["u"],["f"]],["u"]]],[11,"map_or_else","","Applies a function to the contained value (if any), or…",13,[[["d"],["f"]],["u"]]],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`],…",13,[[["e"]],["result"]]],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`],…",13,[[["f"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",13,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained…",13,[[["self"]],["itermut"]]],[11,"and","","Returns [`None`] if the option is [`None`], otherwise…",13,[[["option"]],["option"]]],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise…",13,[[["f"]],["option"]]],[11,"filter","","Returns [`None`] if the option is [`None`], otherwise…",13,[[["p"]],["option"]]],[11,"or","","Returns the option if it contains a value, otherwise…",13,[[["option"]],["option"]]],[11,"or_else","","Returns the option if it contains a value, otherwise calls…",13,[[["f"]],["option"]]],[11,"xor","","Returns [`Some`] if exactly one of `self`, `optb` is…",13,[[["option"]],["option"]]],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then…",13,[[["self"],["t"]],["t"]]],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is…",13,[[["self"],["f"]],["t"]]],[11,"take","","Takes the value out of the option, leaving a [`None`] in…",13,[[["self"]],["option"]]],[11,"replace","","Replaces the actual value in the option by the value given…",13,[[["self"],["t"]],["option"]]],[11,"copied","","Maps an `Option<&T>` to an `Option<T>` by copying the…",13,[[],["option"]]],[11,"copied","","Maps an `Option<&mut T>` to an `Option<T>` by copying the…",13,[[],["option"]]],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the…",13,[[],["option"]]],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the…",13,[[],["option"]]],[11,"expect_none","","Consumes `self` while expecting [`None`] and returning…",13,[[["str"]]]],[11,"unwrap_none","","Consumes `self` while expecting [`None`] and returning…",13,[[]]],[11,"unwrap_or_default","","Returns the contained [`Some`] value or a default",13,[[],["t"]]],[11,"as_deref","","Converts from `Option<T>` (or `&Option<T>`) to…",13,[[["self"]],["option"]]],[11,"as_deref_mut","","Converts from `Option<T>` (or `&mut Option<T>`) to…",13,[[["self"]],["option"]]],[11,"transpose","","Transposes an `Option` of a [`Result`] into a [`Result`]…",13,[[],[["result",["option"]],["option"]]]],[11,"flatten","","Converts from `Option<Option<T>>` to `Option<T>`",13,[[],["option"]]],[11,"is_ok","","Returns `true` if the result is [`Ok`].",14,[[["self"]],["bool"]]],[11,"is_err","","Returns `true` if the result is [`Err`].",14,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if the result is an [`Ok`] value containing…",14,[[["self"],["u"]],["bool"]]],[11,"contains_err","","Returns `true` if the result is an [`Err`] value…",14,[[["f"],["self"]],["bool"]]],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",14,[[],["option"]]],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",14,[[],["option"]]],[11,"as_ref","","Converts from `&Result<T, E>` to `Result<&T, &E>`.",14,[[["self"]],[["result"],["t"],["e"]]]],[11,"as_mut","","Converts from `&mut Result<T, E>` to `Result<&mut T, &mut…",14,[[["self"]],[["e"],["result"],["t"]]]],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a…",14,[[["f"]],["result"]]],[11,"map_or","","Applies a function to the contained value (if any), or…",14,[[["u"],["f"]],["u"]]],[11,"map_or_else","","Maps a `Result<T, E>` to `U` by applying a function to a…",14,[[["d"],["f"]],["u"]]],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a…",14,[[["o"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",14,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained…",14,[[["self"]],["itermut"]]],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns…",14,[[["result"]],["result"]]],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the…",14,[[["f"]],["result"]]],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns…",14,[[["result"]],["result"]]],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the…",14,[[["o"]],["result"]]],[11,"unwrap_or","","Returns the contained [`Ok`] value or a provided default.",14,[[["t"]],["t"]]],[11,"unwrap_or_else","","Returns the contained [`Ok`] value or computes it from a…",14,[[["f"]],["t"]]],[11,"copied","","Maps a `Result<&T, E>` to a `Result<T, E>` by copying the…",14,[[],["result"]]],[11,"copied","","Maps a `Result<&mut T, E>` to a `Result<T, E>` by copying…",14,[[],["result"]]],[11,"cloned","","Maps a `Result<&T, E>` to a `Result<T, E>` by cloning the…",14,[[],["result"]]],[11,"cloned","","Maps a `Result<&mut T, E>` to a `Result<T, E>` by cloning…",14,[[],["result"]]],[11,"expect","","Returns the contained [`Ok`] value, consuming the `self`…",14,[[["str"]],["t"]]],[11,"unwrap","","Returns the contained [`Ok`] value, consuming the `self`…",14,[[],["t"]]],[11,"expect_err","","Returns the contained [`Err`] value, consuming the `self`…",14,[[["str"]],["e"]]],[11,"unwrap_err","","Returns the contained [`Err`] value, consuming the `self`…",14,[[],["e"]]],[11,"unwrap_or_default","","Returns the contained [`Ok`] value or a default",14,[[],["t"]]],[11,"into_ok","","Returns the contained [`Ok`] value, but never panics.",14,[[],["t"]]],[11,"as_deref","","Converts from `Result<T, E>` (or `&Result<T, E>`) to…",14,[[["self"]],[["result"],["e"]]]],[11,"as_deref_err","","Converts from `Result<T, E>` (or `&Result<T, E>`) to…",14,[[["self"]],[["t"],["result"]]]],[11,"as_deref_mut","","Converts from `Result<T, E>` (or `&mut Result<T, E>`) to…",14,[[["self"]],[["e"],["result"]]]],[11,"as_deref_mut_err","","Converts from `Result<T, E>` (or `&mut Result<T, E>`) to…",14,[[["self"]],[["result"],["t"]]]],[11,"transpose","","Transposes a `Result` of an `Option` into an `Option` of a…",14,[[],[["result"],["option",["result"]]]]],[11,"new","","Allocates memory on the heap and then places `x` into it.",151,[[["t"]],["box"]]],[11,"new_uninit","","Constructs a new box with uninitialized contents.",151,[[],[["box",["maybeuninit"]],["maybeuninit"]]]],[11,"new_zeroed","","Constructs a new `Box` with uninitialized contents, with…",151,[[],[["box",["maybeuninit"]],["maybeuninit"]]]],[11,"pin","","Constructs a new `Pin<Box<T>>`. If `T` does not implement…",151,[[["t"]],[["pin",["box"]],["box"]]]],[11,"new_uninit_slice","","Constructs a new boxed slice with uninitialized contents.",151,[[["usize"]],["box"]]],[11,"assume_init","","Converts to `Box<T>`.",151,[[],["box"]]],[11,"assume_init","","Converts to `Box<[T]>`.",151,[[],["box"]]],[11,"from_raw","","Constructs a box from a raw pointer.",151,[[],["box"]]],[11,"into_raw","","Consumes the `Box`, returning a wrapped raw pointer.",151,[[["box"]]]],[11,"into_raw_non_null","","Consumes the `Box`, returning the wrapped pointer as…",151,[[["box"]],["nonnull"]]],[11,"leak","","Consumes and leaks the `Box`, returning a mutable…",151,[[["box"]],["t"]]],[11,"into_pin","","Converts a `Box<T>` into a `Pin<Box<T>>`",151,[[["box"]],[["pin",["box"]],["box"]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",151,[[],[["box"],["box",["any"]],["result",["box","box"]]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",151,[[],[["box"],["box",["any"]],["result",["box","box"]]]]],[11,"new","","Creates a new empty `String`.",152,[[],["string"]]],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",152,[[["usize"]],["string"]]],[11,"from_utf8","","Converts a vector of bytes to a `String`.",152,[[["vec",["u8"]],["u8"]],[["fromutf8error"],["result",["string","fromutf8error"]],["string"]]]],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid…",152,[[],[["str"],["cow",["str"]]]]],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`,…",152,[[],[["string"],["fromutf16error"],["result",["string","fromutf16error"]]]]],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`,…",152,[[],["string"]]],[11,"into_raw_parts","","Decomposes a `String` into its raw components.",152,[[]]],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",152,[[["usize"]],["string"]]],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking…",152,[[["vec",["u8"]],["u8"]],["string"]]],[11,"into_bytes","","Converts a `String` into a byte vector.",152,[[],[["u8"],["vec",["u8"]]]]],[11,"as_str","","Extracts a string slice containing the entire `String`.",152,[[["self"]],["str"]]],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",152,[[["self"]],["str"]]],[11,"push_str","","Appends a given string slice onto the end of this `String`.",152,[[["str"],["self"]]]],[11,"capacity","","Returns this `String`'s capacity, in bytes.",152,[[["self"]],["usize"]]],[11,"reserve","","Ensures that this `String`'s capacity is at least…",152,[[["self"],["usize"]]]],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional`…",152,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",152,[[["self"],["usize"]],[["result",["tryreserveerror"]],["tryreserveerror"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",152,[[["self"],["usize"]],[["result",["tryreserveerror"]],["tryreserveerror"]]]],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",152,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of this `String` with a lower bound.",152,[[["self"],["usize"]]]],[11,"push","","Appends the given [`char`] to the end of this `String`.",152,[[["self"],["char"]]]],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",152,[[["self"]]]],[11,"truncate","","Shortens this `String` to the specified length.",152,[[["self"],["usize"]]]],[11,"pop","","Removes the last character from the string buffer and…",152,[[["self"]],[["option",["char"]],["char"]]]],[11,"remove","","Removes a [`char`] from this `String` at a byte position…",152,[[["self"],["usize"]],["char"]]],[11,"retain","","Retains only the characters specified by the predicate.",152,[[["self"],["f"]]]],[11,"insert","","Inserts a character into this `String` at a byte position.",152,[[["self"],["usize"],["char"]]]],[11,"insert_str","","Inserts a string slice into this `String` at a byte…",152,[[["str"],["self"],["usize"]]]],[11,"as_mut_vec","","Returns a mutable reference to the contents of this…",152,[[["self"]],["vec"]]],[11,"len","","Returns the length of this `String`, in bytes, not…",152,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if this `String` has a length of zero, and…",152,[[["self"]],["bool"]]],[11,"split_off","","Splits the string into two at the given index.",152,[[["self"],["usize"]],["string"]]],[11,"clear","","Truncates this `String`, removing all contents.",152,[[["self"]]]],[11,"drain","","Creates a draining iterator that removes the specified…",152,[[["self"],["r"]],["drain"]]],[11,"replace_range","","Removes the specified range in the string, and replaces it…",152,[[["str"],["self"],["r"]]]],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",152,[[],[["box",["str"]],["str"]]]],[11,"new","no_std_compat::prelude::v1::vec","Constructs a new, empty `Vec<T>`.",153,[[],["vec"]]],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified…",153,[[["usize"]],["vec"]]],[11,"into_raw_parts","","Decomposes a `Vec<T>` into its raw components.",153,[[]]],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of…",153,[[["usize"]],["vec"]]],[11,"capacity","","Returns the number of elements the vector can hold without…",153,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",153,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",153,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",153,[[["self"],["usize"]],[["result",["tryreserveerror"]],["tryreserveerror"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",153,[[["self"],["usize"]],[["result",["tryreserveerror"]],["tryreserveerror"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",153,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the vector with a lower bound.",153,[[["self"],["usize"]]]],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",153,[[],["box"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and…",153,[[["self"],["usize"]]]],[11,"as_slice","","Extracts a slice containing the entire vector.",153,[[["self"]]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",153,[[["self"]]]],[11,"as_ptr","","Returns a raw pointer to the vector's buffer.",153,[[["self"]]]],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the vector's buffer.",153,[[["self"]]]],[11,"set_len","","Forces the length of the vector to `new_len`.",153,[[["self"],["usize"]]]],[11,"swap_remove","","Removes an element from the vector and returns it.",153,[[["self"],["usize"]],["t"]]],[11,"insert","","Inserts an element at position `index` within the vector,…",153,[[["self"],["usize"],["t"]]]],[11,"remove","","Removes and returns the element at position `index` within…",153,[[["self"],["usize"]],["t"]]],[11,"retain","","Retains only the elements specified by the predicate.",153,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the…",153,[[["self"],["f"]]]],[11,"dedup_by","","Removes all but the first of consecutive elements in the…",153,[[["self"],["f"]]]],[11,"push","","Appends an element to the back of a collection.",153,[[["self"],["t"]]]],[11,"pop","","Removes the last element from a vector and returns it, or…",153,[[["self"]],["option"]]],[11,"append","","Moves all the elements of `other` into `Self`, leaving…",153,[[["vec"],["self"]]]],[11,"drain","","Creates a draining iterator that removes the specified…",153,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the vector, removing all values.",153,[[["self"]]]],[11,"len","","Returns the number of elements in the vector, also…",153,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector contains no elements.",153,[[["self"]],["bool"]]],[11,"split_off","","Splits the collection into two at the given index.",153,[[["self"],["usize"]],["vec"]]],[11,"resize_with","","Resizes the `Vec` in-place so that `len` is equal to…",153,[[["self"],["usize"],["f"]]]],[11,"leak","","Consumes and leaks the `Vec`, returning a mutable…",153,[[["vec"]]]],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to…",153,[[["self"],["usize"],["t"]]]],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",153,[[["self"]]]],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to…",153,[[["self"],["usize"]]]],[11,"dedup","","Removes consecutive repeated elements in the vector…",153,[[["self"]]]],[11,"remove_item","","Removes the first instance of `item` from the vector if…",153,[[["self"],["v"]],["option"]]],[11,"splice","","Creates a splicing iterator that replaces the specified…",153,[[["self"],["i"],["r"]],["splice"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if…",153,[[["self"],["f"]],["drainfilter"]]],[11,"new","no_std_compat::thread","Generates the base configuration for spawning a thread,…",154,[[],["builder"]]],[11,"name","","Names the thread-to-be. Currently the name is used for…",154,[[["string"]],["builder"]]],[11,"stack_size","","Sets the size of the stack (in bytes) for the new thread.",154,[[["usize"]],["builder"]]],[11,"spawn","","Spawns a new thread by taking ownership of the `Builder`,…",154,[[["f"]],[["joinhandle"],["result",["joinhandle","error"]],["error"]]]],[11,"spawn_unchecked","","Spawns a new thread without any lifetime restrictions by…",154,[[["f"]],[["joinhandle"],["result",["joinhandle","error"]],["error"]]]],[11,"as_u64","","This returns a numeric identifier for the thread…",155,[[["self"]],["u64"]]],[11,"unpark","","Atomically makes the handle's token available if it is not…",156,[[["self"]]]],[11,"id","","Gets the thread's unique identifier.",156,[[["self"]],["threadid"]]],[11,"name","","Gets the thread's name.",156,[[["self"]],[["str"],["option",["str"]]]]],[11,"thread","","Extracts a handle to the underlying thread.",157,[[["self"]],["thread"]]],[11,"join","","Waits for the associated thread to finish.",157,[[],[["box",["any"]],["result",["box"]]]]],[11,"with","","Acquires a reference to the value in this TLS key.",159,[[["self"],["f"]],["r"]]],[11,"try_with","","Acquires a reference to the value in this TLS key.",159,[[["self"],["f"]],[["result",["accesserror"]],["accesserror"]]]],[11,"new","","",160,[[],["key"]]],[11,"get","","",160,[[["self"],["f"]],[["t"],["option"]]]],[11,"new","","",161,[[],["key"]]],[11,"get","","",161,[[["self"]],[["t"],["option"]]]],[11,"capture","no_std_compat::backtrace","Capture a stack backtrace of the current thread.",163,[[],["backtrace"]]],[11,"force_capture","","Forcibly captures a full backtrace, regardless of…",163,[[],["backtrace"]]],[11,"status","","Returns the status of this backtrace, indicating whether…",163,[[["self"]],["backtracestatus"]]],[11,"new","no_std_compat::collections","Creates an empty `HashMap`.",164,[[],[["hashmap",["randomstate"]],["randomstate"]]]],[11,"with_capacity","","Creates an empty `HashMap` with the specified capacity.",164,[[["usize"]],[["hashmap",["randomstate"]],["randomstate"]]]],[11,"with_hasher","","Creates an empty `HashMap` which will use the given hash…",164,[[["s"]],["hashmap"]]],[11,"with_capacity_and_hasher","","Creates an empty `HashMap` with the specified capacity,…",164,[[["s"],["usize"]],["hashmap"]]],[11,"capacity","","Returns the number of elements the map can hold without…",164,[[["self"]],["usize"]]],[11,"keys","","An iterator visiting all keys in arbitrary order. The…",164,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values in arbitrary order. The…",164,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary…",164,[[["self"]],["valuesmut"]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary…",164,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary…",164,[[["self"]],["itermut"]]],[11,"len","","Returns the number of elements in the map.",164,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the map contains no elements.",164,[[["self"]],["bool"]]],[11,"drain","","Clears the map, returning all key-value pairs as an…",164,[[["self"]],["drain"]]],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the…",164,[[["self"]]]],[11,"hasher","","Returns a reference to the map's [`BuildHasher`].",164,[[["self"]],["s"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",164,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",164,[[["self"],["usize"]],[["result",["tryreserveerror"]],["tryreserveerror"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It…",164,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the map with a lower limit. It…",164,[[["self"],["usize"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for…",164,[[["self"],["k"]],["entry"]]],[11,"get","","Returns a reference to the value corresponding to the key.",164,[[["self"],["q"]],[["v"],["option"]]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied…",164,[[["self"],["q"]],["option"]]],[11,"contains_key","","Returns `true` if the map contains a value for the…",164,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",164,[[["self"],["q"]],[["v"],["option"]]]],[11,"insert","","Inserts a key-value pair into the map.",164,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key…",164,[[["self"],["q"]],["option"]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and…",164,[[["self"],["q"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",164,[[["self"],["f"]]]],[11,"raw_entry_mut","","Creates a raw entry builder for the HashMap.",164,[[["self"]],["rawentrybuildermut"]]],[11,"raw_entry","","Creates a raw immutable entry builder for the HashMap.",164,[[["self"]],["rawentrybuilder"]]],[11,"from_key","no_std_compat::collections::hash_map","Creates a `RawEntryMut` from the given key.",172,[[["q"]],["rawentrymut"]]],[11,"from_key_hashed_nocheck","","Creates a `RawEntryMut` from the given key and its hash.",172,[[["u64"],["q"]],["rawentrymut"]]],[11,"from_hash","","Creates a `RawEntryMut` from the given hash.",172,[[["u64"],["f"]],["rawentrymut"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default…",24,[[["k"],["v"]]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of…",24,[[["f"]]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry…",24,[[["f"]],["rawentrymut"]]],[11,"key","","Gets a reference to the key in the entry.",173,[[["self"]],["k"]]],[11,"key_mut","","Gets a mutable reference to the key in the entry.",173,[[["self"]],["k"]]],[11,"into_key","","Converts the entry into a mutable reference to the key in…",173,[[],["k"]]],[11,"get","","Gets a reference to the value in the entry.",173,[[["self"]],["v"]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the…",173,[[],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",173,[[["self"]],["v"]]],[11,"get_key_value","","Gets a reference to the key and value in the entry.",173,[[["self"]]]],[11,"get_key_value_mut","","Gets a mutable reference to the key and value in the entry.",173,[[["self"]]]],[11,"into_key_value","","Converts the OccupiedEntry into a mutable reference to the…",173,[[]]],[11,"insert","","Sets the value of the entry, and returns the entry's old…",173,[[["self"],["v"]],["v"]]],[11,"insert_key","","Sets the value of the entry, and returns the entry's old…",173,[[["self"],["k"]],["k"]]],[11,"remove","","Takes the value out of the entry, and returns it.",173,[[],["v"]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",173,[[]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key,…",174,[[["k"],["v"]]]],[11,"insert_hashed_nocheck","","Sets the value of the entry with the VacantEntry's key,…",174,[[["v"],["u64"],["k"]]]],[11,"from_key","","Access an entry by key.",175,[[["q"]],["option"]]],[11,"from_key_hashed_nocheck","","Access an entry by a key and its hash.",175,[[["u64"],["q"]],["option"]]],[11,"from_hash","","Access an entry by hash.",175,[[["u64"],["f"]],["option"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default…",25,[[["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of…",25,[[["f"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",25,[[["self"]],["k"]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry…",25,[[["f"]],["entry"]]],[11,"insert","","Sets the value of the entry, and returns an OccupiedEntry.",25,[[["v"]],["occupiedentry"]]],[11,"or_default","","Ensures a value is in the entry by inserting the default…",25,[[],["v"]]],[11,"key","","Gets a reference to the key in the entry.",176,[[["self"]],["k"]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",176,[[]]],[11,"get","","Gets a reference to the value in the entry.",176,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",176,[[["self"]],["v"]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the…",176,[[],["v"]]],[11,"insert","","Sets the value of the entry, and returns the entry's old…",176,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value out of the entry, and returns it.",176,[[],["v"]]],[11,"replace_entry","","Replaces the entry, returning the old key and value. The…",176,[[["v"]]]],[11,"replace_key","","Replaces the key in the hash map with the key used to…",176,[[],["k"]]],[11,"key","","Gets a reference to the key that would be used when…",177,[[["self"]],["k"]]],[11,"into_key","","Take ownership of the key.",177,[[],["k"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key,…",177,[[["v"]],["v"]]],[11,"new","","Constructs a new `RandomState` that is initialized with…",178,[[],["randomstate"]]],[11,"new","","Creates a new `DefaultHasher`.",179,[[],["defaulthasher"]]],[11,"new","no_std_compat::collections","Creates an empty `HashSet`.",180,[[],[["randomstate"],["hashset",["randomstate"]]]]],[11,"with_capacity","","Creates an empty `HashSet` with the specified capacity.",180,[[["usize"]],[["randomstate"],["hashset",["randomstate"]]]]],[11,"capacity","","Returns the number of elements the set can hold without…",180,[[["self"]],["usize"]]],[11,"iter","","An iterator visiting all elements in arbitrary order. The…",180,[[["self"]],["iter"]]],[11,"len","","Returns the number of elements in the set.",180,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no elements.",180,[[["self"]],["bool"]]],[11,"drain","","Clears the set, returning all elements in an iterator.",180,[[["self"]],["drain"]]],[11,"clear","","Clears the set, removing all values.",180,[[["self"]]]],[11,"with_hasher","","Creates a new empty hash set which will use the given…",180,[[["s"]],["hashset"]]],[11,"with_capacity_and_hasher","","Creates an empty `HashSet` with the specified capacity,…",180,[[["s"],["usize"]],["hashset"]]],[11,"hasher","","Returns a reference to the set's [`BuildHasher`].",180,[[["self"]],["s"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",180,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",180,[[["self"],["usize"]],[["result",["tryreserveerror"]],["tryreserveerror"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It…",180,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the set with a lower limit. It…",180,[[["self"],["usize"]]]],[11,"difference","","Visits the values representing the difference, i.e., the…",180,[[["self"],["hashset"]],["difference"]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference,…",180,[[["self"],["hashset"]],["symmetricdifference"]]],[11,"intersection","","Visits the values representing the intersection, i.e., the…",180,[[["self"],["hashset"]],["intersection"]]],[11,"union","","Visits the values representing the union, i.e., all the…",180,[[["self"],["hashset"]],["union"]]],[11,"contains","","Returns `true` if the set contains a value.",180,[[["self"],["q"]],["bool"]]],[11,"get","","Returns a reference to the value in the set, if any, that…",180,[[["self"],["q"]],[["option"],["t"]]]],[11,"get_or_insert","","Inserts the given `value` into the set if it is not…",180,[[["self"],["t"]],["t"]]],[11,"get_or_insert_owned","","Inserts an owned copy of the given `value` into the set if…",180,[[["self"],["q"]],["t"]]],[11,"get_or_insert_with","","Inserts a value computed from `f` into the set if the…",180,[[["self"],["f"],["q"]],["t"]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with…",180,[[["hashset"],["self"]],["bool"]]],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e.,…",180,[[["hashset"],["self"]],["bool"]]],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e.,…",180,[[["hashset"],["self"]],["bool"]]],[11,"insert","","Adds a value to the set.",180,[[["self"],["t"]],["bool"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if…",180,[[["self"],["t"]],["option"]]],[11,"remove","","Removes a value from the set. Returns whether the value…",180,[[["self"],["q"]],["bool"]]],[11,"take","","Removes and returns the value in the set, if any, that is…",180,[[["self"],["q"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",180,[[["self"],["f"]]]],[11,"cloned","no_std_compat::ops","Map a `Bound<&T>` to a `Bound<T>` by cloning the contents…",26,[[],["bound"]]],[11,"new","no_std_compat::collections","Creates an empty `BinaryHeap` as a max-heap.",188,[[],["binaryheap"]]],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.…",188,[[["usize"]],["binaryheap"]]],[11,"peek_mut","","Returns a mutable reference to the greatest item in the…",188,[[["self"]],[["peekmut"],["option",["peekmut"]]]]],[11,"pop","","Removes the greatest item from the binary heap and returns…",188,[[["self"]],["option"]]],[11,"push","","Pushes an item onto the binary heap.",188,[[["self"],["t"]]]],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted…",188,[[],["vec"]]],[11,"append","","Moves all the elements of `other` into `self`, leaving…",188,[[["binaryheap"],["self"]]]],[11,"drain_sorted","","Returns an iterator which retrieves elements in heap…",188,[[["self"]],["drainsorted"]]],[11,"iter","","Returns an iterator visiting all values in the underlying…",188,[[["self"]],["iter"]]],[11,"into_iter_sorted","","Returns an iterator which retrieves elements in heap…",188,[[],["intoitersorted"]]],[11,"peek","","Returns the greatest item in the binary heap, or `None` if…",188,[[["self"]],[["option"],["t"]]]],[11,"capacity","","Returns the number of elements the binary heap can hold…",188,[[["self"]],["usize"]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",188,[[["self"],["usize"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",188,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",188,[[["self"]]]],[11,"shrink_to","","Discards capacity with a lower bound.",188,[[["self"],["usize"]]]],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying…",188,[[],["vec"]]],[11,"len","","Returns the length of the binary heap.",188,[[["self"]],["usize"]]],[11,"is_empty","","Checks if the binary heap is empty.",188,[[["self"]],["bool"]]],[11,"drain","","Clears the binary heap, returning an iterator over the…",188,[[["self"]],["drain"]]],[11,"clear","","Drops all items from the binary heap.",188,[[["self"]]]],[11,"pop","no_std_compat::collections::binary_heap","Removes the peeked value from the heap and returns it.",189,[[["peekmut"]],["t"]]],[11,"new","no_std_compat::collections","Makes a new empty BTreeMap with a reasonable choice for B.",195,[[],["btreemap"]]],[11,"clear","","Clears the map, removing all elements.",195,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",195,[[["self"],["q"]],[["v"],["option"]]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied…",195,[[["self"],["q"]],["option"]]],[11,"first_key_value","","Returns the first key-value pair in the map. The key in…",195,[[["self"]],["option"]]],[11,"first_entry","","Returns the first entry in the map for in-place…",195,[[["self"]],[["option",["occupiedentry"]],["occupiedentry"]]]],[11,"last_key_value","","Returns the last key-value pair in the map. The key in…",195,[[["self"]],["option"]]],[11,"last_entry","","Returns the last entry in the map for in-place…",195,[[["self"]],[["option",["occupiedentry"]],["occupiedentry"]]]],[11,"contains_key","","Returns `true` if the map contains a value for the…",195,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",195,[[["self"],["q"]],[["v"],["option"]]]],[11,"insert","","Inserts a key-value pair into the map.",195,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key…",195,[[["self"],["q"]],["option"]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and…",195,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving…",195,[[["self"],["btreemap"]]]],[11,"range","","Constructs a double-ended iterator over a sub-range of…",195,[[["self"],["r"]],["range"]]],[11,"range_mut","","Constructs a mutable double-ended iterator over a…",195,[[["self"],["r"]],["rangemut"]]],[11,"entry","","Gets the given key's corresponding entry in the map for…",195,[[["self"],["k"]],["entry"]]],[11,"split_off","","Splits the collection into two at the given key. Returns…",195,[[["self"],["q"]],["btreemap"]]],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",195,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map,…",195,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",195,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map, in order by…",195,[[["self"]],["values"]]],[11,"values_mut","","Gets a mutable iterator over the values of the map, in…",195,[[["self"]],["valuesmut"]]],[11,"len","","Returns the number of elements in the map.",195,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the map contains no elements.",195,[[["self"]],["bool"]]],[11,"or_insert","no_std_compat::collections::btree_map","Ensures a value is in the entry by inserting the default…",27,[[["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of…",27,[[["f"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",27,[[["self"]],["k"]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry…",27,[[["f"]],["entry"]]],[11,"or_default","","Ensures a value is in the entry by inserting the default…",27,[[],["v"]]],[11,"key","","Gets a reference to the key that would be used when…",202,[[["self"]],["k"]]],[11,"into_key","","Take ownership of the key.",202,[[],["k"]]],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key,…",202,[[["v"]],["v"]]],[11,"key","","Gets a reference to the key in the entry.",203,[[["self"]],["k"]]],[11,"remove_entry","","Take ownership of the key and value from the map.",203,[[]]],[11,"get","","Gets a reference to the value in the entry.",203,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",203,[[["self"]],["v"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",203,[[],["v"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s…",203,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",203,[[],["v"]]],[11,"new","no_std_compat::collections","Makes a new `BTreeSet` with a reasonable choice of B.",211,[[],["btreeset"]]],[11,"range","","Constructs a double-ended iterator over a sub-range of…",211,[[["self"],["r"]],["range"]]],[11,"difference","","Visits the values representing the difference, i.e., the…",211,[[["self"],["btreeset"]],["difference"]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference,…",211,[[["self"],["btreeset"]],["symmetricdifference"]]],[11,"intersection","","Visits the values representing the intersection, i.e., the…",211,[[["self"],["btreeset"]],["intersection"]]],[11,"union","","Visits the values representing the union, i.e., all the…",211,[[["self"],["btreeset"]],["union"]]],[11,"clear","","Clears the set, removing all values.",211,[[["self"]]]],[11,"contains","","Returns `true` if the set contains a value.",211,[[["self"],["q"]],["bool"]]],[11,"get","","Returns a reference to the value in the set, if any, that…",211,[[["self"],["q"]],[["option"],["t"]]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with…",211,[[["self"],["btreeset"]],["bool"]]],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e.,…",211,[[["self"],["btreeset"]],["bool"]]],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e.,…",211,[[["self"],["btreeset"]],["bool"]]],[11,"first","","Returns a reference to the first value in the set, if any.…",211,[[["self"]],[["option"],["t"]]]],[11,"last","","Returns a reference to the last value in the set, if any.…",211,[[["self"]],[["option"],["t"]]]],[11,"pop_first","","Removes the first value from the set and returns it, if…",211,[[["self"]],["option"]]],[11,"pop_last","","Removes the last value from the set and returns it, if…",211,[[["self"]],["option"]]],[11,"insert","","Adds a value to the set.",211,[[["self"],["t"]],["bool"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if…",211,[[["self"],["t"]],["option"]]],[11,"remove","","Removes a value from the set. Returns whether the value…",211,[[["self"],["q"]],["bool"]]],[11,"take","","Removes and returns the value in the set, if any, that is…",211,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving…",211,[[["self"],["btreeset"]]]],[11,"split_off","","Splits the collection into two at the given key. Returns…",211,[[["self"],["q"]],["btreeset"]]],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet`…",211,[[["self"]],["iter"]]],[11,"len","","Returns the number of elements in the set.",211,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no elements.",211,[[["self"]],["bool"]]],[11,"new","","Creates an empty `LinkedList`.",214,[[],["linkedlist"]]],[11,"append","","Moves all elements from `other` to the end of the list.",214,[[["self"],["linkedlist"]]]],[11,"prepend","","Moves all elements from `other` to the begin of the list.",214,[[["self"],["linkedlist"]]]],[11,"iter","","Provides a forward iterator.",214,[[["self"]],["iter"]]],[11,"iter_mut","","Provides a forward iterator with mutable references.",214,[[["self"]],["itermut"]]],[11,"cursor_front","","Provides a cursor at the front element.",214,[[["self"]],["cursor"]]],[11,"cursor_front_mut","","Provides a cursor with editing operations at the front…",214,[[["self"]],["cursormut"]]],[11,"cursor_back","","Provides a cursor at the back element.",214,[[["self"]],["cursor"]]],[11,"cursor_back_mut","","Provides a cursor with editing operations at the back…",214,[[["self"]],["cursormut"]]],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",214,[[["self"]],["bool"]]],[11,"len","","Returns the length of the `LinkedList`.",214,[[["self"]],["usize"]]],[11,"clear","","Removes all elements from the `LinkedList`.",214,[[["self"]]]],[11,"contains","","Returns `true` if the `LinkedList` contains an element…",214,[[["t"],["self"]],["bool"]]],[11,"front","","Provides a reference to the front element, or `None` if…",214,[[["self"]],[["option"],["t"]]]],[11,"front_mut","","Provides a mutable reference to the front element, or…",214,[[["self"]],[["option"],["t"]]]],[11,"back","","Provides a reference to the back element, or `None` if the…",214,[[["self"]],[["option"],["t"]]]],[11,"back_mut","","Provides a mutable reference to the back element, or…",214,[[["self"]],[["option"],["t"]]]],[11,"push_front","","Adds an element first in the list.",214,[[["self"],["t"]]]],[11,"pop_front","","Removes the first element and returns it, or `None` if the…",214,[[["self"]],["option"]]],[11,"push_back","","Appends an element to the back of a list.",214,[[["self"],["t"]]]],[11,"pop_back","","Removes the last element from a list and returns it, or…",214,[[["self"]],["option"]]],[11,"split_off","","Splits the list into two at the given index. Returns…",214,[[["self"],["usize"]],["linkedlist"]]],[11,"remove","","Removes the element at the given index and returns it.",214,[[["self"],["usize"]],["t"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if…",214,[[["self"],["f"]],["drainfilter"]]],[11,"insert_next","no_std_compat::collections::linked_list","Inserts the given element just after the element most…",216,[[["self"],["t"]]]],[11,"peek_next","","Provides a reference to the next element, without changing…",216,[[["self"]],[["option"],["t"]]]],[11,"index","","Returns the cursor position index within the `LinkedList`.",218,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"move_next","","Moves the cursor to the next element of the `LinkedList`.",218,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the…",218,[[["self"]]]],[11,"current","","Returns a reference to the element that the cursor is…",218,[[["self"]],[["t"],["option"]]]],[11,"peek_next","","Returns a reference to the next element.",218,[[["self"]],[["t"],["option"]]]],[11,"peek_prev","","Returns a reference to the previous element.",218,[[["self"]],[["t"],["option"]]]],[11,"index","","Returns the cursor position index within the `LinkedList`.",219,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"move_next","","Moves the cursor to the next element of the `LinkedList`.",219,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the…",219,[[["self"]]]],[11,"current","","Returns a reference to the element that the cursor is…",219,[[["self"]],[["option"],["t"]]]],[11,"peek_next","","Returns a reference to the next element.",219,[[["self"]],[["option"],["t"]]]],[11,"peek_prev","","Returns a reference to the previous element.",219,[[["self"]],[["option"],["t"]]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",219,[[["self"]],["cursor"]]],[11,"insert_after","","Inserts a new element into the `LinkedList` after the…",219,[[["self"],["t"]]]],[11,"insert_before","","Inserts a new element into the `LinkedList` before the…",219,[[["self"],["t"]]]],[11,"remove_current","","Removes the current element from the `LinkedList`.",219,[[["self"]],["option"]]],[11,"splice_after","","Inserts the elements from the given `LinkedList` after the…",219,[[["self"],["linkedlist"]]]],[11,"splice_before","","Inserts the elements from the given `LinkedList` before…",219,[[["self"],["linkedlist"]]]],[11,"split_after","","Splits the list into two after the current element. This…",219,[[["self"]],["linkedlist"]]],[11,"split_before","","Splits the list into two before the current element. This…",219,[[["self"]],["linkedlist"]]],[11,"new","no_std_compat::collections","Creates an empty `VecDeque`.",221,[[],["vecdeque"]]],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least…",221,[[["usize"]],["vecdeque"]]],[11,"get","","Retrieves an element in the `VecDeque` by index.",221,[[["self"],["usize"]],[["option"],["t"]]]],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",221,[[["self"],["usize"]],[["option"],["t"]]]],[11,"swap","","Swaps elements at indices `i` and `j`.",221,[[["self"],["usize"]]]],[11,"capacity","","Returns the number of elements the `VecDeque` can hold…",221,[[["self"]],["usize"]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",221,[[["self"],["usize"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",221,[[["self"],["usize"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",221,[[["self"],["usize"]],[["result",["tryreserveerror"]],["tryreserveerror"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",221,[[["self"],["usize"]],[["result",["tryreserveerror"]],["tryreserveerror"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",221,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the `VecDeque` with a lower bound.",221,[[["self"],["usize"]]]],[11,"truncate","","Shortens the `VecDeque`, keeping the first `len` elements…",221,[[["self"],["usize"]]]],[11,"iter","","Returns a front-to-back iterator.",221,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable…",221,[[["self"]],["itermut"]]],[11,"as_slices","","Returns a pair of slices which contain, in order, the…",221,[[["self"]]]],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the…",221,[[["self"]]]],[11,"len","","Returns the number of elements in the `VecDeque`.",221,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",221,[[["self"]],["bool"]]],[11,"drain","","Creates a draining iterator that removes the specified…",221,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the `VecDeque`, removing all values.",221,[[["self"]]]],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal…",221,[[["t"],["self"]],["bool"]]],[11,"front","","Provides a reference to the front element, or `None` if…",221,[[["self"]],[["option"],["t"]]]],[11,"front_mut","","Provides a mutable reference to the front element, or…",221,[[["self"]],[["option"],["t"]]]],[11,"back","","Provides a reference to the back element, or `None` if the…",221,[[["self"]],[["option"],["t"]]]],[11,"back_mut","","Provides a mutable reference to the back element, or…",221,[[["self"]],[["option"],["t"]]]],[11,"pop_front","","Removes the first element and returns it, or `None` if the…",221,[[["self"]],["option"]]],[11,"pop_back","","Removes the last element from the `VecDeque` and returns…",221,[[["self"]],["option"]]],[11,"push_front","","Prepends an element to the `VecDeque`.",221,[[["self"],["t"]]]],[11,"push_back","","Appends an element to the back of the `VecDeque`.",221,[[["self"],["t"]]]],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and…",221,[[["self"],["usize"]],["option"]]],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and…",221,[[["self"],["usize"]],["option"]]],[11,"insert","","Inserts an element at `index` within the `VecDeque`,…",221,[[["self"],["usize"],["t"]]]],[11,"remove","","Removes and returns the element at `index` from the…",221,[[["self"],["usize"]],["option"]]],[11,"split_off","","Splits the `VecDeque` into two at the given index.",221,[[["self"],["usize"]],["vecdeque"]]],[11,"append","","Moves all the elements of `other` into `self`, leaving…",221,[[["vecdeque"],["self"]]]],[11,"retain","","Retains only the elements specified by the predicate.",221,[[["self"],["f"]]]],[11,"resize_with","","Modifies the `VecDeque` in-place so that `len()` is equal…",221,[[["self"],["usize"]]]],[11,"rotate_left","","Rotates the double-ended queue `mid` places to the left.",221,[[["self"],["usize"]]]],[11,"rotate_right","","Rotates the double-ended queue `k` places to the right.",221,[[["self"],["usize"]]]],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal…",221,[[["self"],["usize"],["t"]]]],[11,"is","no_std_compat::error","Returns `true` if the boxed type is the same as `T`",31,[[["self"]],["bool"]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type…",31,[[["self"]],[["option"],["t"]]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is…",31,[[["self"]],[["option"],["t"]]]],[11,"is","","Forwards to the method defined on the type `dyn Error`.",31,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `dyn Error`.",31,[[["self"]],[["option"],["t"]]]],[11,"downcast_mut","","Forwards to the method defined on the type `dyn Error`.",31,[[["self"]],[["option"],["t"]]]],[11,"is","","Forwards to the method defined on the type `dyn Error`.",31,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `dyn Error`.",31,[[["self"]],[["option"],["t"]]]],[11,"downcast_mut","","Forwards to the method defined on the type `dyn Error`.",31,[[["self"]],[["option"],["t"]]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",31,[[["error"],["box",["error"]]],[["box",["error"]],["result",["box","box"]],["box"]]]],[11,"chain","","Returns an iterator starting with the current error and…",31,[[["self"]],["chain"]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",31,[[["box",["error"]],["error"]],[["result",["box","box"]],["box",["error"]],["box"]]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",31,[[["box",["error"]],["error"]],[["box",["error"]],["result",["box","box"]],["box"]]]],[11,"from_ptr","no_std_compat::ffi","Wraps a raw C string with a safe C string wrapper.",234,[[],["cstr"]]],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",234,[[],[["frombyteswithnulerror"],["result",["cstr","frombyteswithnulerror"]],["cstr"]]]],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",234,[[],["cstr"]]],[11,"as_ptr","","Returns the inner pointer to this C string.",234,[[["self"]]]],[11,"to_bytes","","Converts this C string to a byte slice.",234,[[["self"]]]],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the…",234,[[["self"]]]],[11,"to_str","","Yields a [`&str`] slice if the `CStr` contains valid UTF-8.",234,[[["self"]],[["result",["str","utf8error"]],["str"],["utf8error"]]]],[11,"to_string_lossy","","Converts a `CStr` into a [`Cow`]`<`[`str`]`>`.",234,[[["self"]],[["str"],["cow",["str"]]]]],[11,"into_c_string","","Converts a [`Box`]`<CStr>` into a [`CString`] without…",234,[[["box",["cstr"]],["cstr"]],["cstring"]]],[11,"new","","Creates a new C-compatible string from a container of bytes.",235,[[["t"]],[["nulerror"],["cstring"],["result",["cstring","nulerror"]]]]],[11,"from_vec_unchecked","","Creates a C-compatible string by consuming a byte vector,…",235,[[["vec",["u8"]],["u8"]],["cstring"]]],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C…",235,[[],["cstring"]]],[11,"into_raw","","Consumes the `CString` and transfers ownership of the…",235,[[]]],[11,"into_string","","Converts the `CString` into a [`String`] if it contains…",235,[[],[["string"],["result",["string","intostringerror"]],["intostringerror"]]]],[11,"into_bytes","","Consumes the `CString` and returns the underlying byte…",235,[[],[["u8"],["vec",["u8"]]]]],[11,"into_bytes_with_nul","","Equivalent to the [`into_bytes`] function except that the…",235,[[],[["u8"],["vec",["u8"]]]]],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",235,[[["self"]]]],[11,"as_bytes_with_nul","","Equivalent to the [`as_bytes`] function except that the…",235,[[["self"]]]],[11,"as_c_str","","Extracts a [`CStr`] slice containing the entire string.",235,[[["self"]],["cstr"]]],[11,"into_boxed_c_str","","Converts this `CString` into a boxed [`CStr`].",235,[[],[["box",["cstr"]],["cstr"]]]],[11,"into_cstring","","Consumes this error, returning original [`CString`] which…",236,[[],["cstring"]]],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of…",236,[[["self"]],["utf8error"]]],[11,"nul_position","","Returns the position of the nul byte in the slice that…",237,[[["self"]],["usize"]]],[11,"into_vec","","Consumes this error, returning the underlying vector of…",237,[[],[["u8"],["vec",["u8"]]]]],[11,"new","","Coerces into an `OsStr` slice.",238,[[["s"]],["osstr"]]],[11,"to_str","","Yields a [`&str`] slice if the `OsStr` is valid Unicode.",238,[[["self"]],[["str"],["option",["str"]]]]],[11,"to_string_lossy","","Converts an `OsStr` to a [`Cow`]`<`[`str`]`>`.",238,[[["self"]],[["str"],["cow",["str"]]]]],[11,"to_os_string","","Copies the slice into an owned [`OsString`].",238,[[["self"]],["osstring"]]],[11,"is_empty","","Checks whether the `OsStr` is empty.",238,[[["self"]],["bool"]]],[11,"len","","Returns the length of this `OsStr`.",238,[[["self"]],["usize"]]],[11,"into_os_string","","Converts a [`Box`]`<OsStr>` into an [`OsString`] without…",238,[[["osstr"],["box",["osstr"]]],["osstring"]]],[11,"new","","Constructs a new empty `OsString`.",239,[[],["osstring"]]],[11,"as_os_str","","Converts to an [`OsStr`] slice.",239,[[["self"]],["osstr"]]],[11,"into_string","","Converts the `OsString` into a [`String`] if it contains…",239,[[],[["result",["string","osstring"]],["string"],["osstring"]]]],[11,"push","","Extends the string with the given [`&OsStr`] slice.",239,[[["self"],["t"]]]],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",239,[[["usize"]],["osstring"]]],[11,"clear","","Truncates the `OsString` to zero length.",239,[[["self"]]]],[11,"capacity","","Returns the capacity this `OsString` can hold without…",239,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more capacity…",239,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",239,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the `OsString` to match its length.",239,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the `OsString` with a lower bound.",239,[[["self"],["usize"]]]],[11,"into_boxed_os_str","","Converts this `OsString` into a boxed [`OsStr`].",239,[[],[["osstr"],["box",["osstr"]]]]],[11,"as_va_list","","Convert a `VaListImpl` into a `VaList` that is…",242,[[["self"]],["valist"]]],[11,"arg","","Advance to the next arg.",242,[[["self"]],["t"]]],[11,"with_copy","","Copies the `va_list` at the current location.",242,[[["self"],["f"]],["r"]]],[11,"open","no_std_compat::fs","Attempts to open a file in read-only mode.",243,[[["p"]],[["file"],["result",["file","error"]],["error"]]]],[11,"create","","Opens a file in write-only mode.",243,[[["p"]],[["file"],["result",["file","error"]],["error"]]]],[11,"with_options","","Returns a new OpenOptions object.",243,[[],["openoptions"]]],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",243,[[["self"]],[["error"],["result",["error"]]]]],[11,"sync_data","","This function is similar to [`sync_all`], except that it…",243,[[["self"]],[["error"],["result",["error"]]]]],[11,"set_len","","Truncates or extends the underlying file, updating the…",243,[[["self"],["u64"]],[["error"],["result",["error"]]]]],[11,"metadata","","Queries metadata about the underlying file.",243,[[["self"]],[["metadata"],["error"],["result",["metadata","error"]]]]],[11,"try_clone","","Creates a new `File` instance that shares the same…",243,[[["self"]],[["file"],["result",["file","error"]],["error"]]]],[11,"set_permissions","","Changes the permissions on the underlying file.",243,[[["permissions"],["self"]],[["error"],["result",["error"]]]]],[11,"file_type","","Returns the file type for this metadata.",244,[[["self"]],["filetype"]]],[11,"is_dir","","Returns `true` if this metadata is for a directory. The…",244,[[["self"]],["bool"]]],[11,"is_file","","Returns `true` if this metadata is for a regular file. The…",244,[[["self"]],["bool"]]],[11,"len","","Returns the size of the file, in bytes, this metadata is…",244,[[["self"]],["u64"]]],[11,"permissions","","Returns the permissions of the file this metadata is for.",244,[[["self"]],["permissions"]]],[11,"modified","","Returns the last modification time listed in this metadata.",244,[[["self"]],[["result",["systemtime","error"]],["systemtime"],["error"]]]],[11,"accessed","","Returns the last access time of this metadata.",244,[[["self"]],[["result",["systemtime","error"]],["systemtime"],["error"]]]],[11,"created","","Returns the creation time listed in this metadata.",244,[[["self"]],[["result",["systemtime","error"]],["systemtime"],["error"]]]],[11,"path","","Returns the full path to the file that this entry…",246,[[["self"]],["pathbuf"]]],[11,"metadata","","Returns the metadata for the file that this entry points at.",246,[[["self"]],[["metadata"],["error"],["result",["metadata","error"]]]]],[11,"file_type","","Returns the file type for the file that this entry points…",246,[[["self"]],[["result",["filetype","error"]],["filetype"],["error"]]]],[11,"file_name","","Returns the bare file name of this directory entry without…",246,[[["self"]],["osstring"]]],[11,"new","","Creates a blank new set of options ready for configuration.",247,[[],["openoptions"]]],[11,"read","","Sets the option for read access.",247,[[["self"],["bool"]],["openoptions"]]],[11,"write","","Sets the option for write access.",247,[[["self"],["bool"]],["openoptions"]]],[11,"append","","Sets the option for the append mode.",247,[[["self"],["bool"]],["openoptions"]]],[11,"truncate","","Sets the option for truncating a previous file.",247,[[["self"],["bool"]],["openoptions"]]],[11,"create","","Sets the option to create a new file, or open it if it…",247,[[["self"],["bool"]],["openoptions"]]],[11,"create_new","","Sets the option to create a new file, failing if it…",247,[[["self"],["bool"]],["openoptions"]]],[11,"open","","Opens a file at `path` with the options specified by `self`.",247,[[["self"],["p"]],[["file"],["result",["file","error"]],["error"]]]],[11,"readonly","","Returns `true` if these permissions describe a readonly…",248,[[["self"]],["bool"]]],[11,"set_readonly","","Modifies the readonly flag for this set of permissions. If…",248,[[["self"],["bool"]]]],[11,"is_dir","","Tests whether this file type represents a directory. The…",249,[[["self"]],["bool"]]],[11,"is_file","","Tests whether this file type represents a regular file.…",249,[[["self"]],["bool"]]],[11,"is_symlink","","Tests whether this file type represents a symbolic link.…",249,[[["self"]],["bool"]]],[11,"new","","Creates a new set of options with default mode/security…",250,[[],["dirbuilder"]]],[11,"recursive","","Indicates that directories should be created recursively,…",250,[[["self"],["bool"]],["dirbuilder"]]],[11,"create","","Creates the specified directory with the options…",250,[[["self"],["p"]],[["error"],["result",["error"]]]]],[11,"new","no_std_compat::io","Creates a new `IoSliceMut` wrapping a byte slice.",251,[[],["ioslicemut"]]],[11,"advance","","Advance the internal cursor of the slice.",251,[[["usize"]]]],[11,"new","","Creates a new `IoSlice` wrapping a byte slice.",252,[[],["ioslice"]]],[11,"advance","","Advance the internal cursor of the slice.",252,[[["usize"]]]],[11,"zeroing","","Returns a new `Initializer` which will zero out buffers.",253,[[],["initializer"]]],[11,"nop","","Returns a new `Initializer` which will not zero out buffers.",253,[[],["initializer"]]],[11,"should_initialize","","Indicates if a buffer should be initialized.",253,[[["self"]],["bool"]]],[11,"initialize","","Initializes a buffer if necessary.",253,[[["self"]]]],[11,"into_inner","","Consumes the `Chain`, returning the wrapped readers.",254,[[]]],[11,"get_ref","","Gets references to the underlying readers in this `Chain`.",254,[[["self"]]]],[11,"get_mut","","Gets mutable references to the underlying readers in this…",254,[[["self"]]]],[11,"limit","","Returns the number of bytes that can be read before this…",255,[[["self"]],["u64"]]],[11,"set_limit","","Sets the number of bytes that can be read before this…",255,[[["self"],["u64"]]]],[11,"into_inner","","Consumes the `Take`, returning the wrapped reader.",255,[[],["t"]]],[11,"get_ref","","Gets a reference to the underlying reader.",255,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying reader.",255,[[["self"]],["t"]]],[11,"error","","Returns the error which caused the call to `into_inner()`…",259,[[["self"]],["error"]]],[11,"into_inner","","Returns the buffered writer instance which generated the…",259,[[],["w"]]],[11,"new","","Creates a new `BufReader<R>` with a default buffer…",260,[[["r"]],["bufreader"]]],[11,"with_capacity","","Creates a new `BufReader<R>` with the specified buffer…",260,[[["usize"],["r"]],["bufreader"]]],[11,"get_ref","","Gets a reference to the underlying reader.",260,[[["self"]],["r"]]],[11,"get_mut","","Gets a mutable reference to the underlying reader.",260,[[["self"]],["r"]]],[11,"buffer","","Returns a reference to the internally buffered data.",260,[[["self"]]]],[11,"capacity","","Returns the number of bytes the internal buffer can hold…",260,[[["self"]],["usize"]]],[11,"into_inner","","Unwraps this `BufReader<R>`, returning the underlying…",260,[[],["r"]]],[11,"seek_relative","","Seeks relative to the current position. If the new…",260,[[["i64"],["self"]],[["error"],["result",["error"]]]]],[11,"new","","Creates a new `BufWriter<W>` with a default buffer…",261,[[["w"]],["bufwriter"]]],[11,"with_capacity","","Creates a new `BufWriter<W>` with the specified buffer…",261,[[["w"],["usize"]],["bufwriter"]]],[11,"get_ref","","Gets a reference to the underlying writer.",261,[[["self"]],["w"]]],[11,"get_mut","","Gets a mutable reference to the underlying writer.",261,[[["self"]],["w"]]],[11,"buffer","","Returns a reference to the internally buffered data.",261,[[["self"]]]],[11,"capacity","","Returns the number of bytes the internal buffer can hold…",261,[[["self"]],["usize"]]],[11,"into_inner","","Unwraps this `BufWriter<W>`, returning the underlying…",261,[[],[["intoinnererror",["bufwriter"]],["result",["intoinnererror"]]]]],[11,"new","","Creates a new `LineWriter`.",262,[[["w"]],["linewriter"]]],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for…",262,[[["w"],["usize"]],["linewriter"]]],[11,"get_ref","","Gets a reference to the underlying writer.",262,[[["self"]],["w"]]],[11,"get_mut","","Gets a mutable reference to the underlying writer.",262,[[["self"]],["w"]]],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",262,[[],[["intoinnererror",["linewriter"]],["result",["intoinnererror"]]]]],[11,"new","","Creates a new cursor wrapping the provided underlying…",263,[[["t"]],["cursor"]]],[11,"into_inner","","Consumes this cursor, returning the underlying value.",263,[[],["t"]]],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",263,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying value in this…",263,[[["self"]],["t"]]],[11,"position","","Returns the current position of this cursor.",263,[[["self"]],["u64"]]],[11,"set_position","","Sets the position of this cursor.",263,[[["self"],["u64"]]]],[11,"new","","Creates a new I/O error from a known kind of error as well…",264,[[["errorkind"],["e"]],["error"]]],[11,"last_os_error","","Returns an error representing the last OS error which…",264,[[],["error"]]],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS…",264,[[["i32"]],["error"]]],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",264,[[["self"]],[["option",["i32"]],["i32"]]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this…",264,[[["self"]],[["error"],["option",["error"]]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by…",264,[[["self"]],[["error"],["option",["error"]]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",264,[[],[["option",["box"]],["box",["error"]]]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",264,[[["self"]],["errorkind"]]],[11,"lock","","Locks this handle to the standard error stream, returning…",265,[[["self"]],["stderrlock"]]],[11,"lock","","Locks this handle to the standard input stream, returning…",266,[[["self"]],["stdinlock"]]],[11,"read_line","","Locks this handle and reads a line of input, appending it…",266,[[["string"],["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"lock","","Locks this handle to the standard output stream, returning…",267,[[["self"]],["stdoutlock"]]],[11,"new","no_std_compat::net","Creates a new socket address from an [IP address] and a…",39,[[["ipaddr"],["u16"]],["socketaddr"]]],[11,"ip","","Returns the IP address associated with this socket address.",39,[[["self"]],["ipaddr"]]],[11,"set_ip","","Changes the IP address associated with this socket address.",39,[[["ipaddr"],["self"]]]],[11,"port","","Returns the port number associated with this socket address.",39,[[["self"]],["u16"]]],[11,"set_port","","Changes the port number associated with this socket address.",39,[[["u16"],["self"]]]],[11,"is_ipv4","","Returns [`true`] if the [IP address] in this `SocketAddr`…",39,[[["self"]],["bool"]]],[11,"is_ipv6","","Returns [`true`] if the [IP address] in this `SocketAddr`…",39,[[["self"]],["bool"]]],[11,"new","","Creates a new socket address from an [IPv4 address] and a…",274,[[["u16"],["ipv4addr"]],["socketaddrv4"]]],[11,"ip","","Returns the IP address associated with this socket address.",274,[[["self"]],["ipv4addr"]]],[11,"set_ip","","Changes the IP address associated with this socket address.",274,[[["self"],["ipv4addr"]]]],[11,"port","","Returns the port number associated with this socket address.",274,[[["self"]],["u16"]]],[11,"set_port","","Changes the port number associated with this socket address.",274,[[["u16"],["self"]]]],[11,"new","","Creates a new socket address from an [IPv6 address], a…",275,[[["u32"],["u16"],["ipv6addr"]],["socketaddrv6"]]],[11,"ip","","Returns the IP address associated with this socket address.",275,[[["self"]],["ipv6addr"]]],[11,"set_ip","","Changes the IP address associated with this socket address.",275,[[["self"],["ipv6addr"]]]],[11,"port","","Returns the port number associated with this socket address.",275,[[["self"]],["u16"]]],[11,"set_port","","Changes the port number associated with this socket address.",275,[[["u16"],["self"]]]],[11,"flowinfo","","Returns the flow information associated with this address.",275,[[["self"]],["u32"]]],[11,"set_flowinfo","","Changes the flow information associated with this socket…",275,[[["self"],["u32"]]]],[11,"scope_id","","Returns the scope ID associated with this address.",275,[[["self"]],["u32"]]],[11,"set_scope_id","","Changes the scope ID associated with this socket address.",275,[[["self"],["u32"]]]],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address.",41,[[["self"]],["bool"]]],[11,"is_loopback","","Returns [`true`] if this is a loopback address.",41,[[["self"]],["bool"]]],[11,"is_global","","Returns [`true`] if the address appears to be globally…",41,[[["self"]],["bool"]]],[11,"is_multicast","","Returns [`true`] if this is a multicast address.",41,[[["self"]],["bool"]]],[11,"is_documentation","","Returns [`true`] if this address is in a range designated…",41,[[["self"]],["bool"]]],[11,"is_ipv4","","Returns [`true`] if this address is an [IPv4 address], and…",41,[[["self"]],["bool"]]],[11,"is_ipv6","","Returns [`true`] if this address is an [IPv6 address], and…",41,[[["self"]],["bool"]]],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",276,[[["u8"]],["ipv4addr"]]],[18,"LOCALHOST","","An IPv4 address with the address pointing to localhost:…",276,null],[18,"UNSPECIFIED","","An IPv4 address representing an unspecified address: 0.0.0.0",276,null],[18,"BROADCAST","","An IPv4 address representing the broadcast address:…",276,null],[11,"octets","","Returns the four eight-bit integers that make up this…",276,[[["self"]]]],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address…",276,[[["self"]],["bool"]]],[11,"is_loopback","","Returns [`true`] if this is a loopback address…",276,[[["self"]],["bool"]]],[11,"is_private","","Returns [`true`] if this is a private address.",276,[[["self"]],["bool"]]],[11,"is_link_local","","Returns [`true`] if the address is link-local…",276,[[["self"]],["bool"]]],[11,"is_global","","Returns [`true`] if the address appears to be globally…",276,[[["self"]],["bool"]]],[11,"is_shared","","Returns [`true`] if this address is part of the Shared…",276,[[["self"]],["bool"]]],[11,"is_ietf_protocol_assignment","","Returns [`true`] if this address is part of…",276,[[["self"]],["bool"]]],[11,"is_benchmarking","","Returns [`true`] if this address part of the…",276,[[["self"]],["bool"]]],[11,"is_reserved","","Returns [`true`] if this address is reserved by IANA for…",276,[[["self"]],["bool"]]],[11,"is_multicast","","Returns [`true`] if this is a multicast address…",276,[[["self"]],["bool"]]],[11,"is_broadcast","","Returns [`true`] if this is a broadcast address…",276,[[["self"]],["bool"]]],[11,"is_documentation","","Returns [`true`] if this address is in a range designated…",276,[[["self"]],["bool"]]],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible [IPv6 address].",276,[[["self"]],["ipv6addr"]]],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped [IPv6 address].",276,[[["self"]],["ipv6addr"]]],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",277,[[["u16"]],["ipv6addr"]]],[18,"LOCALHOST","","An IPv6 address representing localhost: `::1`.",277,null],[18,"UNSPECIFIED","","An IPv6 address representing the unspecified address: `::`",277,null],[11,"segments","","Returns the eight 16-bit segments that make up this address.",277,[[["self"]]]],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (::).",277,[[["self"]],["bool"]]],[11,"is_loopback","","Returns [`true`] if this is a loopback address (::1).",277,[[["self"]],["bool"]]],[11,"is_global","","Returns [`true`] if the address appears to be globally…",277,[[["self"]],["bool"]]],[11,"is_unique_local","","Returns [`true`] if this is a unique local address…",277,[[["self"]],["bool"]]],[11,"is_unicast_link_local_strict","","Returns [`true`] if the address is a unicast link-local…",277,[[["self"]],["bool"]]],[11,"is_unicast_link_local","","Returns [`true`] if the address is a unicast link-local…",277,[[["self"]],["bool"]]],[11,"is_unicast_site_local","","Returns [`true`] if this is a deprecated unicast…",277,[[["self"]],["bool"]]],[11,"is_documentation","","Returns [`true`] if this is an address reserved for…",277,[[["self"]],["bool"]]],[11,"is_unicast_global","","Returns [`true`] if the address is a globally routable…",277,[[["self"]],["bool"]]],[11,"multicast_scope","","Returns the address's multicast scope if the address is…",277,[[["self"]],[["ipv6multicastscope"],["option",["ipv6multicastscope"]]]]],[11,"is_multicast","","Returns [`true`] if this is a multicast address (ff00::/8).",277,[[["self"]],["bool"]]],[11,"to_ipv4","","Converts this address to an [IPv4 address]. Returns…",277,[[["self"]],[["option",["ipv4addr"]],["ipv4addr"]]]],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address…",277,[[["self"]]]],[11,"bind","","Creates a new `TcpListener` which will be bound to the…",280,[[["a"]],[["tcplistener"],["error"],["result",["tcplistener","error"]]]]],[11,"local_addr","","Returns the local socket address of this listener.",280,[[["self"]],[["socketaddr"],["result",["socketaddr","error"]],["error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",280,[[["self"]],[["tcplistener"],["error"],["result",["tcplistener","error"]]]]],[11,"accept","","Accept a new incoming connection from this listener.",280,[[["self"]],[["error"],["result",["error"]]]]],[11,"incoming","","Returns an iterator over the connections being received on…",280,[[["self"]],["incoming"]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",280,[[["u32"],["self"]],[["error"],["result",["error"]]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",280,[[["self"]],[["result",["u32","error"]],["u32"],["error"]]]],[11,"set_only_v6","","",280,[[["self"],["bool"]],[["error"],["result",["error"]]]]],[11,"only_v6","","",280,[[["self"]],[["bool"],["error"],["result",["bool","error"]]]]],[11,"take_error","","Gets the value of the `SO_ERROR` option on this socket.",280,[[["self"]],[["option",["error"]],["result",["option","error"]],["error"]]]],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",280,[[["self"],["bool"]],[["error"],["result",["error"]]]]],[11,"connect","","Opens a TCP connection to a remote host.",281,[[["a"]],[["tcpstream"],["result",["tcpstream","error"]],["error"]]]],[11,"connect_timeout","","Opens a TCP connection to a remote host with a timeout.",281,[[["socketaddr"],["duration"]],[["tcpstream"],["result",["tcpstream","error"]],["error"]]]],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP…",281,[[["self"]],[["socketaddr"],["result",["socketaddr","error"]],["error"]]]],[11,"local_addr","","Returns the socket address of the local half of this TCP…",281,[[["self"]],[["socketaddr"],["result",["socketaddr","error"]],["error"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this…",281,[[["shutdown"],["self"]],[["error"],["result",["error"]]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",281,[[["self"]],[["tcpstream"],["result",["tcpstream","error"]],["error"]]]],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",281,[[["option",["duration"]],["duration"],["self"]],[["error"],["result",["error"]]]]],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",281,[[["option",["duration"]],["duration"],["self"]],[["error"],["result",["error"]]]]],[11,"read_timeout","","Returns the read timeout of this socket.",281,[[["self"]],[["option",["duration"]],["result",["option","error"]],["error"]]]],[11,"write_timeout","","Returns the write timeout of this socket.",281,[[["self"]],[["option",["duration"]],["result",["option","error"]],["error"]]]],[11,"peek","","Receives data on the socket from the remote address to…",281,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",281,[[["self"],["bool"]],[["error"],["result",["error"]]]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",281,[[["self"]],[["bool"],["error"],["result",["bool","error"]]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",281,[[["u32"],["self"]],[["error"],["result",["error"]]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",281,[[["self"]],[["result",["u32","error"]],["u32"],["error"]]]],[11,"take_error","","Gets the value of the `SO_ERROR` option on this socket.",281,[[["self"]],[["option",["error"]],["result",["option","error"]],["error"]]]],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",281,[[["self"],["bool"]],[["error"],["result",["error"]]]]],[11,"bind","","Creates a UDP socket from the given address.",282,[[["a"]],[["error"],["result",["udpsocket","error"]],["udpsocket"]]]],[11,"recv_from","","Receives a single datagram message on the socket. On…",282,[[["self"]],[["result",["error"]],["error"]]]],[11,"peek_from","","Receives a single datagram message on the socket, without…",282,[[["self"]],[["result",["error"]],["error"]]]],[11,"send_to","","Sends data on the socket to the given address. On success,…",282,[[["a"],["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"peer_addr","","Returns the socket address of the remote peer this socket…",282,[[["self"]],[["socketaddr"],["result",["socketaddr","error"]],["error"]]]],[11,"local_addr","","Returns the socket address that this socket was created…",282,[[["self"]],[["socketaddr"],["result",["socketaddr","error"]],["error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",282,[[["self"]],[["error"],["result",["udpsocket","error"]],["udpsocket"]]]],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",282,[[["option",["duration"]],["duration"],["self"]],[["error"],["result",["error"]]]]],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",282,[[["option",["duration"]],["duration"],["self"]],[["error"],["result",["error"]]]]],[11,"read_timeout","","Returns the read timeout of this socket.",282,[[["self"]],[["option",["duration"]],["result",["option","error"]],["error"]]]],[11,"write_timeout","","Returns the write timeout of this socket.",282,[[["self"]],[["option",["duration"]],["result",["option","error"]],["error"]]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",282,[[["self"],["bool"]],[["error"],["result",["error"]]]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",282,[[["self"]],[["bool"],["error"],["result",["bool","error"]]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this…",282,[[["self"],["bool"]],[["error"],["result",["error"]]]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this…",282,[[["self"]],[["bool"],["error"],["result",["bool","error"]]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this…",282,[[["u32"],["self"]],[["error"],["result",["error"]]]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this…",282,[[["self"]],[["result",["u32","error"]],["u32"],["error"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for…",282,[[["self"],["bool"]],[["error"],["result",["error"]]]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for…",282,[[["self"]],[["bool"],["error"],["result",["bool","error"]]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",282,[[["u32"],["self"]],[["error"],["result",["error"]]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",282,[[["self"]],[["result",["u32","error"]],["u32"],["error"]]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",282,[[["self"],["ipv4addr"]],[["error"],["result",["error"]]]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",282,[[["ipv6addr"],["u32"],["self"]],[["error"],["result",["error"]]]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",282,[[["self"],["ipv4addr"]],[["error"],["result",["error"]]]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",282,[[["ipv6addr"],["u32"],["self"]],[["error"],["result",["error"]]]]],[11,"take_error","","Gets the value of the `SO_ERROR` option on this socket.",282,[[["self"]],[["option",["error"]],["result",["option","error"]],["error"]]]],[11,"connect","","Connects this UDP socket to a remote address, allowing the…",282,[[["a"],["self"]],[["error"],["result",["error"]]]]],[11,"send","","Sends data on the socket to the remote address to which it…",282,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"recv","","Receives a single datagram message on the socket from the…",282,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"peek","","Receives single datagram on the socket from the remote…",282,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",282,[[["self"],["bool"]],[["error"],["result",["error"]]]]],[11,"min_value","no_std_compat::num","Returns the smallest value that can be represented by this…",43,[[],[["wrapping",["usize"]],["usize"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",43,[[],[["wrapping",["usize"]],["usize"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",43,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",43,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",43,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",43,[[["u32"]],[["wrapping",["usize"]],["usize"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",43,[[["u32"]],[["wrapping",["usize"]],["usize"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",43,[[],[["wrapping",["usize"]],["usize"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",43,[[],[["wrapping",["usize"]],["usize"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",43,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",43,[[["wrapping",["usize"]],["usize"]],[["wrapping",["usize"]],["usize"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",43,[[],[["wrapping",["usize"]],["usize"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",43,[[],[["wrapping",["usize"]],["usize"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",43,[[["u32"]],[["wrapping",["usize"]],["usize"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",43,[[],[["wrapping",["u8"]],["u8"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",43,[[],[["wrapping",["u8"]],["u8"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",43,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",43,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",43,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",43,[[["u32"]],[["wrapping",["u8"]],["u8"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",43,[[["u32"]],[["wrapping",["u8"]],["u8"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",43,[[],[["wrapping",["u8"]],["u8"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",43,[[],[["wrapping",["u8"]],["u8"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",43,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",43,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",43,[[],[["wrapping",["u8"]],["u8"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",43,[[],[["wrapping",["u8"]],["u8"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",43,[[["u32"]],[["wrapping",["u8"]],["u8"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",43,[[],[["u16"],["wrapping",["u16"]]]]],[11,"max_value","","Returns the largest value that can be represented by this…",43,[[],[["u16"],["wrapping",["u16"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",43,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",43,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",43,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",43,[[["u32"]],[["u16"],["wrapping",["u16"]]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",43,[[["u32"]],[["u16"],["wrapping",["u16"]]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",43,[[],[["u16"],["wrapping",["u16"]]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",43,[[],[["u16"],["wrapping",["u16"]]]]],[11,"from_be","","Converts an integer from big endian to the target's…",43,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"from_le","","Converts an integer from little endian to the target's…",43,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",43,[[],[["u16"],["wrapping",["u16"]]]]],[11,"to_le","","Converts `self` to little endian from the target's…",43,[[],[["u16"],["wrapping",["u16"]]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",43,[[["u32"]],[["u16"],["wrapping",["u16"]]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",43,[[],[["u32"],["wrapping",["u32"]]]]],[11,"max_value","","Returns the largest value that can be represented by this…",43,[[],[["u32"],["wrapping",["u32"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",43,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",43,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",43,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",43,[[["u32"]],[["u32"],["wrapping",["u32"]]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",43,[[["u32"]],[["u32"],["wrapping",["u32"]]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",43,[[],[["u32"],["wrapping",["u32"]]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",43,[[],[["u32"],["wrapping",["u32"]]]]],[11,"from_be","","Converts an integer from big endian to the target's…",43,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"from_le","","Converts an integer from little endian to the target's…",43,[[["u32"],["wrapping",["u32"]]],[["u32"],["wrapping",["u32"]]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",43,[[],[["u32"],["wrapping",["u32"]]]]],[11,"to_le","","Converts `self` to little endian from the target's…",43,[[],[["u32"],["wrapping",["u32"]]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",43,[[["u32"]],[["u32"],["wrapping",["u32"]]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",43,[[],[["wrapping",["u64"]],["u64"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",43,[[],[["wrapping",["u64"]],["u64"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",43,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",43,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",43,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",43,[[["u32"]],[["wrapping",["u64"]],["u64"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",43,[[["u32"]],[["wrapping",["u64"]],["u64"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",43,[[],[["wrapping",["u64"]],["u64"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",43,[[],[["wrapping",["u64"]],["u64"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",43,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",43,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",43,[[],[["wrapping",["u64"]],["u64"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",43,[[],[["wrapping",["u64"]],["u64"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",43,[[["u32"]],[["wrapping",["u64"]],["u64"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",43,[[],[["wrapping",["u128"]],["u128"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",43,[[],[["wrapping",["u128"]],["u128"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",43,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",43,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",43,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",43,[[["u32"]],[["wrapping",["u128"]],["u128"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",43,[[["u32"]],[["wrapping",["u128"]],["u128"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",43,[[],[["wrapping",["u128"]],["u128"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",43,[[],[["wrapping",["u128"]],["u128"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",43,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",43,[[["wrapping",["u128"]],["u128"]],[["wrapping",["u128"]],["u128"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",43,[[],[["wrapping",["u128"]],["u128"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",43,[[],[["wrapping",["u128"]],["u128"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",43,[[["u32"]],[["wrapping",["u128"]],["u128"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",43,[[],[["isize"],["wrapping",["isize"]]]]],[11,"max_value","","Returns the largest value that can be represented by this…",43,[[],[["isize"],["wrapping",["isize"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",43,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",43,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",43,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",43,[[["u32"]],[["isize"],["wrapping",["isize"]]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",43,[[["u32"]],[["isize"],["wrapping",["isize"]]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",43,[[],[["isize"],["wrapping",["isize"]]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",43,[[],[["isize"],["wrapping",["isize"]]]]],[11,"from_be","","Converts an integer from big endian to the target's…",43,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"from_le","","Converts an integer from little endian to the target's…",43,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",43,[[],[["isize"],["wrapping",["isize"]]]]],[11,"to_le","","Converts `self` to little endian from the target's…",43,[[],[["isize"],["wrapping",["isize"]]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",43,[[["u32"]],[["isize"],["wrapping",["isize"]]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",43,[[],[["wrapping",["i8"]],["i8"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",43,[[],[["wrapping",["i8"]],["i8"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",43,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",43,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",43,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",43,[[["u32"]],[["wrapping",["i8"]],["i8"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",43,[[["u32"]],[["wrapping",["i8"]],["i8"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",43,[[],[["wrapping",["i8"]],["i8"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",43,[[],[["wrapping",["i8"]],["i8"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",43,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",43,[[["wrapping",["i8"]],["i8"]],[["wrapping",["i8"]],["i8"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",43,[[],[["wrapping",["i8"]],["i8"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",43,[[],[["wrapping",["i8"]],["i8"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",43,[[["u32"]],[["wrapping",["i8"]],["i8"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",43,[[],[["wrapping",["i16"]],["i16"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",43,[[],[["wrapping",["i16"]],["i16"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",43,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",43,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",43,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",43,[[["u32"]],[["wrapping",["i16"]],["i16"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",43,[[["u32"]],[["wrapping",["i16"]],["i16"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",43,[[],[["wrapping",["i16"]],["i16"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",43,[[],[["wrapping",["i16"]],["i16"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",43,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",43,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",43,[[],[["wrapping",["i16"]],["i16"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",43,[[],[["wrapping",["i16"]],["i16"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",43,[[["u32"]],[["wrapping",["i16"]],["i16"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",43,[[],[["wrapping",["i32"]],["i32"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",43,[[],[["wrapping",["i32"]],["i32"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",43,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",43,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",43,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",43,[[["u32"]],[["wrapping",["i32"]],["i32"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",43,[[["u32"]],[["wrapping",["i32"]],["i32"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",43,[[],[["wrapping",["i32"]],["i32"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",43,[[],[["wrapping",["i32"]],["i32"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",43,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",43,[[["wrapping",["i32"]],["i32"]],[["wrapping",["i32"]],["i32"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",43,[[],[["wrapping",["i32"]],["i32"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",43,[[],[["wrapping",["i32"]],["i32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",43,[[["u32"]],[["wrapping",["i32"]],["i32"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",43,[[],[["i64"],["wrapping",["i64"]]]]],[11,"max_value","","Returns the largest value that can be represented by this…",43,[[],[["i64"],["wrapping",["i64"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",43,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",43,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",43,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",43,[[["u32"]],[["i64"],["wrapping",["i64"]]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",43,[[["u32"]],[["i64"],["wrapping",["i64"]]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",43,[[],[["i64"],["wrapping",["i64"]]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",43,[[],[["i64"],["wrapping",["i64"]]]]],[11,"from_be","","Converts an integer from big endian to the target's…",43,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"from_le","","Converts an integer from little endian to the target's…",43,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",43,[[],[["i64"],["wrapping",["i64"]]]]],[11,"to_le","","Converts `self` to little endian from the target's…",43,[[],[["i64"],["wrapping",["i64"]]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",43,[[["u32"]],[["i64"],["wrapping",["i64"]]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",43,[[],[["wrapping",["i128"]],["i128"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",43,[[],[["wrapping",["i128"]],["i128"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",43,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",43,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",43,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",43,[[["u32"]],[["wrapping",["i128"]],["i128"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",43,[[["u32"]],[["wrapping",["i128"]],["i128"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",43,[[],[["wrapping",["i128"]],["i128"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",43,[[],[["wrapping",["i128"]],["i128"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",43,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",43,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",43,[[],[["wrapping",["i128"]],["i128"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",43,[[],[["wrapping",["i128"]],["i128"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",43,[[["u32"]],[["wrapping",["i128"]],["i128"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",43,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",43,[[],[["isize"],["wrapping",["isize"]]]]],[11,"signum","","Returns a number representing sign of `self`.",43,[[],[["isize"],["wrapping",["isize"]]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",43,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",43,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",43,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",43,[[],[["wrapping",["i8"]],["i8"]]]],[11,"signum","","Returns a number representing sign of `self`.",43,[[],[["wrapping",["i8"]],["i8"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",43,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",43,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",43,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",43,[[],[["wrapping",["i16"]],["i16"]]]],[11,"signum","","Returns a number representing sign of `self`.",43,[[],[["wrapping",["i16"]],["i16"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",43,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",43,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",43,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",43,[[],[["wrapping",["i32"]],["i32"]]]],[11,"signum","","Returns a number representing sign of `self`.",43,[[],[["wrapping",["i32"]],["i32"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",43,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",43,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",43,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",43,[[],[["i64"],["wrapping",["i64"]]]]],[11,"signum","","Returns a number representing sign of `self`.",43,[[],[["i64"],["wrapping",["i64"]]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",43,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",43,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",43,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",43,[[],[["wrapping",["i128"]],["i128"]]]],[11,"signum","","Returns a number representing sign of `self`.",43,[[],[["wrapping",["i128"]],["i128"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",43,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",43,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",43,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",43,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",43,[[],[["wrapping",["usize"]],["usize"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",43,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",43,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",43,[[],[["wrapping",["u8"]],["u8"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",43,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",43,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",43,[[],[["u16"],["wrapping",["u16"]]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",43,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",43,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",43,[[],[["u32"],["wrapping",["u32"]]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",43,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",43,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",43,[[],[["wrapping",["u64"]],["u64"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",43,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",43,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",43,[[],[["wrapping",["u128"]],["u128"]]]],[11,"kind","","Outputs the detailed cause of parsing an integer failing.",284,[[["self"]],["interrorkind"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",286,[[["i128"]],["nonzeroi128"]]],[11,"new","","Creates a non-zero if the given value is not zero.",286,[[["i128"]],[["option",["nonzeroi128"]],["nonzeroi128"]]]],[11,"get","","Returns the value as a primitive type.",286,[[],["i128"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",287,[[["i16"]],["nonzeroi16"]]],[11,"new","","Creates a non-zero if the given value is not zero.",287,[[["i16"]],[["nonzeroi16"],["option",["nonzeroi16"]]]]],[11,"get","","Returns the value as a primitive type.",287,[[],["i16"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",288,[[["i32"]],["nonzeroi32"]]],[11,"new","","Creates a non-zero if the given value is not zero.",288,[[["i32"]],[["nonzeroi32"],["option",["nonzeroi32"]]]]],[11,"get","","Returns the value as a primitive type.",288,[[],["i32"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",289,[[["i64"]],["nonzeroi64"]]],[11,"new","","Creates a non-zero if the given value is not zero.",289,[[["i64"]],[["option",["nonzeroi64"]],["nonzeroi64"]]]],[11,"get","","Returns the value as a primitive type.",289,[[],["i64"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",290,[[["i8"]],["nonzeroi8"]]],[11,"new","","Creates a non-zero if the given value is not zero.",290,[[["i8"]],[["option",["nonzeroi8"]],["nonzeroi8"]]]],[11,"get","","Returns the value as a primitive type.",290,[[],["i8"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",291,[[["isize"]],["nonzeroisize"]]],[11,"new","","Creates a non-zero if the given value is not zero.",291,[[["isize"]],[["option",["nonzeroisize"]],["nonzeroisize"]]]],[11,"get","","Returns the value as a primitive type.",291,[[],["isize"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",292,[[["u128"]],["nonzerou128"]]],[11,"new","","Creates a non-zero if the given value is not zero.",292,[[["u128"]],[["nonzerou128"],["option",["nonzerou128"]]]]],[11,"get","","Returns the value as a primitive type.",292,[[],["u128"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",293,[[["u16"]],["nonzerou16"]]],[11,"new","","Creates a non-zero if the given value is not zero.",293,[[["u16"]],[["option",["nonzerou16"]],["nonzerou16"]]]],[11,"get","","Returns the value as a primitive type.",293,[[],["u16"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",294,[[["u32"]],["nonzerou32"]]],[11,"new","","Creates a non-zero if the given value is not zero.",294,[[["u32"]],[["nonzerou32"],["option",["nonzerou32"]]]]],[11,"get","","Returns the value as a primitive type.",294,[[],["u32"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",295,[[["u64"]],["nonzerou64"]]],[11,"new","","Creates a non-zero if the given value is not zero.",295,[[["u64"]],[["nonzerou64"],["option",["nonzerou64"]]]]],[11,"get","","Returns the value as a primitive type.",295,[[],["u64"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",296,[[["u8"]],["nonzerou8"]]],[11,"new","","Creates a non-zero if the given value is not zero.",296,[[["u8"]],[["nonzerou8"],["option",["nonzerou8"]]]]],[11,"get","","Returns the value as a primitive type.",296,[[],["u8"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",297,[[["usize"]],["nonzerousize"]]],[11,"new","","Creates a non-zero if the given value is not zero.",297,[[["usize"]],[["nonzerousize"],["option",["nonzerousize"]]]]],[11,"get","","Returns the value as a primitive type.",297,[[],["usize"]]],[11,"is_unnamed","no_std_compat::os::unix::net","Returns `true` if the address is unnamed.",298,[[["self"]],["bool"]]],[11,"as_pathname","","Returns the contents of this address if it is a `pathname`…",298,[[["self"]],[["option",["path"]],["path"]]]],[11,"connect","","Connects to the socket named by `path`.",299,[[["p"]],[["result",["unixstream","error"]],["unixstream"],["error"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",299,[[],[["error"],["result",["error"]]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",299,[[["self"]],[["result",["unixstream","error"]],["unixstream"],["error"]]]],[11,"local_addr","","Returns the socket address of the local half of this…",299,[[["self"]],[["error"],["result",["socketaddr","error"]],["socketaddr"]]]],[11,"peer_addr","","Returns the socket address of the remote half of this…",299,[[["self"]],[["error"],["result",["socketaddr","error"]],["socketaddr"]]]],[11,"set_read_timeout","","Sets the read timeout for the socket.",299,[[["option",["duration"]],["duration"],["self"]],[["error"],["result",["error"]]]]],[11,"set_write_timeout","","Sets the write timeout for the socket.",299,[[["option",["duration"]],["duration"],["self"]],[["error"],["result",["error"]]]]],[11,"read_timeout","","Returns the read timeout of this socket.",299,[[["self"]],[["option",["duration"]],["result",["option","error"]],["error"]]]],[11,"write_timeout","","Returns the write timeout of this socket.",299,[[["self"]],[["option",["duration"]],["result",["option","error"]],["error"]]]],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",299,[[["self"],["bool"]],[["error"],["result",["error"]]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",299,[[["self"]],[["option",["error"]],["result",["option","error"]],["error"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this…",299,[[["shutdown"],["self"]],[["error"],["result",["error"]]]]],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",300,[[["p"]],[["unixlistener"],["result",["unixlistener","error"]],["error"]]]],[11,"accept","","Accepts a new incoming connection to this listener.",300,[[["self"]],[["result",["error"]],["error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",300,[[["self"]],[["unixlistener"],["result",["unixlistener","error"]],["error"]]]],[11,"local_addr","","Returns the local socket address of this listener.",300,[[["self"]],[["error"],["result",["socketaddr","error"]],["socketaddr"]]]],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",300,[[["self"],["bool"]],[["error"],["result",["error"]]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",300,[[["self"]],[["option",["error"]],["result",["option","error"]],["error"]]]],[11,"incoming","","Returns an iterator over incoming connections.",300,[[["self"]],["incoming"]]],[11,"bind","","Creates a Unix datagram socket bound to the given path.",302,[[["p"]],[["result",["unixdatagram","error"]],["unixdatagram"],["error"]]]],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any…",302,[[],[["result",["unixdatagram","error"]],["unixdatagram"],["error"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",302,[[],[["result",["error"]],["error"]]]],[11,"connect","","Connects the socket to the specified address.",302,[[["self"],["p"]],[["error"],["result",["error"]]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",302,[[["self"]],[["result",["unixdatagram","error"]],["unixdatagram"],["error"]]]],[11,"local_addr","","Returns the address of this socket.",302,[[["self"]],[["error"],["result",["socketaddr","error"]],["socketaddr"]]]],[11,"peer_addr","","Returns the address of this socket's peer.",302,[[["self"]],[["error"],["result",["socketaddr","error"]],["socketaddr"]]]],[11,"recv_from","","Receives data from the socket.",302,[[["self"]],[["error"],["result",["error"]]]]],[11,"recv","","Receives data from the socket.",302,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"send_to","","Sends data on the socket to the specified address.",302,[[["self"],["p"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"send","","Sends data on the socket to the socket's peer.",302,[[["self"]],[["error"],["usize"],["result",["usize","error"]]]]],[11,"set_read_timeout","","Sets the read timeout for the socket.",302,[[["option",["duration"]],["duration"],["self"]],[["error"],["result",["error"]]]]],[11,"set_write_timeout","","Sets the write timeout for the socket.",302,[[["option",["duration"]],["duration"],["self"]],[["error"],["result",["error"]]]]],[11,"read_timeout","","Returns the read timeout of this socket.",302,[[["self"]],[["option",["duration"]],["result",["option","error"]],["error"]]]],[11,"write_timeout","","Returns the write timeout of this socket.",302,[[["self"]],[["option",["duration"]],["result",["option","error"]],["error"]]]],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",302,[[["self"],["bool"]],[["error"],["result",["error"]]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",302,[[["self"]],[["option",["error"]],["result",["option","error"]],["error"]]]],[11,"shutdown","","Shut down the read, write, or both halves of this…",302,[[["shutdown"],["self"]],[["error"],["result",["error"]]]]],[11,"caller","no_std_compat::panic","Returns the source location of the caller of this…",303,[[],["location"]]],[11,"file","","Returns the name of the source file from which the panic…",303,[[["self"]],["str"]]],[11,"line","","Returns the line number from which the panic originated.",303,[[["self"]],["u32"]]],[11,"column","","Returns the column from which the panic originated.",303,[[["self"]],["u32"]]],[11,"payload","","Returns the payload associated with the panic.",304,[[["self"]],["any"]]],[11,"message","","If the `panic!` macro from the `core` crate (not from…",304,[[["self"]],[["option",["arguments"]],["arguments"]]]],[11,"location","","Returns information about the location from which the…",304,[[["self"]],[["location"],["option",["location"]]]]],[11,"is_verbatim","no_std_compat::path","Determines if the prefix is verbatim, i.e., begins with…",64,[[["self"]],["bool"]]],[11,"kind","","Returns the parsed prefix data.",305,[[["self"]],["prefix"]]],[11,"as_os_str","","Returns the raw [`OsStr`] slice for this prefix.",305,[[["self"]],["osstr"]]],[11,"as_os_str","","Extracts the underlying [`OsStr`] slice.",65,[[],["osstr"]]],[11,"as_path","","Extracts a slice corresponding to the portion of the path…",306,[[["self"]],["path"]]],[11,"as_path","","Extracts a slice corresponding to the portion of the path…",307,[[["self"]],["path"]]],[11,"new","","Allocates an empty `PathBuf`.",309,[[],["pathbuf"]]],[11,"with_capacity","","Creates a new `PathBuf` with a given capacity used to…",309,[[["usize"]],["pathbuf"]]],[11,"as_path","","Coerces to a [`Path`] slice.",309,[[["self"]],["path"]]],[11,"push","","Extends `self` with `path`.",309,[[["self"],["p"]]]],[11,"pop","","Truncates `self` to [`self.parent`].",309,[[["self"]],["bool"]]],[11,"set_file_name","","Updates [`self.file_name`] to `file_name`.",309,[[["self"],["s"]]]],[11,"set_extension","","Updates [`self.extension`] to `extension`.",309,[[["self"],["s"]],["bool"]]],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal [`OsString`]…",309,[[],["osstring"]]],[11,"into_boxed_path","","Converts this `PathBuf` into a [boxed][`Box`] [`Path`].",309,[[],[["path"],["box",["path"]]]]],[11,"capacity","","Invokes [`capacity`] on the underlying instance of…",309,[[["self"]],["usize"]]],[11,"clear","","Invokes [`clear`] on the underlying instance of…",309,[[["self"]]]],[11,"reserve","","Invokes [`reserve`] on the underlying instance of…",309,[[["self"],["usize"]]]],[11,"reserve_exact","","Invokes [`reserve_exact`] on the underlying instance of…",309,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Invokes [`shrink_to_fit`] on the underlying instance of…",309,[[["self"]]]],[11,"shrink_to","","Invokes [`shrink_to`] on the underlying instance of…",309,[[["self"],["usize"]]]],[11,"new","","Directly wraps a string slice as a `Path` slice.",310,[[["s"]],["path"]]],[11,"as_os_str","","Yields the underlying [`OsStr`] slice.",310,[[["self"]],["osstr"]]],[11,"to_str","","Yields a [`&str`] slice if the `Path` is valid unicode.",310,[[["self"]],[["str"],["option",["str"]]]]],[11,"to_string_lossy","","Converts a `Path` to a [`Cow<str>`].",310,[[["self"]],[["str"],["cow",["str"]]]]],[11,"to_path_buf","","Converts a `Path` to an owned [`PathBuf`].",310,[[["self"]],["pathbuf"]]],[11,"is_absolute","","Returns `true` if the `Path` is absolute, i.e., if it is…",310,[[["self"]],["bool"]]],[11,"is_relative","","Returns `true` if the `Path` is relative, i.e., not…",310,[[["self"]],["bool"]]],[11,"has_root","","Returns `true` if the `Path` has a root.",310,[[["self"]],["bool"]]],[11,"parent","","Returns the `Path` without its final component, if there…",310,[[["self"]],[["option",["path"]],["path"]]]],[11,"ancestors","","Produces an iterator over `Path` and its ancestors.",310,[[["self"]],["ancestors"]]],[11,"file_name","","Returns the final component of the `Path`, if there is one.",310,[[["self"]],[["osstr"],["option",["osstr"]]]]],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",310,[[["self"],["p"]],[["stripprefixerror"],["path"],["result",["path","stripprefixerror"]]]]],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",310,[[["self"],["p"]],["bool"]]],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",310,[[["self"],["p"]],["bool"]]],[11,"file_stem","","Extracts the stem (non-extension) portion of…",310,[[["self"]],[["osstr"],["option",["osstr"]]]]],[11,"extension","","Extracts the extension of [`self.file_name`], if possible.",310,[[["self"]],[["osstr"],["option",["osstr"]]]]],[11,"join","","Creates an owned [`PathBuf`] with `path` adjoined to `self`.",310,[[["self"],["p"]],["pathbuf"]]],[11,"with_file_name","","Creates an owned [`PathBuf`] like `self` but with the…",310,[[["s"],["self"]],["pathbuf"]]],[11,"with_extension","","Creates an owned [`PathBuf`] like `self` but with the…",310,[[["s"],["self"]],["pathbuf"]]],[11,"components","","Produces an iterator over the [`Component`]s of the path.",310,[[["self"]],["components"]]],[11,"iter","","Produces an iterator over the path's components viewed as…",310,[[["self"]],["iter"]]],[11,"display","","Returns an object that implements [`Display`] for safely…",310,[[["self"]],["display"]]],[11,"metadata","","Queries the file system to get information about a file,…",310,[[["self"]],[["metadata"],["error"],["result",["metadata","error"]]]]],[11,"symlink_metadata","","Queries the metadata about a file without following…",310,[[["self"]],[["metadata"],["error"],["result",["metadata","error"]]]]],[11,"canonicalize","","Returns the canonical, absolute form of the path with all…",310,[[["self"]],[["error"],["pathbuf"],["result",["pathbuf","error"]]]]],[11,"read_link","","Reads a symbolic link, returning the file that the link…",310,[[["self"]],[["error"],["pathbuf"],["result",["pathbuf","error"]]]]],[11,"read_dir","","Returns an iterator over the entries within a directory.",310,[[["self"]],[["error"],["readdir"],["result",["readdir","error"]]]]],[11,"exists","","Returns `true` if the path points at an existing entity.",310,[[["self"]],["bool"]]],[11,"is_file","","Returns `true` if the path exists on disk and is pointing…",310,[[["self"]],["bool"]]],[11,"is_dir","","Returns `true` if the path exists on disk and is pointing…",310,[[["self"]],["bool"]]],[11,"into_path_buf","","Converts a [`Box<Path>`][`Box`] into a [`PathBuf`] without…",310,[[["path"],["box",["path"]]],["pathbuf"]]],[11,"kill","no_std_compat::process","Forces the child process to exit. If the child has already…",66,[[["self"]],[["error"],["result",["error"]]]]],[11,"id","","Returns the OS-assigned process identifier associated with…",66,[[["self"]],["u32"]]],[11,"wait","","Waits for the child to exit completely, returning the…",66,[[["self"]],[["result",["exitstatus","error"]],["error"],["exitstatus"]]]],[11,"try_wait","","Attempts to collect the exit status of the child if it has…",66,[[["self"]],[["option",["exitstatus"]],["result",["option","error"]],["error"]]]],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all…",66,[[],[["output"],["result",["output","error"]],["error"]]]],[11,"new","","Constructs a new `Command` for launching the program at…",316,[[["s"]],["command"]]],[11,"arg","","Adds an argument to pass to the program.",316,[[["self"],["s"]],["command"]]],[11,"args","","Adds multiple arguments to pass to the program.",316,[[["self"],["i"]],["command"]]],[11,"env","","Inserts or updates an environment variable mapping.",316,[[["self"],["k"],["v"]],["command"]]],[11,"envs","","Adds or updates multiple environment variable mappings.",316,[[["self"],["i"]],["command"]]],[11,"env_remove","","Removes an environment variable mapping.",316,[[["self"],["k"]],["command"]]],[11,"env_clear","","Clears the entire environment map for the child process.",316,[[["self"]],["command"]]],[11,"current_dir","","Sets the working directory for the child process.",316,[[["self"],["p"]],["command"]]],[11,"stdin","","Configuration for the child process's standard input…",316,[[["self"],["t"]],["command"]]],[11,"stdout","","Configuration for the child process's standard output…",316,[[["self"],["t"]],["command"]]],[11,"stderr","","Configuration for the child process's standard error…",316,[[["self"],["t"]],["command"]]],[11,"spawn","","Executes the command as a child process, returning a…",316,[[["self"]],[["result",["child","error"]],["child"],["error"]]]],[11,"output","","Executes the command as a child process, waiting for it to…",316,[[["self"]],[["output"],["result",["output","error"]],["error"]]]],[11,"status","","Executes a command as a child process, waiting for it to…",316,[[["self"]],[["result",["exitstatus","error"]],["error"],["exitstatus"]]]],[11,"piped","","A new pipe should be arranged to connect the parent and…",317,[[],["stdio"]]],[11,"inherit","","The child inherits from the corresponding parent descriptor.",317,[[],["stdio"]]],[11,"null","","This stream will be ignored. This is the equivalent of…",317,[[],["stdio"]]],[11,"success","","Was termination successful? Signal termination is not…",318,[[["self"]],["bool"]]],[11,"code","","Returns the exit code of the process, if any.",318,[[["self"]],[["option",["i32"]],["i32"]]]],[18,"SUCCESS","","The canonical ExitCode for successful termination on this…",319,null],[18,"FAILURE","","The canonical ExitCode for unsuccessful termination on…",319,null],[11,"try_recv","no_std_compat::sync::mpsc","Attempts to return a pending value on this receiver…",320,[[["self"]],[["result",["tryrecverror"]],["tryrecverror"]]]],[11,"recv","","Attempts to wait for a value on this receiver, returning…",320,[[["self"]],[["result",["recverror"]],["recverror"]]]],[11,"recv_timeout","","Attempts to wait for a value on this receiver, returning…",320,[[["duration"],["self"]],[["result",["recvtimeouterror"]],["recvtimeouterror"]]]],[11,"recv_deadline","","Attempts to wait for a value on this receiver, returning…",320,[[["instant"],["self"]],[["result",["recvtimeouterror"]],["recvtimeouterror"]]]],[11,"iter","","Returns an iterator that will block waiting for messages,…",320,[[["self"]],["iter"]]],[11,"try_iter","","Returns an iterator that will attempt to yield all pending…",320,[[["self"]],["tryiter"]]],[11,"send","","Attempts to send a value on this channel, returning it…",324,[[["self"],["t"]],[["result",["senderror"]],["senderror"]]]],[11,"send","","Sends a value on this synchronous channel.",325,[[["self"],["t"]],[["result",["senderror"]],["senderror"]]]],[11,"try_send","","Attempts to send a value on this channel without blocking.",325,[[["self"],["t"]],[["trysenderror"],["result",["trysenderror"]]]]],[11,"new","no_std_compat::sync","Constructs a new `Arc<T>`.",327,[[["t"]],["arc"]]],[11,"new_uninit","","Constructs a new `Arc` with uninitialized contents.",327,[[],[["arc",["maybeuninit"]],["maybeuninit"]]]],[11,"new_zeroed","","Constructs a new `Arc` with uninitialized contents, with…",327,[[],[["arc",["maybeuninit"]],["maybeuninit"]]]],[11,"pin","","Constructs a new `Pin<Arc<T>>`. If `T` does not implement…",327,[[["t"]],[["pin",["arc"]],["arc"]]]],[11,"try_unwrap","","Returns the inner value, if the `Arc` has exactly one…",327,[[["arc"]],[["result",["arc"]],["arc"]]]],[11,"new_uninit_slice","","Constructs a new reference-counted slice with…",327,[[["usize"]],["arc"]]],[11,"assume_init","","Converts to `Arc<T>`.",327,[[],["arc"]]],[11,"assume_init","","Converts to `Arc<[T]>`.",327,[[],["arc"]]],[11,"into_raw","","Consumes the `Arc`, returning the wrapped pointer.",327,[[["arc"]]]],[11,"from_raw","","Constructs an `Arc` from a raw pointer.",327,[[],["arc"]]],[11,"into_raw_non_null","","Consumes the `Arc`, returning the wrapped pointer as…",327,[[["arc"]],["nonnull"]]],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this allocation.",327,[[["arc"]],["weak"]]],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this…",327,[[["arc"]],["usize"]]],[11,"strong_count","","Gets the number of strong (`Arc`) pointers to this…",327,[[["arc"]],["usize"]]],[11,"ptr_eq","","Returns `true` if the two `Arc`s point to the same…",327,[[["arc"]],["bool"]]],[11,"make_mut","","Makes a mutable reference into the given `Arc`.",327,[[["arc"]],["t"]]],[11,"get_mut","","Returns a mutable reference into the given `Arc`, if there…",327,[[["arc"]],[["option"],["t"]]]],[11,"get_mut_unchecked","","Returns a mutable reference into the given `Arc`, without…",327,[[["arc"]],["t"]]],[11,"downcast","","Attempt to downcast the `Arc<dyn Any + Send + Sync>` to a…",327,[[],[["arc"],["arc",["any"]],["result",["arc","arc"]]]]],[11,"new","","Constructs a new `Weak<T>`, without allocating any memory.…",328,[[],["weak"]]],[11,"as_raw","","Returns a raw pointer to the object `T` pointed to by this…",328,[[["self"]]]],[11,"into_raw","","Consumes the `Weak<T>` and turns it into a raw pointer.",328,[[]]],[11,"from_raw","","Converts a raw pointer previously created by [`into_raw`]…",328,[[],["weak"]]],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Arc`],…",328,[[["self"]],[["arc"],["option",["arc"]]]]],[11,"strong_count","","Gets the number of strong (`Arc`) pointers pointing to…",328,[[["self"]],["usize"]]],[11,"weak_count","","Gets an approximation of the number of `Weak` pointers…",328,[[["self"]],["usize"]]],[11,"ptr_eq","","Returns `true` if the two `Weak`s point to the same…",328,[[["weak"],["self"]],["bool"]]],[11,"new","no_std_compat::sync::atomic","Creates a new `AtomicBool`.",329,[[["bool"]],["atomicbool"]]],[11,"get_mut","","Returns a mutable reference to the underlying [`bool`].",329,[[["self"]],["bool"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",329,[[],["bool"]]],[11,"load","","Loads a value from the bool.",329,[[["ordering"],["self"]],["bool"]]],[11,"store","","Stores a value into the bool.",329,[[["ordering"],["self"],["bool"]]]],[11,"swap","","Stores a value into the bool, returning the previous value.",329,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"compare_and_swap","","Stores a value into the [`bool`] if the current value is…",329,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"compare_exchange","","Stores a value into the [`bool`] if the current value is…",329,[[["ordering"],["self"],["bool"]],[["bool"],["result",["bool","bool"]]]]],[11,"compare_exchange_weak","","Stores a value into the [`bool`] if the current value is…",329,[[["ordering"],["self"],["bool"]],[["bool"],["result",["bool","bool"]]]]],[11,"fetch_and","","Logical \"and\" with a boolean value.",329,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",329,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"fetch_or","","Logical \"or\" with a boolean value.",329,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",329,[[["ordering"],["self"],["bool"]],["bool"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying [`bool`].",329,[[["self"]]]],[11,"new","","Creates a new `AtomicPtr`.",330,[[],["atomicptr"]]],[11,"get_mut","","Returns a mutable reference to the underlying pointer.",330,[[["self"]]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",330,[[]]],[11,"load","","Loads a value from the pointer.",330,[[["ordering"],["self"]]]],[11,"store","","Stores a value into the pointer.",330,[[["ordering"],["self"]]]],[11,"swap","","Stores a value into the pointer, returning the previous…",330,[[["ordering"],["self"]]]],[11,"compare_and_swap","","Stores a value into the pointer if the current value is…",330,[[["ordering"],["self"]]]],[11,"compare_exchange","","Stores a value into the pointer if the current value is…",330,[[["ordering"],["self"]],["result"]]],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is…",330,[[["ordering"],["self"]],["result"]]],[11,"new","","Creates a new atomic integer.",331,[[["i8"]],["atomici8"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",331,[[["self"]],["i8"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",331,[[],["i8"]]],[11,"load","","Loads a value from the atomic integer.",331,[[["ordering"],["self"]],["i8"]]],[11,"store","","Stores a value into the atomic integer.",331,[[["i8"],["self"],["ordering"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",331,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",331,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",331,[[["i8"],["ordering"],["self"]],[["i8"],["result",["i8","i8"]]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",331,[[["i8"],["ordering"],["self"]],[["i8"],["result",["i8","i8"]]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",331,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",331,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",331,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",331,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",331,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",331,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",331,[[["ordering"],["self"],["f"]],[["i8"],["result",["i8","i8"]]]]],[11,"fetch_max","","Maximum with the current value.",331,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"fetch_min","","Minimum with the current value.",331,[[["i8"],["self"],["ordering"]],["i8"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",331,[[["self"]]]],[11,"new","","Creates a new atomic integer.",332,[[["u8"]],["atomicu8"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",332,[[["self"]],["u8"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",332,[[],["u8"]]],[11,"load","","Loads a value from the atomic integer.",332,[[["ordering"],["self"]],["u8"]]],[11,"store","","Stores a value into the atomic integer.",332,[[["ordering"],["self"],["u8"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",332,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",332,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",332,[[["ordering"],["self"],["u8"]],[["result",["u8","u8"]],["u8"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",332,[[["ordering"],["self"],["u8"]],[["result",["u8","u8"]],["u8"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",332,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",332,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",332,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",332,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",332,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",332,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",332,[[["ordering"],["self"],["f"]],[["result",["u8","u8"]],["u8"]]]],[11,"fetch_max","","Maximum with the current value.",332,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"fetch_min","","Minimum with the current value.",332,[[["ordering"],["self"],["u8"]],["u8"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",332,[[["self"]]]],[11,"new","","Creates a new atomic integer.",333,[[["i16"]],["atomici16"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",333,[[["self"]],["i16"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",333,[[],["i16"]]],[11,"load","","Loads a value from the atomic integer.",333,[[["ordering"],["self"]],["i16"]]],[11,"store","","Stores a value into the atomic integer.",333,[[["ordering"],["self"],["i16"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",333,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",333,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",333,[[["ordering"],["self"],["i16"]],[["i16"],["result",["i16","i16"]]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",333,[[["ordering"],["self"],["i16"]],[["i16"],["result",["i16","i16"]]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",333,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",333,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",333,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",333,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",333,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",333,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",333,[[["ordering"],["self"],["f"]],[["i16"],["result",["i16","i16"]]]]],[11,"fetch_max","","Maximum with the current value.",333,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"fetch_min","","Minimum with the current value.",333,[[["ordering"],["self"],["i16"]],["i16"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",333,[[["self"]]]],[11,"new","","Creates a new atomic integer.",334,[[["u16"]],["atomicu16"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",334,[[["self"]],["u16"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",334,[[],["u16"]]],[11,"load","","Loads a value from the atomic integer.",334,[[["ordering"],["self"]],["u16"]]],[11,"store","","Stores a value into the atomic integer.",334,[[["u16"],["ordering"],["self"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",334,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",334,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",334,[[["u16"],["ordering"],["self"]],[["u16"],["result",["u16","u16"]]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",334,[[["u16"],["ordering"],["self"]],[["u16"],["result",["u16","u16"]]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",334,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",334,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",334,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",334,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",334,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",334,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",334,[[["ordering"],["self"],["f"]],[["u16"],["result",["u16","u16"]]]]],[11,"fetch_max","","Maximum with the current value.",334,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"fetch_min","","Minimum with the current value.",334,[[["u16"],["ordering"],["self"]],["u16"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",334,[[["self"]]]],[11,"new","","Creates a new atomic integer.",335,[[["i32"]],["atomici32"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",335,[[["self"]],["i32"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",335,[[],["i32"]]],[11,"load","","Loads a value from the atomic integer.",335,[[["ordering"],["self"]],["i32"]]],[11,"store","","Stores a value into the atomic integer.",335,[[["ordering"],["self"],["i32"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",335,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",335,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",335,[[["i32"],["ordering"],["self"]],[["result",["i32","i32"]],["i32"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",335,[[["i32"],["ordering"],["self"]],[["result",["i32","i32"]],["i32"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",335,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",335,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",335,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",335,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",335,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",335,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",335,[[["ordering"],["self"],["f"]],[["result",["i32","i32"]],["i32"]]]],[11,"fetch_max","","Maximum with the current value.",335,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"fetch_min","","Minimum with the current value.",335,[[["ordering"],["self"],["i32"]],["i32"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",335,[[["self"]]]],[11,"new","","Creates a new atomic integer.",336,[[["u32"]],["atomicu32"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",336,[[["self"]],["u32"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",336,[[],["u32"]]],[11,"load","","Loads a value from the atomic integer.",336,[[["ordering"],["self"]],["u32"]]],[11,"store","","Stores a value into the atomic integer.",336,[[["u32"],["self"],["ordering"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",336,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",336,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",336,[[["u32"],["ordering"],["self"]],[["result",["u32","u32"]],["u32"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",336,[[["u32"],["ordering"],["self"]],[["result",["u32","u32"]],["u32"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",336,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",336,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",336,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",336,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",336,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",336,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",336,[[["ordering"],["self"],["f"]],[["result",["u32","u32"]],["u32"]]]],[11,"fetch_max","","Maximum with the current value.",336,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"fetch_min","","Minimum with the current value.",336,[[["u32"],["self"],["ordering"]],["u32"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",336,[[["self"]]]],[11,"new","","Creates a new atomic integer.",337,[[["i64"]],["atomici64"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",337,[[["self"]],["i64"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",337,[[],["i64"]]],[11,"load","","Loads a value from the atomic integer.",337,[[["ordering"],["self"]],["i64"]]],[11,"store","","Stores a value into the atomic integer.",337,[[["i64"],["ordering"],["self"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",337,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",337,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",337,[[["i64"],["ordering"],["self"]],[["i64"],["result",["i64","i64"]]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",337,[[["i64"],["ordering"],["self"]],[["i64"],["result",["i64","i64"]]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",337,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",337,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",337,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",337,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",337,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",337,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",337,[[["ordering"],["self"],["f"]],[["i64"],["result",["i64","i64"]]]]],[11,"fetch_max","","Maximum with the current value.",337,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"fetch_min","","Minimum with the current value.",337,[[["i64"],["ordering"],["self"]],["i64"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",337,[[["self"]]]],[11,"new","","Creates a new atomic integer.",338,[[["u64"]],["atomicu64"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",338,[[["self"]],["u64"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",338,[[],["u64"]]],[11,"load","","Loads a value from the atomic integer.",338,[[["ordering"],["self"]],["u64"]]],[11,"store","","Stores a value into the atomic integer.",338,[[["ordering"],["self"],["u64"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",338,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",338,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",338,[[["ordering"],["self"],["u64"]],[["result",["u64","u64"]],["u64"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",338,[[["ordering"],["self"],["u64"]],[["result",["u64","u64"]],["u64"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",338,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",338,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",338,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",338,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",338,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",338,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",338,[[["ordering"],["self"],["f"]],[["result",["u64","u64"]],["u64"]]]],[11,"fetch_max","","Maximum with the current value.",338,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"fetch_min","","Minimum with the current value.",338,[[["ordering"],["self"],["u64"]],["u64"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",338,[[["self"]]]],[11,"new","","Creates a new atomic integer.",339,[[["isize"]],["atomicisize"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",339,[[["self"]],["isize"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",339,[[],["isize"]]],[11,"load","","Loads a value from the atomic integer.",339,[[["ordering"],["self"]],["isize"]]],[11,"store","","Stores a value into the atomic integer.",339,[[["isize"],["ordering"],["self"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",339,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",339,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",339,[[["isize"],["ordering"],["self"]],[["result",["isize","isize"]],["isize"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",339,[[["isize"],["ordering"],["self"]],[["result",["isize","isize"]],["isize"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",339,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",339,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",339,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",339,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",339,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",339,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",339,[[["ordering"],["self"],["f"]],[["result",["isize","isize"]],["isize"]]]],[11,"fetch_max","","Maximum with the current value.",339,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"fetch_min","","Minimum with the current value.",339,[[["isize"],["ordering"],["self"]],["isize"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",339,[[["self"]]]],[11,"new","","Creates a new atomic integer.",340,[[["usize"]],["atomicusize"]]],[11,"get_mut","","Returns a mutable reference to the underlying integer.",340,[[["self"]],["usize"]]],[11,"into_inner","","Consumes the atomic and returns the contained value.",340,[[],["usize"]]],[11,"load","","Loads a value from the atomic integer.",340,[[["ordering"],["self"]],["usize"]]],[11,"store","","Stores a value into the atomic integer.",340,[[["ordering"],["self"],["usize"]]]],[11,"swap","","Stores a value into the atomic integer, returning the…",340,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"compare_and_swap","","Stores a value into the atomic integer if the current…",340,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"compare_exchange","","Stores a value into the atomic integer if the current…",340,[[["usize"],["ordering"],["self"]],[["result",["usize","usize"]],["usize"]]]],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current…",340,[[["usize"],["ordering"],["self"]],[["result",["usize","usize"]],["usize"]]]],[11,"fetch_add","","Adds to the current value, returning the previous value.",340,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_sub","","Subtracts from the current value, returning the previous…",340,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_and","","Bitwise \"and\" with the current value.",340,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_nand","","Bitwise \"nand\" with the current value.",340,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_or","","Bitwise \"or\" with the current value.",340,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current value.",340,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_update","","Fetches the value, and applies a function to it that…",340,[[["ordering"],["self"],["f"]],[["result",["usize","usize"]],["usize"]]]],[11,"fetch_max","","Maximum with the current value.",340,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"fetch_min","","Minimum with the current value.",340,[[["ordering"],["self"],["usize"]],["usize"]]],[11,"as_mut_ptr","","Returns a mutable pointer to the underlying integer.",340,[[["self"]]]],[11,"new","no_std_compat::sync","Creates a new barrier that can block a given number of…",341,[[["usize"]],["barrier"]]],[11,"wait","","Blocks the current thread until all threads have…",341,[[["self"]],["barrierwaitresult"]]],[11,"is_leader","","Returns `true` if this thread from [`wait`] is the \"leader…",342,[[["self"]],["bool"]]],[11,"new","","Creates a new condition variable which is ready to be…",343,[[],["condvar"]]],[11,"wait","","Blocks the current thread until this condition variable…",343,[[["self"],["mutexguard"]],[["poisonerror",["mutexguard"]],["result",["mutexguard","poisonerror"]],["mutexguard"]]]],[11,"wait_while","","Blocks the current thread until this condition variable…",343,[[["f"],["self"],["mutexguard"]],[["poisonerror",["mutexguard"]],["result",["mutexguard","poisonerror"]],["mutexguard"]]]],[11,"wait_timeout_ms","","Waits on this condition variable for a notification,…",343,[[["u32"],["self"],["mutexguard"]],[["result",["poisonerror"]],["poisonerror"]]]],[11,"wait_timeout","","Waits on this condition variable for a notification,…",343,[[["duration"],["self"],["mutexguard"]],[["poisonerror"],["result",["poisonerror"]]]]],[11,"wait_timeout_while","","Waits on this condition variable for a notification,…",343,[[["mutexguard"],["duration"],["self"],["f"]],[["poisonerror"],["result",["poisonerror"]]]]],[11,"notify_one","","Wakes up one blocked thread on this condvar.",343,[[["self"]]]],[11,"notify_all","","Wakes up all blocked threads on this condvar.",343,[[["self"]]]],[11,"timed_out","","Returns `true` if the wait was known to have timed out.",344,[[["self"]],["bool"]]],[11,"new","","Creates a new mutex in an unlocked state ready for use.",345,[[["t"]],["mutex"]]],[11,"lock","","Acquires a mutex, blocking the current thread until it is…",345,[[["self"]],[["poisonerror",["mutexguard"]],["result",["mutexguard","poisonerror"]],["mutexguard"]]]],[11,"try_lock","","Attempts to acquire this lock.",345,[[["self"]],[["trylockerror",["mutexguard"]],["result",["mutexguard","trylockerror"]],["mutexguard"]]]],[11,"is_poisoned","","Determines whether the mutex is poisoned.",345,[[["self"]],["bool"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",345,[[],[["result",["poisonerror"]],["poisonerror"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",345,[[["self"]],[["poisonerror"],["result",["poisonerror"]],["t"]]]],[11,"new","","Creates a new `Once` value.",347,[[],["once"]]],[11,"call_once","","Performs an initialization routine once and only once. The…",347,[[["self"],["f"]]]],[11,"call_once_force","","Performs the same function as [`call_once`] except ignores…",347,[[["self"],["f"]]]],[11,"is_completed","","Returns `true` if some `call_once` call has completed…",347,[[["self"]],["bool"]]],[11,"poisoned","","Returns `true` if the associated [`Once`] was poisoned…",348,[[["self"]],["bool"]]],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",349,[[["t"]],["rwlock"]]],[11,"read","","Locks this rwlock with shared read access, blocking the…",349,[[["self"]],[["rwlockreadguard"],["result",["rwlockreadguard","poisonerror"]],["poisonerror",["rwlockreadguard"]]]]],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",349,[[["self"]],[["rwlockreadguard"],["trylockerror",["rwlockreadguard"]],["result",["rwlockreadguard","trylockerror"]]]]],[11,"write","","Locks this rwlock with exclusive write access, blocking…",349,[[["self"]],[["result",["rwlockwriteguard","poisonerror"]],["rwlockwriteguard"],["poisonerror",["rwlockwriteguard"]]]]],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",349,[[["self"]],[["result",["rwlockwriteguard","trylockerror"]],["rwlockwriteguard"],["trylockerror",["rwlockwriteguard"]]]]],[11,"is_poisoned","","Determines whether the lock is poisoned.",349,[[["self"]],["bool"]]],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",349,[[],[["result",["poisonerror"]],["poisonerror"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",349,[[["self"]],[["poisonerror"],["result",["poisonerror"]],["t"]]]],[11,"new","","Creates a `PoisonError`.",352,[[["t"]],["poisonerror"]]],[11,"into_inner","","Consumes this error indicating that a lock is poisoned,…",352,[[],["t"]]],[11,"get_ref","","Reaches into this error indicating that a lock is…",352,[[["self"]],["t"]]],[11,"get_mut","","Reaches into this error indicating that a lock is…",352,[[["self"]],["t"]]],[11,"now","no_std_compat::time","Returns an instant corresponding to \"now\".",353,[[],["instant"]]],[11,"duration_since","","Returns the amount of time elapsed from another instant to…",353,[[["instant"],["self"]],["duration"]]],[11,"checked_duration_since","","Returns the amount of time elapsed from another instant to…",353,[[["instant"],["self"]],[["option",["duration"]],["duration"]]]],[11,"saturating_duration_since","","Returns the amount of time elapsed from another instant to…",353,[[["instant"],["self"]],["duration"]]],[11,"elapsed","","Returns the amount of time elapsed since this instant was…",353,[[["self"]],["duration"]]],[11,"checked_add","","Returns `Some(t)` where `t` is the time `self + duration`…",353,[[["duration"],["self"]],[["option",["instant"]],["instant"]]]],[11,"checked_sub","","Returns `Some(t)` where `t` is the time `self - duration`…",353,[[["duration"],["self"]],[["option",["instant"]],["instant"]]]],[18,"UNIX_EPOCH","","An anchor in time which can be used to create new…",354,null],[11,"now","","Returns the system time corresponding to \"now\".",354,[[],["systemtime"]]],[11,"duration_since","","Returns the amount of time elapsed from an earlier point…",354,[[["self"],["systemtime"]],[["duration"],["result",["duration","systemtimeerror"]],["systemtimeerror"]]]],[11,"elapsed","","Returns the difference between the clock time when this…",354,[[["self"]],[["duration"],["result",["duration","systemtimeerror"]],["systemtimeerror"]]]],[11,"checked_add","","Returns `Some(t)` where `t` is the time `self + duration`…",354,[[["duration"],["self"]],[["option",["systemtime"]],["systemtime"]]]],[11,"checked_sub","","Returns `Some(t)` where `t` is the time `self - duration`…",354,[[["duration"],["self"]],[["option",["systemtime"]],["systemtime"]]]],[11,"duration","","Returns the positive duration which represents how far…",355,[[["self"]],["duration"]]],[18,"SECOND","","The duration of one second.",356,null],[18,"MILLISECOND","","The duration of one millisecond.",356,null],[18,"MICROSECOND","","The duration of one microsecond.",356,null],[18,"NANOSECOND","","The duration of one nanosecond.",356,null],[11,"new","","Creates a new `Duration` from the specified number of…",356,[[["u32"],["u64"]],["duration"]]],[11,"from_secs","","Creates a new `Duration` from the specified number of…",356,[[["u64"]],["duration"]]],[11,"from_millis","","Creates a new `Duration` from the specified number of…",356,[[["u64"]],["duration"]]],[11,"from_micros","","Creates a new `Duration` from the specified number of…",356,[[["u64"]],["duration"]]],[11,"from_nanos","","Creates a new `Duration` from the specified number of…",356,[[["u64"]],["duration"]]],[11,"as_secs","","Returns the number of whole seconds contained by this…",356,[[["self"]],["u64"]]],[11,"subsec_millis","","Returns the fractional part of this `Duration`, in whole…",356,[[["self"]],["u32"]]],[11,"subsec_micros","","Returns the fractional part of this `Duration`, in whole…",356,[[["self"]],["u32"]]],[11,"subsec_nanos","","Returns the fractional part of this `Duration`, in…",356,[[["self"]],["u32"]]],[11,"as_millis","","Returns the total number of whole milliseconds contained…",356,[[["self"]],["u128"]]],[11,"as_micros","","Returns the total number of whole microseconds contained…",356,[[["self"]],["u128"]]],[11,"as_nanos","","Returns the total number of nanoseconds contained by this…",356,[[["self"]],["u128"]]],[11,"checked_add","","Checked `Duration` addition. Computes `self + other`,…",356,[[["duration"]],[["option",["duration"]],["duration"]]]],[11,"checked_sub","","Checked `Duration` subtraction. Computes `self - other`,…",356,[[["duration"]],[["option",["duration"]],["duration"]]]],[11,"checked_mul","","Checked `Duration` multiplication. Computes `self *…",356,[[["u32"]],[["option",["duration"]],["duration"]]]],[11,"checked_div","","Checked `Duration` division. Computes `self / other`,…",356,[[["u32"]],[["option",["duration"]],["duration"]]]],[11,"as_secs_f64","","Returns the number of seconds contained by this `Duration`…",356,[[["self"]],["f64"]]],[11,"as_secs_f32","","Returns the number of seconds contained by this `Duration`…",356,[[["self"]],["f32"]]],[11,"from_secs_f64","","Creates a new `Duration` from the specified number of…",356,[[["f64"]],["duration"]]],[11,"from_secs_f32","","Creates a new `Duration` from the specified number of…",356,[[["f32"]],["duration"]]],[11,"mul_f64","","Multiplies `Duration` by `f64`.",356,[[["f64"]],["duration"]]],[11,"mul_f32","","Multiplies `Duration` by `f32`.",356,[[["f32"]],["duration"]]],[11,"div_f64","","Divide `Duration` by `f64`.",356,[[["f64"]],["duration"]]],[11,"div_f32","","Divide `Duration` by `f32`.",356,[[["f32"]],["duration"]]],[11,"div_duration_f64","","Divide `Duration` by `Duration` and return `f64`.",356,[[["duration"]],["f64"]]],[11,"div_duration_f32","","Divide `Duration` by `Duration` and return `f32`.",356,[[["duration"]],["f32"]]],[11,"from_waker","no_std_compat::task","Create a new `Context` from a `&Waker`.",357,[[["waker"]],["context"]]],[11,"waker","","Returns a reference to the `Waker` for the current task.",357,[[["self"]],["waker"]]],[11,"map","","Changes the ready value of this `Poll` with the closure…",75,[[["f"]],["poll"]]],[11,"is_ready","","Returns `true` if this is `Poll::Ready`",75,[[["self"]],["bool"]]],[11,"is_pending","","Returns `true` if this is `Poll::Pending`",75,[[["self"]],["bool"]]],[11,"map_ok","","Changes the success value of this `Poll` with the closure…",75,[[["f"]],[["poll",["result"]],["result"]]]],[11,"map_err","","Changes the error value of this `Poll` with the closure…",75,[[["f"]],[["result"],["poll",["result"]]]]],[11,"map_ok","","Changes the success value of this `Poll` with the closure…",75,[[["f"]],[["option",["result"]],["poll",["option"]]]]],[11,"map_err","","Changes the error value of this `Poll` with the closure…",75,[[["f"]],[["option",["result"]],["poll",["option"]]]]],[11,"new","","Creates a new `RawWaker` from the provided `data` pointer…",358,[[["rawwakervtable"]],["rawwaker"]]],[11,"new","","Creates a new `RawWakerVTable` from the provided `clone`,…",359,[[],["rawwakervtable"]]],[11,"wake","","Wake up the task associated with this `Waker`.",360,[[]]],[11,"wake_by_ref","","Wake up the task associated with this `Waker` without…",360,[[["self"]]]],[11,"will_wake","","Returns `true` if this `Waker` and another `Waker` have…",360,[[["self"],["waker"]],["bool"]]],[11,"from_raw","","Creates a new `Waker` from [`RawWaker`].",360,[[["rawwaker"]],["waker"]]],[11,"description","no_std_compat::alloc","",363,[[["self"]],["str"]]],[11,"from_size_align","","Constructs a `Layout` from a given `size` and `align`, or…",365,[[["usize"]],[["layouterr"],["result",["layout","layouterr"]],["layout"]]]],[11,"from_size_align_unchecked","","Creates a layout, bypassing all checks.",365,[[["usize"]],["layout"]]],[11,"size","","The minimum size in bytes for a memory block of this layout.",365,[[["self"]],["usize"]]],[11,"align","","The minimum byte alignment for a memory block of this…",365,[[["self"]],["usize"]]],[11,"new","","Constructs a `Layout` suitable for holding a value of type…",365,[[],["layout"]]],[11,"for_value","","Produces layout describing a record that could be used to…",365,[[["t"]],["layout"]]],[11,"dangling","","Creates a `NonNull` that is dangling, but well-aligned for…",365,[[["self"]],[["nonnull",["u8"]],["u8"]]]],[11,"align_to","","Creates a layout describing the record that can hold a…",365,[[["self"],["usize"]],[["layouterr"],["result",["layout","layouterr"]],["layout"]]]],[11,"padding_needed_for","","Returns the amount of padding we must insert after `self`…",365,[[["self"],["usize"]],["usize"]]],[11,"pad_to_align","","Creates a layout by rounding the size of this layout up to…",365,[[["self"]],["layout"]]],[11,"repeat","","Creates a layout describing the record for `n` instances…",365,[[["self"],["usize"]],[["result",["layouterr"]],["layouterr"]]]],[11,"extend","","Creates a layout describing the record for `self` followed…",365,[[["self"],["layout"]],[["result",["layouterr"]],["layouterr"]]]],[11,"repeat_packed","","Creates a layout describing the record for `n` instances…",365,[[["self"],["usize"]],[["layouterr"],["result",["layout","layouterr"]],["layout"]]]],[11,"extend_packed","","Creates a layout describing the record for `self` followed…",365,[[["self"],["layout"]],[["layouterr"],["result",["layout","layouterr"]],["layout"]]]],[11,"array","","Creates a layout describing the record for a `[T; n]`.",365,[[["usize"]],[["layouterr"],["result",["layout","layouterr"]],["layout"]]]],[11,"is_borrowed","no_std_compat::borrow","Returns true if the data is borrowed, i.e. if `to_mut`…",79,[[["self"]],["bool"]]],[11,"is_owned","","Returns true if the data is owned, i.e. if `to_mut` would…",79,[[["self"]],["bool"]]],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",79,[[["self"]]]],[11,"into_owned","","Extracts the owned data.",79,[[]]],[11,"entry","no_std_compat::fmt","Adds a new entry to the list output.",369,[[["self"],["debug"]],["debuglist"]]],[11,"entries","","Adds the contents of an iterator of entries to the list…",369,[[["self"],["i"]],["debuglist"]]],[11,"finish","","Finishes output and returns any error encountered.",369,[[["self"]],[["result",["error"]],["error"]]]],[11,"entry","","Adds a new entry to the map output.",370,[[["self"],["debug"]],["debugmap"]]],[11,"key","","Adds the key part of a new entry to the map output.",370,[[["self"],["debug"]],["debugmap"]]],[11,"value","","Adds the value part of a new entry to the map output.",370,[[["self"],["debug"]],["debugmap"]]],[11,"entries","","Adds the contents of an iterator of entries to the map…",370,[[["self"],["i"]],["debugmap"]]],[11,"finish","","Finishes output and returns any error encountered.",370,[[["self"]],[["result",["error"]],["error"]]]],[11,"entry","","Adds a new entry to the set output.",371,[[["self"],["debug"]],["debugset"]]],[11,"entries","","Adds the contents of an iterator of entries to the set…",371,[[["self"],["i"]],["debugset"]]],[11,"finish","","Finishes output and returns any error encountered.",371,[[["self"]],[["result",["error"]],["error"]]]],[11,"field","","Adds a new field to the generated struct output.",372,[[["str"],["self"],["debug"]],["debugstruct"]]],[11,"finish_non_exhaustive","","Marks the struct as non-exhaustive, indicating to the…",372,[[["self"]],[["result",["error"]],["error"]]]],[11,"finish","","Finishes output and returns any error encountered.",372,[[["self"]],[["result",["error"]],["error"]]]],[11,"field","","Adds a new field to the generated tuple struct output.",373,[[["self"],["debug"]],["debugtuple"]]],[11,"finish","","Finishes output and returns any error encountered.",373,[[["self"]],[["result",["error"]],["error"]]]],[11,"pad_integral","","Performs the correct padding for an integer which has…",374,[[["str"],["self"],["bool"]],[["result",["error"]],["error"]]]],[11,"pad","","This function takes a string slice and emits it to the…",374,[[["str"],["self"]],[["result",["error"]],["error"]]]],[11,"write_str","","Writes some data to the underlying buffer contained within…",374,[[["str"],["self"]],[["result",["error"]],["error"]]]],[11,"write_fmt","","Writes some formatted information into this instance.",374,[[["self"],["arguments"]],[["result",["error"]],["error"]]]],[11,"flags","","Flags for formatting",374,[[["self"]],["u32"]]],[11,"fill","","Character used as 'fill' whenever there is alignment.",374,[[["self"]],["char"]]],[11,"align","","Flag indicating what form of alignment was requested.",374,[[["self"]],[["option",["alignment"]],["alignment"]]]],[11,"width","","Optionally specified integer width that the output should…",374,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"precision","","Optionally specified precision for numeric types.",374,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"sign_plus","","Determines if the `+` flag was specified.",374,[[["self"]],["bool"]]],[11,"sign_minus","","Determines if the `-` flag was specified.",374,[[["self"]],["bool"]]],[11,"alternate","","Determines if the `#` flag was specified.",374,[[["self"]],["bool"]]],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",374,[[["self"]],["bool"]]],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with…",374,[[["self"],["str"]],["debugstruct"]]],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with…",374,[[["self"],["str"]],["debugtuple"]]],[11,"debug_list","","Creates a `DebugList` builder designed to assist with…",374,[[["self"]],["debuglist"]]],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with…",374,[[["self"]],["debugset"]]],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with…",374,[[["self"]],["debugmap"]]],[11,"new","no_std_compat::rc","Constructs a new `Rc<T>`.",375,[[["t"]],["rc"]]],[11,"new_uninit","","Constructs a new `Rc` with uninitialized contents.",375,[[],[["rc",["maybeuninit"]],["maybeuninit"]]]],[11,"new_zeroed","","Constructs a new `Rc` with uninitialized contents, with…",375,[[],[["rc",["maybeuninit"]],["maybeuninit"]]]],[11,"pin","","Constructs a new `Pin<Rc<T>>`. If `T` does not implement…",375,[[["t"]],[["rc"],["pin",["rc"]]]]],[11,"try_unwrap","","Returns the inner value, if the `Rc` has exactly one…",375,[[["rc"]],[["result",["rc"]],["rc"]]]],[11,"new_uninit_slice","","Constructs a new reference-counted slice with…",375,[[["usize"]],["rc"]]],[11,"assume_init","","Converts to `Rc<T>`.",375,[[],["rc"]]],[11,"assume_init","","Converts to `Rc<[T]>`.",375,[[],["rc"]]],[11,"into_raw","","Consumes the `Rc`, returning the wrapped pointer.",375,[[["rc"]]]],[11,"from_raw","","Constructs an `Rc` from a raw pointer.",375,[[],["rc"]]],[11,"into_raw_non_null","","Consumes the `Rc`, returning the wrapped pointer as…",375,[[["rc"]],["nonnull"]]],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this allocation.",375,[[["rc"]],["weak"]]],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this…",375,[[["rc"]],["usize"]]],[11,"strong_count","","Gets the number of strong (`Rc`) pointers to this…",375,[[["rc"]],["usize"]]],[11,"get_mut","","Returns a mutable reference into the given `Rc`, if there…",375,[[["rc"]],[["option"],["t"]]]],[11,"get_mut_unchecked","","Returns a mutable reference into the given `Rc`, without…",375,[[["rc"]],["t"]]],[11,"ptr_eq","","Returns `true` if the two `Rc`s point to the same…",375,[[["rc"]],["bool"]]],[11,"make_mut","","Makes a mutable reference into the given `Rc`.",375,[[["rc"]],["t"]]],[11,"downcast","","Attempt to downcast the `Rc<dyn Any>` to a concrete type.",375,[[],[["result",["rc","rc"]],["rc"],["rc",["any"]]]]],[11,"new","","Constructs a new `Weak<T>`, without allocating any memory.…",376,[[],["weak"]]],[11,"as_raw","","Returns a raw pointer to the object `T` pointed to by this…",376,[[["self"]]]],[11,"into_raw","","Consumes the `Weak<T>` and turns it into a raw pointer.",376,[[]]],[11,"from_raw","","Converts a raw pointer previously created by [`into_raw`]…",376,[[],["weak"]]],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Rc`],…",376,[[["self"]],[["option",["rc"]],["rc"]]]],[11,"strong_count","","Gets the number of strong (`Rc`) pointers pointing to this…",376,[[["self"]],["usize"]]],[11,"weak_count","","Gets the number of `Weak` pointers pointing to this…",376,[[["self"]],["usize"]]],[11,"ptr_eq","","Returns `true` if the two `Weak`s point to the same…",376,[[["weak"],["self"]],["bool"]]],[11,"remainder","no_std_compat::slice","Returns the remainder of the original slice that is not…",379,[[["self"]]]],[11,"into_remainder","","Returns the remainder of the original slice that is not…",380,[[]]],[11,"as_slice","","Views the underlying data as a subslice of the original…",384,[[["self"]]]],[11,"into_slice","","Views the underlying data as a subslice of the original…",385,[[]]],[11,"as_slice","","Views the underlying data as a subslice of the original…",385,[[["self"]]]],[11,"remainder","","Returns the remainder of the original slice that is not…",387,[[["self"]]]],[11,"into_remainder","","Returns the remainder of the original slice that is not…",388,[[]]],[11,"as_str","no_std_compat::str","Views the underlying data as a subslice of the original…",404,[[["self"]],["str"]]],[11,"as_str","","Views the underlying data as a subslice of the original…",405,[[["self"]],["str"]]],[11,"valid_up_to","","Returns the index in the given string up to which valid…",410,[[["self"]],["usize"]]],[11,"error_len","","Provides more information about the failure:",410,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"as_bytes","no_std_compat::string","Returns a slice of [`u8`]s bytes that were attempted to…",423,[[["self"]]]],[11,"into_bytes","","Returns the bytes that were attempted to convert to a…",423,[[],[["u8"],["vec",["u8"]]]]],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the…",423,[[["self"]],["utf8error"]]],[11,"as_slice","no_std_compat::prelude::v1::vec","Returns the remaining items of this iterator as a slice.",426,[[["self"]]]],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable…",426,[[["self"]]]],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",427,[[["self"]]]],[11,"is","no_std_compat::any","Returns `true` if the boxed type is the same as `T`.",101,[[["self"]],["bool"]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type…",101,[[["self"]],[["option"],["t"]]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is…",101,[[["self"]],[["option"],["t"]]]],[11,"is","","Forwards to the method defined on the type `Any`.",101,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",101,[[["self"]],[["option"],["t"]]]],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",101,[[["self"]],[["option"],["t"]]]],[11,"is","","Forwards to the method defined on the type `Any`.",101,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",101,[[["self"]],[["option"],["t"]]]],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",101,[[["self"]],[["option"],["t"]]]],[11,"of","","Returns the `TypeId` of the type this generic function has…",430,[[],["typeid"]]],[11,"new","no_std_compat::array","Creates a new iterator over the given `array`.",442,[[],["intoiter"]]],[11,"new","no_std_compat::cell","Creates a new `Cell` containing the given value.",443,[[["t"]],["cell"]]],[11,"set","","Sets the contained value.",443,[[["self"],["t"]]]],[11,"swap","","Swaps the values of two Cells. Difference with…",443,[[["cell"],["self"]]]],[11,"replace","","Replaces the contained value, and returns it.",443,[[["self"],["t"]],["t"]]],[11,"into_inner","","Unwraps the value.",443,[[],["t"]]],[11,"get","","Returns a copy of the contained value.",443,[[["self"]],["t"]]],[11,"update","","Updates the contained value using a function and returns…",443,[[["self"],["f"]],["t"]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",443,[[["self"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",443,[[["self"]],["t"]]],[11,"from_mut","","Returns a `&Cell<T>` from a `&mut T`",443,[[["t"]],["cell"]]],[11,"take","","Takes the value of the cell, leaving `Default::default()`…",443,[[["self"]],["t"]]],[11,"as_slice_of_cells","","Returns a `&[Cell<T>]` from a `&Cell<[T]>`",443,[[["self"]]]],[11,"new","","Creates a new `RefCell` containing `value`.",444,[[["t"]],["refcell"]]],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",444,[[],["t"]]],[11,"replace","","Replaces the wrapped value with a new one, returning the…",444,[[["self"],["t"]],["t"]]],[11,"replace_with","","Replaces the wrapped value with a new one computed from…",444,[[["self"],["f"]],["t"]]],[11,"swap","","Swaps the wrapped value of `self` with the wrapped value…",444,[[["refcell"],["self"]]]],[11,"borrow","","Immutably borrows the wrapped value.",444,[[["self"]],["ref"]]],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if…",444,[[["self"]],[["ref"],["result",["ref","borrowerror"]],["borrowerror"]]]],[11,"borrow_mut","","Mutably borrows the wrapped value.",444,[[["self"]],["refmut"]]],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if…",444,[[["self"]],[["refmut"],["borrowmuterror"],["result",["refmut","borrowmuterror"]]]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",444,[[["self"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",444,[[["self"]],["t"]]],[11,"try_borrow_unguarded","","Immutably borrows the wrapped value, returning an error if…",444,[[["self"]],[["t"],["result",["borrowerror"]],["borrowerror"]]]],[11,"clone","","Copies a `Ref`.",447,[[["ref"]],["ref"]]],[11,"map","","Makes a new `Ref` for a component of the borrowed data.",447,[[["ref"],["f"]],["ref"]]],[11,"map_split","","Splits a `Ref` into multiple `Ref`s for different…",447,[[["ref"],["f"]]]],[11,"leak","","Convert into a reference to the underlying data.",447,[[["ref"]],["t"]]],[11,"map","","Makes a new `RefMut` for a component of the borrowed data,…",448,[[["refmut"],["f"]],["refmut"]]],[11,"map_split","","Splits a `RefMut` into multiple `RefMut`s for different…",448,[[["refmut"],["f"]]]],[11,"leak","","Convert into a mutable reference to the underlying data.",448,[[["refmut"]],["t"]]],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap…",449,[[["t"]],["unsafecell"]]],[11,"into_inner","","Unwraps the value.",449,[[],["t"]]],[11,"get","","Gets a mutable pointer to the wrapped value.",449,[[["self"]]]],[11,"raw_get","","Gets a mutable pointer to the wrapped value. The…",449,[[]]],[11,"unpaired_surrogate","no_std_compat::char","Returns the unpaired surrogate which caused this error.",458,[[["self"]],["u16"]]],[11,"reverse","no_std_compat::cmp","Reverses the `Ordering`.",105,[[],["ordering"]]],[11,"then","","Chains two orderings.",105,[[["ordering"]],["ordering"]]],[11,"then_with","","Chains the ordering with the given function.",105,[[["f"]],["ordering"]]],[11,"new","no_std_compat::hash","Creates a new `SipHasher` with the two initial keys set to…",461,[[],["siphasher"]]],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",461,[[["u64"]],["siphasher"]]],[11,"peek","no_std_compat::iter","Returns a reference to the next() value without advancing…",483,[[["self"]],["option"]]],[11,"new","no_std_compat::mem","Wrap a value to be manually dropped.",494,[[["t"]],["manuallydrop"]]],[11,"into_inner","","Extracts the value from the `ManuallyDrop` container.",494,[[["manuallydrop"]],["t"]]],[11,"take","","Takes the value from the `ManuallyDrop<T>` container out.",494,[[["manuallydrop"]],["t"]]],[11,"drop","","Manually drops the contained value.",494,[[["manuallydrop"]]]],[11,"new","","Creates a new `MaybeUninit<T>` initialized with the given…",495,[[["t"]],["maybeuninit"]]],[11,"uninit","","Creates a new `MaybeUninit<T>` in an uninitialized state.",495,[[],["maybeuninit"]]],[11,"uninit_array","","Create a new array of `MaybeUninit<T>` items, in an…",495,[[]]],[18,"UNINIT","","A promotable constant, equivalent to `uninit()`.",495,null],[11,"zeroed","","Creates a new `MaybeUninit<T>` in an uninitialized state,…",495,[[],["maybeuninit"]]],[11,"write","","Sets the value of the `MaybeUninit<T>`. This overwrites…",495,[[["self"],["t"]],["t"]]],[11,"as_ptr","","Gets a pointer to the contained value. Reading from this…",495,[[["self"]]]],[11,"as_mut_ptr","","Gets a mutable pointer to the contained value. Reading…",495,[[["self"]]]],[11,"assume_init","","Extracts the value from the `MaybeUninit<T>` container.…",495,[[],["t"]]],[11,"read","","Reads the value from the `MaybeUninit<T>` container. The…",495,[[["self"]],["t"]]],[11,"get_ref","","Gets a shared reference to the contained value.",495,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable (unique) reference to the contained value.",495,[[["self"]],["t"]]],[11,"slice_get_ref","","Assuming all the elements are initialized, get a slice to…",495,[[]]],[11,"slice_get_mut","","Assuming all the elements are initialized, get a mutable…",495,[[]]],[11,"first_ptr","","Gets a pointer to the first element of the array.",495,[[]]],[11,"first_ptr_mut","","Gets a mutable pointer to the first element of the array.",495,[[]]],[11,"contains","no_std_compat::ops","Returns `true` if `item` is contained in the range.",142,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",142,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",143,[[["self"],["u"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",144,[[["self"],["u"]],["bool"]]],[11,"new","","Creates a new inclusive range. Equivalent to writing…",497,[[["idx"]],["rangeinclusive"]]],[11,"start","","Returns the lower bound of the range (inclusive).",497,[[["self"]],["idx"]]],[11,"end","","Returns the upper bound of the range (inclusive).",497,[[["self"]],["idx"]]],[11,"into_inner","","Destructures the `RangeInclusive` into (lower bound, upper…",497,[[]]],[11,"contains","","Returns `true` if `item` is contained in the range.",497,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",497,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",146,[[["self"],["u"]],["bool"]]],[11,"new","no_std_compat::pin","Construct a new `Pin<P>` around a pointer to some data of…",502,[[["p"]],["pin"]]],[11,"into_inner","","Unwraps this `Pin<P>` returning the underlying pointer.",502,[[["pin"]],["p"]]],[11,"new_unchecked","","Construct a new `Pin<P>` around a reference to some data…",502,[[["p"]],["pin"]]],[11,"as_ref","","Gets a pinned shared reference from this pinned pointer.",502,[[["self"]],["pin"]]],[11,"into_inner_unchecked","","Unwraps this `Pin<P>` returning the underlying pointer.",502,[[["pin"]],["p"]]],[11,"as_mut","","Gets a pinned mutable reference from this pinned pointer.",502,[[["self"]],["pin"]]],[11,"set","","Assigns a new value to the memory behind the pinned…",502,[[["self"]]]],[11,"map_unchecked","","Constructs a new pin by mapping the interior value.",502,[[["f"]],[["pin"],["u"]]]],[11,"get_ref","","Gets a shared reference out of a pin.",502,[[],["t"]]],[11,"into_ref","","Converts this `Pin<&mut T>` into a `Pin<&T>` with the same…",502,[[],[["t"],["pin"]]]],[11,"get_mut","","Gets a mutable reference to the data inside of this `Pin`.",502,[[],["t"]]],[11,"get_unchecked_mut","","Gets a mutable reference to the data inside of this `Pin`.",502,[[],["t"]]],[11,"map_unchecked_mut","","Construct a new pin by mapping the interior value.",502,[[["f"]],[["pin"],["u"]]]],[11,"dangling","no_std_compat::ptr","Creates a new `NonNull` that is dangling, but well-aligned.",503,[[],["nonnull"]]],[11,"new_unchecked","","Creates a new `NonNull`.",503,[[],["nonnull"]]],[11,"new","","Creates a new `NonNull` if `ptr` is non-null.",503,[[],[["option",["nonnull"]],["nonnull"]]]],[11,"as_ptr","","Acquires the underlying `*mut` pointer.",503,[[]]],[11,"as_ref","","Dereferences the content.",503,[[["self"]],["t"]]],[11,"as_mut","","Mutably dereferences the content.",503,[[["self"]],["t"]]],[11,"cast","","Casts to a pointer of another type.",503,[[],["nonnull"]]]],"p":[[8,"Drop"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"AsMut"],[8,"AsRef"],[8,"From"],[8,"Into"],[8,"DoubleEndedIterator"],[8,"ExactSizeIterator"],[8,"Extend"],[8,"IntoIterator"],[8,"Iterator"],[4,"Option"],[4,"Result"],[8,"Clone"],[8,"Default"],[8,"Ord"],[8,"PartialEq"],[8,"PartialOrd"],[8,"ToOwned"],[8,"ToString"],[8,"AsciiExt"],[4,"BacktraceStatus"],[4,"RawEntryMut"],[4,"Entry"],[4,"Bound"],[4,"Entry"],[4,"TryReserveError"],[13,"AllocError"],[4,"VarError"],[8,"Error"],[8,"BufRead"],[8,"Read"],[8,"Seek"],[8,"Write"],[4,"SeekFrom"],[4,"ErrorKind"],[4,"Shutdown"],[4,"SocketAddr"],[8,"ToSocketAddrs"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Wrapping"],[4,"FpCategory"],[4,"IntErrorKind"],[8,"MetadataExt"],[3,"stat"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"FileExt"],[8,"PermissionsExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"FileTypeExt"],[8,"DirEntryExt"],[8,"DirBuilderExt"],[8,"AsRawFd"],[8,"FromRawFd"],[8,"IntoRawFd"],[8,"CommandExt"],[8,"ExitStatusExt"],[8,"JoinHandleExt"],[3,"AssertUnwindSafe"],[4,"Prefix"],[4,"Component"],[3,"Child"],[3,"Output"],[8,"Termination"],[3,"SendError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[4,"TrySendError"],[4,"Ordering"],[4,"TryLockError"],[4,"Poll"],[8,"Future"],[8,"GlobalAlloc"],[8,"AllocRef"],[4,"Cow"],[8,"Borrow"],[8,"BorrowMut"],[4,"Alignment"],[8,"Binary"],[8,"Octal"],[8,"Debug"],[8,"Display"],[8,"Write"],[8,"LowerExp"],[8,"UpperExp"],[8,"LowerHex"],[8,"Pointer"],[8,"UpperHex"],[8,"Concat"],[8,"Join"],[8,"SliceIndex"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"Any"],[3,"CpuidResult"],[8,"FixedSizeArray"],[3,"UnicodeVersion"],[4,"Ordering"],[3,"Reverse"],[8,"TryInto"],[8,"TryFrom"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Step"],[8,"FromIterator"],[8,"Product"],[8,"Sum"],[8,"Add"],[8,"Div"],[8,"Mul"],[8,"Neg"],[8,"Rem"],[8,"Sub"],[8,"AddAssign"],[8,"DivAssign"],[8,"MulAssign"],[8,"RemAssign"],[8,"SubAssign"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Not"],[8,"Shl"],[8,"Shr"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Deref"],[8,"DerefMut"],[8,"Index"],[8,"IndexMut"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[8,"RangeBounds"],[3,"RangeToInclusive"],[8,"Try"],[8,"Generator"],[4,"GeneratorState"],[3,"TraitObject"],[3,"Box"],[3,"String"],[3,"Vec"],[3,"Builder"],[3,"ThreadId"],[3,"Thread"],[3,"JoinHandle"],[3,"AccessError"],[3,"LocalKey"],[3,"__FastLocalKeyInner"],[3,"__OsLocalKeyInner"],[3,"EscapeDefault"],[3,"Backtrace"],[3,"HashMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"DefaultHasher"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"BinaryHeap"],[3,"PeekMut"],[3,"Iter"],[3,"IntoIter"],[3,"IntoIterSorted"],[3,"Drain"],[3,"DrainSorted"],[3,"BTreeMap"],[3,"Keys"],[3,"Iter"],[3,"IntoIter"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"IterMut"],[3,"ValuesMut"],[3,"Iter"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"BTreeSet"],[3,"IntoIter"],[3,"Range"],[3,"LinkedList"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Cursor"],[3,"CursorMut"],[3,"DrainFilter"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Vars"],[3,"VarsOs"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"Chain"],[3,"FromBytesWithNulError"],[3,"CStr"],[3,"CString"],[3,"IntoStringError"],[3,"NulError"],[3,"OsStr"],[3,"OsString"],[4,"c_void"],[3,"VaList"],[3,"VaListImpl"],[3,"File"],[3,"Metadata"],[3,"ReadDir"],[3,"DirEntry"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"DirBuilder"],[3,"IoSliceMut"],[3,"IoSlice"],[3,"Initializer"],[3,"Chain"],[3,"Take"],[3,"Bytes"],[3,"Split"],[3,"Lines"],[3,"IntoInnerError"],[3,"BufReader"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[3,"Error"],[3,"Stderr"],[3,"Stdin"],[3,"Stdout"],[3,"StderrLock"],[3,"StdinLock"],[3,"StdoutLock"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"AddrParseError"],[3,"Incoming"],[3,"TcpListener"],[3,"TcpStream"],[3,"UdpSocket"],[3,"ParseFloatError"],[3,"ParseIntError"],[3,"TryFromIntError"],[3,"NonZeroI128"],[3,"NonZeroI16"],[3,"NonZeroI32"],[3,"NonZeroI64"],[3,"NonZeroI8"],[3,"NonZeroIsize"],[3,"NonZeroU128"],[3,"NonZeroU16"],[3,"NonZeroU32"],[3,"NonZeroU64"],[3,"NonZeroU8"],[3,"NonZeroUsize"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"],[3,"Location"],[3,"PanicInfo"],[3,"PrefixComponent"],[3,"Components"],[3,"Iter"],[3,"Ancestors"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"Command"],[3,"Stdio"],[3,"ExitStatus"],[3,"ExitCode"],[3,"Receiver"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[3,"Sender"],[3,"SyncSender"],[3,"RecvError"],[3,"Arc"],[3,"Weak"],[3,"AtomicBool"],[3,"AtomicPtr"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"Condvar"],[3,"WaitTimeoutResult"],[3,"Mutex"],[3,"MutexGuard"],[3,"Once"],[3,"OnceState"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"PoisonError"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"Duration"],[3,"Context"],[3,"RawWaker"],[3,"RawWakerVTable"],[3,"Waker"],[3,"System"],[3,"AllocErr"],[3,"CannotReallocInPlace"],[3,"LayoutErr"],[3,"Layout"],[3,"Global"],[3,"Error"],[3,"Arguments"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"Formatter"],[3,"Rc"],[3,"Weak"],[3,"Chunks"],[3,"Windows"],[3,"ChunksExact"],[3,"ChunksExactMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[3,"Iter"],[3,"IterMut"],[3,"RChunks"],[3,"RChunksExact"],[3,"RChunksExactMut"],[3,"RChunksMut"],[3,"RSplit"],[3,"RSplitMut"],[3,"RSplitN"],[3,"RSplitNMut"],[3,"SplitN"],[3,"SplitNMut"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"EncodeUtf16"],[3,"SplitAsciiWhitespace"],[3,"SplitWhitespace"],[3,"Bytes"],[3,"CharIndices"],[3,"Chars"],[3,"ParseBoolError"],[3,"EscapeDebug"],[3,"EscapeDefault"],[3,"EscapeUnicode"],[3,"Utf8Error"],[3,"Lines"],[3,"LinesAny"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"RSplit"],[3,"Split"],[3,"RSplitN"],[3,"SplitN"],[3,"RSplitTerminator"],[3,"SplitTerminator"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"Splice"],[3,"DrainFilter"],[3,"TypeId"],[3,"__m64"],[3,"__m128i"],[3,"__m128"],[3,"__m128d"],[3,"__m256i"],[3,"__m256"],[3,"__m256d"],[3,"__m512i"],[3,"__m512"],[3,"__m512d"],[3,"TryFromSliceError"],[3,"IntoIter"],[3,"Cell"],[3,"RefCell"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EscapeDebug"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"CharTryFromError"],[3,"ParseCharError"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[4,"Infallible"],[3,"BuildHasherDefault"],[3,"SipHasher"],[3,"Empty"],[3,"FromFn"],[3,"Once"],[3,"OnceWith"],[3,"Repeat"],[3,"RepeatWith"],[3,"Successors"],[3,"Cloned"],[3,"Copied"],[3,"Flatten"],[3,"MapWhile"],[3,"StepBy"],[3,"Chain"],[3,"Cycle"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"Map"],[3,"Rev"],[3,"Zip"],[3,"FlatMap"],[3,"Peekable"],[3,"Scan"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Fuse"],[3,"Inspect"],[3,"PhantomData"],[3,"PhantomPinned"],[3,"Discriminant"],[3,"ManuallyDrop"],[19,"MaybeUninit"],[3,"RangeFull"],[3,"RangeInclusive"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"NoneError"],[3,"Pin"],[3,"NonNull"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"]]};
searchIndex["proc_macro2"] = {"doc":"A wrapper around the procedural macro API of the…","i":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a…",null,null],[3,"LexError","","Error returned from `TokenStream::from_str`.",null,null],[3,"Span","","A region of source code, along with macro expansion…",null,null],[3,"Group","","A delimited token stream.",null,null],[3,"Punct","","An `Punct` is an single punctuation character like `+`,…",null,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal…",null,null],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`),…",null,null],[4,"TokenTree","","A single token or a delimited sequence of token trees…",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",0,null],[13,"Ident","","An identifier.",0,null],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,null],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number…",0,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","`( ... )`",1,null],[13,"Brace","","`{ ... }`",1,null],[13,"Bracket","","`[ ... ]`",1,null],[13,"None","","`Ø ... Ø`",1,null],[4,"Spacing","","Whether an `Punct` is followed immediately by another…",null,null],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,null],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'` is `Joint` in `'#`.",2,null],[0,"token_stream","","Public implementation details for the `TokenStream` type,…",null,null],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",null,null],[11,"new","proc_macro2","Returns an empty `TokenStream` containing no token trees.",3,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",3,[[["self"]],["bool"]]],[11,"call_site","","The span of the invocation of the current procedural macro.",4,[[],["span"]]],[11,"unwrap","","Convert `proc_macro2::Span` to `proc_macro::Span`.",4,[[],["span"]]],[11,"join","","Create a new span encompassing `self` and `other`.",4,[[["self"],["span"]],[["option",["span"]],["span"]]]],[11,"span","","Returns the span of this tree, delegating to the `span`…",0,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",0,[[["self"],["span"]]]],[11,"new","","Creates a new `Group` with the given delimiter and token…",5,[[["delimiter"],["tokenstream"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",5,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in…",5,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream,…",5,[[["self"]],["span"]]],[11,"span_open","","Returns the span pointing to the opening delimiter of this…",5,[[["self"]],["span"]]],[11,"span_close","","Returns the span pointing to the closing delimiter of this…",5,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not…",5,[[["self"],["span"]]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",6,[[["char"],["spacing"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",6,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character,…",6,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",6,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",6,[[["self"],["span"]]]],[11,"new","","Creates a new `Ident` with the given `string` as well as…",7,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",7,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its…",7,[[["self"],["span"]]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["u64"]],["literal"]]],[11,"u128_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["u128"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["i64"]],["literal"]]],[11,"i128_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["i128"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["u64"]],["literal"]]],[11,"u128_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["u128"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["i64"]],["literal"]]],[11,"i128_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["i128"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["isize"]],["literal"]]],[11,"f64_unsuffixed","","Creates a new unsuffixed floating-point literal.",8,[[["f64"]],["literal"]]],[11,"f64_suffixed","","Creates a new suffixed floating-point literal.",8,[[["f64"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",8,[[["f32"]],["literal"]]],[11,"f32_suffixed","","Creates a new suffixed floating-point literal.",8,[[["f32"]],["literal"]]],[11,"string","","String literal.",8,[[["str"]],["literal"]]],[11,"character","","Character literal.",8,[[["char"]],["literal"]]],[11,"byte_string","","Byte string literal.",8,[[],["literal"]]],[11,"span","","Returns the span encompassing this literal.",8,[[["self"]],["span"]]],[11,"set_span","","Configures the span associated for this literal.",8,[[["self"],["span"]]]],[11,"subspan","","Returns a `Span` that is a subset of `self.span()`…",8,[[["rangebounds",["usize"]],["self"],["usize"]],[["option",["span"]],["span"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"into_iter","","",3,[[],["i"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","proc_macro2::token_stream","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"into_iter","","",10,[[],["i"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","proc_macro2","",4,[[["span"]],["span"]]],[11,"from","","",3,[[["tokenstream"]],["tokenstream"]]],[11,"from","","",3,[[["tokentree"]],["self"]]],[11,"from","","",0,[[["group"]],["tokentree"]]],[11,"from","","",0,[[["ident"]],["tokentree"]]],[11,"from","","",0,[[["punct"]],["tokentree"]]],[11,"from","","",0,[[["literal"]],["tokentree"]]],[11,"extend","","",3,[[["self"],["intoiterator"]]]],[11,"extend","","",3,[[["intoiterator"],["self"]]]],[11,"into_iter","","",3,[[],["intoiter"]]],[11,"next","proc_macro2::token_stream","",10,[[["self"]],[["option",["tokentree"]],["tokentree"]]]],[11,"clone","proc_macro2","",3,[[["self"]],["tokenstream"]]],[11,"clone","","",4,[[["self"]],["span"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"clone","","",5,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["delimiter"]]],[11,"clone","","",6,[[["self"]],["punct"]]],[11,"clone","","",2,[[["self"]],["spacing"]]],[11,"clone","","",7,[[["self"]],["ident"]]],[11,"clone","","",8,[[["self"]],["literal"]]],[11,"clone","proc_macro2::token_stream","",10,[[["self"]],["intoiter"]]],[11,"default","proc_macro2","",3,[[],["self"]]],[11,"cmp","","",7,[[["self"],["ident"]],["ordering"]]],[11,"eq","","",1,[[["delimiter"],["self"]],["bool"]]],[11,"eq","","",2,[[["spacing"],["self"]],["bool"]]],[11,"eq","","",7,[[["self"],["ident"]],["bool"]]],[11,"eq","","",7,[[["t"],["self"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["ident"]],[["ordering"],["option",["ordering"]]]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","proc_macro2::token_stream","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","proc_macro2","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"hash","","",7,[[["self"],["h"]]]],[11,"from_iter","","",3,[[["intoiterator"]],["self"]]],[11,"from_iter","","",3,[[["intoiterator"]],["self"]]],[11,"from_str","","",3,[[["str"]],[["tokenstream"],["lexerror"],["result",["tokenstream","lexerror"]]]]]],"p":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"TokenStream"],[3,"Span"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"],[3,"LexError"],[3,"IntoIter"]]};
searchIndex["quote"] = {"doc":"![github] ![crates-io] ![docs-rs]","i":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending…",null,null],[10,"append","","For use by `ToTokens` implementations.",0,[[["u"],["self"]]]],[10,"append_all","","For use by `ToTokens` implementations.",0,[[["self"],["i"]]]],[10,"append_separated","","For use by `ToTokens` implementations.",0,[[["u"],["self"],["i"]]]],[10,"append_terminated","","For use by `ToTokens` implementations.",0,[[["u"],["self"],["i"]]]],[8,"IdentFragment","","Specialized formatting trait used by `format_ident!`.",null,null],[10,"fmt","","Format this value as an identifier fragment.",1,[[["formatter"],["self"]],["result"]]],[11,"span","","Span associated with this `IdentFragment`.",1,[[["self"]],[["option",["span"]],["span"]]]],[8,"ToTokens","","Types that can be interpolated inside a `quote!` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `TokenStream`.",2,[[["tokenstream"],["self"]]]],[11,"to_token_stream","","Convert `self` directly into a `TokenStream` object.",2,[[["self"]],["tokenstream"]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",2,[[],["tokenstream"]]],[14,"format_ident","","Formatting macro for constructing `Ident`s.",null,null],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens…",null,null],[11,"span","","Span associated with this `IdentFragment`.",1,[[["self"]],[["option",["span"]],["span"]]]],[11,"to_token_stream","","Convert `self` directly into a `TokenStream` object.",2,[[["self"]],["tokenstream"]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",2,[[],["tokenstream"]]]],"p":[[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]};
searchIndex["ryu"] = {"doc":"Pure Rust implementation of Ryū, an algorithm to quickly…","i":[[3,"Buffer","ryu","Safe API for formatting floating point numbers to text.",null,null],[11,"new","","This is a cheap operation; you don't need to worry about…",0,[[],["self"]]],[11,"format","","Print a floating point number into this buffer and return…",0,[[["self"],["float"]],["str"]]],[11,"format_finite","","Print a floating point number into this buffer and return…",0,[[["self"],["float"]],["str"]]],[0,"raw","","Unsafe functions that mirror the API of the C…",null,null],[5,"format32","ryu::raw","Print f32 to the given buffer and return number of bytes…",null,[[["f32"]],["usize"]]],[5,"format64","","Print f64 to the given buffer and return number of bytes…",null,[[["f64"]],["usize"]]],[8,"Float","ryu","A floating point number, f32 or f64, that can be written…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["buffer"]]],[11,"default","","",0,[[],["self"]]]],"p":[[3,"Buffer"]]};
searchIndex["serde"] = {"doc":"Serde","i":[[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any…",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",0,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32`…",0,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or…",0,null],[13,"Float","","The input contained a floating point `f32` or `f64` that…",0,null],[13,"Char","","The input contained a `char` that was not expected.",0,null],[13,"Str","","The input contained a `&str` or `String` that was not…",0,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not…",0,null],[13,"Unit","","The input contained a unit `()` that was not expected.",0,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,null],[13,"Seq","","The input contained a sequence that was not expected.",0,null],[13,"Map","","The input contained a map that was not expected.",0,null],[13,"Enum","","The input contained an enum that was not expected.",0,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,null],[13,"Other","","A message stating what uncategorized thing the input…",0,null],[0,"value","","Building blocks for deserializing basic values using the…",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can…",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"I128Deserializer","","A deserializer holding an `i128`.",null,null],[3,"U128Deserializer","","A deserializer holding a `u128`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to…",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to…",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"new","","Create a new borrowed deserializer from the given string.",1,[[["str"]],["borrowedstrdeserializer"]]],[11,"new","","Create a new borrowed deserializer from the given byte…",2,[[],["borrowedbytesdeserializer"]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",3,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a…",3,[[],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",4,[[["a"]],["self"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",5,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a…",5,[[],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",6,[[["a"]],["self"]]],[8,"Error","serde::de","The `Error` trait allows `Deserialize` implementations to…",null,null],[10,"custom","","Raised when there is general error when deserializing a…",7,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from…",7,[[["expected"],["unexpected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right…",7,[[["expected"],["unexpected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input…",7,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant…",7,[[["str"]],["self"]]],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field…",7,[[["str"]],["self"]]],[11,"missing_field","","Raised when a `Deserialize` struct type expected to…",7,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than…",7,[[["str"]],["self"]]],[8,"Expected","","`Expected` represents an explanation of what data a…",null,null],[10,"fmt","","Format an explanation of what data was being expected.…",8,[[["formatter"],["self"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data…",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",9,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without…",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the…",null,null],[16,"Value","","The type produced by using this seed.",10,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize`…",10,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",11,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the…",11,[[["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool`…",11,[[["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",11,[[["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16`…",11,[[["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32`…",11,[[["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64`…",11,[[["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128`…",11,[[["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",11,[[["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",11,[[["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",11,[[["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",11,[[["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128`…",11,[[["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",11,[[["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",11,[[["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char`…",11,[[["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string…",11,[[["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string…",11,[[["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array…",11,[[["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array…",11,[[["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional…",11,[[["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",11,[[["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence…",11,[[["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence…",11,[[["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple…",11,[[["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of…",11,[[["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of…",11,[[["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a…",11,[[["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should…",11,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a…",null,null],[16,"Value","","The value produced by this visitor.",12,null],[10,"expecting","","Format a message stating what data this Visitor expects to…",12,[[["formatter"],["self"]],["result"]]],[11,"visit_bool","","The input contains a boolean.",12,[[["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",12,[[["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",12,[[["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",12,[[["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",12,[[["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",12,[[["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",12,[[["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",12,[[["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",12,[[["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",12,[[["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",12,[[["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",12,[[["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",12,[[["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",12,[[["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is…",12,[[["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as…",12,[[["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is…",12,[[["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte…",12,[[],["result"]]],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as…",12,[[],["result"]]],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte…",12,[[["vec",["u8"]],["u8"]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",12,[[],["result"]]],[11,"visit_some","","The input contains an optional that is present.",12,[[["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",12,[[],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",12,[[["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",12,[[["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",12,[[["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",12,[[["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",13,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the…",13,[[["self"],["t"]],[["result",["option"]],["option"]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the…",13,[[["self"]],[["result",["option"]],["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence,…",13,[[["self"]],[["usize"],["option",["usize"]]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",14,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map,…",14,[[["self"],["k"]],[["option"],["result",["option"]]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",14,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next…",14,[[["self"],["k"],["v"]],[["result",["option"]],["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map,…",14,[[["self"]],[["result",["option"]],["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",14,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next…",14,[[["self"]],[["result",["option"]],["option"]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if…",14,[[["self"]],[["usize"],["option",["usize"]]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",15,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content…",15,null],[10,"variant_seed","","`variant` is called to identify which variant to…",15,[[["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to…",15,[[],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",16,null],[10,"unit_variant","","Called when deserializing a variant with no values.",16,[[],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",16,[[["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",16,[[],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",16,[[["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",16,[[["v"]],["result"]]],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from…",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",17,null],[10,"into_deserializer","","Convert this value into a deserializer.",17,[[]]],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not…",null,null],[8,"Error","","Trait used by `Serialize` implementations to generically…",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any…",18,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data…",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",19,[[["s"],["self"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure…",null,null],[16,"Ok","","The output type produced by this `Serializer` during…",20,null],[16,"Error","","The error type when some error occurs during serialization.",20,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the…",20,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the…",20,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for…",20,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for…",20,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the…",20,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing…",20,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for…",20,null],[10,"serialize_bool","","Serialize a `bool` value.",20,[[["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",20,[[["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",20,[[["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",20,[[["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",20,[[["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",20,[[["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",20,[[["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",20,[[["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",20,[[["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",20,[[["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",20,[[["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",20,[[["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",20,[[["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",20,[[["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",20,[[["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",20,[[],["result"]]],[10,"serialize_none","","Serialize a [`None`] value.",20,[[],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",20,[[["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",20,[[],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or…",20,[[["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",20,[[["str"],["u32"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",20,[[["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8)…",20,[[["str"],["u32"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call…",20,[[["usize"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose…",20,[[["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8,…",20,[[["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E…",20,[[["str"],["u32"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by…",20,[[["usize"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g:…",20,[[["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E…",20,[[["str"],["u32"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",20,[[["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",20,[[["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of…",20,[[["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should…",20,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",21,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",21,null],[10,"serialize_element","","Serialize a sequence element.",21,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",21,[[],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",22,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",22,null],[10,"serialize_element","","Serialize a tuple element.",22,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",22,[[],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",23,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",23,null],[10,"serialize_field","","Serialize a tuple struct field.",23,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",23,[[],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",24,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",24,null],[10,"serialize_field","","Serialize a tuple variant field.",24,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",24,[[],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",25,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",25,null],[10,"serialize_key","","Serialize a map key.",25,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",25,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",25,[[["k"],["self"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",25,[[],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",26,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",26,null],[10,"serialize_field","","Serialize a struct field.",26,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",26,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",26,[[],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",27,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",27,null],[10,"serialize_field","","Serialize a struct variant field.",27,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",27,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",27,[[],["result"]]],[8,"Deserialize","serde","A data structure that can be deserialized from any data…",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",9,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",11,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the…",11,[[["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool`…",11,[[["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",11,[[["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16`…",11,[[["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32`…",11,[[["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64`…",11,[[["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128`…",11,[[["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",11,[[["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",11,[[["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",11,[[["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",11,[[["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128`…",11,[[["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",11,[[["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",11,[[["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char`…",11,[[["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string…",11,[[["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string…",11,[[["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array…",11,[[["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array…",11,[[["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional…",11,[[["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",11,[[["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence…",11,[[["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence…",11,[[["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple…",11,[[["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of…",11,[[["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of…",11,[[["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a…",11,[[["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should…",11,[[["self"]],["bool"]]],[8,"Serialize","","A data structure that can be serialized into any data…",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",19,[[["s"],["self"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure…",null,null],[16,"Ok","","The output type produced by this `Serializer` during…",20,null],[16,"Error","","The error type when some error occurs during serialization.",20,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the…",20,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the…",20,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for…",20,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for…",20,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the…",20,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing…",20,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for…",20,null],[10,"serialize_bool","","Serialize a `bool` value.",20,[[["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",20,[[["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",20,[[["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",20,[[["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",20,[[["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",20,[[["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",20,[[["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",20,[[["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",20,[[["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",20,[[["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",20,[[["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",20,[[["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",20,[[["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",20,[[["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",20,[[["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",20,[[],["result"]]],[10,"serialize_none","","Serialize a [`None`] value.",20,[[],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",20,[[["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",20,[[],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or…",20,[[["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",20,[[["str"],["u32"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",20,[[["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8)…",20,[[["str"],["u32"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call…",20,[[["usize"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose…",20,[[["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8,…",20,[[["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E…",20,[[["str"],["u32"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by…",20,[[["usize"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g:…",20,[[["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E…",20,[[["str"],["u32"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",20,[[["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",20,[[["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of…",20,[[["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should…",20,[[["self"]],["bool"]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of…",null,null],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is…",null,null],[11,"fmt","serde::de","",28,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","serde::de::value","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","serde::ser","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"deserialize","serde::de","",28,[[["d"]],[["result",["ignoredany"]],["ignoredany"]]]],[11,"deserialize_bool","serde::de::value","",30,[[["v"]],["result"]]],[11,"deserialize_i8","","",30,[[["v"]],["result"]]],[11,"deserialize_i16","","",30,[[["v"]],["result"]]],[11,"deserialize_i32","","",30,[[["v"]],["result"]]],[11,"deserialize_i64","","",30,[[["v"]],["result"]]],[11,"deserialize_i128","","",30,[[["v"]],["result"]]],[11,"deserialize_u8","","",30,[[["v"]],["result"]]],[11,"deserialize_u16","","",30,[[["v"]],["result"]]],[11,"deserialize_u32","","",30,[[["v"]],["result"]]],[11,"deserialize_u64","","",30,[[["v"]],["result"]]],[11,"deserialize_u128","","",30,[[["v"]],["result"]]],[11,"deserialize_f32","","",30,[[["v"]],["result"]]],[11,"deserialize_f64","","",30,[[["v"]],["result"]]],[11,"deserialize_char","","",30,[[["v"]],["result"]]],[11,"deserialize_str","","",30,[[["v"]],["result"]]],[11,"deserialize_string","","",30,[[["v"]],["result"]]],[11,"deserialize_bytes","","",30,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",30,[[["v"]],["result"]]],[11,"deserialize_unit","","",30,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",30,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",30,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",30,[[["v"]],["result"]]],[11,"deserialize_tuple","","",30,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",30,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",30,[[["v"]],["result"]]],[11,"deserialize_struct","","",30,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",30,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",30,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",30,[[["v"]],["result"]]],[11,"deserialize_any","","",30,[[["v"]],["result"]]],[11,"deserialize_option","","",30,[[["v"]],["result"]]],[11,"deserialize_bool","","",31,[[["v"]],["result"]]],[11,"deserialize_i8","","",31,[[["v"]],["result"]]],[11,"deserialize_i16","","",31,[[["v"]],["result"]]],[11,"deserialize_i32","","",31,[[["v"]],["result"]]],[11,"deserialize_i64","","",31,[[["v"]],["result"]]],[11,"deserialize_i128","","",31,[[["v"]],["result"]]],[11,"deserialize_u8","","",31,[[["v"]],["result"]]],[11,"deserialize_u16","","",31,[[["v"]],["result"]]],[11,"deserialize_u32","","",31,[[["v"]],["result"]]],[11,"deserialize_u64","","",31,[[["v"]],["result"]]],[11,"deserialize_u128","","",31,[[["v"]],["result"]]],[11,"deserialize_f32","","",31,[[["v"]],["result"]]],[11,"deserialize_f64","","",31,[[["v"]],["result"]]],[11,"deserialize_char","","",31,[[["v"]],["result"]]],[11,"deserialize_str","","",31,[[["v"]],["result"]]],[11,"deserialize_string","","",31,[[["v"]],["result"]]],[11,"deserialize_bytes","","",31,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",31,[[["v"]],["result"]]],[11,"deserialize_option","","",31,[[["v"]],["result"]]],[11,"deserialize_unit","","",31,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",31,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",31,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",31,[[["v"]],["result"]]],[11,"deserialize_tuple","","",31,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",31,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",31,[[["v"]],["result"]]],[11,"deserialize_struct","","",31,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",31,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",31,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",31,[[["v"]],["result"]]],[11,"deserialize_any","","",31,[[["v"]],["result"]]],[11,"deserialize_bool","","",32,[[["v"]],["result"]]],[11,"deserialize_i8","","",32,[[["v"]],["result"]]],[11,"deserialize_i16","","",32,[[["v"]],["result"]]],[11,"deserialize_i32","","",32,[[["v"]],["result"]]],[11,"deserialize_i64","","",32,[[["v"]],["result"]]],[11,"deserialize_i128","","",32,[[["v"]],["result"]]],[11,"deserialize_u8","","",32,[[["v"]],["result"]]],[11,"deserialize_u16","","",32,[[["v"]],["result"]]],[11,"deserialize_u32","","",32,[[["v"]],["result"]]],[11,"deserialize_u64","","",32,[[["v"]],["result"]]],[11,"deserialize_u128","","",32,[[["v"]],["result"]]],[11,"deserialize_f32","","",32,[[["v"]],["result"]]],[11,"deserialize_f64","","",32,[[["v"]],["result"]]],[11,"deserialize_char","","",32,[[["v"]],["result"]]],[11,"deserialize_str","","",32,[[["v"]],["result"]]],[11,"deserialize_string","","",32,[[["v"]],["result"]]],[11,"deserialize_bytes","","",32,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",32,[[["v"]],["result"]]],[11,"deserialize_option","","",32,[[["v"]],["result"]]],[11,"deserialize_unit","","",32,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",32,[[["v"]],["result"]]],[11,"deserialize_tuple","","",32,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",32,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",32,[[["v"]],["result"]]],[11,"deserialize_struct","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",32,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",32,[[["v"]],["result"]]],[11,"deserialize_any","","",32,[[["v"]],["result"]]],[11,"deserialize_bool","","",33,[[["v"]],["result"]]],[11,"deserialize_i8","","",33,[[["v"]],["result"]]],[11,"deserialize_i16","","",33,[[["v"]],["result"]]],[11,"deserialize_i32","","",33,[[["v"]],["result"]]],[11,"deserialize_i64","","",33,[[["v"]],["result"]]],[11,"deserialize_i128","","",33,[[["v"]],["result"]]],[11,"deserialize_u8","","",33,[[["v"]],["result"]]],[11,"deserialize_u16","","",33,[[["v"]],["result"]]],[11,"deserialize_u32","","",33,[[["v"]],["result"]]],[11,"deserialize_u64","","",33,[[["v"]],["result"]]],[11,"deserialize_u128","","",33,[[["v"]],["result"]]],[11,"deserialize_f32","","",33,[[["v"]],["result"]]],[11,"deserialize_f64","","",33,[[["v"]],["result"]]],[11,"deserialize_char","","",33,[[["v"]],["result"]]],[11,"deserialize_str","","",33,[[["v"]],["result"]]],[11,"deserialize_string","","",33,[[["v"]],["result"]]],[11,"deserialize_bytes","","",33,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",33,[[["v"]],["result"]]],[11,"deserialize_option","","",33,[[["v"]],["result"]]],[11,"deserialize_unit","","",33,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",33,[[["v"]],["result"]]],[11,"deserialize_tuple","","",33,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",33,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",33,[[["v"]],["result"]]],[11,"deserialize_struct","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",33,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",33,[[["v"]],["result"]]],[11,"deserialize_any","","",33,[[["v"]],["result"]]],[11,"deserialize_bool","","",34,[[["v"]],["result"]]],[11,"deserialize_i8","","",34,[[["v"]],["result"]]],[11,"deserialize_i16","","",34,[[["v"]],["result"]]],[11,"deserialize_i32","","",34,[[["v"]],["result"]]],[11,"deserialize_i64","","",34,[[["v"]],["result"]]],[11,"deserialize_i128","","",34,[[["v"]],["result"]]],[11,"deserialize_u8","","",34,[[["v"]],["result"]]],[11,"deserialize_u16","","",34,[[["v"]],["result"]]],[11,"deserialize_u32","","",34,[[["v"]],["result"]]],[11,"deserialize_u64","","",34,[[["v"]],["result"]]],[11,"deserialize_u128","","",34,[[["v"]],["result"]]],[11,"deserialize_f32","","",34,[[["v"]],["result"]]],[11,"deserialize_f64","","",34,[[["v"]],["result"]]],[11,"deserialize_char","","",34,[[["v"]],["result"]]],[11,"deserialize_str","","",34,[[["v"]],["result"]]],[11,"deserialize_string","","",34,[[["v"]],["result"]]],[11,"deserialize_bytes","","",34,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",34,[[["v"]],["result"]]],[11,"deserialize_option","","",34,[[["v"]],["result"]]],[11,"deserialize_unit","","",34,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",34,[[["v"]],["result"]]],[11,"deserialize_tuple","","",34,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",34,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",34,[[["v"]],["result"]]],[11,"deserialize_struct","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",34,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",34,[[["v"]],["result"]]],[11,"deserialize_any","","",34,[[["v"]],["result"]]],[11,"deserialize_bool","","",35,[[["v"]],["result"]]],[11,"deserialize_i8","","",35,[[["v"]],["result"]]],[11,"deserialize_i16","","",35,[[["v"]],["result"]]],[11,"deserialize_i32","","",35,[[["v"]],["result"]]],[11,"deserialize_i64","","",35,[[["v"]],["result"]]],[11,"deserialize_i128","","",35,[[["v"]],["result"]]],[11,"deserialize_u8","","",35,[[["v"]],["result"]]],[11,"deserialize_u16","","",35,[[["v"]],["result"]]],[11,"deserialize_u32","","",35,[[["v"]],["result"]]],[11,"deserialize_u64","","",35,[[["v"]],["result"]]],[11,"deserialize_u128","","",35,[[["v"]],["result"]]],[11,"deserialize_f32","","",35,[[["v"]],["result"]]],[11,"deserialize_f64","","",35,[[["v"]],["result"]]],[11,"deserialize_char","","",35,[[["v"]],["result"]]],[11,"deserialize_str","","",35,[[["v"]],["result"]]],[11,"deserialize_string","","",35,[[["v"]],["result"]]],[11,"deserialize_bytes","","",35,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",35,[[["v"]],["result"]]],[11,"deserialize_option","","",35,[[["v"]],["result"]]],[11,"deserialize_unit","","",35,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",35,[[["v"]],["result"]]],[11,"deserialize_tuple","","",35,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",35,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",35,[[["v"]],["result"]]],[11,"deserialize_struct","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",35,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",35,[[["v"]],["result"]]],[11,"deserialize_any","","",35,[[["v"]],["result"]]],[11,"deserialize_bool","","",36,[[["v"]],["result"]]],[11,"deserialize_i8","","",36,[[["v"]],["result"]]],[11,"deserialize_i16","","",36,[[["v"]],["result"]]],[11,"deserialize_i32","","",36,[[["v"]],["result"]]],[11,"deserialize_i64","","",36,[[["v"]],["result"]]],[11,"deserialize_i128","","",36,[[["v"]],["result"]]],[11,"deserialize_u8","","",36,[[["v"]],["result"]]],[11,"deserialize_u16","","",36,[[["v"]],["result"]]],[11,"deserialize_u32","","",36,[[["v"]],["result"]]],[11,"deserialize_u64","","",36,[[["v"]],["result"]]],[11,"deserialize_u128","","",36,[[["v"]],["result"]]],[11,"deserialize_f32","","",36,[[["v"]],["result"]]],[11,"deserialize_f64","","",36,[[["v"]],["result"]]],[11,"deserialize_char","","",36,[[["v"]],["result"]]],[11,"deserialize_str","","",36,[[["v"]],["result"]]],[11,"deserialize_string","","",36,[[["v"]],["result"]]],[11,"deserialize_bytes","","",36,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",36,[[["v"]],["result"]]],[11,"deserialize_option","","",36,[[["v"]],["result"]]],[11,"deserialize_unit","","",36,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",36,[[["v"]],["result"]]],[11,"deserialize_tuple","","",36,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",36,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",36,[[["v"]],["result"]]],[11,"deserialize_struct","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",36,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",36,[[["v"]],["result"]]],[11,"deserialize_any","","",36,[[["v"]],["result"]]],[11,"deserialize_bool","","",37,[[["v"]],["result"]]],[11,"deserialize_i8","","",37,[[["v"]],["result"]]],[11,"deserialize_i16","","",37,[[["v"]],["result"]]],[11,"deserialize_i32","","",37,[[["v"]],["result"]]],[11,"deserialize_i64","","",37,[[["v"]],["result"]]],[11,"deserialize_i128","","",37,[[["v"]],["result"]]],[11,"deserialize_u8","","",37,[[["v"]],["result"]]],[11,"deserialize_u16","","",37,[[["v"]],["result"]]],[11,"deserialize_u32","","",37,[[["v"]],["result"]]],[11,"deserialize_u64","","",37,[[["v"]],["result"]]],[11,"deserialize_u128","","",37,[[["v"]],["result"]]],[11,"deserialize_f32","","",37,[[["v"]],["result"]]],[11,"deserialize_f64","","",37,[[["v"]],["result"]]],[11,"deserialize_char","","",37,[[["v"]],["result"]]],[11,"deserialize_str","","",37,[[["v"]],["result"]]],[11,"deserialize_string","","",37,[[["v"]],["result"]]],[11,"deserialize_bytes","","",37,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",37,[[["v"]],["result"]]],[11,"deserialize_option","","",37,[[["v"]],["result"]]],[11,"deserialize_unit","","",37,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",37,[[["v"]],["result"]]],[11,"deserialize_tuple","","",37,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",37,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",37,[[["v"]],["result"]]],[11,"deserialize_struct","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",37,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",37,[[["v"]],["result"]]],[11,"deserialize_any","","",37,[[["v"]],["result"]]],[11,"deserialize_bool","","",38,[[["v"]],["result"]]],[11,"deserialize_i8","","",38,[[["v"]],["result"]]],[11,"deserialize_i16","","",38,[[["v"]],["result"]]],[11,"deserialize_i32","","",38,[[["v"]],["result"]]],[11,"deserialize_i64","","",38,[[["v"]],["result"]]],[11,"deserialize_i128","","",38,[[["v"]],["result"]]],[11,"deserialize_u8","","",38,[[["v"]],["result"]]],[11,"deserialize_u16","","",38,[[["v"]],["result"]]],[11,"deserialize_u32","","",38,[[["v"]],["result"]]],[11,"deserialize_u64","","",38,[[["v"]],["result"]]],[11,"deserialize_u128","","",38,[[["v"]],["result"]]],[11,"deserialize_f32","","",38,[[["v"]],["result"]]],[11,"deserialize_f64","","",38,[[["v"]],["result"]]],[11,"deserialize_char","","",38,[[["v"]],["result"]]],[11,"deserialize_str","","",38,[[["v"]],["result"]]],[11,"deserialize_string","","",38,[[["v"]],["result"]]],[11,"deserialize_bytes","","",38,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",38,[[["v"]],["result"]]],[11,"deserialize_option","","",38,[[["v"]],["result"]]],[11,"deserialize_unit","","",38,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",38,[[["v"]],["result"]]],[11,"deserialize_tuple","","",38,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",38,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",38,[[["v"]],["result"]]],[11,"deserialize_struct","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",38,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",38,[[["v"]],["result"]]],[11,"deserialize_any","","",38,[[["v"]],["result"]]],[11,"deserialize_bool","","",39,[[["v"]],["result"]]],[11,"deserialize_i8","","",39,[[["v"]],["result"]]],[11,"deserialize_i16","","",39,[[["v"]],["result"]]],[11,"deserialize_i32","","",39,[[["v"]],["result"]]],[11,"deserialize_i64","","",39,[[["v"]],["result"]]],[11,"deserialize_i128","","",39,[[["v"]],["result"]]],[11,"deserialize_u8","","",39,[[["v"]],["result"]]],[11,"deserialize_u16","","",39,[[["v"]],["result"]]],[11,"deserialize_u32","","",39,[[["v"]],["result"]]],[11,"deserialize_u64","","",39,[[["v"]],["result"]]],[11,"deserialize_u128","","",39,[[["v"]],["result"]]],[11,"deserialize_f32","","",39,[[["v"]],["result"]]],[11,"deserialize_f64","","",39,[[["v"]],["result"]]],[11,"deserialize_char","","",39,[[["v"]],["result"]]],[11,"deserialize_str","","",39,[[["v"]],["result"]]],[11,"deserialize_string","","",39,[[["v"]],["result"]]],[11,"deserialize_bytes","","",39,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",39,[[["v"]],["result"]]],[11,"deserialize_option","","",39,[[["v"]],["result"]]],[11,"deserialize_unit","","",39,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",39,[[["v"]],["result"]]],[11,"deserialize_tuple","","",39,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",39,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",39,[[["v"]],["result"]]],[11,"deserialize_struct","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",39,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",39,[[["v"]],["result"]]],[11,"deserialize_any","","",39,[[["v"]],["result"]]],[11,"deserialize_bool","","",40,[[["v"]],["result"]]],[11,"deserialize_i8","","",40,[[["v"]],["result"]]],[11,"deserialize_i16","","",40,[[["v"]],["result"]]],[11,"deserialize_i32","","",40,[[["v"]],["result"]]],[11,"deserialize_i64","","",40,[[["v"]],["result"]]],[11,"deserialize_i128","","",40,[[["v"]],["result"]]],[11,"deserialize_u8","","",40,[[["v"]],["result"]]],[11,"deserialize_u16","","",40,[[["v"]],["result"]]],[11,"deserialize_u32","","",40,[[["v"]],["result"]]],[11,"deserialize_u64","","",40,[[["v"]],["result"]]],[11,"deserialize_u128","","",40,[[["v"]],["result"]]],[11,"deserialize_f32","","",40,[[["v"]],["result"]]],[11,"deserialize_f64","","",40,[[["v"]],["result"]]],[11,"deserialize_char","","",40,[[["v"]],["result"]]],[11,"deserialize_str","","",40,[[["v"]],["result"]]],[11,"deserialize_string","","",40,[[["v"]],["result"]]],[11,"deserialize_bytes","","",40,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",40,[[["v"]],["result"]]],[11,"deserialize_option","","",40,[[["v"]],["result"]]],[11,"deserialize_unit","","",40,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",40,[[["v"]],["result"]]],[11,"deserialize_tuple","","",40,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",40,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",40,[[["v"]],["result"]]],[11,"deserialize_struct","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",40,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",40,[[["v"]],["result"]]],[11,"deserialize_any","","",40,[[["v"]],["result"]]],[11,"deserialize_bool","","",41,[[["v"]],["result"]]],[11,"deserialize_i8","","",41,[[["v"]],["result"]]],[11,"deserialize_i16","","",41,[[["v"]],["result"]]],[11,"deserialize_i32","","",41,[[["v"]],["result"]]],[11,"deserialize_i64","","",41,[[["v"]],["result"]]],[11,"deserialize_i128","","",41,[[["v"]],["result"]]],[11,"deserialize_u8","","",41,[[["v"]],["result"]]],[11,"deserialize_u16","","",41,[[["v"]],["result"]]],[11,"deserialize_u32","","",41,[[["v"]],["result"]]],[11,"deserialize_u64","","",41,[[["v"]],["result"]]],[11,"deserialize_u128","","",41,[[["v"]],["result"]]],[11,"deserialize_f32","","",41,[[["v"]],["result"]]],[11,"deserialize_f64","","",41,[[["v"]],["result"]]],[11,"deserialize_char","","",41,[[["v"]],["result"]]],[11,"deserialize_str","","",41,[[["v"]],["result"]]],[11,"deserialize_string","","",41,[[["v"]],["result"]]],[11,"deserialize_bytes","","",41,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",41,[[["v"]],["result"]]],[11,"deserialize_option","","",41,[[["v"]],["result"]]],[11,"deserialize_unit","","",41,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",41,[[["v"]],["result"]]],[11,"deserialize_tuple","","",41,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",41,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",41,[[["v"]],["result"]]],[11,"deserialize_struct","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",41,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",41,[[["v"]],["result"]]],[11,"deserialize_any","","",41,[[["v"]],["result"]]],[11,"deserialize_bool","","",42,[[["v"]],["result"]]],[11,"deserialize_i8","","",42,[[["v"]],["result"]]],[11,"deserialize_i16","","",42,[[["v"]],["result"]]],[11,"deserialize_i32","","",42,[[["v"]],["result"]]],[11,"deserialize_i64","","",42,[[["v"]],["result"]]],[11,"deserialize_i128","","",42,[[["v"]],["result"]]],[11,"deserialize_u8","","",42,[[["v"]],["result"]]],[11,"deserialize_u16","","",42,[[["v"]],["result"]]],[11,"deserialize_u32","","",42,[[["v"]],["result"]]],[11,"deserialize_u64","","",42,[[["v"]],["result"]]],[11,"deserialize_u128","","",42,[[["v"]],["result"]]],[11,"deserialize_f32","","",42,[[["v"]],["result"]]],[11,"deserialize_f64","","",42,[[["v"]],["result"]]],[11,"deserialize_char","","",42,[[["v"]],["result"]]],[11,"deserialize_str","","",42,[[["v"]],["result"]]],[11,"deserialize_string","","",42,[[["v"]],["result"]]],[11,"deserialize_bytes","","",42,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",42,[[["v"]],["result"]]],[11,"deserialize_option","","",42,[[["v"]],["result"]]],[11,"deserialize_unit","","",42,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",42,[[["v"]],["result"]]],[11,"deserialize_tuple","","",42,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",42,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",42,[[["v"]],["result"]]],[11,"deserialize_struct","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",42,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",42,[[["v"]],["result"]]],[11,"deserialize_any","","",42,[[["v"]],["result"]]],[11,"deserialize_bool","","",43,[[["v"]],["result"]]],[11,"deserialize_i8","","",43,[[["v"]],["result"]]],[11,"deserialize_i16","","",43,[[["v"]],["result"]]],[11,"deserialize_i32","","",43,[[["v"]],["result"]]],[11,"deserialize_i64","","",43,[[["v"]],["result"]]],[11,"deserialize_i128","","",43,[[["v"]],["result"]]],[11,"deserialize_u8","","",43,[[["v"]],["result"]]],[11,"deserialize_u16","","",43,[[["v"]],["result"]]],[11,"deserialize_u32","","",43,[[["v"]],["result"]]],[11,"deserialize_u64","","",43,[[["v"]],["result"]]],[11,"deserialize_u128","","",43,[[["v"]],["result"]]],[11,"deserialize_f32","","",43,[[["v"]],["result"]]],[11,"deserialize_f64","","",43,[[["v"]],["result"]]],[11,"deserialize_char","","",43,[[["v"]],["result"]]],[11,"deserialize_str","","",43,[[["v"]],["result"]]],[11,"deserialize_string","","",43,[[["v"]],["result"]]],[11,"deserialize_bytes","","",43,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",43,[[["v"]],["result"]]],[11,"deserialize_option","","",43,[[["v"]],["result"]]],[11,"deserialize_unit","","",43,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",43,[[["v"]],["result"]]],[11,"deserialize_tuple","","",43,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",43,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",43,[[["v"]],["result"]]],[11,"deserialize_struct","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",43,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",43,[[["v"]],["result"]]],[11,"deserialize_any","","",43,[[["v"]],["result"]]],[11,"deserialize_bool","","",44,[[["v"]],["result"]]],[11,"deserialize_i8","","",44,[[["v"]],["result"]]],[11,"deserialize_i16","","",44,[[["v"]],["result"]]],[11,"deserialize_i32","","",44,[[["v"]],["result"]]],[11,"deserialize_i64","","",44,[[["v"]],["result"]]],[11,"deserialize_i128","","",44,[[["v"]],["result"]]],[11,"deserialize_u8","","",44,[[["v"]],["result"]]],[11,"deserialize_u16","","",44,[[["v"]],["result"]]],[11,"deserialize_u32","","",44,[[["v"]],["result"]]],[11,"deserialize_u64","","",44,[[["v"]],["result"]]],[11,"deserialize_u128","","",44,[[["v"]],["result"]]],[11,"deserialize_f32","","",44,[[["v"]],["result"]]],[11,"deserialize_f64","","",44,[[["v"]],["result"]]],[11,"deserialize_char","","",44,[[["v"]],["result"]]],[11,"deserialize_str","","",44,[[["v"]],["result"]]],[11,"deserialize_string","","",44,[[["v"]],["result"]]],[11,"deserialize_bytes","","",44,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",44,[[["v"]],["result"]]],[11,"deserialize_option","","",44,[[["v"]],["result"]]],[11,"deserialize_unit","","",44,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",44,[[["v"]],["result"]]],[11,"deserialize_tuple","","",44,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",44,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",44,[[["v"]],["result"]]],[11,"deserialize_struct","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",44,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",44,[[["v"]],["result"]]],[11,"deserialize_any","","",44,[[["v"]],["result"]]],[11,"deserialize_bool","","",45,[[["v"]],["result"]]],[11,"deserialize_i8","","",45,[[["v"]],["result"]]],[11,"deserialize_i16","","",45,[[["v"]],["result"]]],[11,"deserialize_i32","","",45,[[["v"]],["result"]]],[11,"deserialize_i64","","",45,[[["v"]],["result"]]],[11,"deserialize_i128","","",45,[[["v"]],["result"]]],[11,"deserialize_u8","","",45,[[["v"]],["result"]]],[11,"deserialize_u16","","",45,[[["v"]],["result"]]],[11,"deserialize_u32","","",45,[[["v"]],["result"]]],[11,"deserialize_u64","","",45,[[["v"]],["result"]]],[11,"deserialize_u128","","",45,[[["v"]],["result"]]],[11,"deserialize_f32","","",45,[[["v"]],["result"]]],[11,"deserialize_f64","","",45,[[["v"]],["result"]]],[11,"deserialize_char","","",45,[[["v"]],["result"]]],[11,"deserialize_str","","",45,[[["v"]],["result"]]],[11,"deserialize_string","","",45,[[["v"]],["result"]]],[11,"deserialize_bytes","","",45,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",45,[[["v"]],["result"]]],[11,"deserialize_option","","",45,[[["v"]],["result"]]],[11,"deserialize_unit","","",45,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",45,[[["v"]],["result"]]],[11,"deserialize_tuple","","",45,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",45,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",45,[[["v"]],["result"]]],[11,"deserialize_struct","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",45,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",45,[[["v"]],["result"]]],[11,"deserialize_any","","",45,[[["v"]],["result"]]],[11,"deserialize_bool","","",46,[[["v"]],["result"]]],[11,"deserialize_i8","","",46,[[["v"]],["result"]]],[11,"deserialize_i16","","",46,[[["v"]],["result"]]],[11,"deserialize_i32","","",46,[[["v"]],["result"]]],[11,"deserialize_i64","","",46,[[["v"]],["result"]]],[11,"deserialize_i128","","",46,[[["v"]],["result"]]],[11,"deserialize_u8","","",46,[[["v"]],["result"]]],[11,"deserialize_u16","","",46,[[["v"]],["result"]]],[11,"deserialize_u32","","",46,[[["v"]],["result"]]],[11,"deserialize_u64","","",46,[[["v"]],["result"]]],[11,"deserialize_u128","","",46,[[["v"]],["result"]]],[11,"deserialize_f32","","",46,[[["v"]],["result"]]],[11,"deserialize_f64","","",46,[[["v"]],["result"]]],[11,"deserialize_char","","",46,[[["v"]],["result"]]],[11,"deserialize_str","","",46,[[["v"]],["result"]]],[11,"deserialize_string","","",46,[[["v"]],["result"]]],[11,"deserialize_bytes","","",46,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",46,[[["v"]],["result"]]],[11,"deserialize_option","","",46,[[["v"]],["result"]]],[11,"deserialize_unit","","",46,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",46,[[["v"]],["result"]]],[11,"deserialize_tuple","","",46,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",46,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",46,[[["v"]],["result"]]],[11,"deserialize_struct","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",46,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",46,[[["v"]],["result"]]],[11,"deserialize_any","","",46,[[["v"]],["result"]]],[11,"deserialize_enum","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_any","","",47,[[["v"]],["result"]]],[11,"deserialize_enum","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",47,[[["v"]],["result"]]],[11,"deserialize_i8","","",47,[[["v"]],["result"]]],[11,"deserialize_i16","","",47,[[["v"]],["result"]]],[11,"deserialize_i32","","",47,[[["v"]],["result"]]],[11,"deserialize_i64","","",47,[[["v"]],["result"]]],[11,"deserialize_i128","","",47,[[["v"]],["result"]]],[11,"deserialize_u8","","",47,[[["v"]],["result"]]],[11,"deserialize_u16","","",47,[[["v"]],["result"]]],[11,"deserialize_u32","","",47,[[["v"]],["result"]]],[11,"deserialize_u64","","",47,[[["v"]],["result"]]],[11,"deserialize_u128","","",47,[[["v"]],["result"]]],[11,"deserialize_f32","","",47,[[["v"]],["result"]]],[11,"deserialize_f64","","",47,[[["v"]],["result"]]],[11,"deserialize_char","","",47,[[["v"]],["result"]]],[11,"deserialize_str","","",47,[[["v"]],["result"]]],[11,"deserialize_string","","",47,[[["v"]],["result"]]],[11,"deserialize_bytes","","",47,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",47,[[["v"]],["result"]]],[11,"deserialize_option","","",47,[[["v"]],["result"]]],[11,"deserialize_unit","","",47,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",47,[[["v"]],["result"]]],[11,"deserialize_tuple","","",47,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",47,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",47,[[["v"]],["result"]]],[11,"deserialize_struct","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",47,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",47,[[["v"]],["result"]]],[11,"deserialize_any","","",1,[[["v"]],["result"]]],[11,"deserialize_enum","","",1,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",1,[[["v"]],["result"]]],[11,"deserialize_i8","","",1,[[["v"]],["result"]]],[11,"deserialize_i16","","",1,[[["v"]],["result"]]],[11,"deserialize_i32","","",1,[[["v"]],["result"]]],[11,"deserialize_i64","","",1,[[["v"]],["result"]]],[11,"deserialize_i128","","",1,[[["v"]],["result"]]],[11,"deserialize_u8","","",1,[[["v"]],["result"]]],[11,"deserialize_u16","","",1,[[["v"]],["result"]]],[11,"deserialize_u32","","",1,[[["v"]],["result"]]],[11,"deserialize_u64","","",1,[[["v"]],["result"]]],[11,"deserialize_u128","","",1,[[["v"]],["result"]]],[11,"deserialize_f32","","",1,[[["v"]],["result"]]],[11,"deserialize_f64","","",1,[[["v"]],["result"]]],[11,"deserialize_char","","",1,[[["v"]],["result"]]],[11,"deserialize_str","","",1,[[["v"]],["result"]]],[11,"deserialize_string","","",1,[[["v"]],["result"]]],[11,"deserialize_bytes","","",1,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",1,[[["v"]],["result"]]],[11,"deserialize_option","","",1,[[["v"]],["result"]]],[11,"deserialize_unit","","",1,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",1,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",1,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",1,[[["v"]],["result"]]],[11,"deserialize_tuple","","",1,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",1,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",1,[[["v"]],["result"]]],[11,"deserialize_struct","","",1,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",1,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",1,[[["v"]],["result"]]],[11,"deserialize_any","","",48,[[["v"]],["result"]]],[11,"deserialize_enum","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",48,[[["v"]],["result"]]],[11,"deserialize_i8","","",48,[[["v"]],["result"]]],[11,"deserialize_i16","","",48,[[["v"]],["result"]]],[11,"deserialize_i32","","",48,[[["v"]],["result"]]],[11,"deserialize_i64","","",48,[[["v"]],["result"]]],[11,"deserialize_i128","","",48,[[["v"]],["result"]]],[11,"deserialize_u8","","",48,[[["v"]],["result"]]],[11,"deserialize_u16","","",48,[[["v"]],["result"]]],[11,"deserialize_u32","","",48,[[["v"]],["result"]]],[11,"deserialize_u64","","",48,[[["v"]],["result"]]],[11,"deserialize_u128","","",48,[[["v"]],["result"]]],[11,"deserialize_f32","","",48,[[["v"]],["result"]]],[11,"deserialize_f64","","",48,[[["v"]],["result"]]],[11,"deserialize_char","","",48,[[["v"]],["result"]]],[11,"deserialize_str","","",48,[[["v"]],["result"]]],[11,"deserialize_string","","",48,[[["v"]],["result"]]],[11,"deserialize_bytes","","",48,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",48,[[["v"]],["result"]]],[11,"deserialize_option","","",48,[[["v"]],["result"]]],[11,"deserialize_unit","","",48,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",48,[[["v"]],["result"]]],[11,"deserialize_tuple","","",48,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",48,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",48,[[["v"]],["result"]]],[11,"deserialize_struct","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",48,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",48,[[["v"]],["result"]]],[11,"deserialize_any","","",49,[[["v"]],["result"]]],[11,"deserialize_enum","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",49,[[["v"]],["result"]]],[11,"deserialize_i8","","",49,[[["v"]],["result"]]],[11,"deserialize_i16","","",49,[[["v"]],["result"]]],[11,"deserialize_i32","","",49,[[["v"]],["result"]]],[11,"deserialize_i64","","",49,[[["v"]],["result"]]],[11,"deserialize_i128","","",49,[[["v"]],["result"]]],[11,"deserialize_u8","","",49,[[["v"]],["result"]]],[11,"deserialize_u16","","",49,[[["v"]],["result"]]],[11,"deserialize_u32","","",49,[[["v"]],["result"]]],[11,"deserialize_u64","","",49,[[["v"]],["result"]]],[11,"deserialize_u128","","",49,[[["v"]],["result"]]],[11,"deserialize_f32","","",49,[[["v"]],["result"]]],[11,"deserialize_f64","","",49,[[["v"]],["result"]]],[11,"deserialize_char","","",49,[[["v"]],["result"]]],[11,"deserialize_str","","",49,[[["v"]],["result"]]],[11,"deserialize_string","","",49,[[["v"]],["result"]]],[11,"deserialize_bytes","","",49,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",49,[[["v"]],["result"]]],[11,"deserialize_option","","",49,[[["v"]],["result"]]],[11,"deserialize_unit","","",49,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",49,[[["v"]],["result"]]],[11,"deserialize_tuple","","",49,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",49,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",49,[[["v"]],["result"]]],[11,"deserialize_struct","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",49,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",49,[[["v"]],["result"]]],[11,"deserialize_any","","",2,[[["v"]],["result"]]],[11,"deserialize_bool","","",2,[[["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["v"]],["result"]]],[11,"deserialize_i128","","",2,[[["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["v"]],["result"]]],[11,"deserialize_u128","","",2,[[["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["v"]],["result"]]],[11,"deserialize_char","","",2,[[["v"]],["result"]]],[11,"deserialize_str","","",2,[[["v"]],["result"]]],[11,"deserialize_string","","",2,[[["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["v"]],["result"]]],[11,"deserialize_option","","",2,[[["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["v"]],["result"]]],[11,"deserialize_struct","","",2,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",2,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["v"]],["result"]]],[11,"deserialize_enum","","",2,[[["str"],["v"]],["result"]]],[11,"deserialize_any","","",3,[[["v"]],["result"]]],[11,"deserialize_bool","","",3,[[["v"]],["result"]]],[11,"deserialize_i8","","",3,[[["v"]],["result"]]],[11,"deserialize_i16","","",3,[[["v"]],["result"]]],[11,"deserialize_i32","","",3,[[["v"]],["result"]]],[11,"deserialize_i64","","",3,[[["v"]],["result"]]],[11,"deserialize_i128","","",3,[[["v"]],["result"]]],[11,"deserialize_u8","","",3,[[["v"]],["result"]]],[11,"deserialize_u16","","",3,[[["v"]],["result"]]],[11,"deserialize_u32","","",3,[[["v"]],["result"]]],[11,"deserialize_u64","","",3,[[["v"]],["result"]]],[11,"deserialize_u128","","",3,[[["v"]],["result"]]],[11,"deserialize_f32","","",3,[[["v"]],["result"]]],[11,"deserialize_f64","","",3,[[["v"]],["result"]]],[11,"deserialize_char","","",3,[[["v"]],["result"]]],[11,"deserialize_str","","",3,[[["v"]],["result"]]],[11,"deserialize_string","","",3,[[["v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",3,[[["v"]],["result"]]],[11,"deserialize_option","","",3,[[["v"]],["result"]]],[11,"deserialize_unit","","",3,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",3,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",3,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",3,[[["v"]],["result"]]],[11,"deserialize_tuple","","",3,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",3,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",3,[[["v"]],["result"]]],[11,"deserialize_struct","","",3,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",3,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",3,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["v"]],["result"]]],[11,"deserialize_any","","",4,[[["v"]],["result"]]],[11,"deserialize_bool","","",4,[[["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["v"]],["result"]]],[11,"deserialize_i128","","",4,[[["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["v"]],["result"]]],[11,"deserialize_u128","","",4,[[["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["v"]],["result"]]],[11,"deserialize_char","","",4,[[["v"]],["result"]]],[11,"deserialize_str","","",4,[[["v"]],["result"]]],[11,"deserialize_string","","",4,[[["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["v"]],["result"]]],[11,"deserialize_option","","",4,[[["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["v"]],["result"]]],[11,"deserialize_struct","","",4,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",4,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",4,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["v"]],["result"]]],[11,"deserialize_any","","",5,[[["v"]],["result"]]],[11,"deserialize_seq","","",5,[[["v"]],["result"]]],[11,"deserialize_tuple","","",5,[[["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",5,[[["v"]],["result"]]],[11,"deserialize_i8","","",5,[[["v"]],["result"]]],[11,"deserialize_i16","","",5,[[["v"]],["result"]]],[11,"deserialize_i32","","",5,[[["v"]],["result"]]],[11,"deserialize_i64","","",5,[[["v"]],["result"]]],[11,"deserialize_i128","","",5,[[["v"]],["result"]]],[11,"deserialize_u8","","",5,[[["v"]],["result"]]],[11,"deserialize_u16","","",5,[[["v"]],["result"]]],[11,"deserialize_u32","","",5,[[["v"]],["result"]]],[11,"deserialize_u64","","",5,[[["v"]],["result"]]],[11,"deserialize_u128","","",5,[[["v"]],["result"]]],[11,"deserialize_f32","","",5,[[["v"]],["result"]]],[11,"deserialize_f64","","",5,[[["v"]],["result"]]],[11,"deserialize_char","","",5,[[["v"]],["result"]]],[11,"deserialize_str","","",5,[[["v"]],["result"]]],[11,"deserialize_string","","",5,[[["v"]],["result"]]],[11,"deserialize_bytes","","",5,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",5,[[["v"]],["result"]]],[11,"deserialize_option","","",5,[[["v"]],["result"]]],[11,"deserialize_unit","","",5,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",5,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",5,[[["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",5,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",5,[[["v"]],["result"]]],[11,"deserialize_struct","","",5,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",5,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",5,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",5,[[["v"]],["result"]]],[11,"deserialize_any","","",6,[[["v"]],["result"]]],[11,"deserialize_enum","","",6,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",6,[[["v"]],["result"]]],[11,"deserialize_i8","","",6,[[["v"]],["result"]]],[11,"deserialize_i16","","",6,[[["v"]],["result"]]],[11,"deserialize_i32","","",6,[[["v"]],["result"]]],[11,"deserialize_i64","","",6,[[["v"]],["result"]]],[11,"deserialize_i128","","",6,[[["v"]],["result"]]],[11,"deserialize_u8","","",6,[[["v"]],["result"]]],[11,"deserialize_u16","","",6,[[["v"]],["result"]]],[11,"deserialize_u32","","",6,[[["v"]],["result"]]],[11,"deserialize_u64","","",6,[[["v"]],["result"]]],[11,"deserialize_u128","","",6,[[["v"]],["result"]]],[11,"deserialize_f32","","",6,[[["v"]],["result"]]],[11,"deserialize_f64","","",6,[[["v"]],["result"]]],[11,"deserialize_char","","",6,[[["v"]],["result"]]],[11,"deserialize_str","","",6,[[["v"]],["result"]]],[11,"deserialize_string","","",6,[[["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["v"]],["result"]]],[11,"deserialize_option","","",6,[[["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["v"]],["result"]]],[11,"deserialize_struct","","",6,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",6,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["v"]],["result"]]],[11,"expecting","serde::de","",28,[[["formatter"],["self"]],["result"]]],[11,"visit_bool","","",28,[[["bool"]],["result"]]],[11,"visit_i64","","",28,[[["i64"]],["result"]]],[11,"visit_u64","","",28,[[["u64"]],["result"]]],[11,"visit_f64","","",28,[[["f64"]],["result"]]],[11,"visit_str","","",28,[[["str"]],["result"]]],[11,"visit_none","","",28,[[],["result"]]],[11,"visit_some","","",28,[[["d"]],["result"]]],[11,"visit_newtype_struct","","",28,[[["d"]],["result"]]],[11,"visit_unit","","",28,[[],["result"]]],[11,"visit_seq","","",28,[[["a"]],["result"]]],[11,"visit_map","","",28,[[["a"]],["result"]]],[11,"visit_bytes","","",28,[[],["result"]]],[11,"visit_enum","","",28,[[["a"]],["result"]]],[11,"next_element_seed","serde::de::value","",3,[[["self"],["v"]],[["option"],["result",["option"]]]]],[11,"size_hint","","",3,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"next_element_seed","","",5,[[["self"],["t"]],[["result",["option"]],["option"]]]],[11,"size_hint","","",5,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"next_key_seed","","",5,[[["self"],["t"]],[["result",["option"]],["option"]]]],[11,"next_value_seed","","",5,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",5,[[["tv"],["self"],["tk"]],[["option"],["result",["option"]]]]],[11,"size_hint","","",5,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"variant_seed","","",46,[[["t"]],["result"]]],[11,"variant_seed","","",47,[[["t"]],["result"]]],[11,"variant_seed","","",1,[[["t"]],["result"]]],[11,"variant_seed","","",48,[[["t"]],["result"]]],[11,"variant_seed","","",49,[[["t"]],["result"]]],[11,"variant_seed","","",6,[[["t"]],["result"]]],[11,"serialize_element","serde::ser","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_element","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_field","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_field","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_key","","",50,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_field","","",50,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_field","","",50,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"custom","serde::de::value","",29,[[["t"]],["self"]]],[11,"custom","","",29,[[["t"]],["self"]]],[11,"clone","","",29,[[["self"]],["error"]]],[11,"clone","","",30,[[["self"]],["self"]]],[11,"clone","","",31,[[["self"]],["self"]]],[11,"clone","","",32,[[["self"]],["self"]]],[11,"clone","","",33,[[["self"]],["self"]]],[11,"clone","","",34,[[["self"]],["self"]]],[11,"clone","","",35,[[["self"]],["self"]]],[11,"clone","","",36,[[["self"]],["self"]]],[11,"clone","","",37,[[["self"]],["self"]]],[11,"clone","","",38,[[["self"]],["self"]]],[11,"clone","","",39,[[["self"]],["self"]]],[11,"clone","","",40,[[["self"]],["self"]]],[11,"clone","","",41,[[["self"]],["self"]]],[11,"clone","","",42,[[["self"]],["self"]]],[11,"clone","","",43,[[["self"]],["self"]]],[11,"clone","","",44,[[["self"]],["self"]]],[11,"clone","","",45,[[["self"]],["self"]]],[11,"clone","","",46,[[["self"]],["self"]]],[11,"clone","","",47,[[["self"]],["self"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone","","",48,[[["self"]],["self"]]],[11,"clone","","",49,[[["self"]],["self"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["seqdeserializer"]]],[11,"clone","","",4,[[["self"]],["seqaccessdeserializer"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"clone","","",6,[[["self"]],["mapaccessdeserializer"]]],[11,"clone","serde::de","",28,[[["self"]],["ignoredany"]]],[11,"clone","","",0,[[["self"]],["unexpected"]]],[11,"default","","",28,[[],["ignoredany"]]],[11,"eq","serde::de::value","",29,[[["self"],["error"]],["bool"]]],[11,"ne","","",29,[[["self"],["error"]],["bool"]]],[11,"eq","serde::de","",0,[[["unexpected"],["self"]],["bool"]]],[11,"ne","","",0,[[["unexpected"],["self"]],["bool"]]],[11,"fmt","serde::de::value","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",41,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",43,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",44,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",45,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",46,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",47,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",48,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",49,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","serde::de","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","serde::de::value","",29,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","serde::de","",0,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"description","serde::de::value","",29,[[["self"]],["str"]]]],"p":[[4,"Unexpected"],[3,"BorrowedStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[3,"IgnoredAny"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"Impossible"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","i":[[24,"Serialize","serde_derive","",null,null],[24,"Deserialize","","",null,null]],"p":[]};
searchIndex["serde_json"] = {"doc":"Serde JSON","i":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON…",null,null],[3,"Error","","This type represents all possible errors that can occur…",null,null],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of…",null,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,[[],["result"]]],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON…",null,[[["str"]],["result"]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,[[["t"]],[["result",["string"]],["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed…",null,[[["t"]],[["result",["string"]],["string"]]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,[[["t"]],[["result",["vec"]],["vec",["u8"]]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed…",null,[[["t"]],[["result",["vec"]],["vec",["u8"]]]]],[5,"to_writer","","Serialize the given data structure as JSON into the IO…",null,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON…",null,[[["w"],["t"]],["result"]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,[[["value"]],[["error"],["result",["error"]]]]],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum…",null,[[["t"]],[["error"],["result",["value","error"]],["value"]]]],[0,"de","","Deserialize JSON data to a Rust data structure.",null,null],[3,"SliceRead","serde_json::de","JSON input source that reads from a slice of bytes.",null,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[3,"IoRead","","JSON input source that reads from a std::io input stream.",null,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON…",null,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of…",null,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,[[],["result"]]],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON…",null,[[["str"]],["result"]]],[8,"Read","","Trait used by the deserializer for iterating over input.…",null,null],[11,"new","","Create a JSON deserializer from one of the possible…",1,[[["r"]],["self"]]],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,[[["r"]],["self"]]],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,[[],["self"]]],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,[[["str"]],["self"]]],[11,"end","","The `Deserializer::end` method should be called after a…",1,[[["self"]],["result"]]],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of…",1,[[],["streamdeserializer"]]],[11,"new","","Create a JSON stream deserializer from one of the possible…",2,[[["r"]],["self"]]],[11,"byte_offset","","Returns the number of bytes so far deserialized into a…",2,[[["self"]],["usize"]]],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur…",null,null],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes…",3,null],[13,"Syntax","","The error was caused by input that was not syntactically…",3,null],[13,"Data","","The error was caused by input data that was semantically…",3,null],[13,"Eof","","The error was caused by prematurely reaching the end of…",3,null],[6,"Result","","Alias for a `Result` with the error type…",null,null],[11,"line","","One-based line number at which the error was detected.",4,[[["self"]],["usize"]]],[11,"column","","One-based column number at which the error was detected.",4,[[["self"]],["usize"]]],[11,"classify","","Categorizes the cause of this error.",4,[[["self"]],["category"]]],[11,"is_io","","Returns true if this error was caused by a failure to read…",4,[[["self"]],["bool"]]],[11,"is_syntax","","Returns true if this error was caused by input that was…",4,[[["self"]],["bool"]]],[11,"is_data","","Returns true if this error was caused by input data that…",4,[[["self"]],["bool"]]],[11,"is_eof","","Returns true if this error was caused by prematurely…",4,[[["self"]],["bool"]]],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"Iter","","An iterator over a serde_json::Map's entries.",null,null],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",null,null],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",null,null],[3,"Keys","","An iterator over a serde_json::Map's keys.",null,null],[3,"Values","","An iterator over a serde_json::Map's values.",null,null],[3,"ValuesMut","","A mutable iterator over a serde_json::Map's values.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be…",null,null],[13,"Vacant","","A vacant Entry.",5,null],[13,"Occupied","","An occupied Entry.",5,null],[11,"new","","Makes a new empty Map.",6,[[],["self"]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",6,[[["usize"]],["self"]]],[11,"clear","","Clears the map, removing all values.",6,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",6,[[["self"],["q"]],[["value"],["option",["value"]]]]],[11,"contains_key","","Returns true if the map contains a value for the specified…",6,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",6,[[["self"],["q"]],[["option",["value"]],["value"]]]],[11,"insert","","Inserts a key-value pair into the map.",6,[[["self"],["value"],["string"]],[["option",["value"]],["value"]]]],[11,"remove","","Removes a key from the map, returning the value at the key…",6,[[["self"],["q"]],[["option",["value"]],["value"]]]],[11,"append","","Moves all elements from other into Self, leaving other…",6,[[["self"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for…",6,[[["self"],["s"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",6,[[["self"]],["bool"]]],[11,"iter","","Gets an iterator over the entries of the map.",6,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",6,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map.",6,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map.",6,[[["self"]],["values"]]],[11,"values_mut","","Gets an iterator over mutable values of the map.",6,[[["self"]],["valuesmut"]]],[11,"key","","Returns a reference to this entry's key.",5,[[["self"]],["string"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default…",5,[[["value"]],["value"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of…",5,[[["f"]],["value"]]],[11,"key","","Gets a reference to the key that would be used when…",7,[[["self"]],["string"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key,…",7,[[["value"]],["value"]]],[11,"key","","Gets a reference to the key in the entry.",8,[[["self"]],["string"]]],[11,"get","","Gets a reference to the value in the entry.",8,[[["self"]],["value"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,[[["self"]],["value"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",8,[[],["value"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s…",8,[[["self"],["value"]],["value"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",8,[[],["value"]]],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra…",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human…",null,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `\"`",9,null],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",9,null],[13,"Solidus","","An escaped solidus `/`",9,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",9,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",9,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",9,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as…",9,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",9,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped…",9,null],[5,"to_writer","","Serialize the given data structure as JSON into the IO…",null,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON…",null,[[["w"],["t"]],["result"]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,[[["t"]],[["result",["vec"]],["vec",["u8"]]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed…",null,[[["t"]],[["result",["vec"]],["vec",["u8"]]]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,[[["t"]],[["result",["string"]],["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed…",null,[[["t"]],[["result",["string"]],["string"]]]],[8,"Formatter","","This trait abstracts away serializing the JSON control…",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",10,[[["w"],["self"]],["result"]]],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",10,[[["w"],["self"],["bool"]],["result"]]],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",10,[[["w"],["self"],["i8"]],["result"]]],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",10,[[["w"],["self"],["i16"]],["result"]]],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",10,[[["w"],["self"],["i32"]],["result"]]],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",10,[[["w"],["self"],["i64"]],["result"]]],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",10,[[["w"],["self"],["u8"]],["result"]]],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",10,[[["w"],["self"],["u16"]],["result"]]],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",10,[[["w"],["self"],["u32"]],["result"]]],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",10,[[["w"],["self"],["u64"]],["result"]]],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the…",10,[[["w"],["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the…",10,[[["w"],["self"],["f64"]],["result"]]],[11,"write_number_str","","Writes a number that has already been rendered to a string.",10,[[["w"],["self"],["str"]],["result"]]],[11,"begin_string","","Called before each series of `write_string_fragment` and…",10,[[["w"],["self"]],["result"]]],[11,"end_string","","Called after each series of `write_string_fragment` and…",10,[[["w"],["self"]],["result"]]],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to…",10,[[["w"],["self"],["str"]],["result"]]],[11,"write_char_escape","","Writes a character escape code to the specified writer.",10,[[["w"],["self"],["charescape"]],["result"]]],[11,"begin_array","","Called before every array. Writes a `[` to the specified…",10,[[["w"],["self"]],["result"]]],[11,"end_array","","Called after every array. Writes a `]` to the specified…",10,[[["w"],["self"]],["result"]]],[11,"begin_array_value","","Called before every array value. Writes a `,` if needed to…",10,[[["w"],["self"],["bool"]],["result"]]],[11,"end_array_value","","Called after every array value.",10,[[["w"],["self"]],["result"]]],[11,"begin_object","","Called before every object. Writes a `{` to the specified…",10,[[["w"],["self"]],["result"]]],[11,"end_object","","Called after every object. Writes a `}` to the specified…",10,[[["w"],["self"]],["result"]]],[11,"begin_object_key","","Called before every object key.",10,[[["w"],["self"],["bool"]],["result"]]],[11,"end_object_key","","Called after every object key. A `:` should be written to…",10,[[["w"],["self"]],["result"]]],[11,"begin_object_value","","Called before every object value. A `:` should be written…",10,[[["w"],["self"]],["result"]]],[11,"end_object_value","","Called after every object value.",10,[[["w"],["self"]],["result"]]],[11,"write_raw_fragment","","Writes a raw JSON fragment that doesn't need any escaping…",10,[[["w"],["self"],["str"]],["result"]]],[11,"new","","Creates a new JSON serializer.",11,[[["w"]],["self"]]],[11,"pretty","","Creates a new JSON pretty print serializer.",11,[[["w"]],["self"]]],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to…",11,[[["w"],["f"]],["self"]]],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",11,[[],["w"]]],[11,"new","","Construct a pretty printer formatter that defaults to…",12,[[],["self"]]],[11,"with_indent","","Construct a pretty printer formatter that uses the…",12,[[],["self"]]],[0,"value","serde_json","The Value enum, a loosely typed way of representing any…",null,null],[3,"Serializer","serde_json::value","Serializer whose output is a `Value`.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum…",null,[[["t"]],[["error"],["result",["value","error"]],["value"]]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,[[["value"]],[["error"],["result",["error"]]]]],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",null,null],[11,"get","","Index into a JSON array or map. A string index can be used…",0,[[["self"],["index"]],[["value"],["option",["value"]]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can…",0,[[["self"],["index"]],[["option",["value"]],["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false…",0,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map.…",0,[[["self"]],[["option",["map"]],["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated…",0,[[["self"]],[["map"],["option",["map"]]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false…",0,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector.…",0,[[["self"]],[["vec"],["option",["vec"]]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable…",0,[[["self"]],[["vec"],["option",["vec"]]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false…",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str.…",0,[[["self"]],[["str"],["option",["str"]]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false…",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between…",0,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and…",0,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be…",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if…",0,[[["self"]],[["i64"],["option",["i64"]]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if…",0,[[["self"]],[["option",["u64"]],["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if…",0,[[["self"]],[["f64"],["option",["f64"]]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false…",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool.…",0,[[["self"]],[["bool"],["option",["bool"]]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false…",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None…",0,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",0,[[["str"],["self"]],[["value"],["option",["value"]]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable…",0,[[["str"],["self"]],[["option",["value"]],["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in…",0,[[["self"]],["value"]]],[11,"is_i64","serde_json","Returns true if the `Number` is an integer between…",13,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Number` is an integer between zero…",13,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",13,[[["self"]],["bool"]]],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if…",13,[[["self"]],[["i64"],["option",["i64"]]]]],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if…",13,[[["self"]],[["option",["u64"]],["u64"]]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None…",13,[[["self"]],[["f64"],["option",["f64"]]]]],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN…",13,[[["f64"]],[["number"],["option",["number"]]]]],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input…",14,[[["r"]],["self"]]],[11,"new","","Create a JSON input source to read from a slice of bytes.",15,[[],["self"]]],[11,"new","","Create a JSON input source to read from a UTF-8 string.",16,[[["str"]],["self"]]],[6,"Result","serde_json","Alias for a `Result` with the error type…",null,null],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",null,null],[11,"from","serde_json::de","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"into_iter","","",2,[[],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","serde_json::error","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","serde_json::ser","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","serde_json::map","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"into_iter","","",6,[[],["i"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","serde_json","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","serde_json::value","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","serde_json::de","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","serde_json::error","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","serde_json::map","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"into_iter","","",17,[[],["i"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"into_iter","","",18,[[],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"into_iter","","",19,[[],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"into_iter","","",20,[[],["i"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"into_iter","","",21,[[],["i"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"into_iter","","",22,[[],["i"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","serde_json::ser","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","serde_json::value","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"begin_array","serde_json::ser","",12,[[["w"],["self"]],["result"]]],[11,"end_array","","",12,[[["w"],["self"]],["result"]]],[11,"begin_array_value","","",12,[[["w"],["self"],["bool"]],["result"]]],[11,"end_array_value","","",12,[[["w"],["self"]],["result"]]],[11,"begin_object","","",12,[[["w"],["self"]],["result"]]],[11,"end_object","","",12,[[["w"],["self"]],["result"]]],[11,"begin_object_key","","",12,[[["w"],["self"],["bool"]],["result"]]],[11,"begin_object_value","","",12,[[["w"],["self"]],["result"]]],[11,"end_object_value","","",12,[[["w"],["self"]],["result"]]],[11,"next","serde_json::de","",14,[[["self"]],[["result",["option"]],["option",["u8"]]]]],[11,"peek","","",14,[[["self"]],[["result",["option"]],["option",["u8"]]]]],[11,"discard","","",14,[[["self"]]]],[11,"position","","",14,[[["self"]],["position"]]],[11,"peek_position","","",14,[[["self"]],["position"]]],[11,"byte_offset","","",14,[[["self"]],["usize"]]],[11,"parse_str","","",14,[[["vec"],["self"]],[["result",["reference"]],["reference",["str"]]]]],[11,"parse_str_raw","","",14,[[["vec"],["self"]],[["result",["reference"]],["reference"]]]],[11,"ignore_str","","",14,[[["self"]],["result"]]],[11,"decode_hex_escape","","",14,[[["self"]],[["u16"],["result",["u16"]]]]],[11,"set_failed","","",14,[[["self"],["bool"]]]],[11,"next","","",15,[[["self"]],[["result",["option"]],["option",["u8"]]]]],[11,"peek","","",15,[[["self"]],[["result",["option"]],["option",["u8"]]]]],[11,"discard","","",15,[[["self"]]]],[11,"position","","",15,[[["self"]],["position"]]],[11,"peek_position","","",15,[[["self"]],["position"]]],[11,"byte_offset","","",15,[[["self"]],["usize"]]],[11,"parse_str","","",15,[[["vec"],["self"]],[["reference",["str"]],["result",["reference"]]]]],[11,"parse_str_raw","","",15,[[["vec"],["self"]],[["result",["reference"]],["reference"]]]],[11,"ignore_str","","",15,[[["self"]],["result"]]],[11,"decode_hex_escape","","",15,[[["self"]],[["u16"],["result",["u16"]]]]],[11,"set_failed","","",15,[[["self"],["bool"]]]],[11,"next","","",16,[[["self"]],[["result",["option"]],["option",["u8"]]]]],[11,"peek","","",16,[[["self"]],[["result",["option"]],["option",["u8"]]]]],[11,"discard","","",16,[[["self"]]]],[11,"position","","",16,[[["self"]],["position"]]],[11,"peek_position","","",16,[[["self"]],["position"]]],[11,"byte_offset","","",16,[[["self"]],["usize"]]],[11,"parse_str","","",16,[[["vec"],["self"]],[["reference",["str"]],["result",["reference"]]]]],[11,"parse_str_raw","","",16,[[["vec"],["self"]],[["result",["reference"]],["reference"]]]],[11,"ignore_str","","",16,[[["self"]],["result"]]],[11,"decode_hex_escape","","",16,[[["self"]],[["u16"],["result",["u16"]]]]],[11,"set_failed","","",16,[[["self"],["bool"]]]],[11,"from","serde_json::value","",0,[[["i8"]],["self"]]],[11,"from","","",0,[[["i16"]],["self"]]],[11,"from","","",0,[[["i32"]],["self"]]],[11,"from","","",0,[[["i64"]],["self"]]],[11,"from","","",0,[[["isize"]],["self"]]],[11,"from","","",0,[[["u8"]],["self"]]],[11,"from","","",0,[[["u16"]],["self"]]],[11,"from","","",0,[[["u32"]],["self"]]],[11,"from","","",0,[[["u64"]],["self"]]],[11,"from","","",0,[[["usize"]],["self"]]],[11,"from","","Convert 32-bit floating point number to `Value`",0,[[["f32"]],["self"]]],[11,"from","","Convert 64-bit floating point number to `Value`",0,[[["f64"]],["self"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["self"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["self"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["self"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["str"],["cow",["str"]]],["self"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["map",["string","value"]],["value"],["string"]],["self"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["self"]]],[11,"from","","Convert a slice to `Value`",0,[[],["self"]]],[11,"from","","Convert `()` to `Value`",0,[[],["self"]]],[11,"from","serde_json","",13,[[["u8"]],["self"]]],[11,"from","","",13,[[["u16"]],["self"]]],[11,"from","","",13,[[["u32"]],["self"]]],[11,"from","","",13,[[["u64"]],["self"]]],[11,"from","","",13,[[["usize"]],["self"]]],[11,"from","","",13,[[["i8"]],["self"]]],[11,"from","","",13,[[["i16"]],["self"]]],[11,"from","","",13,[[["i32"]],["self"]]],[11,"from","","",13,[[["i64"]],["self"]]],[11,"from","","",13,[[["isize"]],["self"]]],[11,"next_back","serde_json::map","",17,[[["self"]],["option"]]],[11,"next_back","","",18,[[["self"]],["option"]]],[11,"next_back","","",19,[[["self"]],["option"]]],[11,"next_back","","",20,[[["self"]],["option"]]],[11,"next_back","","",21,[[["self"]],["option"]]],[11,"next_back","","",22,[[["self"]],["option"]]],[11,"len","","",17,[[["self"]],["usize"]]],[11,"len","","",18,[[["self"]],["usize"]]],[11,"len","","",19,[[["self"]],["usize"]]],[11,"len","","",20,[[["self"]],["usize"]]],[11,"len","","",21,[[["self"]],["usize"]]],[11,"len","","",22,[[["self"]],["usize"]]],[11,"extend","","",6,[[["self"],["t"]]]],[11,"into_iter","","",6,[[]]],[11,"next","serde_json::de","",2,[[["self"]],[["option",["result"]],["result"]]]],[11,"next","serde_json::map","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,[[["self"]]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,[[["self"]]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,[[["self"]]]],[11,"next","","",20,[[["self"]],["option"]]],[11,"size_hint","","",20,[[["self"]]]],[11,"next","","",21,[[["self"]],["option"]]],[11,"size_hint","","",21,[[["self"]]]],[11,"next","","",22,[[["self"]],["option"]]],[11,"size_hint","","",22,[[["self"]]]],[11,"clone","serde_json::error","",3,[[["self"]],["category"]]],[11,"clone","serde_json::map","",6,[[["self"]],["self"]]],[11,"clone","serde_json::ser","",23,[[["self"]],["compactformatter"]]],[11,"clone","","",12,[[["self"]],["prettyformatter"]]],[11,"clone","serde_json::value","",0,[[["self"]],["value"]]],[11,"clone","serde_json","",13,[[["self"]],["number"]]],[11,"default","serde_json::map","",6,[[],["self"]]],[11,"default","serde_json::ser","",12,[[],["self"]]],[11,"default","serde_json::value","",0,[[],["value"]]],[11,"eq","serde_json::error","",3,[[["self"],["category"]],["bool"]]],[11,"eq","serde_json::map","",6,[[["self"]],["bool"]]],[11,"eq","serde_json::value","",0,[[["value"],["self"]],["bool"]]],[11,"ne","","",0,[[["value"],["self"]],["bool"]]],[11,"eq","","",0,[[["str"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["string"],["self"]],["bool"]]],[11,"eq","","",0,[[["i8"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["i64"],["self"]],["bool"]]],[11,"eq","","",0,[[["isize"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["u16"],["self"]],["bool"]]],[11,"eq","","",0,[[["u32"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["u64"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["f32"],["self"]],["bool"]]],[11,"eq","","",0,[[["f64"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["bool"]],["bool"]]],[11,"eq","serde_json","",13,[[["number"],["self"]],["bool"]]],[11,"ne","","",13,[[["number"],["self"]],["bool"]]],[11,"fmt","serde_json::error","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","serde_json::map","",6,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","serde_json::ser","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","serde_json::value","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","serde_json","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","serde_json::error","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","serde_json::value","Display a JSON value as a string.",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","serde_json","",13,[[["formatter"],["self"]],["result"]]],[11,"index","serde_json::map","",6,[[["self"],["q"]],["value"]]],[11,"index","serde_json::value","Index into a `serde_json::Value` using the syntax…",0,[[["i"],["self"]],["value"]]],[11,"index_mut","serde_json::map","",6,[[["self"],["q"]],["value"]]],[11,"index_mut","serde_json::value","Write into a `serde_json::Value` using the syntax…",0,[[["self"],["i"]],["value"]]],[11,"from_iter","serde_json::map","",6,[[["t"]],["self"]]],[11,"from_iter","serde_json::value","Convert an iteratable type to a `Value`",0,[[["intoiterator"]],["self"]]],[11,"from_str","serde_json","",13,[[["str"]],["result"]]],[11,"from_str","serde_json::value","",0,[[["str"]],[["error"],["result",["value","error"]],["value"]]]],[11,"source","serde_json::error","",4,[[["self"]],[["error"],["option",["error"]]]]],[11,"deserialize_any","serde_json::value","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_i8","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_i16","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_i32","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_i64","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_u8","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_u16","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_u32","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_u64","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_f32","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_f64","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_i128","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_u128","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_option","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_enum","","",0,[[["str"],["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_newtype_struct","","",0,[[["str"],["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_bool","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_char","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_str","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_string","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_bytes","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_byte_buf","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_unit","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_unit_struct","","",0,[[["str"],["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_seq","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_tuple","","",0,[[["usize"],["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_tuple_struct","","",0,[[["str"],["usize"],["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_map","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_struct","","",0,[[["str"],["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_identifier","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_ignored_any","","",0,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_any","serde_json","",13,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_i8","","",13,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_i16","","",13,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_i32","","",13,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_i64","","",13,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_u8","","",13,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_u16","","",13,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_u32","","",13,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_u64","","",13,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_f32","","",13,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_f64","","",13,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_i128","","",13,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_u128","","",13,[[["v"]],[["result",["error"]],["error"]]]],[11,"deserialize_bool","","",13,[[["v"]],["result"]]],[11,"deserialize_char","","",13,[[["v"]],["result"]]],[11,"deserialize_str","","",13,[[["v"]],["result"]]],[11,"deserialize_string","","",13,[[["v"]],["result"]]],[11,"deserialize_bytes","","",13,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",13,[[["v"]],["result"]]],[11,"deserialize_option","","",13,[[["v"]],["result"]]],[11,"deserialize_unit","","",13,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",13,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",13,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",13,[[["v"]],["result"]]],[11,"deserialize_tuple","","",13,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",13,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",13,[[["v"]],["result"]]],[11,"deserialize_struct","","",13,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",13,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",13,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",13,[[["v"]],["result"]]],[11,"into_deserializer","serde_json::value","",0,[[]]],[11,"custom","serde_json::error","",4,[[["display"]],["error"]]],[11,"serialize","serde_json::map","",6,[[["s"],["self"]],["result"]]],[11,"serialize","serde_json::value","",0,[[["s"],["self"]],["result"]]],[11,"serialize","serde_json","",13,[[["s"],["self"]],["result"]]],[11,"serialize_bool","serde_json::value","",24,[[["bool"]],[["result",["value"]],["value"]]]],[11,"serialize_i8","","",24,[[["i8"]],[["result",["value"]],["value"]]]],[11,"serialize_i16","","",24,[[["i16"]],[["result",["value"]],["value"]]]],[11,"serialize_i32","","",24,[[["i32"]],[["result",["value"]],["value"]]]],[11,"serialize_i64","","",24,[[["i64"]],[["result",["value"]],["value"]]]],[11,"serialize_u8","","",24,[[["u8"]],[["result",["value"]],["value"]]]],[11,"serialize_u16","","",24,[[["u16"]],[["result",["value"]],["value"]]]],[11,"serialize_u32","","",24,[[["u32"]],[["result",["value"]],["value"]]]],[11,"serialize_u64","","",24,[[["u64"]],[["result",["value"]],["value"]]]],[11,"serialize_f32","","",24,[[["f32"]],[["result",["value"]],["value"]]]],[11,"serialize_f64","","",24,[[["f64"]],[["result",["value"]],["value"]]]],[11,"serialize_char","","",24,[[["char"]],[["result",["value"]],["value"]]]],[11,"serialize_str","","",24,[[["str"]],[["result",["value"]],["value"]]]],[11,"serialize_bytes","","",24,[[],[["result",["value"]],["value"]]]],[11,"serialize_unit","","",24,[[],[["result",["value"]],["value"]]]],[11,"serialize_unit_struct","","",24,[[["str"]],[["result",["value"]],["value"]]]],[11,"serialize_unit_variant","","",24,[[["str"],["u32"]],[["result",["value"]],["value"]]]],[11,"serialize_newtype_struct","","",24,[[["str"],["t"]],[["result",["value"]],["value"]]]],[11,"serialize_newtype_variant","","",24,[[["str"],["u32"],["t"]],[["result",["value"]],["value"]]]],[11,"serialize_none","","",24,[[],[["result",["value"]],["value"]]]],[11,"serialize_some","","",24,[[["t"]],[["result",["value"]],["value"]]]],[11,"serialize_seq","","",24,[[["usize"],["option",["usize"]]],["result"]]],[11,"serialize_tuple","","",24,[[["usize"]],["result"]]],[11,"serialize_tuple_struct","","",24,[[["str"],["usize"]],["result"]]],[11,"serialize_tuple_variant","","",24,[[["str"],["u32"],["usize"]],["result"]]],[11,"serialize_map","","",24,[[["usize"],["option",["usize"]]],["result"]]],[11,"serialize_struct","","",24,[[["str"],["usize"]],["result"]]],[11,"serialize_struct_variant","","",24,[[["str"],["u32"],["usize"]],["result"]]],[11,"collect_str","","",24,[[["t"]],[["result",["value"]],["value"]]]],[11,"deserialize","serde_json::map","",6,[[["d"]],["result"]]],[11,"deserialize","serde_json::value","",0,[[["d"]],[["value"],["result",["value"]]]]],[11,"deserialize","serde_json","",13,[[["d"]],[["number"],["result",["number"]]]]],[11,"custom","serde_json::error","",4,[[["display"]],["error"]]],[11,"invalid_type","","",4,[[["unexpected"],["expected"]],["self"]]]],"p":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"PrettyFormatter"],[3,"Number"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"CompactFormatter"],[3,"Serializer"]]};
searchIndex["syn"] = {"doc":"![github] ![crates-io] ![docs-rs]","i":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal…",null,null],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tokens","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy,…",null,null],[12,"path","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature =…",null,null],[12,"path","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point…",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as…",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `crate`.",null,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or…",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"Arm","","One arm of a `match` expression: `0...10 => { return true;…",null,null],[12,"attrs","","",10,null],[12,"pat","","",10,null],[12,"guard","","",10,null],[12,"fat_arrow_token","","",10,null],[12,"body","","",10,null],[12,"comma","","",10,null],[3,"FieldValue","","A field-value pair in a struct literal.",null,null],[12,"attrs","","Attributes tagged on the field.",11,null],[12,"member","","Name or index of the field.",11,null],[12,"colon_token","","The colon in `Struct { x: x }`. If written in shorthand…",11,null],[12,"expr","","Value of the field.",11,null],[3,"Label","","A lifetime labeling a `for`, `while`, or `loop`.",null,null],[12,"name","","",12,null],[12,"colon_token","","",12,null],[3,"MethodTurbofish","","The `::<>` explicit type parameters passed to a method…",null,null],[12,"colon2_token","","",13,null],[12,"lt_token","","",13,null],[12,"args","","",13,null],[12,"gt_token","","",13,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[12,"attrs","","",14,null],[12,"bracket_token","","",14,null],[12,"elems","","",14,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[12,"attrs","","",15,null],[12,"left","","",15,null],[12,"eq_token","","",15,null],[12,"right","","",15,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[12,"attrs","","",16,null],[12,"left","","",16,null],[12,"op","","",16,null],[12,"right","","",16,null],[3,"ExprAsync","","An async block: `async { ... }`.",null,null],[12,"attrs","","",17,null],[12,"async_token","","",17,null],[12,"capture","","",17,null],[12,"block","","",17,null],[3,"ExprAwait","","An await expression: `fut.await`.",null,null],[12,"attrs","","",18,null],[12,"base","","",18,null],[12,"dot_token","","",18,null],[12,"await_token","","",18,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",19,null],[12,"left","","",19,null],[12,"op","","",19,null],[12,"right","","",19,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[12,"attrs","","",20,null],[12,"label","","",20,null],[12,"block","","",20,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[12,"attrs","","",21,null],[12,"box_token","","",21,null],[12,"expr","","",21,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional…",null,null],[12,"attrs","","",22,null],[12,"break_token","","",22,null],[12,"label","","",22,null],[12,"expr","","",22,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",23,null],[12,"func","","",23,null],[12,"paren_token","","",23,null],[12,"args","","",23,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",24,null],[12,"expr","","",24,null],[12,"as_token","","",24,null],[12,"ty","","",24,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[12,"attrs","","",25,null],[12,"asyncness","","",25,null],[12,"movability","","",25,null],[12,"capture","","",25,null],[12,"or1_token","","",25,null],[12,"inputs","","",25,null],[12,"or2_token","","",25,null],[12,"output","","",25,null],[12,"body","","",25,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[12,"attrs","","",26,null],[12,"continue_token","","",26,null],[12,"label","","",26,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple…",null,null],[12,"attrs","","",27,null],[12,"base","","",27,null],[12,"dot_token","","",27,null],[12,"member","","",27,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[12,"attrs","","",28,null],[12,"label","","",28,null],[12,"for_token","","",28,null],[12,"pat","","",28,null],[12,"in_token","","",28,null],[12,"expr","","",28,null],[12,"body","","",28,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[12,"attrs","","",29,null],[12,"group_token","","",29,null],[12,"expr","","",29,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr…",null,null],[12,"attrs","","",30,null],[12,"if_token","","",30,null],[12,"cond","","",30,null],[12,"then_branch","","",30,null],[12,"else_branch","","",30,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",31,null],[12,"expr","","",31,null],[12,"bracket_token","","",31,null],[12,"index","","",31,null],[3,"ExprLet","","A `let` guard: `let Some(x) = opt`.",null,null],[12,"attrs","","",32,null],[12,"let_token","","",32,null],[12,"pat","","",32,null],[12,"eq_token","","",32,null],[12,"expr","","",32,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",33,null],[12,"lit","","",33,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[12,"attrs","","",34,null],[12,"label","","",34,null],[12,"loop_token","","",34,null],[12,"body","","",34,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[12,"attrs","","",35,null],[12,"mac","","",35,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {}…",null,null],[12,"attrs","","",36,null],[12,"match_token","","",36,null],[12,"expr","","",36,null],[12,"brace_token","","",36,null],[12,"arms","","",36,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[12,"attrs","","",37,null],[12,"receiver","","",37,null],[12,"dot_token","","",37,null],[12,"method","","",37,null],[12,"turbofish","","",37,null],[12,"paren_token","","",37,null],[12,"args","","",37,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",38,null],[12,"paren_token","","",38,null],[12,"expr","","",38,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing…",null,null],[12,"attrs","","",39,null],[12,"qself","","",39,null],[12,"path","","",39,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[12,"attrs","","",40,null],[12,"from","","",40,null],[12,"limits","","",40,null],[12,"to","","",40,null],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",null,null],[12,"attrs","","",41,null],[12,"and_token","","",41,null],[12,"raw","","",41,null],[12,"mutability","","",41,null],[12,"expr","","",41,null],[3,"ExprRepeat","","An array literal constructed from one repeated element:…",null,null],[12,"attrs","","",42,null],[12,"bracket_token","","",42,null],[12,"expr","","",42,null],[12,"semi_token","","",42,null],[12,"len","","",42,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[12,"attrs","","",43,null],[12,"return_token","","",43,null],[12,"expr","","",43,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[12,"attrs","","",44,null],[12,"path","","",44,null],[12,"brace_token","","",44,null],[12,"fields","","",44,null],[12,"dot2_token","","",44,null],[12,"rest","","",44,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[12,"attrs","","",45,null],[12,"expr","","",45,null],[12,"question_token","","",45,null],[3,"ExprTryBlock","","A try block: `try { ... }`.",null,null],[12,"attrs","","",46,null],[12,"try_token","","",46,null],[12,"block","","",46,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[12,"attrs","","",47,null],[12,"paren_token","","",47,null],[12,"elems","","",47,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[12,"attrs","","",48,null],[12,"expr","","",48,null],[12,"colon_token","","",48,null],[12,"ty","","",48,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",49,null],[12,"op","","",49,null],[12,"expr","","",49,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[12,"attrs","","",50,null],[12,"unsafe_token","","",50,null],[12,"block","","",50,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[12,"attrs","","",51,null],[12,"label","","",51,null],[12,"while_token","","",51,null],[12,"cond","","",51,null],[12,"body","","",51,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[12,"attrs","","",52,null],[12,"yield_token","","",52,null],[12,"expr","","",52,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",53,null],[12,"span","","",53,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",54,null],[12,"lt_token","","",54,null],[12,"lifetimes","","",54,null],[12,"gt_token","","",54,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",55,null],[12,"const_token","","",55,null],[12,"ident","","",55,null],[12,"colon_token","","",55,null],[12,"ty","","",55,null],[12,"eq_token","","",55,null],[12,"default","","",55,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of…",null,null],[12,"lt_token","","",56,null],[12,"params","","",56,null],[12,"gt_token","","",56,null],[12,"where_clause","","",56,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",57,null],[12,"lifetime","","",57,null],[12,"colon_token","","",57,null],[12,"bounds","","",57,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",58,null],[12,"eq_token","","",58,null],[12,"rhs_ty","","",58,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",59,null],[12,"colon_token","","",59,null],[12,"bounds","","",59,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>:…",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",60,null],[12,"bounded_ty","","The type being bounded",60,null],[12,"colon_token","","",60,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",60,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",61,null],[12,"modifier","","",61,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",61,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",61,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",62,null],[12,"ident","","",62,null],[12,"colon_token","","",62,null],[12,"bounds","","",62,null],[12,"eq_token","","",62,null],[12,"default","","",62,null],[3,"WhereClause","","A `where` clause in a definition: `where T:…",null,null],[12,"where_token","","",63,null],[12,"predicates","","",63,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"ForeignItemFn","","A foreign function in an `extern` block.",null,null],[12,"attrs","","",64,null],[12,"vis","","",64,null],[12,"sig","","",64,null],[12,"semi_token","","",64,null],[3,"ForeignItemMacro","","A macro invocation within an extern block.",null,null],[12,"attrs","","",65,null],[12,"mac","","",65,null],[12,"semi_token","","",65,null],[3,"ForeignItemStatic","","A foreign static item in an `extern` block: `static ext:…",null,null],[12,"attrs","","",66,null],[12,"vis","","",66,null],[12,"static_token","","",66,null],[12,"mutability","","",66,null],[12,"ident","","",66,null],[12,"colon_token","","",66,null],[12,"ty","","",66,null],[12,"semi_token","","",66,null],[3,"ForeignItemType","","A foreign type in an `extern` block: `type void`.",null,null],[12,"attrs","","",67,null],[12,"vis","","",67,null],[12,"type_token","","",67,null],[12,"ident","","",67,null],[12,"semi_token","","",67,null],[3,"ImplItemConst","","An associated constant within an impl block.",null,null],[12,"attrs","","",68,null],[12,"vis","","",68,null],[12,"defaultness","","",68,null],[12,"const_token","","",68,null],[12,"ident","","",68,null],[12,"colon_token","","",68,null],[12,"ty","","",68,null],[12,"eq_token","","",68,null],[12,"expr","","",68,null],[12,"semi_token","","",68,null],[3,"ImplItemMacro","","A macro invocation within an impl block.",null,null],[12,"attrs","","",69,null],[12,"mac","","",69,null],[12,"semi_token","","",69,null],[3,"ImplItemMethod","","A method within an impl block.",null,null],[12,"attrs","","",70,null],[12,"vis","","",70,null],[12,"defaultness","","",70,null],[12,"sig","","",70,null],[12,"block","","",70,null],[3,"ImplItemType","","An associated type within an impl block.",null,null],[12,"attrs","","",71,null],[12,"vis","","",71,null],[12,"defaultness","","",71,null],[12,"type_token","","",71,null],[12,"ident","","",71,null],[12,"generics","","",71,null],[12,"eq_token","","",71,null],[12,"ty","","",71,null],[12,"semi_token","","",71,null],[3,"ItemConst","","A constant item: `const MAX: u16 = 65535`.",null,null],[12,"attrs","","",72,null],[12,"vis","","",72,null],[12,"const_token","","",72,null],[12,"ident","","",72,null],[12,"colon_token","","",72,null],[12,"ty","","",72,null],[12,"eq_token","","",72,null],[12,"expr","","",72,null],[12,"semi_token","","",72,null],[3,"ItemEnum","","An enum definition: `enum Foo<A, B> { A(A), B(B) }`.",null,null],[12,"attrs","","",73,null],[12,"vis","","",73,null],[12,"enum_token","","",73,null],[12,"ident","","",73,null],[12,"generics","","",73,null],[12,"brace_token","","",73,null],[12,"variants","","",73,null],[3,"ItemExternCrate","","An `extern crate` item: `extern crate serde`.",null,null],[12,"attrs","","",74,null],[12,"vis","","",74,null],[12,"extern_token","","",74,null],[12,"crate_token","","",74,null],[12,"ident","","",74,null],[12,"rename","","",74,null],[12,"semi_token","","",74,null],[3,"ItemFn","","A free-standing function: `fn process(n: usize) ->…",null,null],[12,"attrs","","",75,null],[12,"vis","","",75,null],[12,"sig","","",75,null],[12,"block","","",75,null],[3,"ItemForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",null,null],[12,"attrs","","",76,null],[12,"abi","","",76,null],[12,"brace_token","","",76,null],[12,"items","","",76,null],[3,"ItemImpl","","An impl block providing trait or associated items:…",null,null],[12,"attrs","","",77,null],[12,"defaultness","","",77,null],[12,"unsafety","","",77,null],[12,"impl_token","","",77,null],[12,"generics","","",77,null],[12,"trait_","","Trait this impl implements.",77,null],[12,"self_ty","","The Self type of the impl.",77,null],[12,"brace_token","","",77,null],[12,"items","","",77,null],[3,"ItemMacro","","A macro invocation, which includes `macro_rules!`…",null,null],[12,"attrs","","",78,null],[12,"ident","","The `example` in `macro_rules! example { ... }`.",78,null],[12,"mac","","",78,null],[12,"semi_token","","",78,null],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the `macro`…",null,null],[12,"attrs","","",79,null],[12,"vis","","",79,null],[12,"macro_token","","",79,null],[12,"ident","","",79,null],[12,"rules","","",79,null],[3,"ItemMod","","A module or module declaration: `mod m` or `mod m { ... }`.",null,null],[12,"attrs","","",80,null],[12,"vis","","",80,null],[12,"mod_token","","",80,null],[12,"ident","","",80,null],[12,"content","","",80,null],[12,"semi","","",80,null],[3,"ItemStatic","","A static item: `static BIKE: Shed = Shed(42)`.",null,null],[12,"attrs","","",81,null],[12,"vis","","",81,null],[12,"static_token","","",81,null],[12,"mutability","","",81,null],[12,"ident","","",81,null],[12,"colon_token","","",81,null],[12,"ty","","",81,null],[12,"eq_token","","",81,null],[12,"expr","","",81,null],[12,"semi_token","","",81,null],[3,"ItemStruct","","A struct definition: `struct Foo<A> { x: A }`.",null,null],[12,"attrs","","",82,null],[12,"vis","","",82,null],[12,"struct_token","","",82,null],[12,"ident","","",82,null],[12,"generics","","",82,null],[12,"fields","","",82,null],[12,"semi_token","","",82,null],[3,"ItemTrait","","A trait definition: `pub trait Iterator { ... }`.",null,null],[12,"attrs","","",83,null],[12,"vis","","",83,null],[12,"unsafety","","",83,null],[12,"auto_token","","",83,null],[12,"trait_token","","",83,null],[12,"ident","","",83,null],[12,"generics","","",83,null],[12,"colon_token","","",83,null],[12,"supertraits","","",83,null],[12,"brace_token","","",83,null],[12,"items","","",83,null],[3,"ItemTraitAlias","","A trait alias: `pub trait SharableIterator = Iterator +…",null,null],[12,"attrs","","",84,null],[12,"vis","","",84,null],[12,"trait_token","","",84,null],[12,"ident","","",84,null],[12,"generics","","",84,null],[12,"eq_token","","",84,null],[12,"bounds","","",84,null],[12,"semi_token","","",84,null],[3,"ItemType","","A type alias: `type Result<T> = std::result::Result<T,…",null,null],[12,"attrs","","",85,null],[12,"vis","","",85,null],[12,"type_token","","",85,null],[12,"ident","","",85,null],[12,"generics","","",85,null],[12,"eq_token","","",85,null],[12,"ty","","",85,null],[12,"semi_token","","",85,null],[3,"ItemUnion","","A union definition: `union Foo<A, B> { x: A, y: B }`.",null,null],[12,"attrs","","",86,null],[12,"vis","","",86,null],[12,"union_token","","",86,null],[12,"ident","","",86,null],[12,"generics","","",86,null],[12,"fields","","",86,null],[3,"ItemUse","","A use declaration: `use std::collections::HashMap`.",null,null],[12,"attrs","","",87,null],[12,"vis","","",87,null],[12,"use_token","","",87,null],[12,"leading_colon","","",87,null],[12,"tree","","",87,null],[12,"semi_token","","",87,null],[3,"Receiver","","The `self` argument of an associated method, whether taken…",null,null],[12,"attrs","","",88,null],[12,"reference","","",88,null],[12,"mutability","","",88,null],[12,"self_token","","",88,null],[3,"Signature","","A function signature in a trait or implementation: `unsafe…",null,null],[12,"constness","","",89,null],[12,"asyncness","","",89,null],[12,"unsafety","","",89,null],[12,"abi","","",89,null],[12,"fn_token","","",89,null],[12,"ident","","",89,null],[12,"generics","","",89,null],[12,"paren_token","","",89,null],[12,"inputs","","",89,null],[12,"variadic","","",89,null],[12,"output","","",89,null],[3,"TraitItemConst","","An associated constant within the definition of a trait.",null,null],[12,"attrs","","",90,null],[12,"const_token","","",90,null],[12,"ident","","",90,null],[12,"colon_token","","",90,null],[12,"ty","","",90,null],[12,"default","","",90,null],[12,"semi_token","","",90,null],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",null,null],[12,"attrs","","",91,null],[12,"mac","","",91,null],[12,"semi_token","","",91,null],[3,"TraitItemMethod","","A trait method within the definition of a trait.",null,null],[12,"attrs","","",92,null],[12,"sig","","",92,null],[12,"default","","",92,null],[12,"semi_token","","",92,null],[3,"TraitItemType","","An associated type within the definition of a trait.",null,null],[12,"attrs","","",93,null],[12,"type_token","","",93,null],[12,"ident","","",93,null],[12,"generics","","",93,null],[12,"colon_token","","",93,null],[12,"bounds","","",93,null],[12,"default","","",93,null],[12,"semi_token","","",93,null],[3,"UseGlob","","A glob import in a `use` item: `*`.",null,null],[12,"star_token","","",94,null],[3,"UseGroup","","A braced group of imports in a `use` item: `{A, B, C}`.",null,null],[12,"brace_token","","",95,null],[12,"items","","",95,null],[3,"UseName","","An identifier imported by a `use` item: `HashMap`.",null,null],[12,"ident","","",96,null],[3,"UsePath","","A path prefix of imports in a `use` item: `std::...`.",null,null],[12,"ident","","",97,null],[12,"colon2_token","","",97,null],[12,"tree","","",97,null],[3,"UseRename","","An renamed identifier imported by a `use` item: `HashMap…",null,null],[12,"ident","","",98,null],[12,"as_token","","",98,null],[12,"rename","","",98,null],[3,"File","","A complete file of Rust source code.",null,null],[12,"shebang","","",99,null],[12,"attrs","","",99,null],[12,"items","","",99,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[12,"apostrophe","","",100,null],[12,"ident","","",100,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",101,null],[12,"span","","",101,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",102,null],[12,"bang_token","","",102,null],[12,"delimiter","","",102,null],[12,"tokens","","",102,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",103,null],[12,"brace_token","","",103,null],[12,"variants","","",103,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",104,null],[12,"fields","","",104,null],[12,"semi_token","","",104,null],[3,"DataUnion","","An untagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",105,null],[12,"fields","","",105,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",106,null],[12,"vis","","Visibility of the struct or enum.",106,null],[12,"ident","","Name of the struct or enum.",106,null],[12,"generics","","Generics required to complete the definition.",106,null],[12,"data","","Data within the struct or enum.",106,null],[3,"Block","","A braced block containing Rust statements.",null,null],[12,"brace_token","","",107,null],[12,"stmts","","Statements in a block",107,null],[3,"Local","","A local `let` binding: `let x: u64 = s.parse()?`.",null,null],[12,"attrs","","",108,null],[12,"let_token","","",108,null],[12,"pat","","",108,null],[12,"init","","",108,null],[12,"semi_token","","",108,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",109,null],[12,"name","","",109,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize)…",null,null],[12,"attrs","","",110,null],[12,"name","","",110,null],[12,"ty","","",110,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",111,null],[12,"elem","","",111,null],[12,"semi_token","","",111,null],[12,"len","","",111,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"lifetimes","","",112,null],[12,"unsafety","","",112,null],[12,"abi","","",112,null],[12,"fn_token","","",112,null],[12,"paren_token","","",112,null],[12,"inputs","","",112,null],[12,"variadic","","",112,null],[12,"output","","",112,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",113,null],[12,"elem","","",113,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a…",null,null],[12,"impl_token","","",114,null],[12,"bounds","","",114,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler:…",null,null],[12,"underscore_token","","",115,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",116,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",117,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",118,null],[12,"elem","","",118,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with…",null,null],[12,"qself","","",119,null],[12,"path","","",119,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",120,null],[12,"const_token","","",120,null],[12,"mutability","","",120,null],[12,"elem","","",120,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",121,null],[12,"lifetime","","",121,null],[12,"mutability","","",121,null],[12,"elem","","",121,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",122,null],[12,"elem","","",122,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where…",null,null],[12,"dyn_token","","",123,null],[12,"bounds","","",123,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",124,null],[12,"elems","","",124,null],[3,"Variadic","","The variadic argument of a foreign function.",null,null],[12,"attrs","","",125,null],[12,"dots","","",125,null],[3,"FieldPat","","A single field in a struct pattern.",null,null],[12,"attrs","","",126,null],[12,"member","","",126,null],[12,"colon_token","","",126,null],[12,"pat","","",126,null],[3,"PatBox","","A box pattern: `box v`.",null,null],[12,"attrs","","",127,null],[12,"box_token","","",127,null],[12,"pat","","",127,null],[3,"PatIdent","","A pattern that binds a new variable: `ref mut binding @…",null,null],[12,"attrs","","",128,null],[12,"by_ref","","",128,null],[12,"mutability","","",128,null],[12,"ident","","",128,null],[12,"subpat","","",128,null],[3,"PatLit","","A literal pattern: `0`.",null,null],[12,"attrs","","",129,null],[12,"expr","","",129,null],[3,"PatMacro","","A macro in pattern position.",null,null],[12,"attrs","","",130,null],[12,"mac","","",130,null],[3,"PatOr","","A pattern that matches any one of a set of cases.",null,null],[12,"attrs","","",131,null],[12,"leading_vert","","",131,null],[12,"cases","","",131,null],[3,"PatPath","","A path pattern like `Color::Red`, optionally qualified…",null,null],[12,"attrs","","",132,null],[12,"qself","","",132,null],[12,"path","","",132,null],[3,"PatRange","","A range pattern: `1..=2`.",null,null],[12,"attrs","","",133,null],[12,"lo","","",133,null],[12,"limits","","",133,null],[12,"hi","","",133,null],[3,"PatReference","","A reference pattern: `&mut var`.",null,null],[12,"attrs","","",134,null],[12,"and_token","","",134,null],[12,"mutability","","",134,null],[12,"pat","","",134,null],[3,"PatRest","","The dots in a tuple or slice pattern: `[0, 1, ..]`",null,null],[12,"attrs","","",135,null],[12,"dot2_token","","",135,null],[3,"PatSlice","","A dynamically sized slice pattern: `[a, b, ref i @ .., y,…",null,null],[12,"attrs","","",136,null],[12,"bracket_token","","",136,null],[12,"elems","","",136,null],[3,"PatStruct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",null,null],[12,"attrs","","",137,null],[12,"path","","",137,null],[12,"brace_token","","",137,null],[12,"fields","","",137,null],[12,"dot2_token","","",137,null],[3,"PatTuple","","A tuple pattern: `(a, b)`.",null,null],[12,"attrs","","",138,null],[12,"paren_token","","",138,null],[12,"elems","","",138,null],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y,…",null,null],[12,"attrs","","",139,null],[12,"path","","",139,null],[12,"pat","","",139,null],[3,"PatType","","A type ascription pattern: `foo: f64`.",null,null],[12,"attrs","","",140,null],[12,"pat","","",140,null],[12,"colon_token","","",140,null],[12,"ty","","",140,null],[3,"PatWild","","A pattern that matches any value: `_`.",null,null],[12,"attrs","","",141,null],[12,"underscore_token","","",141,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>`…",null,null],[12,"colon2_token","","",142,null],[12,"lt_token","","",142,null],[12,"args","","",142,null],[12,"gt_token","","",142,null],[3,"Binding","","A binding (equality constraint) on an associated type:…",null,null],[12,"ident","","",143,null],[12,"eq_token","","",143,null],[12,"ty","","",143,null],[3,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",null,null],[12,"ident","","",144,null],[12,"colon_token","","",144,null],[12,"bounds","","",144,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in…",null,null],[12,"paren_token","","",145,null],[12,"inputs","","`(A, B)`",145,null],[12,"output","","`C`",145,null],[3,"Path","","A path at which a named item is exported:…",null,null],[12,"leading_colon","","",146,null],[12,"segments","","",146,null],[3,"PathSegment","","A segment of a path together with any path arguments on…",null,null],[12,"ident","","",147,null],[12,"arguments","","",147,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T…",null,null],[12,"lt_token","","",148,null],[12,"ty","","",148,null],[12,"position","","",148,null],[12,"as_token","","",148,null],[12,"gt_token","","",148,null],[3,"Error","","Error returned when a Syn parser cannot parse the input…",null,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and…",null,null],[13,"Outer","","",149,null],[13,"Inner","","",149,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Path","","",150,null],[13,"List","","A structured list within an attribute, like `derive(Copy,…",150,null],[13,"NameValue","","A name-value pair within an attribute, like `feature =…",150,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in…",151,null],[13,"Lit","","A Rust literal, like the `\"new_name\"` in…",151,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point…",152,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as…",152,null],[13,"Unit","","Unit struct or unit variant such as `None`.",152,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or…",null,null],[13,"Public","","A public visibility level: `pub`.",153,null],[13,"Crate","","A crate-level visibility: `crate`.",153,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or…",153,null],[13,"Inherited","","An inherited visibility, which usually means private.",153,null],[4,"GenericMethodArgument","","An individual generic argument to a method, like `T`.",null,null],[13,"Type","","A type argument.",154,null],[13,"Const","","A const expression. Must be inside of a block.",154,null],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",155,null],[13,"Closed","","Inclusive at the beginning and end.",155,null],[4,"Expr","","A Rust expression.",null,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",156,null],[13,"Assign","","An assignment expression: `a = compute()`.",156,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",156,null],[13,"Async","","An async block: `async { ... }`.",156,null],[13,"Await","","An await expression: `fut.await`.",156,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",156,null],[13,"Block","","A blocked scope: `{ ... }`.",156,null],[13,"Box","","A box expression: `box f`.",156,null],[13,"Break","","A `break`, with an optional label to break and an optional…",156,null],[13,"Call","","A function call expression: `invoke(a, b)`.",156,null],[13,"Cast","","A cast expression: `foo as f64`.",156,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",156,null],[13,"Continue","","A `continue`, with an optional label.",156,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple…",156,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",156,null],[13,"Group","","An expression contained within invisible delimiters.",156,null],[13,"If","","An `if` expression with an optional `else` block: `if expr…",156,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",156,null],[13,"Let","","A `let` guard: `let Some(x) = opt`.",156,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",156,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",156,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",156,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {}…",156,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",156,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",156,null],[13,"Path","","A path like `std::mem::replace` possibly containing…",156,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",156,null],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",156,null],[13,"Repeat","","An array literal constructed from one repeated element:…",156,null],[13,"Return","","A `return`, with an optional value to be returned.",156,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",156,null],[13,"Try","","A try-expression: `expr?`.",156,null],[13,"TryBlock","","A try block: `try { ... }`.",156,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",156,null],[13,"Type","","A type ascription expression: `foo: f64`.",156,null],[13,"Unary","","A unary operation: `!x`, `*x`.",156,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",156,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",156,null],[13,"While","","A while loop: `while expr { ... }`.",156,null],[13,"Yield","","A yield expression: `yield expr`.",156,null],[4,"Member","","A struct or tuple struct field accessed in a struct…",null,null],[13,"Named","","A named field like `self.x`.",157,null],[13,"Unnamed","","An unnamed field like `self.0`.",157,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T:…",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",158,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",158,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",158,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the…",null,null],[13,"None","","",159,null],[13,"Maybe","","",159,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",160,null],[13,"Lifetime","","",160,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T:…",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>:…",161,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",161,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",161,null],[4,"FnArg","","An argument in a function signature: the `n: usize` in `fn…",null,null],[13,"Receiver","","The `self` argument of an associated method, whether taken…",162,null],[13,"Typed","","A function argument accepted by pattern and type.",162,null],[4,"ForeignItem","","An item within an `extern` block.",null,null],[13,"Fn","","A foreign function in an `extern` block.",163,null],[13,"Static","","A foreign static item in an `extern` block: `static ext:…",163,null],[13,"Type","","A foreign type in an `extern` block: `type void`.",163,null],[13,"Macro","","A macro invocation within an extern block.",163,null],[13,"Verbatim","","Tokens in an `extern` block not interpreted by Syn.",163,null],[4,"ImplItem","","An item within an impl block.",null,null],[13,"Const","","An associated constant within an impl block.",164,null],[13,"Method","","A method within an impl block.",164,null],[13,"Type","","An associated type within an impl block.",164,null],[13,"Macro","","A macro invocation within an impl block.",164,null],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",164,null],[4,"Item","","Things that can appear directly inside of a module or scope.",null,null],[13,"Const","","A constant item: `const MAX: u16 = 65535`.",165,null],[13,"Enum","","An enum definition: `enum Foo<A, B> { A(A), B(B) }`.",165,null],[13,"ExternCrate","","An `extern crate` item: `extern crate serde`.",165,null],[13,"Fn","","A free-standing function: `fn process(n: usize) ->…",165,null],[13,"ForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",165,null],[13,"Impl","","An impl block providing trait or associated items:…",165,null],[13,"Macro","","A macro invocation, which includes `macro_rules!`…",165,null],[13,"Macro2","","A 2.0-style declarative macro introduced by the `macro`…",165,null],[13,"Mod","","A module or module declaration: `mod m` or `mod m { ... }`.",165,null],[13,"Static","","A static item: `static BIKE: Shed = Shed(42)`.",165,null],[13,"Struct","","A struct definition: `struct Foo<A> { x: A }`.",165,null],[13,"Trait","","A trait definition: `pub trait Iterator { ... }`.",165,null],[13,"TraitAlias","","A trait alias: `pub trait SharableIterator = Iterator +…",165,null],[13,"Type","","A type alias: `type Result<T> = std::result::Result<T,…",165,null],[13,"Union","","A union definition: `union Foo<A, B> { x: A, y: B }`.",165,null],[13,"Use","","A use declaration: `use std::collections::HashMap`.",165,null],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",165,null],[4,"TraitItem","","An item declaration within the definition of a trait.",null,null],[13,"Const","","An associated constant within the definition of a trait.",166,null],[13,"Method","","A trait method within the definition of a trait.",166,null],[13,"Type","","An associated type within the definition of a trait.",166,null],[13,"Macro","","A macro invocation within the definition of a trait.",166,null],[13,"Verbatim","","Tokens within the definition of a trait not interpreted by…",166,null],[4,"UseTree","","A suffix of an import tree in a `use` item: `Type as…",null,null],[13,"Path","","A path prefix of imports in a `use` item: `std::...`.",167,null],[13,"Name","","An identifier imported by a `use` item: `HashMap`.",167,null],[13,"Rename","","An renamed identifier imported by a `use` item: `HashMap…",167,null],[13,"Glob","","A glob import in a `use` item: `*`.",167,null],[13,"Group","","A braced group of imports in a `use` item: `{A, B, C}`.",167,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",168,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",168,null],[13,"Byte","","A byte literal: `b'f'`.",168,null],[13,"Char","","A character literal: `'a'`.",168,null],[13,"Int","","An integer literal: `1` or `1u16`.",168,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",168,null],[13,"Bool","","A boolean literal: `true` or `false`.",168,null],[13,"Verbatim","","A raw token literal not interpreted by Syn.",168,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a…",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",169,null],[13,"Raw","","A raw string like `r##\"data\"##`.",169,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or…",null,null],[13,"Paren","","",170,null],[13,"Brace","","",170,null],[13,"Bracket","","",170,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",171,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",171,null],[13,"Union","","An untagged union input to a `proc_macro_derive` macro.",171,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",172,null],[13,"Sub","","The `-` operator (subtraction)",172,null],[13,"Mul","","The `*` operator (multiplication)",172,null],[13,"Div","","The `/` operator (division)",172,null],[13,"Rem","","The `%` operator (modulus)",172,null],[13,"And","","The `&&` operator (logical and)",172,null],[13,"Or","","The `||` operator (logical or)",172,null],[13,"BitXor","","The `^` operator (bitwise xor)",172,null],[13,"BitAnd","","The `&` operator (bitwise and)",172,null],[13,"BitOr","","The `|` operator (bitwise or)",172,null],[13,"Shl","","The `<<` operator (shift left)",172,null],[13,"Shr","","The `>>` operator (shift right)",172,null],[13,"Eq","","The `==` operator (equality)",172,null],[13,"Lt","","The `<` operator (less than)",172,null],[13,"Le","","The `<=` operator (less than or equal to)",172,null],[13,"Ne","","The `!=` operator (not equal to)",172,null],[13,"Ge","","The `>=` operator (greater than or equal to)",172,null],[13,"Gt","","The `>` operator (greater than)",172,null],[13,"AddEq","","The `+=` operator",172,null],[13,"SubEq","","The `-=` operator",172,null],[13,"MulEq","","The `*=` operator",172,null],[13,"DivEq","","The `/=` operator",172,null],[13,"RemEq","","The `%=` operator",172,null],[13,"BitXorEq","","The `^=` operator",172,null],[13,"BitAndEq","","The `&=` operator",172,null],[13,"BitOrEq","","The `|=` operator",172,null],[13,"ShlEq","","The `<<=` operator",172,null],[13,"ShrEq","","The `>>=` operator",172,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",173,null],[13,"Not","","The `!` operator for logical inversion",173,null],[13,"Neg","","The `-` operator for negation",173,null],[4,"Stmt","","A statement, usually ending in a semicolon.",null,null],[13,"Local","","A local (let) binding.",174,null],[13,"Item","","An item definition.",174,null],[13,"Expr","","Expr without trailing semicolon.",174,null],[13,"Semi","","Expression with trailing semicolon.",174,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",175,null],[13,"Type","","A particular type is returned.",175,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Array","","A fixed size array type: `[T; n]`.",176,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",176,null],[13,"Group","","A type contained within invisible delimiters.",176,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a…",176,null],[13,"Infer","","Indication that a type should be inferred by the compiler:…",176,null],[13,"Macro","","A macro in the type position.",176,null],[13,"Never","","The never type: `!`.",176,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",176,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with…",176,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",176,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",176,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",176,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where…",176,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",176,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",176,null],[4,"Pat","","A pattern in a local binding, function signature, match…",null,null],[13,"Box","","A box pattern: `box v`.",177,null],[13,"Ident","","A pattern that binds a new variable: `ref mut binding @…",177,null],[13,"Lit","","A literal pattern: `0`.",177,null],[13,"Macro","","A macro in pattern position.",177,null],[13,"Or","","A pattern that matches any one of a set of cases.",177,null],[13,"Path","","A path pattern like `Color::Red`, optionally qualified…",177,null],[13,"Range","","A range pattern: `1..=2`.",177,null],[13,"Reference","","A reference pattern: `&mut var`.",177,null],[13,"Rest","","The dots in a tuple or slice pattern: `[0, 1, ..]`",177,null],[13,"Slice","","A dynamically sized slice pattern: `[a, b, ref i @ .., y,…",177,null],[13,"Struct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",177,null],[13,"Tuple","","A tuple pattern: `(a, b)`.",177,null],[13,"TupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y,…",177,null],[13,"Type","","A type ascription pattern: `foo: f64`.",177,null],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",177,null],[13,"Wild","","A pattern that matches any value: `_`.",177,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item =…",null,null],[13,"Lifetime","","A lifetime argument.",178,null],[13,"Type","","A type argument.",178,null],[13,"Binding","","A binding (equality constraint) on an associated type: the…",178,null],[13,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",178,null],[13,"Const","","A const expression. Must be inside of a block.",178,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path…",null,null],[13,"None","","",179,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",179,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",179,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree…",null,[[["tokenstream"]],[["result"],["parse"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax…",null,[[["tokenstream"]],[["result"],["parse"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree…",null,[[["str"]],[["result"],["parse"]]]],[5,"parse_file","","Parse the content of a file of Rust code.",null,[[["str"]],[["file"],["result",["file"]]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and…",null,null],[3,"Underscore","syn::token","`_`",null,null],[12,"spans","","",180,null],[3,"Abstract","","`abstract`",null,null],[12,"span","","",181,null],[3,"As","","`as`",null,null],[12,"span","","",182,null],[3,"Async","","`async`",null,null],[12,"span","","",183,null],[3,"Auto","","`auto`",null,null],[12,"span","","",184,null],[3,"Await","","`await`",null,null],[12,"span","","",185,null],[3,"Become","","`become`",null,null],[12,"span","","",186,null],[3,"Box","","`box`",null,null],[12,"span","","",187,null],[3,"Break","","`break`",null,null],[12,"span","","",188,null],[3,"Const","","`const`",null,null],[12,"span","","",189,null],[3,"Continue","","`continue`",null,null],[12,"span","","",190,null],[3,"Crate","","`crate`",null,null],[12,"span","","",191,null],[3,"Default","","`default`",null,null],[12,"span","","",192,null],[3,"Do","","`do`",null,null],[12,"span","","",193,null],[3,"Dyn","","`dyn`",null,null],[12,"span","","",194,null],[3,"Else","","`else`",null,null],[12,"span","","",195,null],[3,"Enum","","`enum`",null,null],[12,"span","","",196,null],[3,"Extern","","`extern`",null,null],[12,"span","","",197,null],[3,"Final","","`final`",null,null],[12,"span","","",198,null],[3,"Fn","","`fn`",null,null],[12,"span","","",199,null],[3,"For","","`for`",null,null],[12,"span","","",200,null],[3,"If","","`if`",null,null],[12,"span","","",201,null],[3,"Impl","","`impl`",null,null],[12,"span","","",202,null],[3,"In","","`in`",null,null],[12,"span","","",203,null],[3,"Let","","`let`",null,null],[12,"span","","",204,null],[3,"Loop","","`loop`",null,null],[12,"span","","",205,null],[3,"Macro","","`macro`",null,null],[12,"span","","",206,null],[3,"Match","","`match`",null,null],[12,"span","","",207,null],[3,"Mod","","`mod`",null,null],[12,"span","","",208,null],[3,"Move","","`move`",null,null],[12,"span","","",209,null],[3,"Mut","","`mut`",null,null],[12,"span","","",210,null],[3,"Override","","`override`",null,null],[12,"span","","",211,null],[3,"Priv","","`priv`",null,null],[12,"span","","",212,null],[3,"Pub","","`pub`",null,null],[12,"span","","",213,null],[3,"Ref","","`ref`",null,null],[12,"span","","",214,null],[3,"Return","","`return`",null,null],[12,"span","","",215,null],[3,"SelfType","","`Self`",null,null],[12,"span","","",216,null],[3,"SelfValue","","`self`",null,null],[12,"span","","",217,null],[3,"Static","","`static`",null,null],[12,"span","","",218,null],[3,"Struct","","`struct`",null,null],[12,"span","","",219,null],[3,"Super","","`super`",null,null],[12,"span","","",220,null],[3,"Trait","","`trait`",null,null],[12,"span","","",221,null],[3,"Try","","`try`",null,null],[12,"span","","",222,null],[3,"Type","","`type`",null,null],[12,"span","","",223,null],[3,"Typeof","","`typeof`",null,null],[12,"span","","",224,null],[3,"Union","","`union`",null,null],[12,"span","","",225,null],[3,"Unsafe","","`unsafe`",null,null],[12,"span","","",226,null],[3,"Unsized","","`unsized`",null,null],[12,"span","","",227,null],[3,"Use","","`use`",null,null],[12,"span","","",228,null],[3,"Virtual","","`virtual`",null,null],[12,"span","","",229,null],[3,"Where","","`where`",null,null],[12,"span","","",230,null],[3,"While","","`while`",null,null],[12,"span","","",231,null],[3,"Yield","","`yield`",null,null],[12,"span","","",232,null],[3,"Add","","`+`",null,null],[12,"spans","","",233,null],[3,"AddEq","","`+=`",null,null],[12,"spans","","",234,null],[3,"And","","`&`",null,null],[12,"spans","","",235,null],[3,"AndAnd","","`&&`",null,null],[12,"spans","","",236,null],[3,"AndEq","","`&=`",null,null],[12,"spans","","",237,null],[3,"At","","`@`",null,null],[12,"spans","","",238,null],[3,"Bang","","`!`",null,null],[12,"spans","","",239,null],[3,"Caret","","`^`",null,null],[12,"spans","","",240,null],[3,"CaretEq","","`^=`",null,null],[12,"spans","","",241,null],[3,"Colon","","`:`",null,null],[12,"spans","","",242,null],[3,"Colon2","","`::`",null,null],[12,"spans","","",243,null],[3,"Comma","","`,`",null,null],[12,"spans","","",244,null],[3,"Div","","`/`",null,null],[12,"spans","","",245,null],[3,"DivEq","","`/=`",null,null],[12,"spans","","",246,null],[3,"Dollar","","`$`",null,null],[12,"spans","","",247,null],[3,"Dot","","`.`",null,null],[12,"spans","","",248,null],[3,"Dot2","","`..`",null,null],[12,"spans","","",249,null],[3,"Dot3","","`...`",null,null],[12,"spans","","",250,null],[3,"DotDotEq","","`..=`",null,null],[12,"spans","","",251,null],[3,"Eq","","`=`",null,null],[12,"spans","","",252,null],[3,"EqEq","","`==`",null,null],[12,"spans","","",253,null],[3,"Ge","","`>=`",null,null],[12,"spans","","",254,null],[3,"Gt","","`>`",null,null],[12,"spans","","",255,null],[3,"Le","","`<=`",null,null],[12,"spans","","",256,null],[3,"Lt","","`<`",null,null],[12,"spans","","",257,null],[3,"MulEq","","`*=`",null,null],[12,"spans","","",258,null],[3,"Ne","","`!=`",null,null],[12,"spans","","",259,null],[3,"Or","","`|`",null,null],[12,"spans","","",260,null],[3,"OrEq","","`|=`",null,null],[12,"spans","","",261,null],[3,"OrOr","","`||`",null,null],[12,"spans","","",262,null],[3,"Pound","","`#`",null,null],[12,"spans","","",263,null],[3,"Question","","`?`",null,null],[12,"spans","","",264,null],[3,"RArrow","","`->`",null,null],[12,"spans","","",265,null],[3,"LArrow","","`<-`",null,null],[12,"spans","","",266,null],[3,"Rem","","`%`",null,null],[12,"spans","","",267,null],[3,"RemEq","","`%=`",null,null],[12,"spans","","",268,null],[3,"FatArrow","","`=>`",null,null],[12,"spans","","",269,null],[3,"Semi","","`;`",null,null],[12,"spans","","",270,null],[3,"Shl","","`<<`",null,null],[12,"spans","","",271,null],[3,"ShlEq","","`<<=`",null,null],[12,"spans","","",272,null],[3,"Shr","","`>>`",null,null],[12,"spans","","",273,null],[3,"ShrEq","","`>>=`",null,null],[12,"spans","","",274,null],[3,"Star","","`*`",null,null],[12,"spans","","",275,null],[3,"Sub","","`-`",null,null],[12,"spans","","",276,null],[3,"SubEq","","`-=`",null,null],[12,"spans","","",277,null],[3,"Tilde","","`~`",null,null],[12,"spans","","",278,null],[3,"Brace","","`{...}`",null,null],[12,"span","","",279,null],[3,"Bracket","","`[...]`",null,null],[12,"span","","",280,null],[3,"Paren","","`(...)`",null,null],[12,"span","","",281,null],[3,"Group","","None-delimited group",null,null],[12,"span","","",282,null],[8,"Token","","Marker trait for types that represent single tokens.",null,null],[11,"surround","","",279,[[["tokenstream"],["self"],["f"]]]],[11,"surround","","",280,[[["tokenstream"],["self"],["f"]]]],[11,"surround","","",281,[[["tokenstream"],["self"],["f"]]]],[11,"surround","","",282,[[["tokenstream"],["self"],["f"]]]],[11,"parse_meta","syn","Parses the content of the attribute, consisting of the…",0,[[["self"]],[["result",["meta"]],["meta"]]]],[11,"parse_args","","Parse the arguments to the attribute as a syntax tree.",0,[[["self"]],[["result"],["parse"]]]],[11,"parse_args_with","","Parse the arguments to the attribute using the given parser.",0,[[["parser"],["self"]],["result"]]],[11,"parse_outer","","Parses zero or more outer attributes from the stream.",0,[[["parsestream"]],[["result",["vec"]],["vec"]]]],[11,"parse_inner","","Parses zero or more inner attributes from the stream.",0,[[["parsestream"]],[["result",["vec"]],["vec"]]]],[11,"path","","Returns the identifier that begins this structured meta…",150,[[["self"]],["path"]]],[11,"parse_named","","Parses a named (braced struct) field.",3,[[["parsestream"]],["result"]]],[11,"parse_unnamed","","Parses an unnamed (tuple struct) field.",3,[[["parsestream"]],["result"]]],[11,"iter","","Get an iterator over the borrowed [`Field`] items in this…",152,[[["self"]],[["iter",["field"]],["field"]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [`Field`] items…",152,[[["self"]],[["field"],["itermut",["field"]]]]],[11,"len","","Returns the number of fields.",152,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if there are zero fields.",152,[[["self"]],["bool"]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type…",56,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type…",56,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime…",56,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the…",56,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant…",56,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the…",56,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one…",56,[[["self"]],["whereclause"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for…",56,[[["self"]]]],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like…",283,[[["self"]],["turbofish"]]],[11,"new","","",57,[[["lifetime"]],["self"]]],[11,"receiver","","A method's `self` receiver, such as `&self` or `self:…",89,[[["self"]],[["fnarg"],["option",["fnarg"]]]]],[11,"lifetime","","",88,[[["self"]],[["lifetime"],["option",["lifetime"]]]]],[11,"new","","Panics",100,[[["str"],["span"]],["self"]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",168,[[["literal"]],["self"]]],[11,"new","","",284,[[["str"],["span"]],["self"]]],[11,"value","","",284,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string…",284,[[["self"]],[["result"],["parse"]]]],[11,"parse_with","","Invoke parser on the content of this string literal.",284,[[["parser"],["self"]],["result"]]],[11,"span","","",284,[[["self"]],["span"]]],[11,"set_span","","",284,[[["self"],["span"]]]],[11,"suffix","","",284,[[["self"]],["str"]]],[11,"new","","",285,[[["span"]],["self"]]],[11,"value","","",285,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"span","","",285,[[["self"]],["span"]]],[11,"set_span","","",285,[[["self"],["span"]]]],[11,"new","","",286,[[["span"],["u8"]],["self"]]],[11,"value","","",286,[[["self"]],["u8"]]],[11,"span","","",286,[[["self"]],["span"]]],[11,"set_span","","",286,[[["self"],["span"]]]],[11,"new","","",287,[[["span"],["char"]],["self"]]],[11,"value","","",287,[[["self"]],["char"]]],[11,"span","","",287,[[["self"]],["span"]]],[11,"set_span","","",287,[[["self"],["span"]]]],[11,"new","","",288,[[["str"],["span"]],["self"]]],[11,"base10_digits","","",288,[[["self"]],["str"]]],[11,"base10_parse","","Parses the literal into a selected number type.",288,[[["self"]],["result"]]],[11,"suffix","","",288,[[["self"]],["str"]]],[11,"span","","",288,[[["self"]],["span"]]],[11,"set_span","","",288,[[["self"],["span"]]]],[11,"new","","",289,[[["str"],["span"]],["self"]]],[11,"base10_digits","","",289,[[["self"]],["str"]]],[11,"base10_parse","","",289,[[["self"]],["result"]]],[11,"suffix","","",289,[[["self"]],["str"]]],[11,"span","","",289,[[["self"]],["span"]]],[11,"set_span","","",289,[[["self"],["span"]]]],[11,"parse_body","","Parse the tokens within the macro invocation's delimiters…",102,[[["self"]],[["result"],["parse"]]]],[11,"parse_body_with","","Parse the tokens within the macro invocation's delimiters…",102,[[["parser"],["self"]],["result"]]],[11,"parse_within","","Parse the body of a block as zero or more statements,…",107,[[["parsestream"]],[["result",["vec"]],["vec",["stmt"]]]]],[11,"without_plus","","In some positions, types may not contain the `+`…",176,[[["parsestream"]],["result"]]],[11,"without_plus","","",175,[[["parsestream"]],["result"]]],[11,"parse","","",175,[[["bool"],["parsestream"]],["result"]]],[11,"without_plus","","",123,[[["parsestream"]],["result"]]],[11,"parse","","",123,[[["bool"],["parsestream"]],["result"]]],[11,"parse_mod_style","","Parse a `Path` containing no path arguments on any of its…",146,[[["parsestream"]],["result"]]],[11,"is_ident","","Determines whether this is a path of length 1 equal to the…",146,[[["i"],["self"]],["bool"]]],[11,"get_ident","","If this path consists of a single ident, returns the ident.",146,[[["self"]],[["option",["ident"]],["ident"]]]],[11,"is_empty","","",179,[[["self"]],["bool"]]],[0,"buffer","","A stably addressed token buffer supporting efficient…",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times,…",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the…",290,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the…",290,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer…",290,[[["self"]],["cursor"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",291,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end…",291,[[],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given…",291,[[["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along…",291,[[],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along…",291,[[],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along…",291,[[],["option"]]],[11,"lifetime","","If the cursor is pointing at a `Lifetime`, returns it…",291,[[],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into…",291,[[],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it…",291,[[],["option"]]],[11,"span","","Returns the `Span` of the current token, or…",291,[[],["span"]]],[0,"ext","syn","Extension traits to provide parsing methods on foreign…",null,null],[8,"IdentExt","syn::ext","Additional methods for `Ident` not provided by proc-macro2…",null,null],[10,"parse_any","","Parses any identifier including keywords.",292,[[["parsestream"]],["result"]]],[18,"peek_any","","Peeks any identifier including keywords. Usage:…",292,null],[10,"unraw","","Strips the raw marker `r#`, if any, from the beginning of…",292,[[["self"]],["ident"]]],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by…",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T`…",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut…",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its…",null,null],[13,"Punctuated","","",293,null],[13,"End","","",293,null],[11,"new","","Creates an empty punctuated sequence.",294,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty,…",294,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated…",294,[[["self"]],["usize"]]],[11,"first","","Borrows the first element in this sequence.",294,[[["self"]],[["t"],["option"]]]],[11,"first_mut","","Mutably borrows the first element in this sequence.",294,[[["self"]],[["option"],["t"]]]],[11,"last","","Borrows the last element in this sequence.",294,[[["self"]],[["t"],["option"]]]],[11,"last_mut","","Mutably borrows the last element in this sequence.",294,[[["self"]],[["option"],["t"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of…",294,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree…",294,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as…",294,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as…",294,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as…",294,[[],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated…",294,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this…",294,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or…",294,[[["self"]],[["pair"],["option",["pair"]]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a…",294,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it…",294,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated…",294,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",294,[[["self"],["usize"],["t"]]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by…",294,[[["parsestream"]],["result"]]],[11,"parse_terminated_with","","Parses zero or more occurrences of `T` using the given…",294,[[["parsestream"]],["result"]]],[11,"parse_separated_nonempty","","Parses one or more occurrences of `T` separated by…",294,[[["parsestream"]],["result"]]],[11,"parse_separated_nonempty_with","","Parses one or more occurrences of `T` using the given…",294,[[["parsestream"]],["result"]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair,…",293,[[],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",293,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated…",293,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless…",293,[[["self"]],[["option"],["p"]]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an…",293,[[["t"],["option"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree…",293,[[]]],[0,"spanned","syn","A trait that can provide the `Span` of the complete…",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete…",null,null],[10,"span","","Returns a `Span` covering the complete contents of this…",295,[[["self"]],["span"]]],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax…",null,null],[5,"visit_abi","syn::visit","",null,[[["abi"],["v"]]]],[5,"visit_angle_bracketed_generic_arguments","","",null,[[["anglebracketedgenericarguments"],["v"]]]],[5,"visit_arm","","",null,[[["arm"],["v"]]]],[5,"visit_attr_style","","",null,[[["attrstyle"],["v"]]]],[5,"visit_attribute","","",null,[[["attribute"],["v"]]]],[5,"visit_bare_fn_arg","","",null,[[["barefnarg"],["v"]]]],[5,"visit_bin_op","","",null,[[["binop"],["v"]]]],[5,"visit_binding","","",null,[[["binding"],["v"]]]],[5,"visit_block","","",null,[[["v"],["block"]]]],[5,"visit_bound_lifetimes","","",null,[[["boundlifetimes"],["v"]]]],[5,"visit_const_param","","",null,[[["constparam"],["v"]]]],[5,"visit_constraint","","",null,[[["v"],["constraint"]]]],[5,"visit_data","","",null,[[["v"],["data"]]]],[5,"visit_data_enum","","",null,[[["dataenum"],["v"]]]],[5,"visit_data_struct","","",null,[[["v"],["datastruct"]]]],[5,"visit_data_union","","",null,[[["dataunion"],["v"]]]],[5,"visit_derive_input","","",null,[[["deriveinput"],["v"]]]],[5,"visit_expr","","",null,[[["expr"],["v"]]]],[5,"visit_expr_array","","",null,[[["v"],["exprarray"]]]],[5,"visit_expr_assign","","",null,[[["exprassign"],["v"]]]],[5,"visit_expr_assign_op","","",null,[[["exprassignop"],["v"]]]],[5,"visit_expr_async","","",null,[[["exprasync"],["v"]]]],[5,"visit_expr_await","","",null,[[["v"],["exprawait"]]]],[5,"visit_expr_binary","","",null,[[["exprbinary"],["v"]]]],[5,"visit_expr_block","","",null,[[["exprblock"],["v"]]]],[5,"visit_expr_box","","",null,[[["v"],["exprbox"]]]],[5,"visit_expr_break","","",null,[[["exprbreak"],["v"]]]],[5,"visit_expr_call","","",null,[[["exprcall"],["v"]]]],[5,"visit_expr_cast","","",null,[[["v"],["exprcast"]]]],[5,"visit_expr_closure","","",null,[[["exprclosure"],["v"]]]],[5,"visit_expr_continue","","",null,[[["exprcontinue"],["v"]]]],[5,"visit_expr_field","","",null,[[["v"],["exprfield"]]]],[5,"visit_expr_for_loop","","",null,[[["exprforloop"],["v"]]]],[5,"visit_expr_group","","",null,[[["exprgroup"],["v"]]]],[5,"visit_expr_if","","",null,[[["exprif"],["v"]]]],[5,"visit_expr_index","","",null,[[["exprindex"],["v"]]]],[5,"visit_expr_let","","",null,[[["exprlet"],["v"]]]],[5,"visit_expr_lit","","",null,[[["exprlit"],["v"]]]],[5,"visit_expr_loop","","",null,[[["v"],["exprloop"]]]],[5,"visit_expr_macro","","",null,[[["v"],["exprmacro"]]]],[5,"visit_expr_match","","",null,[[["v"],["exprmatch"]]]],[5,"visit_expr_method_call","","",null,[[["v"],["exprmethodcall"]]]],[5,"visit_expr_paren","","",null,[[["exprparen"],["v"]]]],[5,"visit_expr_path","","",null,[[["exprpath"],["v"]]]],[5,"visit_expr_range","","",null,[[["exprrange"],["v"]]]],[5,"visit_expr_reference","","",null,[[["v"],["exprreference"]]]],[5,"visit_expr_repeat","","",null,[[["v"],["exprrepeat"]]]],[5,"visit_expr_return","","",null,[[["exprreturn"],["v"]]]],[5,"visit_expr_struct","","",null,[[["v"],["exprstruct"]]]],[5,"visit_expr_try","","",null,[[["v"],["exprtry"]]]],[5,"visit_expr_try_block","","",null,[[["exprtryblock"],["v"]]]],[5,"visit_expr_tuple","","",null,[[["v"],["exprtuple"]]]],[5,"visit_expr_type","","",null,[[["v"],["exprtype"]]]],[5,"visit_expr_unary","","",null,[[["v"],["exprunary"]]]],[5,"visit_expr_unsafe","","",null,[[["v"],["exprunsafe"]]]],[5,"visit_expr_while","","",null,[[["exprwhile"],["v"]]]],[5,"visit_expr_yield","","",null,[[["expryield"],["v"]]]],[5,"visit_field","","",null,[[["field"],["v"]]]],[5,"visit_field_pat","","",null,[[["fieldpat"],["v"]]]],[5,"visit_field_value","","",null,[[["fieldvalue"],["v"]]]],[5,"visit_fields","","",null,[[["v"],["fields"]]]],[5,"visit_fields_named","","",null,[[["fieldsnamed"],["v"]]]],[5,"visit_fields_unnamed","","",null,[[["v"],["fieldsunnamed"]]]],[5,"visit_file","","",null,[[["file"],["v"]]]],[5,"visit_fn_arg","","",null,[[["v"],["fnarg"]]]],[5,"visit_foreign_item","","",null,[[["v"],["foreignitem"]]]],[5,"visit_foreign_item_fn","","",null,[[["foreignitemfn"],["v"]]]],[5,"visit_foreign_item_macro","","",null,[[["foreignitemmacro"],["v"]]]],[5,"visit_foreign_item_static","","",null,[[["foreignitemstatic"],["v"]]]],[5,"visit_foreign_item_type","","",null,[[["foreignitemtype"],["v"]]]],[5,"visit_generic_argument","","",null,[[["genericargument"],["v"]]]],[5,"visit_generic_method_argument","","",null,[[["v"],["genericmethodargument"]]]],[5,"visit_generic_param","","",null,[[["v"],["genericparam"]]]],[5,"visit_generics","","",null,[[["generics"],["v"]]]],[5,"visit_ident","","",null,[[["v"],["ident"]]]],[5,"visit_impl_item","","",null,[[["implitem"],["v"]]]],[5,"visit_impl_item_const","","",null,[[["v"],["implitemconst"]]]],[5,"visit_impl_item_macro","","",null,[[["v"],["implitemmacro"]]]],[5,"visit_impl_item_method","","",null,[[["implitemmethod"],["v"]]]],[5,"visit_impl_item_type","","",null,[[["implitemtype"],["v"]]]],[5,"visit_index","","",null,[[["index"],["v"]]]],[5,"visit_item","","",null,[[["item"],["v"]]]],[5,"visit_item_const","","",null,[[["v"],["itemconst"]]]],[5,"visit_item_enum","","",null,[[["itemenum"],["v"]]]],[5,"visit_item_extern_crate","","",null,[[["itemexterncrate"],["v"]]]],[5,"visit_item_fn","","",null,[[["v"],["itemfn"]]]],[5,"visit_item_foreign_mod","","",null,[[["itemforeignmod"],["v"]]]],[5,"visit_item_impl","","",null,[[["v"],["itemimpl"]]]],[5,"visit_item_macro","","",null,[[["itemmacro"],["v"]]]],[5,"visit_item_macro2","","",null,[[["itemmacro2"],["v"]]]],[5,"visit_item_mod","","",null,[[["v"],["itemmod"]]]],[5,"visit_item_static","","",null,[[["itemstatic"],["v"]]]],[5,"visit_item_struct","","",null,[[["v"],["itemstruct"]]]],[5,"visit_item_trait","","",null,[[["itemtrait"],["v"]]]],[5,"visit_item_trait_alias","","",null,[[["v"],["itemtraitalias"]]]],[5,"visit_item_type","","",null,[[["itemtype"],["v"]]]],[5,"visit_item_union","","",null,[[["itemunion"],["v"]]]],[5,"visit_item_use","","",null,[[["v"],["itemuse"]]]],[5,"visit_label","","",null,[[["v"],["label"]]]],[5,"visit_lifetime","","",null,[[["v"],["lifetime"]]]],[5,"visit_lifetime_def","","",null,[[["lifetimedef"],["v"]]]],[5,"visit_lit","","",null,[[["v"],["lit"]]]],[5,"visit_lit_bool","","",null,[[["v"],["litbool"]]]],[5,"visit_lit_byte","","",null,[[["v"],["litbyte"]]]],[5,"visit_lit_byte_str","","",null,[[["v"],["litbytestr"]]]],[5,"visit_lit_char","","",null,[[["v"],["litchar"]]]],[5,"visit_lit_float","","",null,[[["litfloat"],["v"]]]],[5,"visit_lit_int","","",null,[[["v"],["litint"]]]],[5,"visit_lit_str","","",null,[[["v"],["litstr"]]]],[5,"visit_local","","",null,[[["v"],["local"]]]],[5,"visit_macro","","",null,[[["v"],["macro"]]]],[5,"visit_macro_delimiter","","",null,[[["v"],["macrodelimiter"]]]],[5,"visit_member","","",null,[[["v"],["member"]]]],[5,"visit_meta","","",null,[[["meta"],["v"]]]],[5,"visit_meta_list","","",null,[[["v"],["metalist"]]]],[5,"visit_meta_name_value","","",null,[[["metanamevalue"],["v"]]]],[5,"visit_method_turbofish","","",null,[[["v"],["methodturbofish"]]]],[5,"visit_nested_meta","","",null,[[["v"],["nestedmeta"]]]],[5,"visit_parenthesized_generic_arguments","","",null,[[["parenthesizedgenericarguments"],["v"]]]],[5,"visit_pat","","",null,[[["v"],["pat"]]]],[5,"visit_pat_box","","",null,[[["v"],["patbox"]]]],[5,"visit_pat_ident","","",null,[[["patident"],["v"]]]],[5,"visit_pat_lit","","",null,[[["patlit"],["v"]]]],[5,"visit_pat_macro","","",null,[[["v"],["patmacro"]]]],[5,"visit_pat_or","","",null,[[["v"],["pator"]]]],[5,"visit_pat_path","","",null,[[["patpath"],["v"]]]],[5,"visit_pat_range","","",null,[[["v"],["patrange"]]]],[5,"visit_pat_reference","","",null,[[["patreference"],["v"]]]],[5,"visit_pat_rest","","",null,[[["v"],["patrest"]]]],[5,"visit_pat_slice","","",null,[[["v"],["patslice"]]]],[5,"visit_pat_struct","","",null,[[["v"],["patstruct"]]]],[5,"visit_pat_tuple","","",null,[[["v"],["pattuple"]]]],[5,"visit_pat_tuple_struct","","",null,[[["pattuplestruct"],["v"]]]],[5,"visit_pat_type","","",null,[[["v"],["pattype"]]]],[5,"visit_pat_wild","","",null,[[["patwild"],["v"]]]],[5,"visit_path","","",null,[[["path"],["v"]]]],[5,"visit_path_arguments","","",null,[[["patharguments"],["v"]]]],[5,"visit_path_segment","","",null,[[["pathsegment"],["v"]]]],[5,"visit_predicate_eq","","",null,[[["predicateeq"],["v"]]]],[5,"visit_predicate_lifetime","","",null,[[["v"],["predicatelifetime"]]]],[5,"visit_predicate_type","","",null,[[["predicatetype"],["v"]]]],[5,"visit_qself","","",null,[[["qself"],["v"]]]],[5,"visit_range_limits","","",null,[[["v"],["rangelimits"]]]],[5,"visit_receiver","","",null,[[["receiver"],["v"]]]],[5,"visit_return_type","","",null,[[["v"],["returntype"]]]],[5,"visit_signature","","",null,[[["v"],["signature"]]]],[5,"visit_span","","",null,[[["span"],["v"]]]],[5,"visit_stmt","","",null,[[["stmt"],["v"]]]],[5,"visit_trait_bound","","",null,[[["v"],["traitbound"]]]],[5,"visit_trait_bound_modifier","","",null,[[["v"],["traitboundmodifier"]]]],[5,"visit_trait_item","","",null,[[["v"],["traititem"]]]],[5,"visit_trait_item_const","","",null,[[["v"],["traititemconst"]]]],[5,"visit_trait_item_macro","","",null,[[["traititemmacro"],["v"]]]],[5,"visit_trait_item_method","","",null,[[["traititemmethod"],["v"]]]],[5,"visit_trait_item_type","","",null,[[["traititemtype"],["v"]]]],[5,"visit_type","","",null,[[["type"],["v"]]]],[5,"visit_type_array","","",null,[[["typearray"],["v"]]]],[5,"visit_type_bare_fn","","",null,[[["typebarefn"],["v"]]]],[5,"visit_type_group","","",null,[[["typegroup"],["v"]]]],[5,"visit_type_impl_trait","","",null,[[["typeimpltrait"],["v"]]]],[5,"visit_type_infer","","",null,[[["typeinfer"],["v"]]]],[5,"visit_type_macro","","",null,[[["v"],["typemacro"]]]],[5,"visit_type_never","","",null,[[["v"],["typenever"]]]],[5,"visit_type_param","","",null,[[["v"],["typeparam"]]]],[5,"visit_type_param_bound","","",null,[[["typeparambound"],["v"]]]],[5,"visit_type_paren","","",null,[[["v"],["typeparen"]]]],[5,"visit_type_path","","",null,[[["typepath"],["v"]]]],[5,"visit_type_ptr","","",null,[[["typeptr"],["v"]]]],[5,"visit_type_reference","","",null,[[["typereference"],["v"]]]],[5,"visit_type_slice","","",null,[[["v"],["typeslice"]]]],[5,"visit_type_trait_object","","",null,[[["v"],["typetraitobject"]]]],[5,"visit_type_tuple","","",null,[[["typetuple"],["v"]]]],[5,"visit_un_op","","",null,[[["v"],["unop"]]]],[5,"visit_use_glob","","",null,[[["useglob"],["v"]]]],[5,"visit_use_group","","",null,[[["usegroup"],["v"]]]],[5,"visit_use_name","","",null,[[["v"],["usename"]]]],[5,"visit_use_path","","",null,[[["usepath"],["v"]]]],[5,"visit_use_rename","","",null,[[["v"],["userename"]]]],[5,"visit_use_tree","","",null,[[["v"],["usetree"]]]],[5,"visit_variadic","","",null,[[["v"],["variadic"]]]],[5,"visit_variant","","",null,[[["variant"],["v"]]]],[5,"visit_vis_crate","","",null,[[["viscrate"],["v"]]]],[5,"visit_vis_public","","",null,[[["v"],["vispublic"]]]],[5,"visit_vis_restricted","","",null,[[["visrestricted"],["v"]]]],[5,"visit_visibility","","",null,[[["v"],["visibility"]]]],[5,"visit_where_clause","","",null,[[["v"],["whereclause"]]]],[5,"visit_where_predicate","","",null,[[["v"],["wherepredicate"]]]],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax…",null,null],[11,"visit_abi","","",296,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",296,[[["anglebracketedgenericarguments"],["self"]]]],[11,"visit_arm","","",296,[[["self"],["arm"]]]],[11,"visit_attr_style","","",296,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",296,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",296,[[["barefnarg"],["self"]]]],[11,"visit_bin_op","","",296,[[["binop"],["self"]]]],[11,"visit_binding","","",296,[[["self"],["binding"]]]],[11,"visit_block","","",296,[[["self"],["block"]]]],[11,"visit_bound_lifetimes","","",296,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",296,[[["constparam"],["self"]]]],[11,"visit_constraint","","",296,[[["self"],["constraint"]]]],[11,"visit_data","","",296,[[["self"],["data"]]]],[11,"visit_data_enum","","",296,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",296,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",296,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",296,[[["deriveinput"],["self"]]]],[11,"visit_expr","","",296,[[["self"],["expr"]]]],[11,"visit_expr_array","","",296,[[["self"],["exprarray"]]]],[11,"visit_expr_assign","","",296,[[["self"],["exprassign"]]]],[11,"visit_expr_assign_op","","",296,[[["self"],["exprassignop"]]]],[11,"visit_expr_async","","",296,[[["exprasync"],["self"]]]],[11,"visit_expr_await","","",296,[[["self"],["exprawait"]]]],[11,"visit_expr_binary","","",296,[[["exprbinary"],["self"]]]],[11,"visit_expr_block","","",296,[[["self"],["exprblock"]]]],[11,"visit_expr_box","","",296,[[["self"],["exprbox"]]]],[11,"visit_expr_break","","",296,[[["self"],["exprbreak"]]]],[11,"visit_expr_call","","",296,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",296,[[["self"],["exprcast"]]]],[11,"visit_expr_closure","","",296,[[["exprclosure"],["self"]]]],[11,"visit_expr_continue","","",296,[[["self"],["exprcontinue"]]]],[11,"visit_expr_field","","",296,[[["self"],["exprfield"]]]],[11,"visit_expr_for_loop","","",296,[[["self"],["exprforloop"]]]],[11,"visit_expr_group","","",296,[[["exprgroup"],["self"]]]],[11,"visit_expr_if","","",296,[[["self"],["exprif"]]]],[11,"visit_expr_index","","",296,[[["exprindex"],["self"]]]],[11,"visit_expr_let","","",296,[[["exprlet"],["self"]]]],[11,"visit_expr_lit","","",296,[[["self"],["exprlit"]]]],[11,"visit_expr_loop","","",296,[[["self"],["exprloop"]]]],[11,"visit_expr_macro","","",296,[[["self"],["exprmacro"]]]],[11,"visit_expr_match","","",296,[[["self"],["exprmatch"]]]],[11,"visit_expr_method_call","","",296,[[["self"],["exprmethodcall"]]]],[11,"visit_expr_paren","","",296,[[["exprparen"],["self"]]]],[11,"visit_expr_path","","",296,[[["exprpath"],["self"]]]],[11,"visit_expr_range","","",296,[[["self"],["exprrange"]]]],[11,"visit_expr_reference","","",296,[[["self"],["exprreference"]]]],[11,"visit_expr_repeat","","",296,[[["self"],["exprrepeat"]]]],[11,"visit_expr_return","","",296,[[["self"],["exprreturn"]]]],[11,"visit_expr_struct","","",296,[[["self"],["exprstruct"]]]],[11,"visit_expr_try","","",296,[[["self"],["exprtry"]]]],[11,"visit_expr_try_block","","",296,[[["exprtryblock"],["self"]]]],[11,"visit_expr_tuple","","",296,[[["self"],["exprtuple"]]]],[11,"visit_expr_type","","",296,[[["self"],["exprtype"]]]],[11,"visit_expr_unary","","",296,[[["self"],["exprunary"]]]],[11,"visit_expr_unsafe","","",296,[[["self"],["exprunsafe"]]]],[11,"visit_expr_while","","",296,[[["exprwhile"],["self"]]]],[11,"visit_expr_yield","","",296,[[["expryield"],["self"]]]],[11,"visit_field","","",296,[[["field"],["self"]]]],[11,"visit_field_pat","","",296,[[["self"],["fieldpat"]]]],[11,"visit_field_value","","",296,[[["fieldvalue"],["self"]]]],[11,"visit_fields","","",296,[[["self"],["fields"]]]],[11,"visit_fields_named","","",296,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",296,[[["self"],["fieldsunnamed"]]]],[11,"visit_file","","",296,[[["self"],["file"]]]],[11,"visit_fn_arg","","",296,[[["self"],["fnarg"]]]],[11,"visit_foreign_item","","",296,[[["self"],["foreignitem"]]]],[11,"visit_foreign_item_fn","","",296,[[["self"],["foreignitemfn"]]]],[11,"visit_foreign_item_macro","","",296,[[["self"],["foreignitemmacro"]]]],[11,"visit_foreign_item_static","","",296,[[["foreignitemstatic"],["self"]]]],[11,"visit_foreign_item_type","","",296,[[["self"],["foreignitemtype"]]]],[11,"visit_generic_argument","","",296,[[["genericargument"],["self"]]]],[11,"visit_generic_method_argument","","",296,[[["self"],["genericmethodargument"]]]],[11,"visit_generic_param","","",296,[[["self"],["genericparam"]]]],[11,"visit_generics","","",296,[[["generics"],["self"]]]],[11,"visit_ident","","",296,[[["self"],["ident"]]]],[11,"visit_impl_item","","",296,[[["implitem"],["self"]]]],[11,"visit_impl_item_const","","",296,[[["self"],["implitemconst"]]]],[11,"visit_impl_item_macro","","",296,[[["self"],["implitemmacro"]]]],[11,"visit_impl_item_method","","",296,[[["self"],["implitemmethod"]]]],[11,"visit_impl_item_type","","",296,[[["self"],["implitemtype"]]]],[11,"visit_index","","",296,[[["self"],["index"]]]],[11,"visit_item","","",296,[[["item"],["self"]]]],[11,"visit_item_const","","",296,[[["self"],["itemconst"]]]],[11,"visit_item_enum","","",296,[[["itemenum"],["self"]]]],[11,"visit_item_extern_crate","","",296,[[["itemexterncrate"],["self"]]]],[11,"visit_item_fn","","",296,[[["self"],["itemfn"]]]],[11,"visit_item_foreign_mod","","",296,[[["self"],["itemforeignmod"]]]],[11,"visit_item_impl","","",296,[[["self"],["itemimpl"]]]],[11,"visit_item_macro","","",296,[[["self"],["itemmacro"]]]],[11,"visit_item_macro2","","",296,[[["self"],["itemmacro2"]]]],[11,"visit_item_mod","","",296,[[["self"],["itemmod"]]]],[11,"visit_item_static","","",296,[[["self"],["itemstatic"]]]],[11,"visit_item_struct","","",296,[[["self"],["itemstruct"]]]],[11,"visit_item_trait","","",296,[[["self"],["itemtrait"]]]],[11,"visit_item_trait_alias","","",296,[[["self"],["itemtraitalias"]]]],[11,"visit_item_type","","",296,[[["itemtype"],["self"]]]],[11,"visit_item_union","","",296,[[["itemunion"],["self"]]]],[11,"visit_item_use","","",296,[[["self"],["itemuse"]]]],[11,"visit_label","","",296,[[["self"],["label"]]]],[11,"visit_lifetime","","",296,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",296,[[["lifetimedef"],["self"]]]],[11,"visit_lit","","",296,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",296,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",296,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",296,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",296,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",296,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",296,[[["self"],["litint"]]]],[11,"visit_lit_str","","",296,[[["self"],["litstr"]]]],[11,"visit_local","","",296,[[["self"],["local"]]]],[11,"visit_macro","","",296,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",296,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",296,[[["self"],["member"]]]],[11,"visit_meta","","",296,[[["self"],["meta"]]]],[11,"visit_meta_list","","",296,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",296,[[["metanamevalue"],["self"]]]],[11,"visit_method_turbofish","","",296,[[["self"],["methodturbofish"]]]],[11,"visit_nested_meta","","",296,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",296,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_pat","","",296,[[["self"],["pat"]]]],[11,"visit_pat_box","","",296,[[["self"],["patbox"]]]],[11,"visit_pat_ident","","",296,[[["patident"],["self"]]]],[11,"visit_pat_lit","","",296,[[["patlit"],["self"]]]],[11,"visit_pat_macro","","",296,[[["self"],["patmacro"]]]],[11,"visit_pat_or","","",296,[[["self"],["pator"]]]],[11,"visit_pat_path","","",296,[[["self"],["patpath"]]]],[11,"visit_pat_range","","",296,[[["self"],["patrange"]]]],[11,"visit_pat_reference","","",296,[[["patreference"],["self"]]]],[11,"visit_pat_rest","","",296,[[["self"],["patrest"]]]],[11,"visit_pat_slice","","",296,[[["self"],["patslice"]]]],[11,"visit_pat_struct","","",296,[[["self"],["patstruct"]]]],[11,"visit_pat_tuple","","",296,[[["self"],["pattuple"]]]],[11,"visit_pat_tuple_struct","","",296,[[["pattuplestruct"],["self"]]]],[11,"visit_pat_type","","",296,[[["self"],["pattype"]]]],[11,"visit_pat_wild","","",296,[[["self"],["patwild"]]]],[11,"visit_path","","",296,[[["path"],["self"]]]],[11,"visit_path_arguments","","",296,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",296,[[["pathsegment"],["self"]]]],[11,"visit_predicate_eq","","",296,[[["predicateeq"],["self"]]]],[11,"visit_predicate_lifetime","","",296,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",296,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",296,[[["self"],["qself"]]]],[11,"visit_range_limits","","",296,[[["self"],["rangelimits"]]]],[11,"visit_receiver","","",296,[[["self"],["receiver"]]]],[11,"visit_return_type","","",296,[[["self"],["returntype"]]]],[11,"visit_signature","","",296,[[["self"],["signature"]]]],[11,"visit_span","","",296,[[["self"],["span"]]]],[11,"visit_stmt","","",296,[[["self"],["stmt"]]]],[11,"visit_trait_bound","","",296,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",296,[[["self"],["traitboundmodifier"]]]],[11,"visit_trait_item","","",296,[[["self"],["traititem"]]]],[11,"visit_trait_item_const","","",296,[[["self"],["traititemconst"]]]],[11,"visit_trait_item_macro","","",296,[[["traititemmacro"],["self"]]]],[11,"visit_trait_item_method","","",296,[[["self"],["traititemmethod"]]]],[11,"visit_trait_item_type","","",296,[[["traititemtype"],["self"]]]],[11,"visit_type","","",296,[[["type"],["self"]]]],[11,"visit_type_array","","",296,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",296,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",296,[[["typegroup"],["self"]]]],[11,"visit_type_impl_trait","","",296,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",296,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",296,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",296,[[["self"],["typenever"]]]],[11,"visit_type_param","","",296,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",296,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",296,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",296,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",296,[[["typeptr"],["self"]]]],[11,"visit_type_reference","","",296,[[["typereference"],["self"]]]],[11,"visit_type_slice","","",296,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",296,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",296,[[["typetuple"],["self"]]]],[11,"visit_un_op","","",296,[[["self"],["unop"]]]],[11,"visit_use_glob","","",296,[[["useglob"],["self"]]]],[11,"visit_use_group","","",296,[[["usegroup"],["self"]]]],[11,"visit_use_name","","",296,[[["self"],["usename"]]]],[11,"visit_use_path","","",296,[[["self"],["usepath"]]]],[11,"visit_use_rename","","",296,[[["self"],["userename"]]]],[11,"visit_use_tree","","",296,[[["self"],["usetree"]]]],[11,"visit_variadic","","",296,[[["self"],["variadic"]]]],[11,"visit_variant","","",296,[[["variant"],["self"]]]],[11,"visit_vis_crate","","",296,[[["viscrate"],["self"]]]],[11,"visit_vis_public","","",296,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",296,[[["visrestricted"],["self"]]]],[11,"visit_visibility","","",296,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",296,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",296,[[["self"],["wherepredicate"]]]],[0,"visit_mut","syn","Syntax tree traversal to mutate an exclusive borrow of a…",null,null],[5,"visit_abi_mut","syn::visit_mut","",null,[[["v"],["abi"]]]],[5,"visit_angle_bracketed_generic_arguments_mut","","",null,[[["v"],["anglebracketedgenericarguments"]]]],[5,"visit_arm_mut","","",null,[[["arm"],["v"]]]],[5,"visit_attr_style_mut","","",null,[[["v"],["attrstyle"]]]],[5,"visit_attribute_mut","","",null,[[["v"],["attribute"]]]],[5,"visit_bare_fn_arg_mut","","",null,[[["barefnarg"],["v"]]]],[5,"visit_bin_op_mut","","",null,[[["binop"],["v"]]]],[5,"visit_binding_mut","","",null,[[["binding"],["v"]]]],[5,"visit_block_mut","","",null,[[["v"],["block"]]]],[5,"visit_bound_lifetimes_mut","","",null,[[["v"],["boundlifetimes"]]]],[5,"visit_const_param_mut","","",null,[[["constparam"],["v"]]]],[5,"visit_constraint_mut","","",null,[[["constraint"],["v"]]]],[5,"visit_data_mut","","",null,[[["data"],["v"]]]],[5,"visit_data_enum_mut","","",null,[[["dataenum"],["v"]]]],[5,"visit_data_struct_mut","","",null,[[["v"],["datastruct"]]]],[5,"visit_data_union_mut","","",null,[[["v"],["dataunion"]]]],[5,"visit_derive_input_mut","","",null,[[["v"],["deriveinput"]]]],[5,"visit_expr_mut","","",null,[[["expr"],["v"]]]],[5,"visit_expr_array_mut","","",null,[[["exprarray"],["v"]]]],[5,"visit_expr_assign_mut","","",null,[[["v"],["exprassign"]]]],[5,"visit_expr_assign_op_mut","","",null,[[["exprassignop"],["v"]]]],[5,"visit_expr_async_mut","","",null,[[["v"],["exprasync"]]]],[5,"visit_expr_await_mut","","",null,[[["exprawait"],["v"]]]],[5,"visit_expr_binary_mut","","",null,[[["v"],["exprbinary"]]]],[5,"visit_expr_block_mut","","",null,[[["exprblock"],["v"]]]],[5,"visit_expr_box_mut","","",null,[[["exprbox"],["v"]]]],[5,"visit_expr_break_mut","","",null,[[["v"],["exprbreak"]]]],[5,"visit_expr_call_mut","","",null,[[["exprcall"],["v"]]]],[5,"visit_expr_cast_mut","","",null,[[["v"],["exprcast"]]]],[5,"visit_expr_closure_mut","","",null,[[["exprclosure"],["v"]]]],[5,"visit_expr_continue_mut","","",null,[[["exprcontinue"],["v"]]]],[5,"visit_expr_field_mut","","",null,[[["exprfield"],["v"]]]],[5,"visit_expr_for_loop_mut","","",null,[[["exprforloop"],["v"]]]],[5,"visit_expr_group_mut","","",null,[[["exprgroup"],["v"]]]],[5,"visit_expr_if_mut","","",null,[[["v"],["exprif"]]]],[5,"visit_expr_index_mut","","",null,[[["v"],["exprindex"]]]],[5,"visit_expr_let_mut","","",null,[[["v"],["exprlet"]]]],[5,"visit_expr_lit_mut","","",null,[[["exprlit"],["v"]]]],[5,"visit_expr_loop_mut","","",null,[[["exprloop"],["v"]]]],[5,"visit_expr_macro_mut","","",null,[[["v"],["exprmacro"]]]],[5,"visit_expr_match_mut","","",null,[[["v"],["exprmatch"]]]],[5,"visit_expr_method_call_mut","","",null,[[["v"],["exprmethodcall"]]]],[5,"visit_expr_paren_mut","","",null,[[["exprparen"],["v"]]]],[5,"visit_expr_path_mut","","",null,[[["v"],["exprpath"]]]],[5,"visit_expr_range_mut","","",null,[[["v"],["exprrange"]]]],[5,"visit_expr_reference_mut","","",null,[[["exprreference"],["v"]]]],[5,"visit_expr_repeat_mut","","",null,[[["v"],["exprrepeat"]]]],[5,"visit_expr_return_mut","","",null,[[["exprreturn"],["v"]]]],[5,"visit_expr_struct_mut","","",null,[[["exprstruct"],["v"]]]],[5,"visit_expr_try_mut","","",null,[[["exprtry"],["v"]]]],[5,"visit_expr_try_block_mut","","",null,[[["v"],["exprtryblock"]]]],[5,"visit_expr_tuple_mut","","",null,[[["exprtuple"],["v"]]]],[5,"visit_expr_type_mut","","",null,[[["exprtype"],["v"]]]],[5,"visit_expr_unary_mut","","",null,[[["exprunary"],["v"]]]],[5,"visit_expr_unsafe_mut","","",null,[[["v"],["exprunsafe"]]]],[5,"visit_expr_while_mut","","",null,[[["exprwhile"],["v"]]]],[5,"visit_expr_yield_mut","","",null,[[["expryield"],["v"]]]],[5,"visit_field_mut","","",null,[[["v"],["field"]]]],[5,"visit_field_pat_mut","","",null,[[["fieldpat"],["v"]]]],[5,"visit_field_value_mut","","",null,[[["v"],["fieldvalue"]]]],[5,"visit_fields_mut","","",null,[[["fields"],["v"]]]],[5,"visit_fields_named_mut","","",null,[[["fieldsnamed"],["v"]]]],[5,"visit_fields_unnamed_mut","","",null,[[["v"],["fieldsunnamed"]]]],[5,"visit_file_mut","","",null,[[["file"],["v"]]]],[5,"visit_fn_arg_mut","","",null,[[["fnarg"],["v"]]]],[5,"visit_foreign_item_mut","","",null,[[["foreignitem"],["v"]]]],[5,"visit_foreign_item_fn_mut","","",null,[[["v"],["foreignitemfn"]]]],[5,"visit_foreign_item_macro_mut","","",null,[[["foreignitemmacro"],["v"]]]],[5,"visit_foreign_item_static_mut","","",null,[[["v"],["foreignitemstatic"]]]],[5,"visit_foreign_item_type_mut","","",null,[[["v"],["foreignitemtype"]]]],[5,"visit_generic_argument_mut","","",null,[[["v"],["genericargument"]]]],[5,"visit_generic_method_argument_mut","","",null,[[["v"],["genericmethodargument"]]]],[5,"visit_generic_param_mut","","",null,[[["genericparam"],["v"]]]],[5,"visit_generics_mut","","",null,[[["v"],["generics"]]]],[5,"visit_ident_mut","","",null,[[["ident"],["v"]]]],[5,"visit_impl_item_mut","","",null,[[["implitem"],["v"]]]],[5,"visit_impl_item_const_mut","","",null,[[["v"],["implitemconst"]]]],[5,"visit_impl_item_macro_mut","","",null,[[["implitemmacro"],["v"]]]],[5,"visit_impl_item_method_mut","","",null,[[["v"],["implitemmethod"]]]],[5,"visit_impl_item_type_mut","","",null,[[["implitemtype"],["v"]]]],[5,"visit_index_mut","","",null,[[["index"],["v"]]]],[5,"visit_item_mut","","",null,[[["v"],["item"]]]],[5,"visit_item_const_mut","","",null,[[["itemconst"],["v"]]]],[5,"visit_item_enum_mut","","",null,[[["v"],["itemenum"]]]],[5,"visit_item_extern_crate_mut","","",null,[[["v"],["itemexterncrate"]]]],[5,"visit_item_fn_mut","","",null,[[["itemfn"],["v"]]]],[5,"visit_item_foreign_mod_mut","","",null,[[["itemforeignmod"],["v"]]]],[5,"visit_item_impl_mut","","",null,[[["itemimpl"],["v"]]]],[5,"visit_item_macro_mut","","",null,[[["v"],["itemmacro"]]]],[5,"visit_item_macro2_mut","","",null,[[["v"],["itemmacro2"]]]],[5,"visit_item_mod_mut","","",null,[[["itemmod"],["v"]]]],[5,"visit_item_static_mut","","",null,[[["itemstatic"],["v"]]]],[5,"visit_item_struct_mut","","",null,[[["v"],["itemstruct"]]]],[5,"visit_item_trait_mut","","",null,[[["v"],["itemtrait"]]]],[5,"visit_item_trait_alias_mut","","",null,[[["itemtraitalias"],["v"]]]],[5,"visit_item_type_mut","","",null,[[["v"],["itemtype"]]]],[5,"visit_item_union_mut","","",null,[[["v"],["itemunion"]]]],[5,"visit_item_use_mut","","",null,[[["itemuse"],["v"]]]],[5,"visit_label_mut","","",null,[[["v"],["label"]]]],[5,"visit_lifetime_mut","","",null,[[["v"],["lifetime"]]]],[5,"visit_lifetime_def_mut","","",null,[[["lifetimedef"],["v"]]]],[5,"visit_lit_mut","","",null,[[["lit"],["v"]]]],[5,"visit_lit_bool_mut","","",null,[[["litbool"],["v"]]]],[5,"visit_lit_byte_mut","","",null,[[["litbyte"],["v"]]]],[5,"visit_lit_byte_str_mut","","",null,[[["litbytestr"],["v"]]]],[5,"visit_lit_char_mut","","",null,[[["v"],["litchar"]]]],[5,"visit_lit_float_mut","","",null,[[["litfloat"],["v"]]]],[5,"visit_lit_int_mut","","",null,[[["v"],["litint"]]]],[5,"visit_lit_str_mut","","",null,[[["v"],["litstr"]]]],[5,"visit_local_mut","","",null,[[["local"],["v"]]]],[5,"visit_macro_mut","","",null,[[["v"],["macro"]]]],[5,"visit_macro_delimiter_mut","","",null,[[["v"],["macrodelimiter"]]]],[5,"visit_member_mut","","",null,[[["v"],["member"]]]],[5,"visit_meta_mut","","",null,[[["meta"],["v"]]]],[5,"visit_meta_list_mut","","",null,[[["v"],["metalist"]]]],[5,"visit_meta_name_value_mut","","",null,[[["v"],["metanamevalue"]]]],[5,"visit_method_turbofish_mut","","",null,[[["methodturbofish"],["v"]]]],[5,"visit_nested_meta_mut","","",null,[[["nestedmeta"],["v"]]]],[5,"visit_parenthesized_generic_arguments_mut","","",null,[[["parenthesizedgenericarguments"],["v"]]]],[5,"visit_pat_mut","","",null,[[["pat"],["v"]]]],[5,"visit_pat_box_mut","","",null,[[["v"],["patbox"]]]],[5,"visit_pat_ident_mut","","",null,[[["patident"],["v"]]]],[5,"visit_pat_lit_mut","","",null,[[["v"],["patlit"]]]],[5,"visit_pat_macro_mut","","",null,[[["v"],["patmacro"]]]],[5,"visit_pat_or_mut","","",null,[[["pator"],["v"]]]],[5,"visit_pat_path_mut","","",null,[[["patpath"],["v"]]]],[5,"visit_pat_range_mut","","",null,[[["v"],["patrange"]]]],[5,"visit_pat_reference_mut","","",null,[[["patreference"],["v"]]]],[5,"visit_pat_rest_mut","","",null,[[["patrest"],["v"]]]],[5,"visit_pat_slice_mut","","",null,[[["v"],["patslice"]]]],[5,"visit_pat_struct_mut","","",null,[[["patstruct"],["v"]]]],[5,"visit_pat_tuple_mut","","",null,[[["v"],["pattuple"]]]],[5,"visit_pat_tuple_struct_mut","","",null,[[["v"],["pattuplestruct"]]]],[5,"visit_pat_type_mut","","",null,[[["v"],["pattype"]]]],[5,"visit_pat_wild_mut","","",null,[[["v"],["patwild"]]]],[5,"visit_path_mut","","",null,[[["v"],["path"]]]],[5,"visit_path_arguments_mut","","",null,[[["patharguments"],["v"]]]],[5,"visit_path_segment_mut","","",null,[[["v"],["pathsegment"]]]],[5,"visit_predicate_eq_mut","","",null,[[["v"],["predicateeq"]]]],[5,"visit_predicate_lifetime_mut","","",null,[[["predicatelifetime"],["v"]]]],[5,"visit_predicate_type_mut","","",null,[[["v"],["predicatetype"]]]],[5,"visit_qself_mut","","",null,[[["v"],["qself"]]]],[5,"visit_range_limits_mut","","",null,[[["v"],["rangelimits"]]]],[5,"visit_receiver_mut","","",null,[[["receiver"],["v"]]]],[5,"visit_return_type_mut","","",null,[[["returntype"],["v"]]]],[5,"visit_signature_mut","","",null,[[["v"],["signature"]]]],[5,"visit_span_mut","","",null,[[["v"],["span"]]]],[5,"visit_stmt_mut","","",null,[[["stmt"],["v"]]]],[5,"visit_trait_bound_mut","","",null,[[["traitbound"],["v"]]]],[5,"visit_trait_bound_modifier_mut","","",null,[[["traitboundmodifier"],["v"]]]],[5,"visit_trait_item_mut","","",null,[[["traititem"],["v"]]]],[5,"visit_trait_item_const_mut","","",null,[[["traititemconst"],["v"]]]],[5,"visit_trait_item_macro_mut","","",null,[[["traititemmacro"],["v"]]]],[5,"visit_trait_item_method_mut","","",null,[[["traititemmethod"],["v"]]]],[5,"visit_trait_item_type_mut","","",null,[[["traititemtype"],["v"]]]],[5,"visit_type_mut","","",null,[[["type"],["v"]]]],[5,"visit_type_array_mut","","",null,[[["v"],["typearray"]]]],[5,"visit_type_bare_fn_mut","","",null,[[["typebarefn"],["v"]]]],[5,"visit_type_group_mut","","",null,[[["v"],["typegroup"]]]],[5,"visit_type_impl_trait_mut","","",null,[[["v"],["typeimpltrait"]]]],[5,"visit_type_infer_mut","","",null,[[["v"],["typeinfer"]]]],[5,"visit_type_macro_mut","","",null,[[["typemacro"],["v"]]]],[5,"visit_type_never_mut","","",null,[[["typenever"],["v"]]]],[5,"visit_type_param_mut","","",null,[[["typeparam"],["v"]]]],[5,"visit_type_param_bound_mut","","",null,[[["typeparambound"],["v"]]]],[5,"visit_type_paren_mut","","",null,[[["typeparen"],["v"]]]],[5,"visit_type_path_mut","","",null,[[["v"],["typepath"]]]],[5,"visit_type_ptr_mut","","",null,[[["v"],["typeptr"]]]],[5,"visit_type_reference_mut","","",null,[[["v"],["typereference"]]]],[5,"visit_type_slice_mut","","",null,[[["typeslice"],["v"]]]],[5,"visit_type_trait_object_mut","","",null,[[["typetraitobject"],["v"]]]],[5,"visit_type_tuple_mut","","",null,[[["typetuple"],["v"]]]],[5,"visit_un_op_mut","","",null,[[["v"],["unop"]]]],[5,"visit_use_glob_mut","","",null,[[["useglob"],["v"]]]],[5,"visit_use_group_mut","","",null,[[["v"],["usegroup"]]]],[5,"visit_use_name_mut","","",null,[[["usename"],["v"]]]],[5,"visit_use_path_mut","","",null,[[["v"],["usepath"]]]],[5,"visit_use_rename_mut","","",null,[[["userename"],["v"]]]],[5,"visit_use_tree_mut","","",null,[[["usetree"],["v"]]]],[5,"visit_variadic_mut","","",null,[[["variadic"],["v"]]]],[5,"visit_variant_mut","","",null,[[["variant"],["v"]]]],[5,"visit_vis_crate_mut","","",null,[[["v"],["viscrate"]]]],[5,"visit_vis_public_mut","","",null,[[["v"],["vispublic"]]]],[5,"visit_vis_restricted_mut","","",null,[[["v"],["visrestricted"]]]],[5,"visit_visibility_mut","","",null,[[["v"],["visibility"]]]],[5,"visit_where_clause_mut","","",null,[[["v"],["whereclause"]]]],[5,"visit_where_predicate_mut","","",null,[[["wherepredicate"],["v"]]]],[8,"VisitMut","","Syntax tree traversal to mutate an exclusive borrow of a…",null,null],[11,"visit_abi_mut","","",297,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments_mut","","",297,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_arm_mut","","",297,[[["self"],["arm"]]]],[11,"visit_attr_style_mut","","",297,[[["self"],["attrstyle"]]]],[11,"visit_attribute_mut","","",297,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg_mut","","",297,[[["barefnarg"],["self"]]]],[11,"visit_bin_op_mut","","",297,[[["self"],["binop"]]]],[11,"visit_binding_mut","","",297,[[["binding"],["self"]]]],[11,"visit_block_mut","","",297,[[["self"],["block"]]]],[11,"visit_bound_lifetimes_mut","","",297,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param_mut","","",297,[[["self"],["constparam"]]]],[11,"visit_constraint_mut","","",297,[[["self"],["constraint"]]]],[11,"visit_data_mut","","",297,[[["self"],["data"]]]],[11,"visit_data_enum_mut","","",297,[[["dataenum"],["self"]]]],[11,"visit_data_struct_mut","","",297,[[["self"],["datastruct"]]]],[11,"visit_data_union_mut","","",297,[[["self"],["dataunion"]]]],[11,"visit_derive_input_mut","","",297,[[["self"],["deriveinput"]]]],[11,"visit_expr_mut","","",297,[[["expr"],["self"]]]],[11,"visit_expr_array_mut","","",297,[[["self"],["exprarray"]]]],[11,"visit_expr_assign_mut","","",297,[[["self"],["exprassign"]]]],[11,"visit_expr_assign_op_mut","","",297,[[["self"],["exprassignop"]]]],[11,"visit_expr_async_mut","","",297,[[["self"],["exprasync"]]]],[11,"visit_expr_await_mut","","",297,[[["exprawait"],["self"]]]],[11,"visit_expr_binary_mut","","",297,[[["self"],["exprbinary"]]]],[11,"visit_expr_block_mut","","",297,[[["exprblock"],["self"]]]],[11,"visit_expr_box_mut","","",297,[[["exprbox"],["self"]]]],[11,"visit_expr_break_mut","","",297,[[["self"],["exprbreak"]]]],[11,"visit_expr_call_mut","","",297,[[["self"],["exprcall"]]]],[11,"visit_expr_cast_mut","","",297,[[["self"],["exprcast"]]]],[11,"visit_expr_closure_mut","","",297,[[["self"],["exprclosure"]]]],[11,"visit_expr_continue_mut","","",297,[[["self"],["exprcontinue"]]]],[11,"visit_expr_field_mut","","",297,[[["exprfield"],["self"]]]],[11,"visit_expr_for_loop_mut","","",297,[[["exprforloop"],["self"]]]],[11,"visit_expr_group_mut","","",297,[[["self"],["exprgroup"]]]],[11,"visit_expr_if_mut","","",297,[[["self"],["exprif"]]]],[11,"visit_expr_index_mut","","",297,[[["self"],["exprindex"]]]],[11,"visit_expr_let_mut","","",297,[[["self"],["exprlet"]]]],[11,"visit_expr_lit_mut","","",297,[[["self"],["exprlit"]]]],[11,"visit_expr_loop_mut","","",297,[[["self"],["exprloop"]]]],[11,"visit_expr_macro_mut","","",297,[[["self"],["exprmacro"]]]],[11,"visit_expr_match_mut","","",297,[[["self"],["exprmatch"]]]],[11,"visit_expr_method_call_mut","","",297,[[["self"],["exprmethodcall"]]]],[11,"visit_expr_paren_mut","","",297,[[["self"],["exprparen"]]]],[11,"visit_expr_path_mut","","",297,[[["self"],["exprpath"]]]],[11,"visit_expr_range_mut","","",297,[[["self"],["exprrange"]]]],[11,"visit_expr_reference_mut","","",297,[[["self"],["exprreference"]]]],[11,"visit_expr_repeat_mut","","",297,[[["self"],["exprrepeat"]]]],[11,"visit_expr_return_mut","","",297,[[["self"],["exprreturn"]]]],[11,"visit_expr_struct_mut","","",297,[[["exprstruct"],["self"]]]],[11,"visit_expr_try_mut","","",297,[[["exprtry"],["self"]]]],[11,"visit_expr_try_block_mut","","",297,[[["self"],["exprtryblock"]]]],[11,"visit_expr_tuple_mut","","",297,[[["exprtuple"],["self"]]]],[11,"visit_expr_type_mut","","",297,[[["self"],["exprtype"]]]],[11,"visit_expr_unary_mut","","",297,[[["self"],["exprunary"]]]],[11,"visit_expr_unsafe_mut","","",297,[[["self"],["exprunsafe"]]]],[11,"visit_expr_while_mut","","",297,[[["self"],["exprwhile"]]]],[11,"visit_expr_yield_mut","","",297,[[["expryield"],["self"]]]],[11,"visit_field_mut","","",297,[[["self"],["field"]]]],[11,"visit_field_pat_mut","","",297,[[["fieldpat"],["self"]]]],[11,"visit_field_value_mut","","",297,[[["self"],["fieldvalue"]]]],[11,"visit_fields_mut","","",297,[[["fields"],["self"]]]],[11,"visit_fields_named_mut","","",297,[[["fieldsnamed"],["self"]]]],[11,"visit_fields_unnamed_mut","","",297,[[["self"],["fieldsunnamed"]]]],[11,"visit_file_mut","","",297,[[["file"],["self"]]]],[11,"visit_fn_arg_mut","","",297,[[["self"],["fnarg"]]]],[11,"visit_foreign_item_mut","","",297,[[["self"],["foreignitem"]]]],[11,"visit_foreign_item_fn_mut","","",297,[[["self"],["foreignitemfn"]]]],[11,"visit_foreign_item_macro_mut","","",297,[[["foreignitemmacro"],["self"]]]],[11,"visit_foreign_item_static_mut","","",297,[[["self"],["foreignitemstatic"]]]],[11,"visit_foreign_item_type_mut","","",297,[[["self"],["foreignitemtype"]]]],[11,"visit_generic_argument_mut","","",297,[[["self"],["genericargument"]]]],[11,"visit_generic_method_argument_mut","","",297,[[["self"],["genericmethodargument"]]]],[11,"visit_generic_param_mut","","",297,[[["self"],["genericparam"]]]],[11,"visit_generics_mut","","",297,[[["self"],["generics"]]]],[11,"visit_ident_mut","","",297,[[["self"],["ident"]]]],[11,"visit_impl_item_mut","","",297,[[["self"],["implitem"]]]],[11,"visit_impl_item_const_mut","","",297,[[["self"],["implitemconst"]]]],[11,"visit_impl_item_macro_mut","","",297,[[["implitemmacro"],["self"]]]],[11,"visit_impl_item_method_mut","","",297,[[["self"],["implitemmethod"]]]],[11,"visit_impl_item_type_mut","","",297,[[["self"],["implitemtype"]]]],[11,"visit_index_mut","","",297,[[["index"],["self"]]]],[11,"visit_item_mut","","",297,[[["self"],["item"]]]],[11,"visit_item_const_mut","","",297,[[["itemconst"],["self"]]]],[11,"visit_item_enum_mut","","",297,[[["self"],["itemenum"]]]],[11,"visit_item_extern_crate_mut","","",297,[[["self"],["itemexterncrate"]]]],[11,"visit_item_fn_mut","","",297,[[["itemfn"],["self"]]]],[11,"visit_item_foreign_mod_mut","","",297,[[["itemforeignmod"],["self"]]]],[11,"visit_item_impl_mut","","",297,[[["self"],["itemimpl"]]]],[11,"visit_item_macro_mut","","",297,[[["self"],["itemmacro"]]]],[11,"visit_item_macro2_mut","","",297,[[["self"],["itemmacro2"]]]],[11,"visit_item_mod_mut","","",297,[[["itemmod"],["self"]]]],[11,"visit_item_static_mut","","",297,[[["itemstatic"],["self"]]]],[11,"visit_item_struct_mut","","",297,[[["self"],["itemstruct"]]]],[11,"visit_item_trait_mut","","",297,[[["self"],["itemtrait"]]]],[11,"visit_item_trait_alias_mut","","",297,[[["self"],["itemtraitalias"]]]],[11,"visit_item_type_mut","","",297,[[["self"],["itemtype"]]]],[11,"visit_item_union_mut","","",297,[[["self"],["itemunion"]]]],[11,"visit_item_use_mut","","",297,[[["self"],["itemuse"]]]],[11,"visit_label_mut","","",297,[[["self"],["label"]]]],[11,"visit_lifetime_mut","","",297,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def_mut","","",297,[[["self"],["lifetimedef"]]]],[11,"visit_lit_mut","","",297,[[["lit"],["self"]]]],[11,"visit_lit_bool_mut","","",297,[[["self"],["litbool"]]]],[11,"visit_lit_byte_mut","","",297,[[["litbyte"],["self"]]]],[11,"visit_lit_byte_str_mut","","",297,[[["self"],["litbytestr"]]]],[11,"visit_lit_char_mut","","",297,[[["self"],["litchar"]]]],[11,"visit_lit_float_mut","","",297,[[["litfloat"],["self"]]]],[11,"visit_lit_int_mut","","",297,[[["self"],["litint"]]]],[11,"visit_lit_str_mut","","",297,[[["self"],["litstr"]]]],[11,"visit_local_mut","","",297,[[["local"],["self"]]]],[11,"visit_macro_mut","","",297,[[["self"],["macro"]]]],[11,"visit_macro_delimiter_mut","","",297,[[["self"],["macrodelimiter"]]]],[11,"visit_member_mut","","",297,[[["self"],["member"]]]],[11,"visit_meta_mut","","",297,[[["self"],["meta"]]]],[11,"visit_meta_list_mut","","",297,[[["self"],["metalist"]]]],[11,"visit_meta_name_value_mut","","",297,[[["self"],["metanamevalue"]]]],[11,"visit_method_turbofish_mut","","",297,[[["self"],["methodturbofish"]]]],[11,"visit_nested_meta_mut","","",297,[[["nestedmeta"],["self"]]]],[11,"visit_parenthesized_generic_arguments_mut","","",297,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_pat_mut","","",297,[[["self"],["pat"]]]],[11,"visit_pat_box_mut","","",297,[[["self"],["patbox"]]]],[11,"visit_pat_ident_mut","","",297,[[["self"],["patident"]]]],[11,"visit_pat_lit_mut","","",297,[[["self"],["patlit"]]]],[11,"visit_pat_macro_mut","","",297,[[["self"],["patmacro"]]]],[11,"visit_pat_or_mut","","",297,[[["pator"],["self"]]]],[11,"visit_pat_path_mut","","",297,[[["self"],["patpath"]]]],[11,"visit_pat_range_mut","","",297,[[["self"],["patrange"]]]],[11,"visit_pat_reference_mut","","",297,[[["patreference"],["self"]]]],[11,"visit_pat_rest_mut","","",297,[[["self"],["patrest"]]]],[11,"visit_pat_slice_mut","","",297,[[["self"],["patslice"]]]],[11,"visit_pat_struct_mut","","",297,[[["self"],["patstruct"]]]],[11,"visit_pat_tuple_mut","","",297,[[["self"],["pattuple"]]]],[11,"visit_pat_tuple_struct_mut","","",297,[[["self"],["pattuplestruct"]]]],[11,"visit_pat_type_mut","","",297,[[["self"],["pattype"]]]],[11,"visit_pat_wild_mut","","",297,[[["self"],["patwild"]]]],[11,"visit_path_mut","","",297,[[["self"],["path"]]]],[11,"visit_path_arguments_mut","","",297,[[["patharguments"],["self"]]]],[11,"visit_path_segment_mut","","",297,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq_mut","","",297,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime_mut","","",297,[[["predicatelifetime"],["self"]]]],[11,"visit_predicate_type_mut","","",297,[[["self"],["predicatetype"]]]],[11,"visit_qself_mut","","",297,[[["self"],["qself"]]]],[11,"visit_range_limits_mut","","",297,[[["self"],["rangelimits"]]]],[11,"visit_receiver_mut","","",297,[[["self"],["receiver"]]]],[11,"visit_return_type_mut","","",297,[[["returntype"],["self"]]]],[11,"visit_signature_mut","","",297,[[["self"],["signature"]]]],[11,"visit_span_mut","","",297,[[["self"],["span"]]]],[11,"visit_stmt_mut","","",297,[[["stmt"],["self"]]]],[11,"visit_trait_bound_mut","","",297,[[["traitbound"],["self"]]]],[11,"visit_trait_bound_modifier_mut","","",297,[[["traitboundmodifier"],["self"]]]],[11,"visit_trait_item_mut","","",297,[[["self"],["traititem"]]]],[11,"visit_trait_item_const_mut","","",297,[[["self"],["traititemconst"]]]],[11,"visit_trait_item_macro_mut","","",297,[[["traititemmacro"],["self"]]]],[11,"visit_trait_item_method_mut","","",297,[[["traititemmethod"],["self"]]]],[11,"visit_trait_item_type_mut","","",297,[[["traititemtype"],["self"]]]],[11,"visit_type_mut","","",297,[[["self"],["type"]]]],[11,"visit_type_array_mut","","",297,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn_mut","","",297,[[["typebarefn"],["self"]]]],[11,"visit_type_group_mut","","",297,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait_mut","","",297,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer_mut","","",297,[[["self"],["typeinfer"]]]],[11,"visit_type_macro_mut","","",297,[[["self"],["typemacro"]]]],[11,"visit_type_never_mut","","",297,[[["self"],["typenever"]]]],[11,"visit_type_param_mut","","",297,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound_mut","","",297,[[["typeparambound"],["self"]]]],[11,"visit_type_paren_mut","","",297,[[["typeparen"],["self"]]]],[11,"visit_type_path_mut","","",297,[[["self"],["typepath"]]]],[11,"visit_type_ptr_mut","","",297,[[["self"],["typeptr"]]]],[11,"visit_type_reference_mut","","",297,[[["self"],["typereference"]]]],[11,"visit_type_slice_mut","","",297,[[["typeslice"],["self"]]]],[11,"visit_type_trait_object_mut","","",297,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple_mut","","",297,[[["typetuple"],["self"]]]],[11,"visit_un_op_mut","","",297,[[["self"],["unop"]]]],[11,"visit_use_glob_mut","","",297,[[["self"],["useglob"]]]],[11,"visit_use_group_mut","","",297,[[["self"],["usegroup"]]]],[11,"visit_use_name_mut","","",297,[[["self"],["usename"]]]],[11,"visit_use_path_mut","","",297,[[["self"],["usepath"]]]],[11,"visit_use_rename_mut","","",297,[[["userename"],["self"]]]],[11,"visit_use_tree_mut","","",297,[[["self"],["usetree"]]]],[11,"visit_variadic_mut","","",297,[[["variadic"],["self"]]]],[11,"visit_variant_mut","","",297,[[["self"],["variant"]]]],[11,"visit_vis_crate_mut","","",297,[[["self"],["viscrate"]]]],[11,"visit_vis_public_mut","","",297,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted_mut","","",297,[[["self"],["visrestricted"]]]],[11,"visit_visibility_mut","","",297,[[["self"],["visibility"]]]],[11,"visit_where_clause_mut","","",297,[[["self"],["whereclause"]]]],[11,"visit_where_predicate_mut","","",297,[[["wherepredicate"],["self"]]]],[0,"parse","syn","Parsing interface for parsing a token stream into a syntax…",null,null],[3,"Error","syn::parse","Error returned when a Syn parser cannot parse the input…",null,null],[3,"Lookahead1","","Support for checking the next token in a stream to decide…",null,null],[3,"ParseBuffer","","Cursor position within a buffered token stream.",null,null],[3,"StepCursor","","Cursor state associated with speculative parsing.",null,null],[3,"Nothing","","An empty syntax tree node that consumes no tokens when…",null,null],[0,"discouraged","","Extensions to the parsing API with niche applicability.",null,null],[8,"Speculative","syn::parse::discouraged","Extensions to the `ParseStream` API to support speculative…",null,null],[10,"advance_to","","Advance this parse stream to the position of a forked…",298,[[["self"]]]],[6,"Result","syn::parse","The result of a Syn parser.",null,null],[6,"ParseStream","","Input to a Syn parser function.",null,null],[8,"Peek","","Types that can be parsed by looking at just one token.",null,null],[8,"Parse","","Parsing interface implemented by all types that can be…",null,null],[10,"parse","","",299,[[["parsestream"]],["result"]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax…",null,null],[16,"Output","","",300,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax…",300,[[["tokenstream"]],["result"]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree…",300,[[["tokenstream"]],["result"]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree…",300,[[["str"]],["result"]]],[11,"error","","Triggers an error at the current position of the parse…",301,[[["display"]],["error"]]],[11,"parse","","Parses a syntax tree node of type `T`, advancing the…",302,[[["self"]],[["result"],["parse"]]]],[11,"call","","Calls the given parser function to parse a syntax tree…",302,[[["self"]],["result"]]],[11,"peek","","Looks at the next token in the parse stream to determine…",302,[[["peek"],["self"]],["bool"]]],[11,"peek2","","Looks at the second-next token in the parse stream.",302,[[["peek"],["self"]],["bool"]]],[11,"peek3","","Looks at the third-next token in the parse stream.",302,[[["peek"],["self"]],["bool"]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by…",302,[[["self"]],[["punctuated"],["result",["punctuated"]]]]],[11,"is_empty","","Returns whether there are tokens remaining in this stream.",302,[[["self"]],["bool"]]],[11,"lookahead1","","Constructs a helper for peeking at the next token in this…",302,[[["self"]],["lookahead1"]]],[11,"fork","","Forks a parse stream so that parsing tokens out of either…",302,[[["self"]],["self"]]],[11,"error","","Triggers an error at the current position of the parse…",302,[[["self"],["display"]],["error"]]],[11,"step","","Speculatively parses tokens from this parse stream,…",302,[[["self"],["f"]],["result"]]],[11,"span","","Returns the `Span` of the next token in the parse stream,…",302,[[["self"]],["span"]]],[11,"cursor","","Provides low-level access to the token representation…",302,[[["self"]],["cursor"]]],[11,"new","syn","Usually the [`ParseStream::error`] method will be used…",303,[[["span"],["display"]],["self"]]],[11,"new_spanned","","Creates an error with the specified message spanning the…",303,[[["display"],["totokens"]],["self"]]],[11,"span","","The source location of the error.",303,[[["self"]],["span"]]],[11,"to_compile_error","","Render the error as an invocation of [`compile_error!`].",303,[[["self"]],["tokenstream"]]],[11,"combine","","Add another error message to self such that when…",303,[[["error"],["self"]]]],[6,"AttributeArgs","","Conventional argument type associated with an invocation…",null,null],[6,"Result","","The result of a Syn parser.",null,null],[14,"parenthesized","","Parse a set of parentheses and expose their content to…",null,null],[14,"braced","","Parse a set of curly braces and expose their content to…",null,null],[14,"bracketed","","Parse a set of square brackets and expose their content to…",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type…",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the…",null,null],[14,"parse_macro_input","","Parse the input TokenStream of a macro, triggering a…",null,null],[14,"custom_keyword","","Define a type that supports parsing and printing a given…",null,null],[14,"custom_punctuation","","Define a type that supports parsing and printing a…",null,null],[11,"peek","","",304,[[["cursor"]],["bool"]]],[11,"display","","",304,[[],["str"]]],[11,"span","","",304,[[["self"]],["span"]]],[11,"from","","",304,[[["t"]],["t"]]],[11,"into","","",304,[[],["u"]]],[11,"to_owned","","",304,[[["self"]],["t"]]],[11,"clone_into","","",304,[[["self"],["t"]]]],[11,"to_string","","",304,[[["self"]],["string"]]],[11,"try_from","","",304,[[["u"]],["result"]]],[11,"try_into","","",304,[[],["result"]]],[11,"borrow","","",304,[[["self"]],["t"]]],[11,"borrow_mut","","",304,[[["self"]],["t"]]],[11,"type_id","","",304,[[["self"]],["typeid"]]],[11,"span","","",0,[[["self"]],["span"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"span","","",1,[[["self"]],["span"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"span","","",2,[[["self"]],["span"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"span","","",3,[[["self"]],["span"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"span","","",4,[[["self"]],["span"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"span","","",5,[[["self"]],["span"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"span","","",6,[[["self"]],["span"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"span","","",7,[[["self"]],["span"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"span","","",8,[[["self"]],["span"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"span","","",9,[[["self"]],["span"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"span","","",10,[[["self"]],["span"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"span","","",11,[[["self"]],["span"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"span","","",12,[[["self"]],["span"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"span","","",13,[[["self"]],["span"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"span","","",14,[[["self"]],["span"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"span","","",15,[[["self"]],["span"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"span","","",16,[[["self"]],["span"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"span","","",17,[[["self"]],["span"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"span","","",18,[[["self"]],["span"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"span","","",19,[[["self"]],["span"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"span","","",20,[[["self"]],["span"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"span","","",21,[[["self"]],["span"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"span","","",22,[[["self"]],["span"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"span","","",23,[[["self"]],["span"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"span","","",24,[[["self"]],["span"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"span","","",25,[[["self"]],["span"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"span","","",26,[[["self"]],["span"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"span","","",27,[[["self"]],["span"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"span","","",28,[[["self"]],["span"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"span","","",29,[[["self"]],["span"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"span","","",30,[[["self"]],["span"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"span","","",31,[[["self"]],["span"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"span","","",32,[[["self"]],["span"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"span","","",34,[[["self"]],["span"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"span","","",35,[[["self"]],["span"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"span","","",36,[[["self"]],["span"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"span","","",37,[[["self"]],["span"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"span","","",38,[[["self"]],["span"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"span","","",39,[[["self"]],["span"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"span","","",40,[[["self"]],["span"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"span","","",41,[[["self"]],["span"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"span","","",42,[[["self"]],["span"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"span","","",43,[[["self"]],["span"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"span","","",44,[[["self"]],["span"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"span","","",45,[[["self"]],["span"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"span","","",46,[[["self"]],["span"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"span","","",47,[[["self"]],["span"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"span","","",48,[[["self"]],["span"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"span","","",49,[[["self"]],["span"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"span","","",50,[[["self"]],["span"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"span","","",51,[[["self"]],["span"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"span","","",52,[[["self"]],["span"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"span","","",53,[[["self"]],["span"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"span","","",54,[[["self"]],["span"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"span","","",55,[[["self"]],["span"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,[[["self"],["t"]]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"span","","",56,[[["self"]],["span"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,[[["self"],["t"]]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"span","","",57,[[["self"]],["span"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,[[["self"],["t"]]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"span","","",58,[[["self"]],["span"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,[[["self"],["t"]]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"span","","",59,[[["self"]],["span"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"span","","",60,[[["self"]],["span"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,[[["self"],["t"]]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"span","","",61,[[["self"]],["span"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,[[["self"],["t"]]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"span","","",62,[[["self"]],["span"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,[[["self"],["t"]]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"span","","",63,[[["self"]],["span"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,[[["self"],["t"]]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"span","","",305,[[["self"]],["span"]]],[11,"from","","",305,[[["t"]],["t"]]],[11,"into","","",305,[[],["u"]]],[11,"to_owned","","",305,[[["self"]],["t"]]],[11,"clone_into","","",305,[[["self"],["t"]]]],[11,"try_from","","",305,[[["u"]],["result"]]],[11,"try_into","","",305,[[],["result"]]],[11,"borrow","","",305,[[["self"]],["t"]]],[11,"borrow_mut","","",305,[[["self"]],["t"]]],[11,"type_id","","",305,[[["self"]],["typeid"]]],[11,"span","","",306,[[["self"]],["span"]]],[11,"from","","",306,[[["t"]],["t"]]],[11,"into","","",306,[[],["u"]]],[11,"to_owned","","",306,[[["self"]],["t"]]],[11,"clone_into","","",306,[[["self"],["t"]]]],[11,"try_from","","",306,[[["u"]],["result"]]],[11,"try_into","","",306,[[],["result"]]],[11,"borrow","","",306,[[["self"]],["t"]]],[11,"borrow_mut","","",306,[[["self"]],["t"]]],[11,"type_id","","",306,[[["self"]],["typeid"]]],[11,"span","","",283,[[["self"]],["span"]]],[11,"from","","",283,[[["t"]],["t"]]],[11,"into","","",283,[[],["u"]]],[11,"to_owned","","",283,[[["self"]],["t"]]],[11,"clone_into","","",283,[[["self"],["t"]]]],[11,"try_from","","",283,[[["u"]],["result"]]],[11,"try_into","","",283,[[],["result"]]],[11,"borrow","","",283,[[["self"]],["t"]]],[11,"borrow_mut","","",283,[[["self"]],["t"]]],[11,"type_id","","",283,[[["self"]],["typeid"]]],[11,"span","","",64,[[["self"]],["span"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,[[["self"],["t"]]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"span","","",65,[[["self"]],["span"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,[[["self"],["t"]]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"span","","",66,[[["self"]],["span"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,[[["self"],["t"]]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"span","","",67,[[["self"]],["span"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"span","","",68,[[["self"]],["span"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,[[["self"],["t"]]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"span","","",69,[[["self"]],["span"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,[[["self"],["t"]]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"span","","",70,[[["self"]],["span"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,[[["self"],["t"]]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"span","","",71,[[["self"]],["span"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,[[["self"],["t"]]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"span","","",72,[[["self"]],["span"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,[[["self"],["t"]]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"span","","",73,[[["self"]],["span"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,[[["self"],["t"]]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"span","","",74,[[["self"]],["span"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,[[["self"],["t"]]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"span","","",75,[[["self"]],["span"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,[[["self"],["t"]]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"span","","",76,[[["self"]],["span"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,[[["self"],["t"]]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"span","","",77,[[["self"]],["span"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,[[["self"],["t"]]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"span","","",78,[[["self"]],["span"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,[[["self"],["t"]]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"span","","",79,[[["self"]],["span"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,[[["self"],["t"]]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"span","","",80,[[["self"]],["span"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,[[["self"],["t"]]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"span","","",81,[[["self"]],["span"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,[[["self"],["t"]]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"span","","",82,[[["self"]],["span"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,[[["self"],["t"]]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"span","","",83,[[["self"]],["span"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,[[["self"],["t"]]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"try_into","","",83,[[],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"span","","",84,[[["self"]],["span"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,[[["self"],["t"]]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"try_into","","",84,[[],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"type_id","","",84,[[["self"]],["typeid"]]],[11,"span","","",85,[[["self"]],["span"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,[[["self"],["t"]]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"span","","",86,[[["self"]],["span"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,[[["self"],["t"]]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"try_into","","",86,[[],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"span","","",87,[[["self"]],["span"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,[[["self"],["t"]]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"try_into","","",87,[[],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"type_id","","",87,[[["self"]],["typeid"]]],[11,"span","","",88,[[["self"]],["span"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,[[["self"],["t"]]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"try_into","","",88,[[],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"type_id","","",88,[[["self"]],["typeid"]]],[11,"span","","",89,[[["self"]],["span"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,[[["self"],["t"]]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"try_into","","",89,[[],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"type_id","","",89,[[["self"]],["typeid"]]],[11,"span","","",90,[[["self"]],["span"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,[[["self"],["t"]]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"try_into","","",90,[[],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"type_id","","",90,[[["self"]],["typeid"]]],[11,"span","","",91,[[["self"]],["span"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,[[["self"],["t"]]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"try_into","","",91,[[],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"type_id","","",91,[[["self"]],["typeid"]]],[11,"span","","",92,[[["self"]],["span"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,[[["self"],["t"]]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"try_into","","",92,[[],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"type_id","","",92,[[["self"]],["typeid"]]],[11,"span","","",93,[[["self"]],["span"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,[[["self"],["t"]]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"try_into","","",93,[[],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"type_id","","",93,[[["self"]],["typeid"]]],[11,"span","","",94,[[["self"]],["span"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,[[["self"],["t"]]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"try_into","","",94,[[],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"type_id","","",94,[[["self"]],["typeid"]]],[11,"span","","",95,[[["self"]],["span"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,[[["self"],["t"]]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"try_into","","",95,[[],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"type_id","","",95,[[["self"]],["typeid"]]],[11,"span","","",96,[[["self"]],["span"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,[[["self"],["t"]]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"try_into","","",96,[[],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"span","","",97,[[["self"]],["span"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,[[["self"],["t"]]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"try_into","","",97,[[],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"type_id","","",97,[[["self"]],["typeid"]]],[11,"span","","",98,[[["self"]],["span"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,[[["self"],["t"]]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"try_into","","",98,[[],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"type_id","","",98,[[["self"]],["typeid"]]],[11,"span","","",99,[[["self"]],["span"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,[[["self"],["t"]]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"try_into","","",99,[[],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"type_id","","",99,[[["self"]],["typeid"]]],[11,"peek","","",100,[[["cursor"]],["bool"]]],[11,"display","","",100,[[],["str"]]],[11,"span","","",100,[[["self"]],["span"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,[[["self"],["t"]]]],[11,"to_string","","",100,[[["self"]],["string"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"try_into","","",100,[[],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"type_id","","",100,[[["self"]],["typeid"]]],[11,"peek","","",101,[[["cursor"]],["bool"]]],[11,"display","","",101,[[],["str"]]],[11,"span","","",101,[[["self"]],["span"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,[[["self"],["t"]]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"try_into","","",101,[[],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"peek","","",286,[[["cursor"]],["bool"]]],[11,"display","","",286,[[],["str"]]],[11,"span","","",286,[[["self"]],["span"]]],[11,"from","","",286,[[["t"]],["t"]]],[11,"into","","",286,[[],["u"]]],[11,"to_owned","","",286,[[["self"]],["t"]]],[11,"clone_into","","",286,[[["self"],["t"]]]],[11,"try_from","","",286,[[["u"]],["result"]]],[11,"try_into","","",286,[[],["result"]]],[11,"borrow","","",286,[[["self"]],["t"]]],[11,"borrow_mut","","",286,[[["self"]],["t"]]],[11,"type_id","","",286,[[["self"]],["typeid"]]],[11,"peek","","",285,[[["cursor"]],["bool"]]],[11,"display","","",285,[[],["str"]]],[11,"span","","",285,[[["self"]],["span"]]],[11,"from","","",285,[[["t"]],["t"]]],[11,"into","","",285,[[],["u"]]],[11,"to_owned","","",285,[[["self"]],["t"]]],[11,"clone_into","","",285,[[["self"],["t"]]]],[11,"try_from","","",285,[[["u"]],["result"]]],[11,"try_into","","",285,[[],["result"]]],[11,"borrow","","",285,[[["self"]],["t"]]],[11,"borrow_mut","","",285,[[["self"]],["t"]]],[11,"type_id","","",285,[[["self"]],["typeid"]]],[11,"peek","","",287,[[["cursor"]],["bool"]]],[11,"display","","",287,[[],["str"]]],[11,"span","","",287,[[["self"]],["span"]]],[11,"from","","",287,[[["t"]],["t"]]],[11,"into","","",287,[[],["u"]]],[11,"to_owned","","",287,[[["self"]],["t"]]],[11,"clone_into","","",287,[[["self"],["t"]]]],[11,"try_from","","",287,[[["u"]],["result"]]],[11,"try_into","","",287,[[],["result"]]],[11,"borrow","","",287,[[["self"]],["t"]]],[11,"borrow_mut","","",287,[[["self"]],["t"]]],[11,"type_id","","",287,[[["self"]],["typeid"]]],[11,"peek","","",289,[[["cursor"]],["bool"]]],[11,"display","","",289,[[],["str"]]],[11,"span","","",289,[[["self"]],["span"]]],[11,"from","","",289,[[["t"]],["t"]]],[11,"into","","",289,[[],["u"]]],[11,"to_owned","","",289,[[["self"]],["t"]]],[11,"clone_into","","",289,[[["self"],["t"]]]],[11,"to_string","","",289,[[["self"]],["string"]]],[11,"try_from","","",289,[[["u"]],["result"]]],[11,"try_into","","",289,[[],["result"]]],[11,"borrow","","",289,[[["self"]],["t"]]],[11,"borrow_mut","","",289,[[["self"]],["t"]]],[11,"type_id","","",289,[[["self"]],["typeid"]]],[11,"peek","","",288,[[["cursor"]],["bool"]]],[11,"display","","",288,[[],["str"]]],[11,"span","","",288,[[["self"]],["span"]]],[11,"from","","",288,[[["t"]],["t"]]],[11,"into","","",288,[[],["u"]]],[11,"to_owned","","",288,[[["self"]],["t"]]],[11,"clone_into","","",288,[[["self"],["t"]]]],[11,"to_string","","",288,[[["self"]],["string"]]],[11,"try_from","","",288,[[["u"]],["result"]]],[11,"try_into","","",288,[[],["result"]]],[11,"borrow","","",288,[[["self"]],["t"]]],[11,"borrow_mut","","",288,[[["self"]],["t"]]],[11,"type_id","","",288,[[["self"]],["typeid"]]],[11,"peek","","",284,[[["cursor"]],["bool"]]],[11,"display","","",284,[[],["str"]]],[11,"span","","",284,[[["self"]],["span"]]],[11,"from","","",284,[[["t"]],["t"]]],[11,"into","","",284,[[],["u"]]],[11,"to_owned","","",284,[[["self"]],["t"]]],[11,"clone_into","","",284,[[["self"],["t"]]]],[11,"try_from","","",284,[[["u"]],["result"]]],[11,"try_into","","",284,[[],["result"]]],[11,"borrow","","",284,[[["self"]],["t"]]],[11,"borrow_mut","","",284,[[["self"]],["t"]]],[11,"type_id","","",284,[[["self"]],["typeid"]]],[11,"span","","",102,[[["self"]],["span"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,[[["self"],["t"]]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"try_into","","",102,[[],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"type_id","","",102,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,[[["self"],["t"]]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"try_into","","",103,[[],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,[[["self"],["t"]]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"try_into","","",104,[[],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,[[["self"],["t"]]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"try_into","","",105,[[],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"span","","",106,[[["self"]],["span"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,[[["self"],["t"]]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"try_into","","",106,[[],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"type_id","","",106,[[["self"]],["typeid"]]],[11,"span","","",107,[[["self"]],["span"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,[[["self"],["t"]]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"try_into","","",107,[[],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"type_id","","",107,[[["self"]],["typeid"]]],[11,"span","","",108,[[["self"]],["span"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,[[["self"],["t"]]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"try_into","","",108,[[],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"type_id","","",108,[[["self"]],["typeid"]]],[11,"span","","",109,[[["self"]],["span"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,[[["self"],["t"]]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"try_into","","",109,[[],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"type_id","","",109,[[["self"]],["typeid"]]],[11,"span","","",110,[[["self"]],["span"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,[[["self"],["t"]]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"try_into","","",110,[[],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"type_id","","",110,[[["self"]],["typeid"]]],[11,"span","","",111,[[["self"]],["span"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,[[["self"],["t"]]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"try_into","","",111,[[],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"type_id","","",111,[[["self"]],["typeid"]]],[11,"span","","",112,[[["self"]],["span"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,[[["self"],["t"]]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"try_into","","",112,[[],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"type_id","","",112,[[["self"]],["typeid"]]],[11,"span","","",113,[[["self"]],["span"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,[[["self"],["t"]]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"try_into","","",113,[[],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"type_id","","",113,[[["self"]],["typeid"]]],[11,"span","","",114,[[["self"]],["span"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,[[["self"],["t"]]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"try_into","","",114,[[],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"type_id","","",114,[[["self"]],["typeid"]]],[11,"span","","",115,[[["self"]],["span"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,[[["self"],["t"]]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"try_into","","",115,[[],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"type_id","","",115,[[["self"]],["typeid"]]],[11,"span","","",116,[[["self"]],["span"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,[[["self"],["t"]]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"try_into","","",116,[[],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"type_id","","",116,[[["self"]],["typeid"]]],[11,"span","","",117,[[["self"]],["span"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,[[["self"],["t"]]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"try_into","","",117,[[],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"type_id","","",117,[[["self"]],["typeid"]]],[11,"span","","",118,[[["self"]],["span"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,[[["self"],["t"]]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"try_into","","",118,[[],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"type_id","","",118,[[["self"]],["typeid"]]],[11,"span","","",119,[[["self"]],["span"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,[[["self"],["t"]]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"try_into","","",119,[[],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"type_id","","",119,[[["self"]],["typeid"]]],[11,"span","","",120,[[["self"]],["span"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,[[["self"],["t"]]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"try_into","","",120,[[],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"type_id","","",120,[[["self"]],["typeid"]]],[11,"span","","",121,[[["self"]],["span"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,[[["self"],["t"]]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"try_into","","",121,[[],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"type_id","","",121,[[["self"]],["typeid"]]],[11,"span","","",122,[[["self"]],["span"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,[[["self"],["t"]]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"try_into","","",122,[[],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"type_id","","",122,[[["self"]],["typeid"]]],[11,"span","","",123,[[["self"]],["span"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,[[["self"],["t"]]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"try_into","","",123,[[],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"type_id","","",123,[[["self"]],["typeid"]]],[11,"span","","",124,[[["self"]],["span"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[],["u"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,[[["self"],["t"]]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"try_into","","",124,[[],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"type_id","","",124,[[["self"]],["typeid"]]],[11,"span","","",125,[[["self"]],["span"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,[[["self"],["t"]]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"try_into","","",125,[[],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"type_id","","",125,[[["self"]],["typeid"]]],[11,"span","","",126,[[["self"]],["span"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,[[["self"],["t"]]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"try_into","","",126,[[],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"type_id","","",126,[[["self"]],["typeid"]]],[11,"span","","",127,[[["self"]],["span"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,[[["self"],["t"]]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"try_into","","",127,[[],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"type_id","","",127,[[["self"]],["typeid"]]],[11,"span","","",128,[[["self"]],["span"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,[[["self"],["t"]]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"try_into","","",128,[[],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"type_id","","",128,[[["self"]],["typeid"]]],[11,"span","","",129,[[["self"]],["span"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,[[["self"],["t"]]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"try_into","","",129,[[],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"type_id","","",129,[[["self"]],["typeid"]]],[11,"span","","",130,[[["self"]],["span"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,[[["self"],["t"]]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"try_into","","",130,[[],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"type_id","","",130,[[["self"]],["typeid"]]],[11,"span","","",131,[[["self"]],["span"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,[[["self"],["t"]]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"try_into","","",131,[[],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"type_id","","",131,[[["self"]],["typeid"]]],[11,"span","","",132,[[["self"]],["span"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[],["u"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,[[["self"],["t"]]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"try_into","","",132,[[],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"type_id","","",132,[[["self"]],["typeid"]]],[11,"span","","",133,[[["self"]],["span"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[],["u"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,[[["self"],["t"]]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"try_into","","",133,[[],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"type_id","","",133,[[["self"]],["typeid"]]],[11,"span","","",134,[[["self"]],["span"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,[[["self"],["t"]]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"try_into","","",134,[[],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"type_id","","",134,[[["self"]],["typeid"]]],[11,"span","","",135,[[["self"]],["span"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[],["u"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,[[["self"],["t"]]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"try_into","","",135,[[],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"type_id","","",135,[[["self"]],["typeid"]]],[11,"span","","",136,[[["self"]],["span"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[],["u"]]],[11,"to_owned","","",136,[[["self"]],["t"]]],[11,"clone_into","","",136,[[["self"],["t"]]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"try_into","","",136,[[],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"type_id","","",136,[[["self"]],["typeid"]]],[11,"span","","",137,[[["self"]],["span"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[],["u"]]],[11,"to_owned","","",137,[[["self"]],["t"]]],[11,"clone_into","","",137,[[["self"],["t"]]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"try_into","","",137,[[],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"type_id","","",137,[[["self"]],["typeid"]]],[11,"span","","",138,[[["self"]],["span"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[],["u"]]],[11,"to_owned","","",138,[[["self"]],["t"]]],[11,"clone_into","","",138,[[["self"],["t"]]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"try_into","","",138,[[],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"type_id","","",138,[[["self"]],["typeid"]]],[11,"span","","",139,[[["self"]],["span"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[],["u"]]],[11,"to_owned","","",139,[[["self"]],["t"]]],[11,"clone_into","","",139,[[["self"],["t"]]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"try_into","","",139,[[],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"type_id","","",139,[[["self"]],["typeid"]]],[11,"span","","",140,[[["self"]],["span"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"into","","",140,[[],["u"]]],[11,"to_owned","","",140,[[["self"]],["t"]]],[11,"clone_into","","",140,[[["self"],["t"]]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"try_into","","",140,[[],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"type_id","","",140,[[["self"]],["typeid"]]],[11,"span","","",141,[[["self"]],["span"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[],["u"]]],[11,"to_owned","","",141,[[["self"]],["t"]]],[11,"clone_into","","",141,[[["self"],["t"]]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"try_into","","",141,[[],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"type_id","","",141,[[["self"]],["typeid"]]],[11,"span","","",142,[[["self"]],["span"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[],["u"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,[[["self"],["t"]]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"try_into","","",142,[[],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"type_id","","",142,[[["self"]],["typeid"]]],[11,"span","","",143,[[["self"]],["span"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[],["u"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,[[["self"],["t"]]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"try_into","","",143,[[],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"type_id","","",143,[[["self"]],["typeid"]]],[11,"span","","",144,[[["self"]],["span"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[],["u"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,[[["self"],["t"]]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"try_into","","",144,[[],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"type_id","","",144,[[["self"]],["typeid"]]],[11,"span","","",145,[[["self"]],["span"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[],["u"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,[[["self"],["t"]]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"try_into","","",145,[[],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"type_id","","",145,[[["self"]],["typeid"]]],[11,"span","","",146,[[["self"]],["span"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[],["u"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,[[["self"],["t"]]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"try_into","","",146,[[],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"type_id","","",146,[[["self"]],["typeid"]]],[11,"span","","",147,[[["self"]],["span"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"into","","",147,[[],["u"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,[[["self"],["t"]]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"try_into","","",147,[[],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"type_id","","",147,[[["self"]],["typeid"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"into","","",148,[[],["u"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,[[["self"],["t"]]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"try_into","","",148,[[],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"type_id","","",148,[[["self"]],["typeid"]]],[11,"from","","",303,[[["t"]],["t"]]],[11,"into","","",303,[[],["u"]]],[11,"into_iter","","",303,[[],["i"]]],[11,"to_owned","","",303,[[["self"]],["t"]]],[11,"clone_into","","",303,[[["self"],["t"]]]],[11,"to_string","","",303,[[["self"]],["string"]]],[11,"try_from","","",303,[[["u"]],["result"]]],[11,"try_into","","",303,[[],["result"]]],[11,"borrow","","",303,[[["self"]],["t"]]],[11,"borrow_mut","","",303,[[["self"]],["t"]]],[11,"type_id","","",303,[[["self"]],["typeid"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"into","","",149,[[],["u"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,[[["self"],["t"]]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"try_into","","",149,[[],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"type_id","","",149,[[["self"]],["typeid"]]],[11,"span","","",150,[[["self"]],["span"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"into","","",150,[[],["u"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,[[["self"],["t"]]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"try_into","","",150,[[],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"type_id","","",150,[[["self"]],["typeid"]]],[11,"span","","",151,[[["self"]],["span"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"into","","",151,[[],["u"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,[[["self"],["t"]]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"try_into","","",151,[[],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"type_id","","",151,[[["self"]],["typeid"]]],[11,"span","","",152,[[["self"]],["span"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"into","","",152,[[],["u"]]],[11,"into_iter","","",152,[[],["i"]]],[11,"to_owned","","",152,[[["self"]],["t"]]],[11,"clone_into","","",152,[[["self"],["t"]]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"try_into","","",152,[[],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"type_id","","",152,[[["self"]],["typeid"]]],[11,"span","","",153,[[["self"]],["span"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"into","","",153,[[],["u"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,[[["self"],["t"]]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"try_into","","",153,[[],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"type_id","","",153,[[["self"]],["typeid"]]],[11,"span","","",154,[[["self"]],["span"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"into","","",154,[[],["u"]]],[11,"to_owned","","",154,[[["self"]],["t"]]],[11,"clone_into","","",154,[[["self"],["t"]]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"try_into","","",154,[[],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"type_id","","",154,[[["self"]],["typeid"]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"into","","",155,[[],["u"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,[[["self"],["t"]]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"try_into","","",155,[[],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"type_id","","",155,[[["self"]],["typeid"]]],[11,"span","","",156,[[["self"]],["span"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"into","","",156,[[],["u"]]],[11,"to_owned","","",156,[[["self"]],["t"]]],[11,"clone_into","","",156,[[["self"],["t"]]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"try_into","","",156,[[],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"type_id","","",156,[[["self"]],["typeid"]]],[11,"span","","",157,[[["self"]],["span"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"into","","",157,[[],["u"]]],[11,"to_owned","","",157,[[["self"]],["t"]]],[11,"clone_into","","",157,[[["self"],["t"]]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"try_into","","",157,[[],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"type_id","","",157,[[["self"]],["typeid"]]],[11,"span","","",158,[[["self"]],["span"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"into","","",158,[[],["u"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,[[["self"],["t"]]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"try_into","","",158,[[],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"type_id","","",158,[[["self"]],["typeid"]]],[11,"span","","",159,[[["self"]],["span"]]],[11,"from","","",159,[[["t"]],["t"]]],[11,"into","","",159,[[],["u"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,[[["self"],["t"]]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"try_into","","",159,[[],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"type_id","","",159,[[["self"]],["typeid"]]],[11,"span","","",160,[[["self"]],["span"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"into","","",160,[[],["u"]]],[11,"to_owned","","",160,[[["self"]],["t"]]],[11,"clone_into","","",160,[[["self"],["t"]]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"try_into","","",160,[[],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"type_id","","",160,[[["self"]],["typeid"]]],[11,"span","","",161,[[["self"]],["span"]]],[11,"from","","",161,[[["t"]],["t"]]],[11,"into","","",161,[[],["u"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,[[["self"],["t"]]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"try_into","","",161,[[],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"type_id","","",161,[[["self"]],["typeid"]]],[11,"span","","",162,[[["self"]],["span"]]],[11,"from","","",162,[[["t"]],["t"]]],[11,"into","","",162,[[],["u"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,[[["self"],["t"]]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"try_into","","",162,[[],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"type_id","","",162,[[["self"]],["typeid"]]],[11,"span","","",163,[[["self"]],["span"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"into","","",163,[[],["u"]]],[11,"to_owned","","",163,[[["self"]],["t"]]],[11,"clone_into","","",163,[[["self"],["t"]]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"try_into","","",163,[[],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"type_id","","",163,[[["self"]],["typeid"]]],[11,"span","","",164,[[["self"]],["span"]]],[11,"from","","",164,[[["t"]],["t"]]],[11,"into","","",164,[[],["u"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,[[["self"],["t"]]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"try_into","","",164,[[],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"type_id","","",164,[[["self"]],["typeid"]]],[11,"span","","",165,[[["self"]],["span"]]],[11,"from","","",165,[[["t"]],["t"]]],[11,"into","","",165,[[],["u"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,[[["self"],["t"]]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"try_into","","",165,[[],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"type_id","","",165,[[["self"]],["typeid"]]],[11,"span","","",166,[[["self"]],["span"]]],[11,"from","","",166,[[["t"]],["t"]]],[11,"into","","",166,[[],["u"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,[[["self"],["t"]]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"try_into","","",166,[[],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"type_id","","",166,[[["self"]],["typeid"]]],[11,"span","","",167,[[["self"]],["span"]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"into","","",167,[[],["u"]]],[11,"to_owned","","",167,[[["self"]],["t"]]],[11,"clone_into","","",167,[[["self"],["t"]]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"try_into","","",167,[[],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"type_id","","",167,[[["self"]],["typeid"]]],[11,"peek","","",168,[[["cursor"]],["bool"]]],[11,"display","","",168,[[],["str"]]],[11,"span","","",168,[[["self"]],["span"]]],[11,"from","","",168,[[["t"]],["t"]]],[11,"into","","",168,[[],["u"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,[[["self"],["t"]]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"try_into","","",168,[[],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"type_id","","",168,[[["self"]],["typeid"]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"into","","",169,[[],["u"]]],[11,"to_owned","","",169,[[["self"]],["t"]]],[11,"clone_into","","",169,[[["self"],["t"]]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"try_into","","",169,[[],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"type_id","","",169,[[["self"]],["typeid"]]],[11,"from","","",170,[[["t"]],["t"]]],[11,"into","","",170,[[],["u"]]],[11,"to_owned","","",170,[[["self"]],["t"]]],[11,"clone_into","","",170,[[["self"],["t"]]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"try_into","","",170,[[],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"type_id","","",170,[[["self"]],["typeid"]]],[11,"from","","",171,[[["t"]],["t"]]],[11,"into","","",171,[[],["u"]]],[11,"to_owned","","",171,[[["self"]],["t"]]],[11,"clone_into","","",171,[[["self"],["t"]]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"try_into","","",171,[[],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"type_id","","",171,[[["self"]],["typeid"]]],[11,"span","","",172,[[["self"]],["span"]]],[11,"from","","",172,[[["t"]],["t"]]],[11,"into","","",172,[[],["u"]]],[11,"to_owned","","",172,[[["self"]],["t"]]],[11,"clone_into","","",172,[[["self"],["t"]]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"try_into","","",172,[[],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"type_id","","",172,[[["self"]],["typeid"]]],[11,"span","","",173,[[["self"]],["span"]]],[11,"from","","",173,[[["t"]],["t"]]],[11,"into","","",173,[[],["u"]]],[11,"to_owned","","",173,[[["self"]],["t"]]],[11,"clone_into","","",173,[[["self"],["t"]]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"try_into","","",173,[[],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"type_id","","",173,[[["self"]],["typeid"]]],[11,"span","","",174,[[["self"]],["span"]]],[11,"from","","",174,[[["t"]],["t"]]],[11,"into","","",174,[[],["u"]]],[11,"to_owned","","",174,[[["self"]],["t"]]],[11,"clone_into","","",174,[[["self"],["t"]]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"try_into","","",174,[[],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"type_id","","",174,[[["self"]],["typeid"]]],[11,"span","","",175,[[["self"]],["span"]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"into","","",175,[[],["u"]]],[11,"to_owned","","",175,[[["self"]],["t"]]],[11,"clone_into","","",175,[[["self"],["t"]]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"try_into","","",175,[[],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"type_id","","",175,[[["self"]],["typeid"]]],[11,"span","","",176,[[["self"]],["span"]]],[11,"from","","",176,[[["t"]],["t"]]],[11,"into","","",176,[[],["u"]]],[11,"to_owned","","",176,[[["self"]],["t"]]],[11,"clone_into","","",176,[[["self"],["t"]]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"try_into","","",176,[[],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"type_id","","",176,[[["self"]],["typeid"]]],[11,"span","","",177,[[["self"]],["span"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"into","","",177,[[],["u"]]],[11,"to_owned","","",177,[[["self"]],["t"]]],[11,"clone_into","","",177,[[["self"],["t"]]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"try_into","","",177,[[],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"type_id","","",177,[[["self"]],["typeid"]]],[11,"span","","",178,[[["self"]],["span"]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"into","","",178,[[],["u"]]],[11,"to_owned","","",178,[[["self"]],["t"]]],[11,"clone_into","","",178,[[["self"],["t"]]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"try_into","","",178,[[],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"type_id","","",178,[[["self"]],["typeid"]]],[11,"span","","",179,[[["self"]],["span"]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"into","","",179,[[],["u"]]],[11,"to_owned","","",179,[[["self"]],["t"]]],[11,"clone_into","","",179,[[["self"],["t"]]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"try_into","","",179,[[],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"type_id","","",179,[[["self"]],["typeid"]]],[11,"peek","syn::token","",180,[[["cursor"]],["bool"]]],[11,"display","","",180,[[],["str"]]],[11,"span","","",180,[[["self"]],["span"]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"into","","",180,[[],["u"]]],[11,"to_owned","","",180,[[["self"]],["t"]]],[11,"clone_into","","",180,[[["self"],["t"]]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"try_into","","",180,[[],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"type_id","","",180,[[["self"]],["typeid"]]],[11,"peek","","",181,[[["cursor"]],["bool"]]],[11,"display","","",181,[[],["str"]]],[11,"span","","",181,[[["self"]],["span"]]],[11,"from","","",181,[[["t"]],["t"]]],[11,"into","","",181,[[],["u"]]],[11,"to_owned","","",181,[[["self"]],["t"]]],[11,"clone_into","","",181,[[["self"],["t"]]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"try_into","","",181,[[],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"type_id","","",181,[[["self"]],["typeid"]]],[11,"peek","","",182,[[["cursor"]],["bool"]]],[11,"display","","",182,[[],["str"]]],[11,"span","","",182,[[["self"]],["span"]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"into","","",182,[[],["u"]]],[11,"to_owned","","",182,[[["self"]],["t"]]],[11,"clone_into","","",182,[[["self"],["t"]]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"try_into","","",182,[[],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"type_id","","",182,[[["self"]],["typeid"]]],[11,"peek","","",183,[[["cursor"]],["bool"]]],[11,"display","","",183,[[],["str"]]],[11,"span","","",183,[[["self"]],["span"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"into","","",183,[[],["u"]]],[11,"to_owned","","",183,[[["self"]],["t"]]],[11,"clone_into","","",183,[[["self"],["t"]]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"try_into","","",183,[[],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"type_id","","",183,[[["self"]],["typeid"]]],[11,"peek","","",184,[[["cursor"]],["bool"]]],[11,"display","","",184,[[],["str"]]],[11,"span","","",184,[[["self"]],["span"]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"into","","",184,[[],["u"]]],[11,"to_owned","","",184,[[["self"]],["t"]]],[11,"clone_into","","",184,[[["self"],["t"]]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"try_into","","",184,[[],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"type_id","","",184,[[["self"]],["typeid"]]],[11,"peek","","",185,[[["cursor"]],["bool"]]],[11,"display","","",185,[[],["str"]]],[11,"span","","",185,[[["self"]],["span"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"into","","",185,[[],["u"]]],[11,"to_owned","","",185,[[["self"]],["t"]]],[11,"clone_into","","",185,[[["self"],["t"]]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"try_into","","",185,[[],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"type_id","","",185,[[["self"]],["typeid"]]],[11,"peek","","",186,[[["cursor"]],["bool"]]],[11,"display","","",186,[[],["str"]]],[11,"span","","",186,[[["self"]],["span"]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"into","","",186,[[],["u"]]],[11,"to_owned","","",186,[[["self"]],["t"]]],[11,"clone_into","","",186,[[["self"],["t"]]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"try_into","","",186,[[],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"type_id","","",186,[[["self"]],["typeid"]]],[11,"peek","","",187,[[["cursor"]],["bool"]]],[11,"display","","",187,[[],["str"]]],[11,"span","","",187,[[["self"]],["span"]]],[11,"from","","",187,[[["t"]],["t"]]],[11,"into","","",187,[[],["u"]]],[11,"to_owned","","",187,[[["self"]],["t"]]],[11,"clone_into","","",187,[[["self"],["t"]]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"try_into","","",187,[[],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"type_id","","",187,[[["self"]],["typeid"]]],[11,"peek","","",188,[[["cursor"]],["bool"]]],[11,"display","","",188,[[],["str"]]],[11,"span","","",188,[[["self"]],["span"]]],[11,"from","","",188,[[["t"]],["t"]]],[11,"into","","",188,[[],["u"]]],[11,"to_owned","","",188,[[["self"]],["t"]]],[11,"clone_into","","",188,[[["self"],["t"]]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"try_into","","",188,[[],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"type_id","","",188,[[["self"]],["typeid"]]],[11,"peek","","",189,[[["cursor"]],["bool"]]],[11,"display","","",189,[[],["str"]]],[11,"span","","",189,[[["self"]],["span"]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"into","","",189,[[],["u"]]],[11,"to_owned","","",189,[[["self"]],["t"]]],[11,"clone_into","","",189,[[["self"],["t"]]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"try_into","","",189,[[],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"type_id","","",189,[[["self"]],["typeid"]]],[11,"peek","","",190,[[["cursor"]],["bool"]]],[11,"display","","",190,[[],["str"]]],[11,"span","","",190,[[["self"]],["span"]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"into","","",190,[[],["u"]]],[11,"to_owned","","",190,[[["self"]],["t"]]],[11,"clone_into","","",190,[[["self"],["t"]]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"try_into","","",190,[[],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"type_id","","",190,[[["self"]],["typeid"]]],[11,"peek","","",191,[[["cursor"]],["bool"]]],[11,"display","","",191,[[],["str"]]],[11,"span","","",191,[[["self"]],["span"]]],[11,"from","","",191,[[["t"]],["t"]]],[11,"into","","",191,[[],["u"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,[[["self"],["t"]]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"try_into","","",191,[[],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"type_id","","",191,[[["self"]],["typeid"]]],[11,"peek","","",192,[[["cursor"]],["bool"]]],[11,"display","","",192,[[],["str"]]],[11,"span","","",192,[[["self"]],["span"]]],[11,"from","","",192,[[["t"]],["t"]]],[11,"into","","",192,[[],["u"]]],[11,"to_owned","","",192,[[["self"]],["t"]]],[11,"clone_into","","",192,[[["self"],["t"]]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"try_into","","",192,[[],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"type_id","","",192,[[["self"]],["typeid"]]],[11,"peek","","",193,[[["cursor"]],["bool"]]],[11,"display","","",193,[[],["str"]]],[11,"span","","",193,[[["self"]],["span"]]],[11,"from","","",193,[[["t"]],["t"]]],[11,"into","","",193,[[],["u"]]],[11,"to_owned","","",193,[[["self"]],["t"]]],[11,"clone_into","","",193,[[["self"],["t"]]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"try_into","","",193,[[],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"type_id","","",193,[[["self"]],["typeid"]]],[11,"peek","","",194,[[["cursor"]],["bool"]]],[11,"display","","",194,[[],["str"]]],[11,"span","","",194,[[["self"]],["span"]]],[11,"from","","",194,[[["t"]],["t"]]],[11,"into","","",194,[[],["u"]]],[11,"to_owned","","",194,[[["self"]],["t"]]],[11,"clone_into","","",194,[[["self"],["t"]]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"try_into","","",194,[[],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"type_id","","",194,[[["self"]],["typeid"]]],[11,"peek","","",195,[[["cursor"]],["bool"]]],[11,"display","","",195,[[],["str"]]],[11,"span","","",195,[[["self"]],["span"]]],[11,"from","","",195,[[["t"]],["t"]]],[11,"into","","",195,[[],["u"]]],[11,"to_owned","","",195,[[["self"]],["t"]]],[11,"clone_into","","",195,[[["self"],["t"]]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"try_into","","",195,[[],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"type_id","","",195,[[["self"]],["typeid"]]],[11,"peek","","",196,[[["cursor"]],["bool"]]],[11,"display","","",196,[[],["str"]]],[11,"span","","",196,[[["self"]],["span"]]],[11,"from","","",196,[[["t"]],["t"]]],[11,"into","","",196,[[],["u"]]],[11,"to_owned","","",196,[[["self"]],["t"]]],[11,"clone_into","","",196,[[["self"],["t"]]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"try_into","","",196,[[],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"type_id","","",196,[[["self"]],["typeid"]]],[11,"peek","","",197,[[["cursor"]],["bool"]]],[11,"display","","",197,[[],["str"]]],[11,"span","","",197,[[["self"]],["span"]]],[11,"from","","",197,[[["t"]],["t"]]],[11,"into","","",197,[[],["u"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,[[["self"],["t"]]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"try_into","","",197,[[],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"type_id","","",197,[[["self"]],["typeid"]]],[11,"peek","","",198,[[["cursor"]],["bool"]]],[11,"display","","",198,[[],["str"]]],[11,"span","","",198,[[["self"]],["span"]]],[11,"from","","",198,[[["t"]],["t"]]],[11,"into","","",198,[[],["u"]]],[11,"to_owned","","",198,[[["self"]],["t"]]],[11,"clone_into","","",198,[[["self"],["t"]]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"try_into","","",198,[[],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"type_id","","",198,[[["self"]],["typeid"]]],[11,"peek","","",199,[[["cursor"]],["bool"]]],[11,"display","","",199,[[],["str"]]],[11,"span","","",199,[[["self"]],["span"]]],[11,"from","","",199,[[["t"]],["t"]]],[11,"into","","",199,[[],["u"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,[[["self"],["t"]]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"try_into","","",199,[[],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"type_id","","",199,[[["self"]],["typeid"]]],[11,"peek","","",200,[[["cursor"]],["bool"]]],[11,"display","","",200,[[],["str"]]],[11,"span","","",200,[[["self"]],["span"]]],[11,"from","","",200,[[["t"]],["t"]]],[11,"into","","",200,[[],["u"]]],[11,"to_owned","","",200,[[["self"]],["t"]]],[11,"clone_into","","",200,[[["self"],["t"]]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"try_into","","",200,[[],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"type_id","","",200,[[["self"]],["typeid"]]],[11,"peek","","",201,[[["cursor"]],["bool"]]],[11,"display","","",201,[[],["str"]]],[11,"span","","",201,[[["self"]],["span"]]],[11,"from","","",201,[[["t"]],["t"]]],[11,"into","","",201,[[],["u"]]],[11,"to_owned","","",201,[[["self"]],["t"]]],[11,"clone_into","","",201,[[["self"],["t"]]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"try_into","","",201,[[],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"type_id","","",201,[[["self"]],["typeid"]]],[11,"peek","","",202,[[["cursor"]],["bool"]]],[11,"display","","",202,[[],["str"]]],[11,"span","","",202,[[["self"]],["span"]]],[11,"from","","",202,[[["t"]],["t"]]],[11,"into","","",202,[[],["u"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,[[["self"],["t"]]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"try_into","","",202,[[],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"type_id","","",202,[[["self"]],["typeid"]]],[11,"peek","","",203,[[["cursor"]],["bool"]]],[11,"display","","",203,[[],["str"]]],[11,"span","","",203,[[["self"]],["span"]]],[11,"from","","",203,[[["t"]],["t"]]],[11,"into","","",203,[[],["u"]]],[11,"to_owned","","",203,[[["self"]],["t"]]],[11,"clone_into","","",203,[[["self"],["t"]]]],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"try_into","","",203,[[],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"type_id","","",203,[[["self"]],["typeid"]]],[11,"peek","","",204,[[["cursor"]],["bool"]]],[11,"display","","",204,[[],["str"]]],[11,"span","","",204,[[["self"]],["span"]]],[11,"from","","",204,[[["t"]],["t"]]],[11,"into","","",204,[[],["u"]]],[11,"to_owned","","",204,[[["self"]],["t"]]],[11,"clone_into","","",204,[[["self"],["t"]]]],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"try_into","","",204,[[],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"type_id","","",204,[[["self"]],["typeid"]]],[11,"peek","","",205,[[["cursor"]],["bool"]]],[11,"display","","",205,[[],["str"]]],[11,"span","","",205,[[["self"]],["span"]]],[11,"from","","",205,[[["t"]],["t"]]],[11,"into","","",205,[[],["u"]]],[11,"to_owned","","",205,[[["self"]],["t"]]],[11,"clone_into","","",205,[[["self"],["t"]]]],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"try_into","","",205,[[],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"type_id","","",205,[[["self"]],["typeid"]]],[11,"peek","","",206,[[["cursor"]],["bool"]]],[11,"display","","",206,[[],["str"]]],[11,"span","","",206,[[["self"]],["span"]]],[11,"from","","",206,[[["t"]],["t"]]],[11,"into","","",206,[[],["u"]]],[11,"to_owned","","",206,[[["self"]],["t"]]],[11,"clone_into","","",206,[[["self"],["t"]]]],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"try_into","","",206,[[],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"type_id","","",206,[[["self"]],["typeid"]]],[11,"peek","","",207,[[["cursor"]],["bool"]]],[11,"display","","",207,[[],["str"]]],[11,"span","","",207,[[["self"]],["span"]]],[11,"from","","",207,[[["t"]],["t"]]],[11,"into","","",207,[[],["u"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,[[["self"],["t"]]]],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"try_into","","",207,[[],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"type_id","","",207,[[["self"]],["typeid"]]],[11,"peek","","",208,[[["cursor"]],["bool"]]],[11,"display","","",208,[[],["str"]]],[11,"span","","",208,[[["self"]],["span"]]],[11,"from","","",208,[[["t"]],["t"]]],[11,"into","","",208,[[],["u"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,[[["self"],["t"]]]],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"try_into","","",208,[[],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"type_id","","",208,[[["self"]],["typeid"]]],[11,"peek","","",209,[[["cursor"]],["bool"]]],[11,"display","","",209,[[],["str"]]],[11,"span","","",209,[[["self"]],["span"]]],[11,"from","","",209,[[["t"]],["t"]]],[11,"into","","",209,[[],["u"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,[[["self"],["t"]]]],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"try_into","","",209,[[],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"type_id","","",209,[[["self"]],["typeid"]]],[11,"peek","","",210,[[["cursor"]],["bool"]]],[11,"display","","",210,[[],["str"]]],[11,"span","","",210,[[["self"]],["span"]]],[11,"from","","",210,[[["t"]],["t"]]],[11,"into","","",210,[[],["u"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,[[["self"],["t"]]]],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"try_into","","",210,[[],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"type_id","","",210,[[["self"]],["typeid"]]],[11,"peek","","",211,[[["cursor"]],["bool"]]],[11,"display","","",211,[[],["str"]]],[11,"span","","",211,[[["self"]],["span"]]],[11,"from","","",211,[[["t"]],["t"]]],[11,"into","","",211,[[],["u"]]],[11,"to_owned","","",211,[[["self"]],["t"]]],[11,"clone_into","","",211,[[["self"],["t"]]]],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"try_into","","",211,[[],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"type_id","","",211,[[["self"]],["typeid"]]],[11,"peek","","",212,[[["cursor"]],["bool"]]],[11,"display","","",212,[[],["str"]]],[11,"span","","",212,[[["self"]],["span"]]],[11,"from","","",212,[[["t"]],["t"]]],[11,"into","","",212,[[],["u"]]],[11,"to_owned","","",212,[[["self"]],["t"]]],[11,"clone_into","","",212,[[["self"],["t"]]]],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"try_into","","",212,[[],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"type_id","","",212,[[["self"]],["typeid"]]],[11,"peek","","",213,[[["cursor"]],["bool"]]],[11,"display","","",213,[[],["str"]]],[11,"span","","",213,[[["self"]],["span"]]],[11,"from","","",213,[[["t"]],["t"]]],[11,"into","","",213,[[],["u"]]],[11,"to_owned","","",213,[[["self"]],["t"]]],[11,"clone_into","","",213,[[["self"],["t"]]]],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"try_into","","",213,[[],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"type_id","","",213,[[["self"]],["typeid"]]],[11,"peek","","",214,[[["cursor"]],["bool"]]],[11,"display","","",214,[[],["str"]]],[11,"span","","",214,[[["self"]],["span"]]],[11,"from","","",214,[[["t"]],["t"]]],[11,"into","","",214,[[],["u"]]],[11,"to_owned","","",214,[[["self"]],["t"]]],[11,"clone_into","","",214,[[["self"],["t"]]]],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"try_into","","",214,[[],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"type_id","","",214,[[["self"]],["typeid"]]],[11,"peek","","",215,[[["cursor"]],["bool"]]],[11,"display","","",215,[[],["str"]]],[11,"span","","",215,[[["self"]],["span"]]],[11,"from","","",215,[[["t"]],["t"]]],[11,"into","","",215,[[],["u"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,[[["self"],["t"]]]],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"try_into","","",215,[[],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"type_id","","",215,[[["self"]],["typeid"]]],[11,"peek","","",216,[[["cursor"]],["bool"]]],[11,"display","","",216,[[],["str"]]],[11,"span","","",216,[[["self"]],["span"]]],[11,"from","","",216,[[["t"]],["t"]]],[11,"into","","",216,[[],["u"]]],[11,"to_owned","","",216,[[["self"]],["t"]]],[11,"clone_into","","",216,[[["self"],["t"]]]],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"try_into","","",216,[[],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"type_id","","",216,[[["self"]],["typeid"]]],[11,"peek","","",217,[[["cursor"]],["bool"]]],[11,"display","","",217,[[],["str"]]],[11,"span","","",217,[[["self"]],["span"]]],[11,"from","","",217,[[["t"]],["t"]]],[11,"into","","",217,[[],["u"]]],[11,"to_owned","","",217,[[["self"]],["t"]]],[11,"clone_into","","",217,[[["self"],["t"]]]],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"try_into","","",217,[[],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"type_id","","",217,[[["self"]],["typeid"]]],[11,"peek","","",218,[[["cursor"]],["bool"]]],[11,"display","","",218,[[],["str"]]],[11,"span","","",218,[[["self"]],["span"]]],[11,"from","","",218,[[["t"]],["t"]]],[11,"into","","",218,[[],["u"]]],[11,"to_owned","","",218,[[["self"]],["t"]]],[11,"clone_into","","",218,[[["self"],["t"]]]],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"try_into","","",218,[[],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"type_id","","",218,[[["self"]],["typeid"]]],[11,"peek","","",219,[[["cursor"]],["bool"]]],[11,"display","","",219,[[],["str"]]],[11,"span","","",219,[[["self"]],["span"]]],[11,"from","","",219,[[["t"]],["t"]]],[11,"into","","",219,[[],["u"]]],[11,"to_owned","","",219,[[["self"]],["t"]]],[11,"clone_into","","",219,[[["self"],["t"]]]],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"try_into","","",219,[[],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"type_id","","",219,[[["self"]],["typeid"]]],[11,"peek","","",220,[[["cursor"]],["bool"]]],[11,"display","","",220,[[],["str"]]],[11,"span","","",220,[[["self"]],["span"]]],[11,"from","","",220,[[["t"]],["t"]]],[11,"into","","",220,[[],["u"]]],[11,"to_owned","","",220,[[["self"]],["t"]]],[11,"clone_into","","",220,[[["self"],["t"]]]],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"try_into","","",220,[[],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"type_id","","",220,[[["self"]],["typeid"]]],[11,"peek","","",221,[[["cursor"]],["bool"]]],[11,"display","","",221,[[],["str"]]],[11,"span","","",221,[[["self"]],["span"]]],[11,"from","","",221,[[["t"]],["t"]]],[11,"into","","",221,[[],["u"]]],[11,"to_owned","","",221,[[["self"]],["t"]]],[11,"clone_into","","",221,[[["self"],["t"]]]],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"try_into","","",221,[[],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"type_id","","",221,[[["self"]],["typeid"]]],[11,"peek","","",222,[[["cursor"]],["bool"]]],[11,"display","","",222,[[],["str"]]],[11,"span","","",222,[[["self"]],["span"]]],[11,"from","","",222,[[["t"]],["t"]]],[11,"into","","",222,[[],["u"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,[[["self"],["t"]]]],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"try_into","","",222,[[],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"type_id","","",222,[[["self"]],["typeid"]]],[11,"peek","","",223,[[["cursor"]],["bool"]]],[11,"display","","",223,[[],["str"]]],[11,"span","","",223,[[["self"]],["span"]]],[11,"from","","",223,[[["t"]],["t"]]],[11,"into","","",223,[[],["u"]]],[11,"to_owned","","",223,[[["self"]],["t"]]],[11,"clone_into","","",223,[[["self"],["t"]]]],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"try_into","","",223,[[],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"type_id","","",223,[[["self"]],["typeid"]]],[11,"peek","","",224,[[["cursor"]],["bool"]]],[11,"display","","",224,[[],["str"]]],[11,"span","","",224,[[["self"]],["span"]]],[11,"from","","",224,[[["t"]],["t"]]],[11,"into","","",224,[[],["u"]]],[11,"to_owned","","",224,[[["self"]],["t"]]],[11,"clone_into","","",224,[[["self"],["t"]]]],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"try_into","","",224,[[],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"type_id","","",224,[[["self"]],["typeid"]]],[11,"peek","","",225,[[["cursor"]],["bool"]]],[11,"display","","",225,[[],["str"]]],[11,"span","","",225,[[["self"]],["span"]]],[11,"from","","",225,[[["t"]],["t"]]],[11,"into","","",225,[[],["u"]]],[11,"to_owned","","",225,[[["self"]],["t"]]],[11,"clone_into","","",225,[[["self"],["t"]]]],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"try_into","","",225,[[],["result"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"type_id","","",225,[[["self"]],["typeid"]]],[11,"peek","","",226,[[["cursor"]],["bool"]]],[11,"display","","",226,[[],["str"]]],[11,"span","","",226,[[["self"]],["span"]]],[11,"from","","",226,[[["t"]],["t"]]],[11,"into","","",226,[[],["u"]]],[11,"to_owned","","",226,[[["self"]],["t"]]],[11,"clone_into","","",226,[[["self"],["t"]]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"try_into","","",226,[[],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"type_id","","",226,[[["self"]],["typeid"]]],[11,"peek","","",227,[[["cursor"]],["bool"]]],[11,"display","","",227,[[],["str"]]],[11,"span","","",227,[[["self"]],["span"]]],[11,"from","","",227,[[["t"]],["t"]]],[11,"into","","",227,[[],["u"]]],[11,"to_owned","","",227,[[["self"]],["t"]]],[11,"clone_into","","",227,[[["self"],["t"]]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"try_into","","",227,[[],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"type_id","","",227,[[["self"]],["typeid"]]],[11,"peek","","",228,[[["cursor"]],["bool"]]],[11,"display","","",228,[[],["str"]]],[11,"span","","",228,[[["self"]],["span"]]],[11,"from","","",228,[[["t"]],["t"]]],[11,"into","","",228,[[],["u"]]],[11,"to_owned","","",228,[[["self"]],["t"]]],[11,"clone_into","","",228,[[["self"],["t"]]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"try_into","","",228,[[],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"type_id","","",228,[[["self"]],["typeid"]]],[11,"peek","","",229,[[["cursor"]],["bool"]]],[11,"display","","",229,[[],["str"]]],[11,"span","","",229,[[["self"]],["span"]]],[11,"from","","",229,[[["t"]],["t"]]],[11,"into","","",229,[[],["u"]]],[11,"to_owned","","",229,[[["self"]],["t"]]],[11,"clone_into","","",229,[[["self"],["t"]]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"try_into","","",229,[[],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"type_id","","",229,[[["self"]],["typeid"]]],[11,"peek","","",230,[[["cursor"]],["bool"]]],[11,"display","","",230,[[],["str"]]],[11,"span","","",230,[[["self"]],["span"]]],[11,"from","","",230,[[["t"]],["t"]]],[11,"into","","",230,[[],["u"]]],[11,"to_owned","","",230,[[["self"]],["t"]]],[11,"clone_into","","",230,[[["self"],["t"]]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"try_into","","",230,[[],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"type_id","","",230,[[["self"]],["typeid"]]],[11,"peek","","",231,[[["cursor"]],["bool"]]],[11,"display","","",231,[[],["str"]]],[11,"span","","",231,[[["self"]],["span"]]],[11,"from","","",231,[[["t"]],["t"]]],[11,"into","","",231,[[],["u"]]],[11,"to_owned","","",231,[[["self"]],["t"]]],[11,"clone_into","","",231,[[["self"],["t"]]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"try_into","","",231,[[],["result"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"type_id","","",231,[[["self"]],["typeid"]]],[11,"peek","","",232,[[["cursor"]],["bool"]]],[11,"display","","",232,[[],["str"]]],[11,"span","","",232,[[["self"]],["span"]]],[11,"from","","",232,[[["t"]],["t"]]],[11,"into","","",232,[[],["u"]]],[11,"to_owned","","",232,[[["self"]],["t"]]],[11,"clone_into","","",232,[[["self"],["t"]]]],[11,"try_from","","",232,[[["u"]],["result"]]],[11,"try_into","","",232,[[],["result"]]],[11,"borrow","","",232,[[["self"]],["t"]]],[11,"borrow_mut","","",232,[[["self"]],["t"]]],[11,"type_id","","",232,[[["self"]],["typeid"]]],[11,"peek","","",233,[[["cursor"]],["bool"]]],[11,"display","","",233,[[],["str"]]],[11,"span","","",233,[[["self"]],["span"]]],[11,"from","","",233,[[["t"]],["t"]]],[11,"into","","",233,[[],["u"]]],[11,"to_owned","","",233,[[["self"]],["t"]]],[11,"clone_into","","",233,[[["self"],["t"]]]],[11,"try_from","","",233,[[["u"]],["result"]]],[11,"try_into","","",233,[[],["result"]]],[11,"borrow","","",233,[[["self"]],["t"]]],[11,"borrow_mut","","",233,[[["self"]],["t"]]],[11,"type_id","","",233,[[["self"]],["typeid"]]],[11,"peek","","",234,[[["cursor"]],["bool"]]],[11,"display","","",234,[[],["str"]]],[11,"span","","",234,[[["self"]],["span"]]],[11,"from","","",234,[[["t"]],["t"]]],[11,"into","","",234,[[],["u"]]],[11,"to_owned","","",234,[[["self"]],["t"]]],[11,"clone_into","","",234,[[["self"],["t"]]]],[11,"try_from","","",234,[[["u"]],["result"]]],[11,"try_into","","",234,[[],["result"]]],[11,"borrow","","",234,[[["self"]],["t"]]],[11,"borrow_mut","","",234,[[["self"]],["t"]]],[11,"type_id","","",234,[[["self"]],["typeid"]]],[11,"peek","","",235,[[["cursor"]],["bool"]]],[11,"display","","",235,[[],["str"]]],[11,"span","","",235,[[["self"]],["span"]]],[11,"from","","",235,[[["t"]],["t"]]],[11,"into","","",235,[[],["u"]]],[11,"to_owned","","",235,[[["self"]],["t"]]],[11,"clone_into","","",235,[[["self"],["t"]]]],[11,"try_from","","",235,[[["u"]],["result"]]],[11,"try_into","","",235,[[],["result"]]],[11,"borrow","","",235,[[["self"]],["t"]]],[11,"borrow_mut","","",235,[[["self"]],["t"]]],[11,"type_id","","",235,[[["self"]],["typeid"]]],[11,"peek","","",236,[[["cursor"]],["bool"]]],[11,"display","","",236,[[],["str"]]],[11,"span","","",236,[[["self"]],["span"]]],[11,"from","","",236,[[["t"]],["t"]]],[11,"into","","",236,[[],["u"]]],[11,"to_owned","","",236,[[["self"]],["t"]]],[11,"clone_into","","",236,[[["self"],["t"]]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"try_into","","",236,[[],["result"]]],[11,"borrow","","",236,[[["self"]],["t"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"type_id","","",236,[[["self"]],["typeid"]]],[11,"peek","","",237,[[["cursor"]],["bool"]]],[11,"display","","",237,[[],["str"]]],[11,"span","","",237,[[["self"]],["span"]]],[11,"from","","",237,[[["t"]],["t"]]],[11,"into","","",237,[[],["u"]]],[11,"to_owned","","",237,[[["self"]],["t"]]],[11,"clone_into","","",237,[[["self"],["t"]]]],[11,"try_from","","",237,[[["u"]],["result"]]],[11,"try_into","","",237,[[],["result"]]],[11,"borrow","","",237,[[["self"]],["t"]]],[11,"borrow_mut","","",237,[[["self"]],["t"]]],[11,"type_id","","",237,[[["self"]],["typeid"]]],[11,"peek","","",238,[[["cursor"]],["bool"]]],[11,"display","","",238,[[],["str"]]],[11,"span","","",238,[[["self"]],["span"]]],[11,"from","","",238,[[["t"]],["t"]]],[11,"into","","",238,[[],["u"]]],[11,"to_owned","","",238,[[["self"]],["t"]]],[11,"clone_into","","",238,[[["self"],["t"]]]],[11,"try_from","","",238,[[["u"]],["result"]]],[11,"try_into","","",238,[[],["result"]]],[11,"borrow","","",238,[[["self"]],["t"]]],[11,"borrow_mut","","",238,[[["self"]],["t"]]],[11,"type_id","","",238,[[["self"]],["typeid"]]],[11,"peek","","",239,[[["cursor"]],["bool"]]],[11,"display","","",239,[[],["str"]]],[11,"span","","",239,[[["self"]],["span"]]],[11,"from","","",239,[[["t"]],["t"]]],[11,"into","","",239,[[],["u"]]],[11,"to_owned","","",239,[[["self"]],["t"]]],[11,"clone_into","","",239,[[["self"],["t"]]]],[11,"try_from","","",239,[[["u"]],["result"]]],[11,"try_into","","",239,[[],["result"]]],[11,"borrow","","",239,[[["self"]],["t"]]],[11,"borrow_mut","","",239,[[["self"]],["t"]]],[11,"type_id","","",239,[[["self"]],["typeid"]]],[11,"peek","","",240,[[["cursor"]],["bool"]]],[11,"display","","",240,[[],["str"]]],[11,"span","","",240,[[["self"]],["span"]]],[11,"from","","",240,[[["t"]],["t"]]],[11,"into","","",240,[[],["u"]]],[11,"to_owned","","",240,[[["self"]],["t"]]],[11,"clone_into","","",240,[[["self"],["t"]]]],[11,"try_from","","",240,[[["u"]],["result"]]],[11,"try_into","","",240,[[],["result"]]],[11,"borrow","","",240,[[["self"]],["t"]]],[11,"borrow_mut","","",240,[[["self"]],["t"]]],[11,"type_id","","",240,[[["self"]],["typeid"]]],[11,"peek","","",241,[[["cursor"]],["bool"]]],[11,"display","","",241,[[],["str"]]],[11,"span","","",241,[[["self"]],["span"]]],[11,"from","","",241,[[["t"]],["t"]]],[11,"into","","",241,[[],["u"]]],[11,"to_owned","","",241,[[["self"]],["t"]]],[11,"clone_into","","",241,[[["self"],["t"]]]],[11,"try_from","","",241,[[["u"]],["result"]]],[11,"try_into","","",241,[[],["result"]]],[11,"borrow","","",241,[[["self"]],["t"]]],[11,"borrow_mut","","",241,[[["self"]],["t"]]],[11,"type_id","","",241,[[["self"]],["typeid"]]],[11,"peek","","",242,[[["cursor"]],["bool"]]],[11,"display","","",242,[[],["str"]]],[11,"span","","",242,[[["self"]],["span"]]],[11,"from","","",242,[[["t"]],["t"]]],[11,"into","","",242,[[],["u"]]],[11,"to_owned","","",242,[[["self"]],["t"]]],[11,"clone_into","","",242,[[["self"],["t"]]]],[11,"try_from","","",242,[[["u"]],["result"]]],[11,"try_into","","",242,[[],["result"]]],[11,"borrow","","",242,[[["self"]],["t"]]],[11,"borrow_mut","","",242,[[["self"]],["t"]]],[11,"type_id","","",242,[[["self"]],["typeid"]]],[11,"peek","","",243,[[["cursor"]],["bool"]]],[11,"display","","",243,[[],["str"]]],[11,"span","","",243,[[["self"]],["span"]]],[11,"from","","",243,[[["t"]],["t"]]],[11,"into","","",243,[[],["u"]]],[11,"to_owned","","",243,[[["self"]],["t"]]],[11,"clone_into","","",243,[[["self"],["t"]]]],[11,"try_from","","",243,[[["u"]],["result"]]],[11,"try_into","","",243,[[],["result"]]],[11,"borrow","","",243,[[["self"]],["t"]]],[11,"borrow_mut","","",243,[[["self"]],["t"]]],[11,"type_id","","",243,[[["self"]],["typeid"]]],[11,"peek","","",244,[[["cursor"]],["bool"]]],[11,"display","","",244,[[],["str"]]],[11,"span","","",244,[[["self"]],["span"]]],[11,"from","","",244,[[["t"]],["t"]]],[11,"into","","",244,[[],["u"]]],[11,"to_owned","","",244,[[["self"]],["t"]]],[11,"clone_into","","",244,[[["self"],["t"]]]],[11,"try_from","","",244,[[["u"]],["result"]]],[11,"try_into","","",244,[[],["result"]]],[11,"borrow","","",244,[[["self"]],["t"]]],[11,"borrow_mut","","",244,[[["self"]],["t"]]],[11,"type_id","","",244,[[["self"]],["typeid"]]],[11,"peek","","",245,[[["cursor"]],["bool"]]],[11,"display","","",245,[[],["str"]]],[11,"span","","",245,[[["self"]],["span"]]],[11,"from","","",245,[[["t"]],["t"]]],[11,"into","","",245,[[],["u"]]],[11,"to_owned","","",245,[[["self"]],["t"]]],[11,"clone_into","","",245,[[["self"],["t"]]]],[11,"try_from","","",245,[[["u"]],["result"]]],[11,"try_into","","",245,[[],["result"]]],[11,"borrow","","",245,[[["self"]],["t"]]],[11,"borrow_mut","","",245,[[["self"]],["t"]]],[11,"type_id","","",245,[[["self"]],["typeid"]]],[11,"peek","","",246,[[["cursor"]],["bool"]]],[11,"display","","",246,[[],["str"]]],[11,"span","","",246,[[["self"]],["span"]]],[11,"from","","",246,[[["t"]],["t"]]],[11,"into","","",246,[[],["u"]]],[11,"to_owned","","",246,[[["self"]],["t"]]],[11,"clone_into","","",246,[[["self"],["t"]]]],[11,"try_from","","",246,[[["u"]],["result"]]],[11,"try_into","","",246,[[],["result"]]],[11,"borrow","","",246,[[["self"]],["t"]]],[11,"borrow_mut","","",246,[[["self"]],["t"]]],[11,"type_id","","",246,[[["self"]],["typeid"]]],[11,"peek","","",247,[[["cursor"]],["bool"]]],[11,"display","","",247,[[],["str"]]],[11,"span","","",247,[[["self"]],["span"]]],[11,"from","","",247,[[["t"]],["t"]]],[11,"into","","",247,[[],["u"]]],[11,"to_owned","","",247,[[["self"]],["t"]]],[11,"clone_into","","",247,[[["self"],["t"]]]],[11,"try_from","","",247,[[["u"]],["result"]]],[11,"try_into","","",247,[[],["result"]]],[11,"borrow","","",247,[[["self"]],["t"]]],[11,"borrow_mut","","",247,[[["self"]],["t"]]],[11,"type_id","","",247,[[["self"]],["typeid"]]],[11,"peek","","",248,[[["cursor"]],["bool"]]],[11,"display","","",248,[[],["str"]]],[11,"span","","",248,[[["self"]],["span"]]],[11,"from","","",248,[[["t"]],["t"]]],[11,"into","","",248,[[],["u"]]],[11,"to_owned","","",248,[[["self"]],["t"]]],[11,"clone_into","","",248,[[["self"],["t"]]]],[11,"try_from","","",248,[[["u"]],["result"]]],[11,"try_into","","",248,[[],["result"]]],[11,"borrow","","",248,[[["self"]],["t"]]],[11,"borrow_mut","","",248,[[["self"]],["t"]]],[11,"type_id","","",248,[[["self"]],["typeid"]]],[11,"peek","","",249,[[["cursor"]],["bool"]]],[11,"display","","",249,[[],["str"]]],[11,"span","","",249,[[["self"]],["span"]]],[11,"from","","",249,[[["t"]],["t"]]],[11,"into","","",249,[[],["u"]]],[11,"to_owned","","",249,[[["self"]],["t"]]],[11,"clone_into","","",249,[[["self"],["t"]]]],[11,"try_from","","",249,[[["u"]],["result"]]],[11,"try_into","","",249,[[],["result"]]],[11,"borrow","","",249,[[["self"]],["t"]]],[11,"borrow_mut","","",249,[[["self"]],["t"]]],[11,"type_id","","",249,[[["self"]],["typeid"]]],[11,"peek","","",250,[[["cursor"]],["bool"]]],[11,"display","","",250,[[],["str"]]],[11,"span","","",250,[[["self"]],["span"]]],[11,"from","","",250,[[["t"]],["t"]]],[11,"into","","",250,[[],["u"]]],[11,"to_owned","","",250,[[["self"]],["t"]]],[11,"clone_into","","",250,[[["self"],["t"]]]],[11,"try_from","","",250,[[["u"]],["result"]]],[11,"try_into","","",250,[[],["result"]]],[11,"borrow","","",250,[[["self"]],["t"]]],[11,"borrow_mut","","",250,[[["self"]],["t"]]],[11,"type_id","","",250,[[["self"]],["typeid"]]],[11,"peek","","",251,[[["cursor"]],["bool"]]],[11,"display","","",251,[[],["str"]]],[11,"span","","",251,[[["self"]],["span"]]],[11,"from","","",251,[[["t"]],["t"]]],[11,"into","","",251,[[],["u"]]],[11,"to_owned","","",251,[[["self"]],["t"]]],[11,"clone_into","","",251,[[["self"],["t"]]]],[11,"try_from","","",251,[[["u"]],["result"]]],[11,"try_into","","",251,[[],["result"]]],[11,"borrow","","",251,[[["self"]],["t"]]],[11,"borrow_mut","","",251,[[["self"]],["t"]]],[11,"type_id","","",251,[[["self"]],["typeid"]]],[11,"peek","","",252,[[["cursor"]],["bool"]]],[11,"display","","",252,[[],["str"]]],[11,"span","","",252,[[["self"]],["span"]]],[11,"from","","",252,[[["t"]],["t"]]],[11,"into","","",252,[[],["u"]]],[11,"to_owned","","",252,[[["self"]],["t"]]],[11,"clone_into","","",252,[[["self"],["t"]]]],[11,"try_from","","",252,[[["u"]],["result"]]],[11,"try_into","","",252,[[],["result"]]],[11,"borrow","","",252,[[["self"]],["t"]]],[11,"borrow_mut","","",252,[[["self"]],["t"]]],[11,"type_id","","",252,[[["self"]],["typeid"]]],[11,"peek","","",253,[[["cursor"]],["bool"]]],[11,"display","","",253,[[],["str"]]],[11,"span","","",253,[[["self"]],["span"]]],[11,"from","","",253,[[["t"]],["t"]]],[11,"into","","",253,[[],["u"]]],[11,"to_owned","","",253,[[["self"]],["t"]]],[11,"clone_into","","",253,[[["self"],["t"]]]],[11,"try_from","","",253,[[["u"]],["result"]]],[11,"try_into","","",253,[[],["result"]]],[11,"borrow","","",253,[[["self"]],["t"]]],[11,"borrow_mut","","",253,[[["self"]],["t"]]],[11,"type_id","","",253,[[["self"]],["typeid"]]],[11,"peek","","",254,[[["cursor"]],["bool"]]],[11,"display","","",254,[[],["str"]]],[11,"span","","",254,[[["self"]],["span"]]],[11,"from","","",254,[[["t"]],["t"]]],[11,"into","","",254,[[],["u"]]],[11,"to_owned","","",254,[[["self"]],["t"]]],[11,"clone_into","","",254,[[["self"],["t"]]]],[11,"try_from","","",254,[[["u"]],["result"]]],[11,"try_into","","",254,[[],["result"]]],[11,"borrow","","",254,[[["self"]],["t"]]],[11,"borrow_mut","","",254,[[["self"]],["t"]]],[11,"type_id","","",254,[[["self"]],["typeid"]]],[11,"peek","","",255,[[["cursor"]],["bool"]]],[11,"display","","",255,[[],["str"]]],[11,"span","","",255,[[["self"]],["span"]]],[11,"from","","",255,[[["t"]],["t"]]],[11,"into","","",255,[[],["u"]]],[11,"to_owned","","",255,[[["self"]],["t"]]],[11,"clone_into","","",255,[[["self"],["t"]]]],[11,"try_from","","",255,[[["u"]],["result"]]],[11,"try_into","","",255,[[],["result"]]],[11,"borrow","","",255,[[["self"]],["t"]]],[11,"borrow_mut","","",255,[[["self"]],["t"]]],[11,"type_id","","",255,[[["self"]],["typeid"]]],[11,"peek","","",256,[[["cursor"]],["bool"]]],[11,"display","","",256,[[],["str"]]],[11,"span","","",256,[[["self"]],["span"]]],[11,"from","","",256,[[["t"]],["t"]]],[11,"into","","",256,[[],["u"]]],[11,"to_owned","","",256,[[["self"]],["t"]]],[11,"clone_into","","",256,[[["self"],["t"]]]],[11,"try_from","","",256,[[["u"]],["result"]]],[11,"try_into","","",256,[[],["result"]]],[11,"borrow","","",256,[[["self"]],["t"]]],[11,"borrow_mut","","",256,[[["self"]],["t"]]],[11,"type_id","","",256,[[["self"]],["typeid"]]],[11,"peek","","",257,[[["cursor"]],["bool"]]],[11,"display","","",257,[[],["str"]]],[11,"span","","",257,[[["self"]],["span"]]],[11,"from","","",257,[[["t"]],["t"]]],[11,"into","","",257,[[],["u"]]],[11,"to_owned","","",257,[[["self"]],["t"]]],[11,"clone_into","","",257,[[["self"],["t"]]]],[11,"try_from","","",257,[[["u"]],["result"]]],[11,"try_into","","",257,[[],["result"]]],[11,"borrow","","",257,[[["self"]],["t"]]],[11,"borrow_mut","","",257,[[["self"]],["t"]]],[11,"type_id","","",257,[[["self"]],["typeid"]]],[11,"peek","","",258,[[["cursor"]],["bool"]]],[11,"display","","",258,[[],["str"]]],[11,"span","","",258,[[["self"]],["span"]]],[11,"from","","",258,[[["t"]],["t"]]],[11,"into","","",258,[[],["u"]]],[11,"to_owned","","",258,[[["self"]],["t"]]],[11,"clone_into","","",258,[[["self"],["t"]]]],[11,"try_from","","",258,[[["u"]],["result"]]],[11,"try_into","","",258,[[],["result"]]],[11,"borrow","","",258,[[["self"]],["t"]]],[11,"borrow_mut","","",258,[[["self"]],["t"]]],[11,"type_id","","",258,[[["self"]],["typeid"]]],[11,"peek","","",259,[[["cursor"]],["bool"]]],[11,"display","","",259,[[],["str"]]],[11,"span","","",259,[[["self"]],["span"]]],[11,"from","","",259,[[["t"]],["t"]]],[11,"into","","",259,[[],["u"]]],[11,"to_owned","","",259,[[["self"]],["t"]]],[11,"clone_into","","",259,[[["self"],["t"]]]],[11,"try_from","","",259,[[["u"]],["result"]]],[11,"try_into","","",259,[[],["result"]]],[11,"borrow","","",259,[[["self"]],["t"]]],[11,"borrow_mut","","",259,[[["self"]],["t"]]],[11,"type_id","","",259,[[["self"]],["typeid"]]],[11,"peek","","",260,[[["cursor"]],["bool"]]],[11,"display","","",260,[[],["str"]]],[11,"span","","",260,[[["self"]],["span"]]],[11,"from","","",260,[[["t"]],["t"]]],[11,"into","","",260,[[],["u"]]],[11,"to_owned","","",260,[[["self"]],["t"]]],[11,"clone_into","","",260,[[["self"],["t"]]]],[11,"try_from","","",260,[[["u"]],["result"]]],[11,"try_into","","",260,[[],["result"]]],[11,"borrow","","",260,[[["self"]],["t"]]],[11,"borrow_mut","","",260,[[["self"]],["t"]]],[11,"type_id","","",260,[[["self"]],["typeid"]]],[11,"peek","","",261,[[["cursor"]],["bool"]]],[11,"display","","",261,[[],["str"]]],[11,"span","","",261,[[["self"]],["span"]]],[11,"from","","",261,[[["t"]],["t"]]],[11,"into","","",261,[[],["u"]]],[11,"to_owned","","",261,[[["self"]],["t"]]],[11,"clone_into","","",261,[[["self"],["t"]]]],[11,"try_from","","",261,[[["u"]],["result"]]],[11,"try_into","","",261,[[],["result"]]],[11,"borrow","","",261,[[["self"]],["t"]]],[11,"borrow_mut","","",261,[[["self"]],["t"]]],[11,"type_id","","",261,[[["self"]],["typeid"]]],[11,"peek","","",262,[[["cursor"]],["bool"]]],[11,"display","","",262,[[],["str"]]],[11,"span","","",262,[[["self"]],["span"]]],[11,"from","","",262,[[["t"]],["t"]]],[11,"into","","",262,[[],["u"]]],[11,"to_owned","","",262,[[["self"]],["t"]]],[11,"clone_into","","",262,[[["self"],["t"]]]],[11,"try_from","","",262,[[["u"]],["result"]]],[11,"try_into","","",262,[[],["result"]]],[11,"borrow","","",262,[[["self"]],["t"]]],[11,"borrow_mut","","",262,[[["self"]],["t"]]],[11,"type_id","","",262,[[["self"]],["typeid"]]],[11,"peek","","",263,[[["cursor"]],["bool"]]],[11,"display","","",263,[[],["str"]]],[11,"span","","",263,[[["self"]],["span"]]],[11,"from","","",263,[[["t"]],["t"]]],[11,"into","","",263,[[],["u"]]],[11,"to_owned","","",263,[[["self"]],["t"]]],[11,"clone_into","","",263,[[["self"],["t"]]]],[11,"try_from","","",263,[[["u"]],["result"]]],[11,"try_into","","",263,[[],["result"]]],[11,"borrow","","",263,[[["self"]],["t"]]],[11,"borrow_mut","","",263,[[["self"]],["t"]]],[11,"type_id","","",263,[[["self"]],["typeid"]]],[11,"peek","","",264,[[["cursor"]],["bool"]]],[11,"display","","",264,[[],["str"]]],[11,"span","","",264,[[["self"]],["span"]]],[11,"from","","",264,[[["t"]],["t"]]],[11,"into","","",264,[[],["u"]]],[11,"to_owned","","",264,[[["self"]],["t"]]],[11,"clone_into","","",264,[[["self"],["t"]]]],[11,"try_from","","",264,[[["u"]],["result"]]],[11,"try_into","","",264,[[],["result"]]],[11,"borrow","","",264,[[["self"]],["t"]]],[11,"borrow_mut","","",264,[[["self"]],["t"]]],[11,"type_id","","",264,[[["self"]],["typeid"]]],[11,"peek","","",265,[[["cursor"]],["bool"]]],[11,"display","","",265,[[],["str"]]],[11,"span","","",265,[[["self"]],["span"]]],[11,"from","","",265,[[["t"]],["t"]]],[11,"into","","",265,[[],["u"]]],[11,"to_owned","","",265,[[["self"]],["t"]]],[11,"clone_into","","",265,[[["self"],["t"]]]],[11,"try_from","","",265,[[["u"]],["result"]]],[11,"try_into","","",265,[[],["result"]]],[11,"borrow","","",265,[[["self"]],["t"]]],[11,"borrow_mut","","",265,[[["self"]],["t"]]],[11,"type_id","","",265,[[["self"]],["typeid"]]],[11,"peek","","",266,[[["cursor"]],["bool"]]],[11,"display","","",266,[[],["str"]]],[11,"span","","",266,[[["self"]],["span"]]],[11,"from","","",266,[[["t"]],["t"]]],[11,"into","","",266,[[],["u"]]],[11,"to_owned","","",266,[[["self"]],["t"]]],[11,"clone_into","","",266,[[["self"],["t"]]]],[11,"try_from","","",266,[[["u"]],["result"]]],[11,"try_into","","",266,[[],["result"]]],[11,"borrow","","",266,[[["self"]],["t"]]],[11,"borrow_mut","","",266,[[["self"]],["t"]]],[11,"type_id","","",266,[[["self"]],["typeid"]]],[11,"peek","","",267,[[["cursor"]],["bool"]]],[11,"display","","",267,[[],["str"]]],[11,"span","","",267,[[["self"]],["span"]]],[11,"from","","",267,[[["t"]],["t"]]],[11,"into","","",267,[[],["u"]]],[11,"to_owned","","",267,[[["self"]],["t"]]],[11,"clone_into","","",267,[[["self"],["t"]]]],[11,"try_from","","",267,[[["u"]],["result"]]],[11,"try_into","","",267,[[],["result"]]],[11,"borrow","","",267,[[["self"]],["t"]]],[11,"borrow_mut","","",267,[[["self"]],["t"]]],[11,"type_id","","",267,[[["self"]],["typeid"]]],[11,"peek","","",268,[[["cursor"]],["bool"]]],[11,"display","","",268,[[],["str"]]],[11,"span","","",268,[[["self"]],["span"]]],[11,"from","","",268,[[["t"]],["t"]]],[11,"into","","",268,[[],["u"]]],[11,"to_owned","","",268,[[["self"]],["t"]]],[11,"clone_into","","",268,[[["self"],["t"]]]],[11,"try_from","","",268,[[["u"]],["result"]]],[11,"try_into","","",268,[[],["result"]]],[11,"borrow","","",268,[[["self"]],["t"]]],[11,"borrow_mut","","",268,[[["self"]],["t"]]],[11,"type_id","","",268,[[["self"]],["typeid"]]],[11,"peek","","",269,[[["cursor"]],["bool"]]],[11,"display","","",269,[[],["str"]]],[11,"span","","",269,[[["self"]],["span"]]],[11,"from","","",269,[[["t"]],["t"]]],[11,"into","","",269,[[],["u"]]],[11,"to_owned","","",269,[[["self"]],["t"]]],[11,"clone_into","","",269,[[["self"],["t"]]]],[11,"try_from","","",269,[[["u"]],["result"]]],[11,"try_into","","",269,[[],["result"]]],[11,"borrow","","",269,[[["self"]],["t"]]],[11,"borrow_mut","","",269,[[["self"]],["t"]]],[11,"type_id","","",269,[[["self"]],["typeid"]]],[11,"peek","","",270,[[["cursor"]],["bool"]]],[11,"display","","",270,[[],["str"]]],[11,"span","","",270,[[["self"]],["span"]]],[11,"from","","",270,[[["t"]],["t"]]],[11,"into","","",270,[[],["u"]]],[11,"to_owned","","",270,[[["self"]],["t"]]],[11,"clone_into","","",270,[[["self"],["t"]]]],[11,"try_from","","",270,[[["u"]],["result"]]],[11,"try_into","","",270,[[],["result"]]],[11,"borrow","","",270,[[["self"]],["t"]]],[11,"borrow_mut","","",270,[[["self"]],["t"]]],[11,"type_id","","",270,[[["self"]],["typeid"]]],[11,"peek","","",271,[[["cursor"]],["bool"]]],[11,"display","","",271,[[],["str"]]],[11,"span","","",271,[[["self"]],["span"]]],[11,"from","","",271,[[["t"]],["t"]]],[11,"into","","",271,[[],["u"]]],[11,"to_owned","","",271,[[["self"]],["t"]]],[11,"clone_into","","",271,[[["self"],["t"]]]],[11,"try_from","","",271,[[["u"]],["result"]]],[11,"try_into","","",271,[[],["result"]]],[11,"borrow","","",271,[[["self"]],["t"]]],[11,"borrow_mut","","",271,[[["self"]],["t"]]],[11,"type_id","","",271,[[["self"]],["typeid"]]],[11,"peek","","",272,[[["cursor"]],["bool"]]],[11,"display","","",272,[[],["str"]]],[11,"span","","",272,[[["self"]],["span"]]],[11,"from","","",272,[[["t"]],["t"]]],[11,"into","","",272,[[],["u"]]],[11,"to_owned","","",272,[[["self"]],["t"]]],[11,"clone_into","","",272,[[["self"],["t"]]]],[11,"try_from","","",272,[[["u"]],["result"]]],[11,"try_into","","",272,[[],["result"]]],[11,"borrow","","",272,[[["self"]],["t"]]],[11,"borrow_mut","","",272,[[["self"]],["t"]]],[11,"type_id","","",272,[[["self"]],["typeid"]]],[11,"peek","","",273,[[["cursor"]],["bool"]]],[11,"display","","",273,[[],["str"]]],[11,"span","","",273,[[["self"]],["span"]]],[11,"from","","",273,[[["t"]],["t"]]],[11,"into","","",273,[[],["u"]]],[11,"to_owned","","",273,[[["self"]],["t"]]],[11,"clone_into","","",273,[[["self"],["t"]]]],[11,"try_from","","",273,[[["u"]],["result"]]],[11,"try_into","","",273,[[],["result"]]],[11,"borrow","","",273,[[["self"]],["t"]]],[11,"borrow_mut","","",273,[[["self"]],["t"]]],[11,"type_id","","",273,[[["self"]],["typeid"]]],[11,"peek","","",274,[[["cursor"]],["bool"]]],[11,"display","","",274,[[],["str"]]],[11,"span","","",274,[[["self"]],["span"]]],[11,"from","","",274,[[["t"]],["t"]]],[11,"into","","",274,[[],["u"]]],[11,"to_owned","","",274,[[["self"]],["t"]]],[11,"clone_into","","",274,[[["self"],["t"]]]],[11,"try_from","","",274,[[["u"]],["result"]]],[11,"try_into","","",274,[[],["result"]]],[11,"borrow","","",274,[[["self"]],["t"]]],[11,"borrow_mut","","",274,[[["self"]],["t"]]],[11,"type_id","","",274,[[["self"]],["typeid"]]],[11,"peek","","",275,[[["cursor"]],["bool"]]],[11,"display","","",275,[[],["str"]]],[11,"span","","",275,[[["self"]],["span"]]],[11,"from","","",275,[[["t"]],["t"]]],[11,"into","","",275,[[],["u"]]],[11,"to_owned","","",275,[[["self"]],["t"]]],[11,"clone_into","","",275,[[["self"],["t"]]]],[11,"try_from","","",275,[[["u"]],["result"]]],[11,"try_into","","",275,[[],["result"]]],[11,"borrow","","",275,[[["self"]],["t"]]],[11,"borrow_mut","","",275,[[["self"]],["t"]]],[11,"type_id","","",275,[[["self"]],["typeid"]]],[11,"peek","","",276,[[["cursor"]],["bool"]]],[11,"display","","",276,[[],["str"]]],[11,"span","","",276,[[["self"]],["span"]]],[11,"from","","",276,[[["t"]],["t"]]],[11,"into","","",276,[[],["u"]]],[11,"to_owned","","",276,[[["self"]],["t"]]],[11,"clone_into","","",276,[[["self"],["t"]]]],[11,"try_from","","",276,[[["u"]],["result"]]],[11,"try_into","","",276,[[],["result"]]],[11,"borrow","","",276,[[["self"]],["t"]]],[11,"borrow_mut","","",276,[[["self"]],["t"]]],[11,"type_id","","",276,[[["self"]],["typeid"]]],[11,"peek","","",277,[[["cursor"]],["bool"]]],[11,"display","","",277,[[],["str"]]],[11,"span","","",277,[[["self"]],["span"]]],[11,"from","","",277,[[["t"]],["t"]]],[11,"into","","",277,[[],["u"]]],[11,"to_owned","","",277,[[["self"]],["t"]]],[11,"clone_into","","",277,[[["self"],["t"]]]],[11,"try_from","","",277,[[["u"]],["result"]]],[11,"try_into","","",277,[[],["result"]]],[11,"borrow","","",277,[[["self"]],["t"]]],[11,"borrow_mut","","",277,[[["self"]],["t"]]],[11,"type_id","","",277,[[["self"]],["typeid"]]],[11,"peek","","",278,[[["cursor"]],["bool"]]],[11,"display","","",278,[[],["str"]]],[11,"span","","",278,[[["self"]],["span"]]],[11,"from","","",278,[[["t"]],["t"]]],[11,"into","","",278,[[],["u"]]],[11,"to_owned","","",278,[[["self"]],["t"]]],[11,"clone_into","","",278,[[["self"],["t"]]]],[11,"try_from","","",278,[[["u"]],["result"]]],[11,"try_into","","",278,[[],["result"]]],[11,"borrow","","",278,[[["self"]],["t"]]],[11,"borrow_mut","","",278,[[["self"]],["t"]]],[11,"type_id","","",278,[[["self"]],["typeid"]]],[11,"peek","","",279,[[["cursor"]],["bool"]]],[11,"display","","",279,[[],["str"]]],[11,"from","","",279,[[["t"]],["t"]]],[11,"into","","",279,[[],["u"]]],[11,"to_owned","","",279,[[["self"]],["t"]]],[11,"clone_into","","",279,[[["self"],["t"]]]],[11,"try_from","","",279,[[["u"]],["result"]]],[11,"try_into","","",279,[[],["result"]]],[11,"borrow","","",279,[[["self"]],["t"]]],[11,"borrow_mut","","",279,[[["self"]],["t"]]],[11,"type_id","","",279,[[["self"]],["typeid"]]],[11,"peek","","",280,[[["cursor"]],["bool"]]],[11,"display","","",280,[[],["str"]]],[11,"from","","",280,[[["t"]],["t"]]],[11,"into","","",280,[[],["u"]]],[11,"to_owned","","",280,[[["self"]],["t"]]],[11,"clone_into","","",280,[[["self"],["t"]]]],[11,"try_from","","",280,[[["u"]],["result"]]],[11,"try_into","","",280,[[],["result"]]],[11,"borrow","","",280,[[["self"]],["t"]]],[11,"borrow_mut","","",280,[[["self"]],["t"]]],[11,"type_id","","",280,[[["self"]],["typeid"]]],[11,"peek","","",281,[[["cursor"]],["bool"]]],[11,"display","","",281,[[],["str"]]],[11,"from","","",281,[[["t"]],["t"]]],[11,"into","","",281,[[],["u"]]],[11,"to_owned","","",281,[[["self"]],["t"]]],[11,"clone_into","","",281,[[["self"],["t"]]]],[11,"try_from","","",281,[[["u"]],["result"]]],[11,"try_into","","",281,[[],["result"]]],[11,"borrow","","",281,[[["self"]],["t"]]],[11,"borrow_mut","","",281,[[["self"]],["t"]]],[11,"type_id","","",281,[[["self"]],["typeid"]]],[11,"peek","","",282,[[["cursor"]],["bool"]]],[11,"display","","",282,[[],["str"]]],[11,"from","","",282,[[["t"]],["t"]]],[11,"into","","",282,[[],["u"]]],[11,"to_owned","","",282,[[["self"]],["t"]]],[11,"clone_into","","",282,[[["self"],["t"]]]],[11,"try_from","","",282,[[["u"]],["result"]]],[11,"try_into","","",282,[[],["result"]]],[11,"borrow","","",282,[[["self"]],["t"]]],[11,"borrow_mut","","",282,[[["self"]],["t"]]],[11,"type_id","","",282,[[["self"]],["typeid"]]],[11,"from","syn::buffer","",290,[[["t"]],["t"]]],[11,"into","","",290,[[],["u"]]],[11,"try_from","","",290,[[["u"]],["result"]]],[11,"try_into","","",290,[[],["result"]]],[11,"borrow","","",290,[[["self"]],["t"]]],[11,"borrow_mut","","",290,[[["self"]],["t"]]],[11,"type_id","","",290,[[["self"]],["typeid"]]],[11,"from","","",291,[[["t"]],["t"]]],[11,"into","","",291,[[],["u"]]],[11,"to_owned","","",291,[[["self"]],["t"]]],[11,"clone_into","","",291,[[["self"],["t"]]]],[11,"try_from","","",291,[[["u"]],["result"]]],[11,"try_into","","",291,[[],["result"]]],[11,"borrow","","",291,[[["self"]],["t"]]],[11,"borrow_mut","","",291,[[["self"]],["t"]]],[11,"type_id","","",291,[[["self"]],["typeid"]]],[11,"span","syn::punctuated","",294,[[["self"]],["span"]]],[11,"from","","",294,[[["t"]],["t"]]],[11,"into","","",294,[[],["u"]]],[11,"into_iter","","",294,[[],["i"]]],[11,"to_owned","","",294,[[["self"]],["t"]]],[11,"clone_into","","",294,[[["self"],["t"]]]],[11,"try_from","","",294,[[["u"]],["result"]]],[11,"try_into","","",294,[[],["result"]]],[11,"borrow","","",294,[[["self"]],["t"]]],[11,"borrow_mut","","",294,[[["self"]],["t"]]],[11,"type_id","","",294,[[["self"]],["typeid"]]],[11,"from","","",307,[[["t"]],["t"]]],[11,"into","","",307,[[],["u"]]],[11,"into_iter","","",307,[[],["i"]]],[11,"to_owned","","",307,[[["self"]],["t"]]],[11,"clone_into","","",307,[[["self"],["t"]]]],[11,"try_from","","",307,[[["u"]],["result"]]],[11,"try_into","","",307,[[],["result"]]],[11,"borrow","","",307,[[["self"]],["t"]]],[11,"borrow_mut","","",307,[[["self"]],["t"]]],[11,"type_id","","",307,[[["self"]],["typeid"]]],[11,"from","","",308,[[["t"]],["t"]]],[11,"into","","",308,[[],["u"]]],[11,"into_iter","","",308,[[],["i"]]],[11,"try_from","","",308,[[["u"]],["result"]]],[11,"try_into","","",308,[[],["result"]]],[11,"borrow","","",308,[[["self"]],["t"]]],[11,"borrow_mut","","",308,[[["self"]],["t"]]],[11,"type_id","","",308,[[["self"]],["typeid"]]],[11,"from","","",309,[[["t"]],["t"]]],[11,"into","","",309,[[],["u"]]],[11,"into_iter","","",309,[[],["i"]]],[11,"to_owned","","",309,[[["self"]],["t"]]],[11,"clone_into","","",309,[[["self"],["t"]]]],[11,"try_from","","",309,[[["u"]],["result"]]],[11,"try_into","","",309,[[],["result"]]],[11,"borrow","","",309,[[["self"]],["t"]]],[11,"borrow_mut","","",309,[[["self"]],["t"]]],[11,"type_id","","",309,[[["self"]],["typeid"]]],[11,"from","","",310,[[["t"]],["t"]]],[11,"into","","",310,[[],["u"]]],[11,"into_iter","","",310,[[],["i"]]],[11,"to_owned","","",310,[[["self"]],["t"]]],[11,"clone_into","","",310,[[["self"],["t"]]]],[11,"try_from","","",310,[[["u"]],["result"]]],[11,"try_into","","",310,[[],["result"]]],[11,"borrow","","",310,[[["self"]],["t"]]],[11,"borrow_mut","","",310,[[["self"]],["t"]]],[11,"type_id","","",310,[[["self"]],["typeid"]]],[11,"from","","",311,[[["t"]],["t"]]],[11,"into","","",311,[[],["u"]]],[11,"into_iter","","",311,[[],["i"]]],[11,"to_owned","","",311,[[["self"]],["t"]]],[11,"clone_into","","",311,[[["self"],["t"]]]],[11,"try_from","","",311,[[["u"]],["result"]]],[11,"try_into","","",311,[[],["result"]]],[11,"borrow","","",311,[[["self"]],["t"]]],[11,"borrow_mut","","",311,[[["self"]],["t"]]],[11,"type_id","","",311,[[["self"]],["typeid"]]],[11,"from","","",312,[[["t"]],["t"]]],[11,"into","","",312,[[],["u"]]],[11,"into_iter","","",312,[[],["i"]]],[11,"try_from","","",312,[[["u"]],["result"]]],[11,"try_into","","",312,[[],["result"]]],[11,"borrow","","",312,[[["self"]],["t"]]],[11,"borrow_mut","","",312,[[["self"]],["t"]]],[11,"type_id","","",312,[[["self"]],["typeid"]]],[11,"span","","",293,[[["self"]],["span"]]],[11,"from","","",293,[[["t"]],["t"]]],[11,"into","","",293,[[],["u"]]],[11,"to_owned","","",293,[[["self"]],["t"]]],[11,"clone_into","","",293,[[["self"],["t"]]]],[11,"try_from","","",293,[[["u"]],["result"]]],[11,"try_into","","",293,[[],["result"]]],[11,"borrow","","",293,[[["self"]],["t"]]],[11,"borrow_mut","","",293,[[["self"]],["t"]]],[11,"type_id","","",293,[[["self"]],["typeid"]]],[11,"from","syn::parse","",313,[[["t"]],["t"]]],[11,"into","","",313,[[],["u"]]],[11,"try_from","","",313,[[["u"]],["result"]]],[11,"try_into","","",313,[[],["result"]]],[11,"borrow","","",313,[[["self"]],["t"]]],[11,"borrow_mut","","",313,[[["self"]],["t"]]],[11,"type_id","","",313,[[["self"]],["typeid"]]],[11,"from","","",302,[[["t"]],["t"]]],[11,"into","","",302,[[],["u"]]],[11,"to_string","","",302,[[["self"]],["string"]]],[11,"try_from","","",302,[[["u"]],["result"]]],[11,"try_into","","",302,[[],["result"]]],[11,"borrow","","",302,[[["self"]],["t"]]],[11,"borrow_mut","","",302,[[["self"]],["t"]]],[11,"type_id","","",302,[[["self"]],["typeid"]]],[11,"from","","",301,[[["t"]],["t"]]],[11,"into","","",301,[[],["u"]]],[11,"to_owned","","",301,[[["self"]],["t"]]],[11,"clone_into","","",301,[[["self"],["t"]]]],[11,"try_from","","",301,[[["u"]],["result"]]],[11,"try_into","","",301,[[],["result"]]],[11,"borrow","","",301,[[["self"]],["t"]]],[11,"borrow_mut","","",301,[[["self"]],["t"]]],[11,"type_id","","",301,[[["self"]],["typeid"]]],[11,"from","","",314,[[["t"]],["t"]]],[11,"into","","",314,[[],["u"]]],[11,"try_from","","",314,[[["u"]],["result"]]],[11,"try_into","","",314,[[],["result"]]],[11,"borrow","","",314,[[["self"]],["t"]]],[11,"borrow_mut","","",314,[[["self"]],["t"]]],[11,"type_id","","",314,[[["self"]],["typeid"]]],[11,"fmt","syn","",304,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",304,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"cmp","","",304,[[["self"],["ident"]],["ordering"]]],[11,"clone","","",304,[[["self"]],["ident"]]],[11,"eq","","",304,[[["self"],["ident"]],["bool"]]],[11,"eq","","",304,[[["t"],["self"]],["bool"]]],[11,"hash","","",304,[[["self"],["h"]]]],[11,"partial_cmp","","",304,[[["self"],["ident"]],[["option",["ordering"]],["ordering"]]]],[11,"to_tokens","","",304,[[["tokenstream"],["self"]]]],[11,"span","","",304,[[["self"]],[["option",["span"]],["span"]]]],[11,"fmt","","",304,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"peek","","",100,[[["cursor"]],["bool"]]],[11,"display","","",100,[[],["str"]]],[11,"peek","","",168,[[["cursor"]],["bool"]]],[11,"display","","",168,[[],["str"]]],[11,"peek","","",284,[[["cursor"]],["bool"]]],[11,"display","","",284,[[],["str"]]],[11,"peek","","",285,[[["cursor"]],["bool"]]],[11,"display","","",285,[[],["str"]]],[11,"peek","","",286,[[["cursor"]],["bool"]]],[11,"display","","",286,[[],["str"]]],[11,"peek","","",287,[[["cursor"]],["bool"]]],[11,"display","","",287,[[],["str"]]],[11,"peek","","",288,[[["cursor"]],["bool"]]],[11,"display","","",288,[[],["str"]]],[11,"peek","","",289,[[["cursor"]],["bool"]]],[11,"display","","",289,[[],["str"]]],[11,"peek","","",101,[[["cursor"]],["bool"]]],[11,"display","","",101,[[],["str"]]],[11,"peek","syn::token","",180,[[["cursor"]],["bool"]]],[11,"display","","",180,[[],["str"]]],[11,"peek","","",281,[[["cursor"]],["bool"]]],[11,"display","","",281,[[],["str"]]],[11,"peek","","",279,[[["cursor"]],["bool"]]],[11,"display","","",279,[[],["str"]]],[11,"peek","","",280,[[["cursor"]],["bool"]]],[11,"display","","",280,[[],["str"]]],[11,"peek","","",282,[[["cursor"]],["bool"]]],[11,"display","","",282,[[],["str"]]],[11,"peek","","",181,[[["cursor"]],["bool"]]],[11,"display","","",181,[[],["str"]]],[11,"peek","","",182,[[["cursor"]],["bool"]]],[11,"display","","",182,[[],["str"]]],[11,"peek","","",183,[[["cursor"]],["bool"]]],[11,"display","","",183,[[],["str"]]],[11,"peek","","",184,[[["cursor"]],["bool"]]],[11,"display","","",184,[[],["str"]]],[11,"peek","","",185,[[["cursor"]],["bool"]]],[11,"display","","",185,[[],["str"]]],[11,"peek","","",186,[[["cursor"]],["bool"]]],[11,"display","","",186,[[],["str"]]],[11,"peek","","",187,[[["cursor"]],["bool"]]],[11,"display","","",187,[[],["str"]]],[11,"peek","","",188,[[["cursor"]],["bool"]]],[11,"display","","",188,[[],["str"]]],[11,"peek","","",189,[[["cursor"]],["bool"]]],[11,"display","","",189,[[],["str"]]],[11,"peek","","",190,[[["cursor"]],["bool"]]],[11,"display","","",190,[[],["str"]]],[11,"peek","","",191,[[["cursor"]],["bool"]]],[11,"display","","",191,[[],["str"]]],[11,"peek","","",192,[[["cursor"]],["bool"]]],[11,"display","","",192,[[],["str"]]],[11,"peek","","",193,[[["cursor"]],["bool"]]],[11,"display","","",193,[[],["str"]]],[11,"peek","","",194,[[["cursor"]],["bool"]]],[11,"display","","",194,[[],["str"]]],[11,"peek","","",195,[[["cursor"]],["bool"]]],[11,"display","","",195,[[],["str"]]],[11,"peek","","",196,[[["cursor"]],["bool"]]],[11,"display","","",196,[[],["str"]]],[11,"peek","","",197,[[["cursor"]],["bool"]]],[11,"display","","",197,[[],["str"]]],[11,"peek","","",198,[[["cursor"]],["bool"]]],[11,"display","","",198,[[],["str"]]],[11,"peek","","",199,[[["cursor"]],["bool"]]],[11,"display","","",199,[[],["str"]]],[11,"peek","","",200,[[["cursor"]],["bool"]]],[11,"display","","",200,[[],["str"]]],[11,"peek","","",201,[[["cursor"]],["bool"]]],[11,"display","","",201,[[],["str"]]],[11,"peek","","",202,[[["cursor"]],["bool"]]],[11,"display","","",202,[[],["str"]]],[11,"peek","","",203,[[["cursor"]],["bool"]]],[11,"display","","",203,[[],["str"]]],[11,"peek","","",204,[[["cursor"]],["bool"]]],[11,"display","","",204,[[],["str"]]],[11,"peek","","",205,[[["cursor"]],["bool"]]],[11,"display","","",205,[[],["str"]]],[11,"peek","","",206,[[["cursor"]],["bool"]]],[11,"display","","",206,[[],["str"]]],[11,"peek","","",207,[[["cursor"]],["bool"]]],[11,"display","","",207,[[],["str"]]],[11,"peek","","",208,[[["cursor"]],["bool"]]],[11,"display","","",208,[[],["str"]]],[11,"peek","","",209,[[["cursor"]],["bool"]]],[11,"display","","",209,[[],["str"]]],[11,"peek","","",210,[[["cursor"]],["bool"]]],[11,"display","","",210,[[],["str"]]],[11,"peek","","",211,[[["cursor"]],["bool"]]],[11,"display","","",211,[[],["str"]]],[11,"peek","","",212,[[["cursor"]],["bool"]]],[11,"display","","",212,[[],["str"]]],[11,"peek","","",213,[[["cursor"]],["bool"]]],[11,"display","","",213,[[],["str"]]],[11,"peek","","",214,[[["cursor"]],["bool"]]],[11,"display","","",214,[[],["str"]]],[11,"peek","","",215,[[["cursor"]],["bool"]]],[11,"display","","",215,[[],["str"]]],[11,"peek","","",216,[[["cursor"]],["bool"]]],[11,"display","","",216,[[],["str"]]],[11,"peek","","",217,[[["cursor"]],["bool"]]],[11,"display","","",217,[[],["str"]]],[11,"peek","","",218,[[["cursor"]],["bool"]]],[11,"display","","",218,[[],["str"]]],[11,"peek","","",219,[[["cursor"]],["bool"]]],[11,"display","","",219,[[],["str"]]],[11,"peek","","",220,[[["cursor"]],["bool"]]],[11,"display","","",220,[[],["str"]]],[11,"peek","","",221,[[["cursor"]],["bool"]]],[11,"display","","",221,[[],["str"]]],[11,"peek","","",222,[[["cursor"]],["bool"]]],[11,"display","","",222,[[],["str"]]],[11,"peek","","",223,[[["cursor"]],["bool"]]],[11,"display","","",223,[[],["str"]]],[11,"peek","","",224,[[["cursor"]],["bool"]]],[11,"display","","",224,[[],["str"]]],[11,"peek","","",225,[[["cursor"]],["bool"]]],[11,"display","","",225,[[],["str"]]],[11,"peek","","",226,[[["cursor"]],["bool"]]],[11,"display","","",226,[[],["str"]]],[11,"peek","","",227,[[["cursor"]],["bool"]]],[11,"display","","",227,[[],["str"]]],[11,"peek","","",228,[[["cursor"]],["bool"]]],[11,"display","","",228,[[],["str"]]],[11,"peek","","",229,[[["cursor"]],["bool"]]],[11,"display","","",229,[[],["str"]]],[11,"peek","","",230,[[["cursor"]],["bool"]]],[11,"display","","",230,[[],["str"]]],[11,"peek","","",231,[[["cursor"]],["bool"]]],[11,"display","","",231,[[],["str"]]],[11,"peek","","",232,[[["cursor"]],["bool"]]],[11,"display","","",232,[[],["str"]]],[11,"peek","","",233,[[["cursor"]],["bool"]]],[11,"display","","",233,[[],["str"]]],[11,"peek","","",234,[[["cursor"]],["bool"]]],[11,"display","","",234,[[],["str"]]],[11,"peek","","",235,[[["cursor"]],["bool"]]],[11,"display","","",235,[[],["str"]]],[11,"peek","","",236,[[["cursor"]],["bool"]]],[11,"display","","",236,[[],["str"]]],[11,"peek","","",237,[[["cursor"]],["bool"]]],[11,"display","","",237,[[],["str"]]],[11,"peek","","",238,[[["cursor"]],["bool"]]],[11,"display","","",238,[[],["str"]]],[11,"peek","","",239,[[["cursor"]],["bool"]]],[11,"display","","",239,[[],["str"]]],[11,"peek","","",240,[[["cursor"]],["bool"]]],[11,"display","","",240,[[],["str"]]],[11,"peek","","",241,[[["cursor"]],["bool"]]],[11,"display","","",241,[[],["str"]]],[11,"peek","","",242,[[["cursor"]],["bool"]]],[11,"display","","",242,[[],["str"]]],[11,"peek","","",243,[[["cursor"]],["bool"]]],[11,"display","","",243,[[],["str"]]],[11,"peek","","",244,[[["cursor"]],["bool"]]],[11,"display","","",244,[[],["str"]]],[11,"peek","","",245,[[["cursor"]],["bool"]]],[11,"display","","",245,[[],["str"]]],[11,"peek","","",246,[[["cursor"]],["bool"]]],[11,"display","","",246,[[],["str"]]],[11,"peek","","",247,[[["cursor"]],["bool"]]],[11,"display","","",247,[[],["str"]]],[11,"peek","","",248,[[["cursor"]],["bool"]]],[11,"display","","",248,[[],["str"]]],[11,"peek","","",249,[[["cursor"]],["bool"]]],[11,"display","","",249,[[],["str"]]],[11,"peek","","",250,[[["cursor"]],["bool"]]],[11,"display","","",250,[[],["str"]]],[11,"peek","","",251,[[["cursor"]],["bool"]]],[11,"display","","",251,[[],["str"]]],[11,"peek","","",252,[[["cursor"]],["bool"]]],[11,"display","","",252,[[],["str"]]],[11,"peek","","",253,[[["cursor"]],["bool"]]],[11,"display","","",253,[[],["str"]]],[11,"peek","","",254,[[["cursor"]],["bool"]]],[11,"display","","",254,[[],["str"]]],[11,"peek","","",255,[[["cursor"]],["bool"]]],[11,"display","","",255,[[],["str"]]],[11,"peek","","",256,[[["cursor"]],["bool"]]],[11,"display","","",256,[[],["str"]]],[11,"peek","","",257,[[["cursor"]],["bool"]]],[11,"display","","",257,[[],["str"]]],[11,"peek","","",258,[[["cursor"]],["bool"]]],[11,"display","","",258,[[],["str"]]],[11,"peek","","",259,[[["cursor"]],["bool"]]],[11,"display","","",259,[[],["str"]]],[11,"peek","","",260,[[["cursor"]],["bool"]]],[11,"display","","",260,[[],["str"]]],[11,"peek","","",261,[[["cursor"]],["bool"]]],[11,"display","","",261,[[],["str"]]],[11,"peek","","",262,[[["cursor"]],["bool"]]],[11,"display","","",262,[[],["str"]]],[11,"peek","","",263,[[["cursor"]],["bool"]]],[11,"display","","",263,[[],["str"]]],[11,"peek","","",264,[[["cursor"]],["bool"]]],[11,"display","","",264,[[],["str"]]],[11,"peek","","",265,[[["cursor"]],["bool"]]],[11,"display","","",265,[[],["str"]]],[11,"peek","","",266,[[["cursor"]],["bool"]]],[11,"display","","",266,[[],["str"]]],[11,"peek","","",267,[[["cursor"]],["bool"]]],[11,"display","","",267,[[],["str"]]],[11,"peek","","",268,[[["cursor"]],["bool"]]],[11,"display","","",268,[[],["str"]]],[11,"peek","","",269,[[["cursor"]],["bool"]]],[11,"display","","",269,[[],["str"]]],[11,"peek","","",270,[[["cursor"]],["bool"]]],[11,"display","","",270,[[],["str"]]],[11,"peek","","",271,[[["cursor"]],["bool"]]],[11,"display","","",271,[[],["str"]]],[11,"peek","","",272,[[["cursor"]],["bool"]]],[11,"display","","",272,[[],["str"]]],[11,"peek","","",273,[[["cursor"]],["bool"]]],[11,"display","","",273,[[],["str"]]],[11,"peek","","",274,[[["cursor"]],["bool"]]],[11,"display","","",274,[[],["str"]]],[11,"peek","","",275,[[["cursor"]],["bool"]]],[11,"display","","",275,[[],["str"]]],[11,"peek","","",276,[[["cursor"]],["bool"]]],[11,"display","","",276,[[],["str"]]],[11,"peek","","",277,[[["cursor"]],["bool"]]],[11,"display","","",277,[[],["str"]]],[11,"peek","","",278,[[["cursor"]],["bool"]]],[11,"display","","",278,[[],["str"]]],[11,"peek","syn","",304,[[["cursor"]],["bool"]]],[11,"display","","",304,[[],["str"]]],[11,"parse_any","","",304,[[["parsestream"]],["result"]]],[11,"unraw","","",304,[[["self"]],["ident"]]],[11,"advance_to","syn::parse","",302,[[["self"]]]],[11,"parse","syn::token","",180,[[["parsestream"]],["result"]]],[11,"parse","","",181,[[["parsestream"]],["result"]]],[11,"parse","","",182,[[["parsestream"]],["result"]]],[11,"parse","","",183,[[["parsestream"]],["result"]]],[11,"parse","","",184,[[["parsestream"]],["result"]]],[11,"parse","","",185,[[["parsestream"]],["result"]]],[11,"parse","","",186,[[["parsestream"]],["result"]]],[11,"parse","","",187,[[["parsestream"]],["result"]]],[11,"parse","","",188,[[["parsestream"]],["result"]]],[11,"parse","","",189,[[["parsestream"]],["result"]]],[11,"parse","","",190,[[["parsestream"]],["result"]]],[11,"parse","","",191,[[["parsestream"]],["result"]]],[11,"parse","","",192,[[["parsestream"]],["result"]]],[11,"parse","","",193,[[["parsestream"]],["result"]]],[11,"parse","","",194,[[["parsestream"]],["result"]]],[11,"parse","","",195,[[["parsestream"]],["result"]]],[11,"parse","","",196,[[["parsestream"]],["result"]]],[11,"parse","","",197,[[["parsestream"]],["result"]]],[11,"parse","","",198,[[["parsestream"]],["result"]]],[11,"parse","","",199,[[["parsestream"]],["result"]]],[11,"parse","","",200,[[["parsestream"]],["result"]]],[11,"parse","","",201,[[["parsestream"]],["result"]]],[11,"parse","","",202,[[["parsestream"]],["result"]]],[11,"parse","","",203,[[["parsestream"]],["result"]]],[11,"parse","","",204,[[["parsestream"]],["result"]]],[11,"parse","","",205,[[["parsestream"]],["result"]]],[11,"parse","","",206,[[["parsestream"]],["result"]]],[11,"parse","","",207,[[["parsestream"]],["result"]]],[11,"parse","","",208,[[["parsestream"]],["result"]]],[11,"parse","","",209,[[["parsestream"]],["result"]]],[11,"parse","","",210,[[["parsestream"]],["result"]]],[11,"parse","","",211,[[["parsestream"]],["result"]]],[11,"parse","","",212,[[["parsestream"]],["result"]]],[11,"parse","","",213,[[["parsestream"]],["result"]]],[11,"parse","","",214,[[["parsestream"]],["result"]]],[11,"parse","","",215,[[["parsestream"]],["result"]]],[11,"parse","","",216,[[["parsestream"]],["result"]]],[11,"parse","","",217,[[["parsestream"]],["result"]]],[11,"parse","","",218,[[["parsestream"]],["result"]]],[11,"parse","","",219,[[["parsestream"]],["result"]]],[11,"parse","","",220,[[["parsestream"]],["result"]]],[11,"parse","","",221,[[["parsestream"]],["result"]]],[11,"parse","","",222,[[["parsestream"]],["result"]]],[11,"parse","","",223,[[["parsestream"]],["result"]]],[11,"parse","","",224,[[["parsestream"]],["result"]]],[11,"parse","","",225,[[["parsestream"]],["result"]]],[11,"parse","","",226,[[["parsestream"]],["result"]]],[11,"parse","","",227,[[["parsestream"]],["result"]]],[11,"parse","","",228,[[["parsestream"]],["result"]]],[11,"parse","","",229,[[["parsestream"]],["result"]]],[11,"parse","","",230,[[["parsestream"]],["result"]]],[11,"parse","","",231,[[["parsestream"]],["result"]]],[11,"parse","","",232,[[["parsestream"]],["result"]]],[11,"parse","","",233,[[["parsestream"]],["result"]]],[11,"parse","","",234,[[["parsestream"]],["result"]]],[11,"parse","","",235,[[["parsestream"]],["result"]]],[11,"parse","","",236,[[["parsestream"]],["result"]]],[11,"parse","","",237,[[["parsestream"]],["result"]]],[11,"parse","","",238,[[["parsestream"]],["result"]]],[11,"parse","","",239,[[["parsestream"]],["result"]]],[11,"parse","","",240,[[["parsestream"]],["result"]]],[11,"parse","","",241,[[["parsestream"]],["result"]]],[11,"parse","","",242,[[["parsestream"]],["result"]]],[11,"parse","","",243,[[["parsestream"]],["result"]]],[11,"parse","","",244,[[["parsestream"]],["result"]]],[11,"parse","","",245,[[["parsestream"]],["result"]]],[11,"parse","","",246,[[["parsestream"]],["result"]]],[11,"parse","","",247,[[["parsestream"]],["result"]]],[11,"parse","","",248,[[["parsestream"]],["result"]]],[11,"parse","","",249,[[["parsestream"]],["result"]]],[11,"parse","","",250,[[["parsestream"]],["result"]]],[11,"parse","","",251,[[["parsestream"]],["result"]]],[11,"parse","","",252,[[["parsestream"]],["result"]]],[11,"parse","","",253,[[["parsestream"]],["result"]]],[11,"parse","","",254,[[["parsestream"]],["result"]]],[11,"parse","","",255,[[["parsestream"]],["result"]]],[11,"parse","","",256,[[["parsestream"]],["result"]]],[11,"parse","","",257,[[["parsestream"]],["result"]]],[11,"parse","","",258,[[["parsestream"]],["result"]]],[11,"parse","","",259,[[["parsestream"]],["result"]]],[11,"parse","","",260,[[["parsestream"]],["result"]]],[11,"parse","","",261,[[["parsestream"]],["result"]]],[11,"parse","","",262,[[["parsestream"]],["result"]]],[11,"parse","","",263,[[["parsestream"]],["result"]]],[11,"parse","","",264,[[["parsestream"]],["result"]]],[11,"parse","","",265,[[["parsestream"]],["result"]]],[11,"parse","","",266,[[["parsestream"]],["result"]]],[11,"parse","","",267,[[["parsestream"]],["result"]]],[11,"parse","","",268,[[["parsestream"]],["result"]]],[11,"parse","","",269,[[["parsestream"]],["result"]]],[11,"parse","","",270,[[["parsestream"]],["result"]]],[11,"parse","","",271,[[["parsestream"]],["result"]]],[11,"parse","","",272,[[["parsestream"]],["result"]]],[11,"parse","","",273,[[["parsestream"]],["result"]]],[11,"parse","","",274,[[["parsestream"]],["result"]]],[11,"parse","","",275,[[["parsestream"]],["result"]]],[11,"parse","","",276,[[["parsestream"]],["result"]]],[11,"parse","","",277,[[["parsestream"]],["result"]]],[11,"parse","","",278,[[["parsestream"]],["result"]]],[11,"parse","syn","",304,[[["parsestream"]],["result"]]],[11,"parse","","",150,[[["parsestream"]],["result"]]],[11,"parse","","",1,[[["parsestream"]],["result"]]],[11,"parse","","",2,[[["parsestream"]],["result"]]],[11,"parse","","",151,[[["parsestream"]],["result"]]],[11,"parse","","",6,[[["parsestream"]],["result"]]],[11,"parse","","",4,[[["parsestream"]],["result"]]],[11,"parse","","",5,[[["parsestream"]],["result"]]],[11,"parse","","",153,[[["parsestream"]],["result"]]],[11,"parse","","",156,[[["parsestream"]],["result"]]],[11,"parse","","",33,[[["parsestream"]],["result"]]],[11,"parse","","",30,[[["parsestream"]],["result"]]],[11,"parse","","",28,[[["parsestream"]],["result"]]],[11,"parse","","",34,[[["parsestream"]],["result"]]],[11,"parse","","",36,[[["parsestream"]],["result"]]],[11,"parse","","",21,[[["parsestream"]],["result"]]],[11,"parse","","",14,[[["parsestream"]],["result"]]],[11,"parse","","",23,[[["parsestream"]],["result"]]],[11,"parse","","",37,[[["parsestream"]],["result"]]],[11,"parse","","",47,[[["parsestream"]],["result"]]],[11,"parse","","",19,[[["parsestream"]],["result"]]],[11,"parse","","",49,[[["parsestream"]],["result"]]],[11,"parse","","",24,[[["parsestream"]],["result"]]],[11,"parse","","",48,[[["parsestream"]],["result"]]],[11,"parse","","",32,[[["parsestream"]],["result"]]],[11,"parse","","",25,[[["parsestream"]],["result"]]],[11,"parse","","",50,[[["parsestream"]],["result"]]],[11,"parse","","",20,[[["parsestream"]],["result"]]],[11,"parse","","",15,[[["parsestream"]],["result"]]],[11,"parse","","",16,[[["parsestream"]],["result"]]],[11,"parse","","",27,[[["parsestream"]],["result"]]],[11,"parse","","",31,[[["parsestream"]],["result"]]],[11,"parse","","",40,[[["parsestream"]],["result"]]],[11,"parse","","",41,[[["parsestream"]],["result"]]],[11,"parse","","",22,[[["parsestream"]],["result"]]],[11,"parse","","",26,[[["parsestream"]],["result"]]],[11,"parse","","",43,[[["parsestream"]],["result"]]],[11,"parse","","",35,[[["parsestream"]],["result"]]],[11,"parse","","",44,[[["parsestream"]],["result"]]],[11,"parse","","",42,[[["parsestream"]],["result"]]],[11,"parse","","",38,[[["parsestream"]],["result"]]],[11,"parse","","",45,[[["parsestream"]],["result"]]],[11,"parse","","",17,[[["parsestream"]],["result"]]],[11,"parse","","",46,[[["parsestream"]],["result"]]],[11,"parse","","",52,[[["parsestream"]],["result"]]],[11,"parse","","",51,[[["parsestream"]],["result"]]],[11,"parse","","",12,[[["parsestream"]],["result"]]],[11,"parse","","",11,[[["parsestream"]],["result"]]],[11,"parse","","",155,[[["parsestream"]],["result"]]],[11,"parse","","",39,[[["parsestream"]],["result"]]],[11,"parse","","",157,[[["parsestream"]],["result"]]],[11,"parse","","",10,[[["parsestream"]],[["arm"],["result",["arm"]]]]],[11,"parse","","",53,[[["parsestream"]],["result"]]],[11,"parse","","",56,[[["parsestream"]],["result"]]],[11,"parse","","",158,[[["parsestream"]],["result"]]],[11,"parse","","",57,[[["parsestream"]],["result"]]],[11,"parse","","",54,[[["parsestream"]],["result"]]],[11,"parse","","",62,[[["parsestream"]],["result"]]],[11,"parse","","",160,[[["parsestream"]],["result"]]],[11,"parse","","",61,[[["parsestream"]],["result"]]],[11,"parse","","",159,[[["parsestream"]],["result"]]],[11,"parse","","",55,[[["parsestream"]],["result"]]],[11,"parse","","",63,[[["parsestream"]],["result"]]],[11,"parse","","",161,[[["parsestream"]],["result"]]],[11,"parse","","",165,[[["parsestream"]],["result"]]],[11,"parse","","",78,[[["parsestream"]],["result"]]],[11,"parse","","",79,[[["parsestream"]],["result"]]],[11,"parse","","",74,[[["parsestream"]],["result"]]],[11,"parse","","",87,[[["parsestream"]],["result"]]],[11,"parse","","",167,[[["parsestream"]],[["result",["usetree"]],["usetree"]]]],[11,"parse","","",81,[[["parsestream"]],["result"]]],[11,"parse","","",72,[[["parsestream"]],["result"]]],[11,"parse","","",75,[[["parsestream"]],["result"]]],[11,"parse","","",162,[[["parsestream"]],["result"]]],[11,"parse","","",88,[[["parsestream"]],["result"]]],[11,"parse","","",80,[[["parsestream"]],["result"]]],[11,"parse","","",76,[[["parsestream"]],["result"]]],[11,"parse","","",163,[[["parsestream"]],["result"]]],[11,"parse","","",64,[[["parsestream"]],["result"]]],[11,"parse","","",66,[[["parsestream"]],["result"]]],[11,"parse","","",67,[[["parsestream"]],["result"]]],[11,"parse","","",65,[[["parsestream"]],["result"]]],[11,"parse","","",85,[[["parsestream"]],["result"]]],[11,"parse","","",82,[[["parsestream"]],["result"]]],[11,"parse","","",73,[[["parsestream"]],["result"]]],[11,"parse","","",86,[[["parsestream"]],["result"]]],[11,"parse","","",83,[[["parsestream"]],["result"]]],[11,"parse","","",84,[[["parsestream"]],["result"]]],[11,"parse","","",166,[[["parsestream"]],["result"]]],[11,"parse","","",90,[[["parsestream"]],["result"]]],[11,"parse","","",92,[[["parsestream"]],["result"]]],[11,"parse","","",93,[[["parsestream"]],["result"]]],[11,"parse","","",91,[[["parsestream"]],["result"]]],[11,"parse","","",77,[[["parsestream"]],["result"]]],[11,"parse","","",164,[[["parsestream"]],["result"]]],[11,"parse","","",68,[[["parsestream"]],["result"]]],[11,"parse","","",70,[[["parsestream"]],["result"]]],[11,"parse","","",71,[[["parsestream"]],["result"]]],[11,"parse","","",69,[[["parsestream"]],["result"]]],[11,"parse","","",99,[[["parsestream"]],["result"]]],[11,"parse","","",100,[[["parsestream"]],["result"]]],[11,"parse","","",168,[[["parsestream"]],["result"]]],[11,"parse","","",284,[[["parsestream"]],["result"]]],[11,"parse","","",285,[[["parsestream"]],["result"]]],[11,"parse","","",286,[[["parsestream"]],["result"]]],[11,"parse","","",287,[[["parsestream"]],["result"]]],[11,"parse","","",288,[[["parsestream"]],["result"]]],[11,"parse","","",289,[[["parsestream"]],["result"]]],[11,"parse","","",101,[[["parsestream"]],["result"]]],[11,"parse","","",102,[[["parsestream"]],["result"]]],[11,"parse","","",106,[[["parsestream"]],["result"]]],[11,"parse","","",172,[[["parsestream"]],["result"]]],[11,"parse","","",173,[[["parsestream"]],["result"]]],[11,"parse","","",107,[[["parsestream"]],["result"]]],[11,"parse","","",174,[[["parsestream"]],["result"]]],[11,"parse","","",176,[[["parsestream"]],["result"]]],[11,"parse","","",122,[[["parsestream"]],["result"]]],[11,"parse","","",111,[[["parsestream"]],["result"]]],[11,"parse","","",120,[[["parsestream"]],["result"]]],[11,"parse","","",121,[[["parsestream"]],["result"]]],[11,"parse","","",112,[[["parsestream"]],["result"]]],[11,"parse","","",117,[[["parsestream"]],["result"]]],[11,"parse","","",115,[[["parsestream"]],["result"]]],[11,"parse","","",124,[[["parsestream"]],["result"]]],[11,"parse","","",116,[[["parsestream"]],["result"]]],[11,"parse","","",119,[[["parsestream"]],["result"]]],[11,"parse","","",175,[[["parsestream"]],["result"]]],[11,"parse","","",123,[[["parsestream"]],["result"]]],[11,"parse","","",114,[[["parsestream"]],["result"]]],[11,"parse","","",113,[[["parsestream"]],["result"]]],[11,"parse","","",118,[[["parsestream"]],["result"]]],[11,"parse","","",110,[[["parsestream"]],["result"]]],[11,"parse","","",109,[[["parsestream"]],["result"]]],[11,"parse","","",177,[[["parsestream"]],["result"]]],[11,"parse","","",146,[[["parsestream"]],["result"]]],[11,"parse","","",178,[[["parsestream"]],["result"]]],[11,"parse","","",142,[[["parsestream"]],["result"]]],[11,"parse","","",145,[[["parsestream"]],["result"]]],[11,"parse","","",147,[[["parsestream"]],["result"]]],[11,"parse","","",143,[[["parsestream"]],["result"]]],[11,"parse","","",144,[[["parsestream"]],["result"]]],[11,"parse","syn::parse","",314,[[["parsestream"]],["result"]]],[11,"drop","","",302,[[["self"]]]],[11,"from","syn","",304,[[["selfvalue"]],["ident"]]],[11,"from","","",304,[[["selftype"]],["ident"]]],[11,"from","","",304,[[["super"]],["ident"]]],[11,"from","","",304,[[["crate"]],["ident"]]],[11,"from","","",304,[[["extern"]],["ident"]]],[11,"from","","",304,[[["underscore"]],["ident"]]],[11,"from","","",150,[[["path"]],["meta"]]],[11,"from","","",150,[[["metalist"]],["meta"]]],[11,"from","","",150,[[["metanamevalue"]],["meta"]]],[11,"from","","",151,[[["meta"]],["nestedmeta"]]],[11,"from","","",151,[[["lit"]],["nestedmeta"]]],[11,"from","","",152,[[["fieldsnamed"]],["fields"]]],[11,"from","","",152,[[["fieldsunnamed"]],["fields"]]],[11,"from","","",153,[[["vispublic"]],["visibility"]]],[11,"from","","",153,[[["viscrate"]],["visibility"]]],[11,"from","","",153,[[["visrestricted"]],["visibility"]]],[11,"from","","",156,[[["exprarray"]],["expr"]]],[11,"from","","",156,[[["exprassign"]],["expr"]]],[11,"from","","",156,[[["exprassignop"]],["expr"]]],[11,"from","","",156,[[["exprasync"]],["expr"]]],[11,"from","","",156,[[["exprawait"]],["expr"]]],[11,"from","","",156,[[["exprbinary"]],["expr"]]],[11,"from","","",156,[[["exprblock"]],["expr"]]],[11,"from","","",156,[[["exprbox"]],["expr"]]],[11,"from","","",156,[[["exprbreak"]],["expr"]]],[11,"from","","",156,[[["exprcall"]],["expr"]]],[11,"from","","",156,[[["exprcast"]],["expr"]]],[11,"from","","",156,[[["exprclosure"]],["expr"]]],[11,"from","","",156,[[["exprcontinue"]],["expr"]]],[11,"from","","",156,[[["exprfield"]],["expr"]]],[11,"from","","",156,[[["exprforloop"]],["expr"]]],[11,"from","","",156,[[["exprgroup"]],["expr"]]],[11,"from","","",156,[[["exprif"]],["expr"]]],[11,"from","","",156,[[["exprindex"]],["expr"]]],[11,"from","","",156,[[["exprlet"]],["expr"]]],[11,"from","","",156,[[["exprlit"]],["expr"]]],[11,"from","","",156,[[["exprloop"]],["expr"]]],[11,"from","","",156,[[["exprmacro"]],["expr"]]],[11,"from","","",156,[[["exprmatch"]],["expr"]]],[11,"from","","",156,[[["exprmethodcall"]],["expr"]]],[11,"from","","",156,[[["exprparen"]],["expr"]]],[11,"from","","",156,[[["exprpath"]],["expr"]]],[11,"from","","",156,[[["exprrange"]],["expr"]]],[11,"from","","",156,[[["exprreference"]],["expr"]]],[11,"from","","",156,[[["exprrepeat"]],["expr"]]],[11,"from","","",156,[[["exprreturn"]],["expr"]]],[11,"from","","",156,[[["exprstruct"]],["expr"]]],[11,"from","","",156,[[["exprtry"]],["expr"]]],[11,"from","","",156,[[["exprtryblock"]],["expr"]]],[11,"from","","",156,[[["exprtuple"]],["expr"]]],[11,"from","","",156,[[["exprtype"]],["expr"]]],[11,"from","","",156,[[["exprunary"]],["expr"]]],[11,"from","","",156,[[["exprunsafe"]],["expr"]]],[11,"from","","",156,[[["exprwhile"]],["expr"]]],[11,"from","","",156,[[["expryield"]],["expr"]]],[11,"from","","",53,[[["usize"]],["index"]]],[11,"from","","",158,[[["typeparam"]],["genericparam"]]],[11,"from","","",158,[[["lifetimedef"]],["genericparam"]]],[11,"from","","",158,[[["constparam"]],["genericparam"]]],[11,"from","","",62,[[["ident"]],["self"]]],[11,"from","","",160,[[["traitbound"]],["typeparambound"]]],[11,"from","","",160,[[["lifetime"]],["typeparambound"]]],[11,"from","","",161,[[["predicatetype"]],["wherepredicate"]]],[11,"from","","",161,[[["predicatelifetime"]],["wherepredicate"]]],[11,"from","","",161,[[["predicateeq"]],["wherepredicate"]]],[11,"from","","",165,[[["itemconst"]],["item"]]],[11,"from","","",165,[[["itemenum"]],["item"]]],[11,"from","","",165,[[["itemexterncrate"]],["item"]]],[11,"from","","",165,[[["itemfn"]],["item"]]],[11,"from","","",165,[[["itemforeignmod"]],["item"]]],[11,"from","","",165,[[["itemimpl"]],["item"]]],[11,"from","","",165,[[["itemmacro"]],["item"]]],[11,"from","","",165,[[["itemmacro2"]],["item"]]],[11,"from","","",165,[[["itemmod"]],["item"]]],[11,"from","","",165,[[["itemstatic"]],["item"]]],[11,"from","","",165,[[["itemstruct"]],["item"]]],[11,"from","","",165,[[["itemtrait"]],["item"]]],[11,"from","","",165,[[["itemtraitalias"]],["item"]]],[11,"from","","",165,[[["itemtype"]],["item"]]],[11,"from","","",165,[[["itemunion"]],["item"]]],[11,"from","","",165,[[["itemuse"]],["item"]]],[11,"from","","",165,[[["deriveinput"]],["item"]]],[11,"from","","",106,[[["itemstruct"]],["deriveinput"]]],[11,"from","","",106,[[["itemenum"]],["deriveinput"]]],[11,"from","","",106,[[["itemunion"]],["deriveinput"]]],[11,"from","","",167,[[["usepath"]],["usetree"]]],[11,"from","","",167,[[["usename"]],["usetree"]]],[11,"from","","",167,[[["userename"]],["usetree"]]],[11,"from","","",167,[[["useglob"]],["usetree"]]],[11,"from","","",167,[[["usegroup"]],["usetree"]]],[11,"from","","",163,[[["foreignitemfn"]],["foreignitem"]]],[11,"from","","",163,[[["foreignitemstatic"]],["foreignitem"]]],[11,"from","","",163,[[["foreignitemtype"]],["foreignitem"]]],[11,"from","","",163,[[["foreignitemmacro"]],["foreignitem"]]],[11,"from","","",166,[[["traititemconst"]],["traititem"]]],[11,"from","","",166,[[["traititemmethod"]],["traititem"]]],[11,"from","","",166,[[["traititemtype"]],["traititem"]]],[11,"from","","",166,[[["traititemmacro"]],["traititem"]]],[11,"from","","",164,[[["implitemconst"]],["implitem"]]],[11,"from","","",164,[[["implitemmethod"]],["implitem"]]],[11,"from","","",164,[[["implitemtype"]],["implitem"]]],[11,"from","","",164,[[["implitemmacro"]],["implitem"]]],[11,"from","","",162,[[["receiver"]],["fnarg"]]],[11,"from","","",162,[[["pattype"]],["fnarg"]]],[11,"from","","",168,[[["litstr"]],["lit"]]],[11,"from","","",168,[[["litbytestr"]],["lit"]]],[11,"from","","",168,[[["litbyte"]],["lit"]]],[11,"from","","",168,[[["litchar"]],["lit"]]],[11,"from","","",168,[[["litint"]],["lit"]]],[11,"from","","",168,[[["litfloat"]],["lit"]]],[11,"from","","",168,[[["litbool"]],["lit"]]],[11,"from","","",288,[[["literal"]],["self"]]],[11,"from","","",289,[[["literal"]],["self"]]],[11,"from","","",171,[[["datastruct"]],["data"]]],[11,"from","","",171,[[["dataenum"]],["data"]]],[11,"from","","",171,[[["dataunion"]],["data"]]],[11,"from","","",176,[[["typearray"]],["type"]]],[11,"from","","",176,[[["typebarefn"]],["type"]]],[11,"from","","",176,[[["typegroup"]],["type"]]],[11,"from","","",176,[[["typeimpltrait"]],["type"]]],[11,"from","","",176,[[["typeinfer"]],["type"]]],[11,"from","","",176,[[["typemacro"]],["type"]]],[11,"from","","",176,[[["typenever"]],["type"]]],[11,"from","","",176,[[["typeparen"]],["type"]]],[11,"from","","",176,[[["typepath"]],["type"]]],[11,"from","","",176,[[["typeptr"]],["type"]]],[11,"from","","",176,[[["typereference"]],["type"]]],[11,"from","","",176,[[["typeslice"]],["type"]]],[11,"from","","",176,[[["typetraitobject"]],["type"]]],[11,"from","","",176,[[["typetuple"]],["type"]]],[11,"from","","",177,[[["patbox"]],["pat"]]],[11,"from","","",177,[[["patident"]],["pat"]]],[11,"from","","",177,[[["patlit"]],["pat"]]],[11,"from","","",177,[[["patmacro"]],["pat"]]],[11,"from","","",177,[[["pator"]],["pat"]]],[11,"from","","",177,[[["patpath"]],["pat"]]],[11,"from","","",177,[[["patrange"]],["pat"]]],[11,"from","","",177,[[["patreference"]],["pat"]]],[11,"from","","",177,[[["patrest"]],["pat"]]],[11,"from","","",177,[[["patslice"]],["pat"]]],[11,"from","","",177,[[["patstruct"]],["pat"]]],[11,"from","","",177,[[["pattuple"]],["pat"]]],[11,"from","","",177,[[["pattuplestruct"]],["pat"]]],[11,"from","","",177,[[["pattype"]],["pat"]]],[11,"from","","",177,[[["patwild"]],["pat"]]],[11,"from","","",146,[[["t"]],["self"]]],[11,"from","","",147,[[["t"]],["self"]]],[11,"from","","",303,[[["lexerror"]],["self"]]],[11,"next_back","syn::punctuated","",307,[[["self"]],["option"]]],[11,"next_back","","",308,[[["self"]],["option"]]],[11,"next_back","","",309,[[["self"]],["option"]]],[11,"next_back","","",310,[[["self"]],["option"]]],[11,"next_back","","",311,[[["self"]],["option"]]],[11,"next_back","","",312,[[["self"]],["option"]]],[11,"len","","",307,[[["self"]],["usize"]]],[11,"len","","",308,[[["self"]],["usize"]]],[11,"len","","",309,[[["self"]],["usize"]]],[11,"len","","",310,[[["self"]],["usize"]]],[11,"len","","",311,[[["self"]],["usize"]]],[11,"len","","",312,[[["self"]],["usize"]]],[11,"extend","","",294,[[["self"],["intoiterator"]]]],[11,"extend","","",294,[[["self"],["intoiterator"]]]],[11,"into_iter","syn","",152,[[]]],[11,"into_iter","syn::punctuated","",294,[[]]],[11,"into_iter","syn","",303,[[]]],[11,"next","syn::punctuated","",307,[[["self"]],["option"]]],[11,"size_hint","","",307,[[["self"]]]],[11,"next","","",308,[[["self"]],["option"]]],[11,"size_hint","","",308,[[["self"]]]],[11,"next","","",309,[[["self"]],["option"]]],[11,"size_hint","","",309,[[["self"]]]],[11,"next","","",310,[[["self"]],["option"]]],[11,"size_hint","","",310,[[["self"]]]],[11,"next","","",311,[[["self"]],["option"]]],[11,"size_hint","","",311,[[["self"]]]],[11,"next","","",312,[[["self"]],["option"]]],[11,"size_hint","","",312,[[["self"]]]],[11,"clone","syn::token","",180,[[["self"]],["underscore"]]],[11,"clone","","",181,[[["self"]],["abstract"]]],[11,"clone","","",182,[[["self"]],["as"]]],[11,"clone","","",183,[[["self"]],["async"]]],[11,"clone","","",184,[[["self"]],["auto"]]],[11,"clone","","",185,[[["self"]],["await"]]],[11,"clone","","",186,[[["self"]],["become"]]],[11,"clone","","",187,[[["self"]],["box"]]],[11,"clone","","",188,[[["self"]],["break"]]],[11,"clone","","",189,[[["self"]],["const"]]],[11,"clone","","",190,[[["self"]],["continue"]]],[11,"clone","","",191,[[["self"]],["crate"]]],[11,"clone","","",192,[[["self"]],["default"]]],[11,"clone","","",193,[[["self"]],["do"]]],[11,"clone","","",194,[[["self"]],["dyn"]]],[11,"clone","","",195,[[["self"]],["else"]]],[11,"clone","","",196,[[["self"]],["enum"]]],[11,"clone","","",197,[[["self"]],["extern"]]],[11,"clone","","",198,[[["self"]],["final"]]],[11,"clone","","",199,[[["self"]],["fn"]]],[11,"clone","","",200,[[["self"]],["for"]]],[11,"clone","","",201,[[["self"]],["if"]]],[11,"clone","","",202,[[["self"]],["impl"]]],[11,"clone","","",203,[[["self"]],["in"]]],[11,"clone","","",204,[[["self"]],["let"]]],[11,"clone","","",205,[[["self"]],["loop"]]],[11,"clone","","",206,[[["self"]],["macro"]]],[11,"clone","","",207,[[["self"]],["match"]]],[11,"clone","","",208,[[["self"]],["mod"]]],[11,"clone","","",209,[[["self"]],["move"]]],[11,"clone","","",210,[[["self"]],["mut"]]],[11,"clone","","",211,[[["self"]],["override"]]],[11,"clone","","",212,[[["self"]],["priv"]]],[11,"clone","","",213,[[["self"]],["pub"]]],[11,"clone","","",214,[[["self"]],["ref"]]],[11,"clone","","",215,[[["self"]],["return"]]],[11,"clone","","",216,[[["self"]],["selftype"]]],[11,"clone","","",217,[[["self"]],["selfvalue"]]],[11,"clone","","",218,[[["self"]],["static"]]],[11,"clone","","",219,[[["self"]],["struct"]]],[11,"clone","","",220,[[["self"]],["super"]]],[11,"clone","","",221,[[["self"]],["trait"]]],[11,"clone","","",222,[[["self"]],["try"]]],[11,"clone","","",223,[[["self"]],["type"]]],[11,"clone","","",224,[[["self"]],["typeof"]]],[11,"clone","","",225,[[["self"]],["union"]]],[11,"clone","","",226,[[["self"]],["unsafe"]]],[11,"clone","","",227,[[["self"]],["unsized"]]],[11,"clone","","",228,[[["self"]],["use"]]],[11,"clone","","",229,[[["self"]],["virtual"]]],[11,"clone","","",230,[[["self"]],["where"]]],[11,"clone","","",231,[[["self"]],["while"]]],[11,"clone","","",232,[[["self"]],["yield"]]],[11,"clone","","",233,[[["self"]],["add"]]],[11,"clone","","",234,[[["self"]],["addeq"]]],[11,"clone","","",235,[[["self"]],["and"]]],[11,"clone","","",236,[[["self"]],["andand"]]],[11,"clone","","",237,[[["self"]],["andeq"]]],[11,"clone","","",238,[[["self"]],["at"]]],[11,"clone","","",239,[[["self"]],["bang"]]],[11,"clone","","",240,[[["self"]],["caret"]]],[11,"clone","","",241,[[["self"]],["careteq"]]],[11,"clone","","",242,[[["self"]],["colon"]]],[11,"clone","","",243,[[["self"]],["colon2"]]],[11,"clone","","",244,[[["self"]],["comma"]]],[11,"clone","","",245,[[["self"]],["div"]]],[11,"clone","","",246,[[["self"]],["diveq"]]],[11,"clone","","",247,[[["self"]],["dollar"]]],[11,"clone","","",248,[[["self"]],["dot"]]],[11,"clone","","",249,[[["self"]],["dot2"]]],[11,"clone","","",250,[[["self"]],["dot3"]]],[11,"clone","","",251,[[["self"]],["dotdoteq"]]],[11,"clone","","",252,[[["self"]],["eq"]]],[11,"clone","","",253,[[["self"]],["eqeq"]]],[11,"clone","","",254,[[["self"]],["ge"]]],[11,"clone","","",255,[[["self"]],["gt"]]],[11,"clone","","",256,[[["self"]],["le"]]],[11,"clone","","",257,[[["self"]],["lt"]]],[11,"clone","","",258,[[["self"]],["muleq"]]],[11,"clone","","",259,[[["self"]],["ne"]]],[11,"clone","","",260,[[["self"]],["or"]]],[11,"clone","","",261,[[["self"]],["oreq"]]],[11,"clone","","",262,[[["self"]],["oror"]]],[11,"clone","","",263,[[["self"]],["pound"]]],[11,"clone","","",264,[[["self"]],["question"]]],[11,"clone","","",265,[[["self"]],["rarrow"]]],[11,"clone","","",266,[[["self"]],["larrow"]]],[11,"clone","","",267,[[["self"]],["rem"]]],[11,"clone","","",268,[[["self"]],["remeq"]]],[11,"clone","","",269,[[["self"]],["fatarrow"]]],[11,"clone","","",270,[[["self"]],["semi"]]],[11,"clone","","",271,[[["self"]],["shl"]]],[11,"clone","","",272,[[["self"]],["shleq"]]],[11,"clone","","",273,[[["self"]],["shr"]]],[11,"clone","","",274,[[["self"]],["shreq"]]],[11,"clone","","",275,[[["self"]],["star"]]],[11,"clone","","",276,[[["self"]],["sub"]]],[11,"clone","","",277,[[["self"]],["subeq"]]],[11,"clone","","",278,[[["self"]],["tilde"]]],[11,"clone","","",279,[[["self"]],["brace"]]],[11,"clone","","",280,[[["self"]],["bracket"]]],[11,"clone","","",281,[[["self"]],["paren"]]],[11,"clone","","",282,[[["self"]],["group"]]],[11,"clone","syn","",0,[[["self"]],["attribute"]]],[11,"clone","","",149,[[["self"]],["attrstyle"]]],[11,"clone","","",150,[[["self"]],["meta"]]],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"clone","","",151,[[["self"]],["nestedmeta"]]],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"clone","","",152,[[["self"]],["fields"]]],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"clone","","",3,[[["self"]],["field"]]],[11,"clone","","",153,[[["self"]],["visibility"]]],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"clone","","",156,[[["self"]],["expr"]]],[11,"clone","","",14,[[["self"]],["exprarray"]]],[11,"clone","","",15,[[["self"]],["exprassign"]]],[11,"clone","","",16,[[["self"]],["exprassignop"]]],[11,"clone","","",17,[[["self"]],["exprasync"]]],[11,"clone","","",18,[[["self"]],["exprawait"]]],[11,"clone","","",19,[[["self"]],["exprbinary"]]],[11,"clone","","",20,[[["self"]],["exprblock"]]],[11,"clone","","",21,[[["self"]],["exprbox"]]],[11,"clone","","",22,[[["self"]],["exprbreak"]]],[11,"clone","","",23,[[["self"]],["exprcall"]]],[11,"clone","","",24,[[["self"]],["exprcast"]]],[11,"clone","","",25,[[["self"]],["exprclosure"]]],[11,"clone","","",26,[[["self"]],["exprcontinue"]]],[11,"clone","","",27,[[["self"]],["exprfield"]]],[11,"clone","","",28,[[["self"]],["exprforloop"]]],[11,"clone","","",29,[[["self"]],["exprgroup"]]],[11,"clone","","",30,[[["self"]],["exprif"]]],[11,"clone","","",31,[[["self"]],["exprindex"]]],[11,"clone","","",32,[[["self"]],["exprlet"]]],[11,"clone","","",33,[[["self"]],["exprlit"]]],[11,"clone","","",34,[[["self"]],["exprloop"]]],[11,"clone","","",35,[[["self"]],["exprmacro"]]],[11,"clone","","",36,[[["self"]],["exprmatch"]]],[11,"clone","","",37,[[["self"]],["exprmethodcall"]]],[11,"clone","","",38,[[["self"]],["exprparen"]]],[11,"clone","","",39,[[["self"]],["exprpath"]]],[11,"clone","","",40,[[["self"]],["exprrange"]]],[11,"clone","","",41,[[["self"]],["exprreference"]]],[11,"clone","","",42,[[["self"]],["exprrepeat"]]],[11,"clone","","",43,[[["self"]],["exprreturn"]]],[11,"clone","","",44,[[["self"]],["exprstruct"]]],[11,"clone","","",45,[[["self"]],["exprtry"]]],[11,"clone","","",46,[[["self"]],["exprtryblock"]]],[11,"clone","","",47,[[["self"]],["exprtuple"]]],[11,"clone","","",48,[[["self"]],["exprtype"]]],[11,"clone","","",49,[[["self"]],["exprunary"]]],[11,"clone","","",50,[[["self"]],["exprunsafe"]]],[11,"clone","","",51,[[["self"]],["exprwhile"]]],[11,"clone","","",52,[[["self"]],["expryield"]]],[11,"clone","","",157,[[["self"]],["member"]]],[11,"clone","","",53,[[["self"]],["index"]]],[11,"clone","","",13,[[["self"]],["methodturbofish"]]],[11,"clone","","",154,[[["self"]],["genericmethodargument"]]],[11,"clone","","",11,[[["self"]],["fieldvalue"]]],[11,"clone","","",12,[[["self"]],["label"]]],[11,"clone","","",10,[[["self"]],["arm"]]],[11,"clone","","",155,[[["self"]],["rangelimits"]]],[11,"clone","","",56,[[["self"]],["generics"]]],[11,"clone","","",158,[[["self"]],["genericparam"]]],[11,"clone","","",62,[[["self"]],["typeparam"]]],[11,"clone","","",57,[[["self"]],["lifetimedef"]]],[11,"clone","","",55,[[["self"]],["constparam"]]],[11,"clone","","",305,[[["self"]],["implgenerics"]]],[11,"clone","","",283,[[["self"]],["typegenerics"]]],[11,"clone","","",306,[[["self"]],["turbofish"]]],[11,"clone","","",54,[[["self"]],["boundlifetimes"]]],[11,"clone","","",160,[[["self"]],["typeparambound"]]],[11,"clone","","",61,[[["self"]],["traitbound"]]],[11,"clone","","",159,[[["self"]],["traitboundmodifier"]]],[11,"clone","","",63,[[["self"]],["whereclause"]]],[11,"clone","","",161,[[["self"]],["wherepredicate"]]],[11,"clone","","",60,[[["self"]],["predicatetype"]]],[11,"clone","","",59,[[["self"]],["predicatelifetime"]]],[11,"clone","","",58,[[["self"]],["predicateeq"]]],[11,"clone","","",165,[[["self"]],["item"]]],[11,"clone","","",72,[[["self"]],["itemconst"]]],[11,"clone","","",73,[[["self"]],["itemenum"]]],[11,"clone","","",74,[[["self"]],["itemexterncrate"]]],[11,"clone","","",75,[[["self"]],["itemfn"]]],[11,"clone","","",76,[[["self"]],["itemforeignmod"]]],[11,"clone","","",77,[[["self"]],["itemimpl"]]],[11,"clone","","",78,[[["self"]],["itemmacro"]]],[11,"clone","","",79,[[["self"]],["itemmacro2"]]],[11,"clone","","",80,[[["self"]],["itemmod"]]],[11,"clone","","",81,[[["self"]],["itemstatic"]]],[11,"clone","","",82,[[["self"]],["itemstruct"]]],[11,"clone","","",83,[[["self"]],["itemtrait"]]],[11,"clone","","",84,[[["self"]],["itemtraitalias"]]],[11,"clone","","",85,[[["self"]],["itemtype"]]],[11,"clone","","",86,[[["self"]],["itemunion"]]],[11,"clone","","",87,[[["self"]],["itemuse"]]],[11,"clone","","",167,[[["self"]],["usetree"]]],[11,"clone","","",97,[[["self"]],["usepath"]]],[11,"clone","","",96,[[["self"]],["usename"]]],[11,"clone","","",98,[[["self"]],["userename"]]],[11,"clone","","",94,[[["self"]],["useglob"]]],[11,"clone","","",95,[[["self"]],["usegroup"]]],[11,"clone","","",163,[[["self"]],["foreignitem"]]],[11,"clone","","",64,[[["self"]],["foreignitemfn"]]],[11,"clone","","",66,[[["self"]],["foreignitemstatic"]]],[11,"clone","","",67,[[["self"]],["foreignitemtype"]]],[11,"clone","","",65,[[["self"]],["foreignitemmacro"]]],[11,"clone","","",166,[[["self"]],["traititem"]]],[11,"clone","","",90,[[["self"]],["traititemconst"]]],[11,"clone","","",92,[[["self"]],["traititemmethod"]]],[11,"clone","","",93,[[["self"]],["traititemtype"]]],[11,"clone","","",91,[[["self"]],["traititemmacro"]]],[11,"clone","","",164,[[["self"]],["implitem"]]],[11,"clone","","",68,[[["self"]],["implitemconst"]]],[11,"clone","","",70,[[["self"]],["implitemmethod"]]],[11,"clone","","",71,[[["self"]],["implitemtype"]]],[11,"clone","","",69,[[["self"]],["implitemmacro"]]],[11,"clone","","",89,[[["self"]],["signature"]]],[11,"clone","","",162,[[["self"]],["fnarg"]]],[11,"clone","","",88,[[["self"]],["receiver"]]],[11,"clone","","",99,[[["self"]],["file"]]],[11,"clone","","",100,[[["self"]],["lifetime"]]],[11,"clone","","",168,[[["self"]],["lit"]]],[11,"clone","","",284,[[["self"]],["litstr"]]],[11,"clone","","",285,[[["self"]],["litbytestr"]]],[11,"clone","","",286,[[["self"]],["litbyte"]]],[11,"clone","","",287,[[["self"]],["litchar"]]],[11,"clone","","",288,[[["self"]],["litint"]]],[11,"clone","","",289,[[["self"]],["litfloat"]]],[11,"clone","","",101,[[["self"]],["litbool"]]],[11,"clone","","",169,[[["self"]],["strstyle"]]],[11,"clone","","",102,[[["self"]],["macro"]]],[11,"clone","","",170,[[["self"]],["macrodelimiter"]]],[11,"clone","","",106,[[["self"]],["deriveinput"]]],[11,"clone","","",171,[[["self"]],["data"]]],[11,"clone","","",104,[[["self"]],["datastruct"]]],[11,"clone","","",103,[[["self"]],["dataenum"]]],[11,"clone","","",105,[[["self"]],["dataunion"]]],[11,"clone","","",172,[[["self"]],["binop"]]],[11,"clone","","",173,[[["self"]],["unop"]]],[11,"clone","","",107,[[["self"]],["block"]]],[11,"clone","","",174,[[["self"]],["stmt"]]],[11,"clone","","",108,[[["self"]],["local"]]],[11,"clone","","",176,[[["self"]],["type"]]],[11,"clone","","",111,[[["self"]],["typearray"]]],[11,"clone","","",112,[[["self"]],["typebarefn"]]],[11,"clone","","",113,[[["self"]],["typegroup"]]],[11,"clone","","",114,[[["self"]],["typeimpltrait"]]],[11,"clone","","",115,[[["self"]],["typeinfer"]]],[11,"clone","","",116,[[["self"]],["typemacro"]]],[11,"clone","","",117,[[["self"]],["typenever"]]],[11,"clone","","",118,[[["self"]],["typeparen"]]],[11,"clone","","",119,[[["self"]],["typepath"]]],[11,"clone","","",120,[[["self"]],["typeptr"]]],[11,"clone","","",121,[[["self"]],["typereference"]]],[11,"clone","","",122,[[["self"]],["typeslice"]]],[11,"clone","","",123,[[["self"]],["typetraitobject"]]],[11,"clone","","",124,[[["self"]],["typetuple"]]],[11,"clone","","",109,[[["self"]],["abi"]]],[11,"clone","","",110,[[["self"]],["barefnarg"]]],[11,"clone","","",125,[[["self"]],["variadic"]]],[11,"clone","","",175,[[["self"]],["returntype"]]],[11,"clone","","",177,[[["self"]],["pat"]]],[11,"clone","","",127,[[["self"]],["patbox"]]],[11,"clone","","",128,[[["self"]],["patident"]]],[11,"clone","","",129,[[["self"]],["patlit"]]],[11,"clone","","",130,[[["self"]],["patmacro"]]],[11,"clone","","",131,[[["self"]],["pator"]]],[11,"clone","","",132,[[["self"]],["patpath"]]],[11,"clone","","",133,[[["self"]],["patrange"]]],[11,"clone","","",134,[[["self"]],["patreference"]]],[11,"clone","","",135,[[["self"]],["patrest"]]],[11,"clone","","",136,[[["self"]],["patslice"]]],[11,"clone","","",137,[[["self"]],["patstruct"]]],[11,"clone","","",138,[[["self"]],["pattuple"]]],[11,"clone","","",139,[[["self"]],["pattuplestruct"]]],[11,"clone","","",140,[[["self"]],["pattype"]]],[11,"clone","","",141,[[["self"]],["patwild"]]],[11,"clone","","",126,[[["self"]],["fieldpat"]]],[11,"clone","","",146,[[["self"]],["path"]]],[11,"clone","","",147,[[["self"]],["pathsegment"]]],[11,"clone","","",179,[[["self"]],["patharguments"]]],[11,"clone","","",178,[[["self"]],["genericargument"]]],[11,"clone","","",142,[[["self"]],["anglebracketedgenericarguments"]]],[11,"clone","","",143,[[["self"]],["binding"]]],[11,"clone","","",144,[[["self"]],["constraint"]]],[11,"clone","","",145,[[["self"]],["parenthesizedgenericarguments"]]],[11,"clone","","",148,[[["self"]],["qself"]]],[11,"clone","syn::buffer","",291,[[["self"]],["cursor"]]],[11,"clone","syn::punctuated","",294,[[["self"]],["punctuated"]]],[11,"clone","","",307,[[["self"]],["self"]]],[11,"clone","","",309,[[["self"]],["intopairs"]]],[11,"clone","","",310,[[["self"]],["intoiter"]]],[11,"clone","","",311,[[["self"]],["self"]]],[11,"clone","","",293,[[["self"]],["pair"]]],[11,"clone","syn::parse","",301,[[["self"]],["stepcursor"]]],[11,"clone","syn","",303,[[["self"]],["error"]]],[11,"default","syn::token","",180,[[],["self"]]],[11,"default","","",181,[[],["self"]]],[11,"default","","",182,[[],["self"]]],[11,"default","","",183,[[],["self"]]],[11,"default","","",184,[[],["self"]]],[11,"default","","",185,[[],["self"]]],[11,"default","","",186,[[],["self"]]],[11,"default","","",187,[[],["self"]]],[11,"default","","",188,[[],["self"]]],[11,"default","","",189,[[],["self"]]],[11,"default","","",190,[[],["self"]]],[11,"default","","",191,[[],["self"]]],[11,"default","","",192,[[],["self"]]],[11,"default","","",193,[[],["self"]]],[11,"default","","",194,[[],["self"]]],[11,"default","","",195,[[],["self"]]],[11,"default","","",196,[[],["self"]]],[11,"default","","",197,[[],["self"]]],[11,"default","","",198,[[],["self"]]],[11,"default","","",199,[[],["self"]]],[11,"default","","",200,[[],["self"]]],[11,"default","","",201,[[],["self"]]],[11,"default","","",202,[[],["self"]]],[11,"default","","",203,[[],["self"]]],[11,"default","","",204,[[],["self"]]],[11,"default","","",205,[[],["self"]]],[11,"default","","",206,[[],["self"]]],[11,"default","","",207,[[],["self"]]],[11,"default","","",208,[[],["self"]]],[11,"default","","",209,[[],["self"]]],[11,"default","","",210,[[],["self"]]],[11,"default","","",211,[[],["self"]]],[11,"default","","",212,[[],["self"]]],[11,"default","","",213,[[],["self"]]],[11,"default","","",214,[[],["self"]]],[11,"default","","",215,[[],["self"]]],[11,"default","","",216,[[],["self"]]],[11,"default","","",217,[[],["self"]]],[11,"default","","",218,[[],["self"]]],[11,"default","","",219,[[],["self"]]],[11,"default","","",220,[[],["self"]]],[11,"default","","",221,[[],["self"]]],[11,"default","","",222,[[],["self"]]],[11,"default","","",223,[[],["self"]]],[11,"default","","",224,[[],["self"]]],[11,"default","","",225,[[],["self"]]],[11,"default","","",226,[[],["self"]]],[11,"default","","",227,[[],["self"]]],[11,"default","","",228,[[],["self"]]],[11,"default","","",229,[[],["self"]]],[11,"default","","",230,[[],["self"]]],[11,"default","","",231,[[],["self"]]],[11,"default","","",232,[[],["self"]]],[11,"default","","",233,[[],["self"]]],[11,"default","","",234,[[],["self"]]],[11,"default","","",235,[[],["self"]]],[11,"default","","",236,[[],["self"]]],[11,"default","","",237,[[],["self"]]],[11,"default","","",238,[[],["self"]]],[11,"default","","",239,[[],["self"]]],[11,"default","","",240,[[],["self"]]],[11,"default","","",241,[[],["self"]]],[11,"default","","",242,[[],["self"]]],[11,"default","","",243,[[],["self"]]],[11,"default","","",244,[[],["self"]]],[11,"default","","",245,[[],["self"]]],[11,"default","","",246,[[],["self"]]],[11,"default","","",247,[[],["self"]]],[11,"default","","",248,[[],["self"]]],[11,"default","","",249,[[],["self"]]],[11,"default","","",250,[[],["self"]]],[11,"default","","",251,[[],["self"]]],[11,"default","","",252,[[],["self"]]],[11,"default","","",253,[[],["self"]]],[11,"default","","",254,[[],["self"]]],[11,"default","","",255,[[],["self"]]],[11,"default","","",256,[[],["self"]]],[11,"default","","",257,[[],["self"]]],[11,"default","","",258,[[],["self"]]],[11,"default","","",259,[[],["self"]]],[11,"default","","",260,[[],["self"]]],[11,"default","","",261,[[],["self"]]],[11,"default","","",262,[[],["self"]]],[11,"default","","",263,[[],["self"]]],[11,"default","","",264,[[],["self"]]],[11,"default","","",265,[[],["self"]]],[11,"default","","",266,[[],["self"]]],[11,"default","","",267,[[],["self"]]],[11,"default","","",268,[[],["self"]]],[11,"default","","",269,[[],["self"]]],[11,"default","","",270,[[],["self"]]],[11,"default","","",271,[[],["self"]]],[11,"default","","",272,[[],["self"]]],[11,"default","","",273,[[],["self"]]],[11,"default","","",274,[[],["self"]]],[11,"default","","",275,[[],["self"]]],[11,"default","","",276,[[],["self"]]],[11,"default","","",277,[[],["self"]]],[11,"default","","",278,[[],["self"]]],[11,"default","","",279,[[],["self"]]],[11,"default","","",280,[[],["self"]]],[11,"default","","",281,[[],["self"]]],[11,"default","","",282,[[],["self"]]],[11,"default","syn","",56,[[],["generics"]]],[11,"default","","",54,[[],["boundlifetimes"]]],[11,"default","","",179,[[],["self"]]],[11,"default","syn::punctuated","",294,[[],["self"]]],[11,"cmp","syn","",100,[[["self"],["lifetime"]],["ordering"]]],[11,"eq","","",157,[[["self"],["member"]],["bool"]]],[11,"ne","","",157,[[["self"],["member"]],["bool"]]],[11,"eq","","",53,[[["self"]],["bool"]]],[11,"eq","","",100,[[["self"],["lifetime"]],["bool"]]],[11,"eq","syn::buffer","",291,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",291,[[["self"],["cursor"]],["bool"]]],[11,"partial_cmp","syn","",100,[[["self"],["lifetime"]],[["ordering"],["option",["ordering"]]]]],[11,"deref","syn::token","",180,[[["self"]]]],[11,"deref","","",233,[[["self"]]]],[11,"deref","","",235,[[["self"]]]],[11,"deref","","",238,[[["self"]]]],[11,"deref","","",239,[[["self"]]]],[11,"deref","","",240,[[["self"]]]],[11,"deref","","",242,[[["self"]]]],[11,"deref","","",244,[[["self"]]]],[11,"deref","","",245,[[["self"]]]],[11,"deref","","",247,[[["self"]]]],[11,"deref","","",248,[[["self"]]]],[11,"deref","","",252,[[["self"]]]],[11,"deref","","",255,[[["self"]]]],[11,"deref","","",257,[[["self"]]]],[11,"deref","","",260,[[["self"]]]],[11,"deref","","",263,[[["self"]]]],[11,"deref","","",264,[[["self"]]]],[11,"deref","","",267,[[["self"]]]],[11,"deref","","",270,[[["self"]]]],[11,"deref","","",275,[[["self"]]]],[11,"deref","","",276,[[["self"]]]],[11,"deref","","",278,[[["self"]]]],[11,"deref","syn::parse","",301,[[["self"]]]],[11,"deref_mut","syn::token","",180,[[["self"]]]],[11,"deref_mut","","",233,[[["self"]]]],[11,"deref_mut","","",235,[[["self"]]]],[11,"deref_mut","","",238,[[["self"]]]],[11,"deref_mut","","",239,[[["self"]]]],[11,"deref_mut","","",240,[[["self"]]]],[11,"deref_mut","","",242,[[["self"]]]],[11,"deref_mut","","",244,[[["self"]]]],[11,"deref_mut","","",245,[[["self"]]]],[11,"deref_mut","","",247,[[["self"]]]],[11,"deref_mut","","",248,[[["self"]]]],[11,"deref_mut","","",252,[[["self"]]]],[11,"deref_mut","","",255,[[["self"]]]],[11,"deref_mut","","",257,[[["self"]]]],[11,"deref_mut","","",260,[[["self"]]]],[11,"deref_mut","","",263,[[["self"]]]],[11,"deref_mut","","",264,[[["self"]]]],[11,"deref_mut","","",267,[[["self"]]]],[11,"deref_mut","","",270,[[["self"]]]],[11,"deref_mut","","",275,[[["self"]]]],[11,"deref_mut","","",276,[[["self"]]]],[11,"deref_mut","","",278,[[["self"]]]],[11,"fmt","syn::parse","",302,[[["formatter"],["self"]],["result"]]],[11,"fmt","syn","",303,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",100,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",288,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",289,[[["formatter"],["self"]],["result"]]],[11,"fmt","syn::parse","",302,[[["formatter"],["self"]],["result"]]],[11,"fmt","syn","",303,[[["formatter"],["self"]],["result"]]],[11,"index","syn::punctuated","",294,[[["self"],["usize"]]]],[11,"index_mut","","",294,[[["self"],["usize"]]]],[11,"hash","syn","",157,[[["self"],["__h"]]]],[11,"hash","","",53,[[["self"],["h"]]]],[11,"hash","","",100,[[["self"],["h"]]]],[11,"from_iter","syn::punctuated","",294,[[["intoiterator"]],["self"]]],[11,"from_iter","","",294,[[["intoiterator"]],["self"]]],[11,"description","syn","",303,[[["self"]],["str"]]],[11,"to_tokens","syn::token","",180,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",181,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",182,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",183,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",184,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",185,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",186,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",187,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",188,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",189,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",190,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",191,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",192,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",193,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",194,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",195,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",196,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",197,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",198,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",199,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",200,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",201,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",202,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",203,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",204,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",205,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",206,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",207,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",208,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",209,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",210,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",211,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",212,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",213,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",214,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",215,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",216,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",217,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",218,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",219,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",220,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",221,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",222,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",223,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",224,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",225,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",226,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",227,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",228,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",229,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",230,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",231,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",232,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",233,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",234,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",235,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",236,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",237,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",238,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",239,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",240,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",241,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",242,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",243,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",244,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",245,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",246,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",247,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",248,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",249,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",250,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",251,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",252,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",253,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",254,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",255,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",256,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",257,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",258,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",259,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",260,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",261,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",262,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",263,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",264,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",265,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",266,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",267,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",268,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",269,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",270,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",271,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",272,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",273,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",274,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",275,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",276,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",277,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",278,[[["tokenstream"],["self"]]]],[11,"to_tokens","syn","",150,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",151,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",0,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",1,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",2,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",152,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",153,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",6,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",4,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",5,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",3,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",8,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",7,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",9,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",156,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",21,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",14,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",23,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",37,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",13,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",154,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",47,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",19,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",49,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",33,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",24,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",48,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",32,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",30,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",51,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",28,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",34,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",36,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",17,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",18,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",46,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",52,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",25,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",50,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",20,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",15,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",16,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",27,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",157,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",53,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",31,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",40,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",39,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",41,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",22,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",26,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",43,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",35,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",44,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",42,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",29,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",38,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",45,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",12,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",11,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",10,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",158,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",160,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",161,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",56,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",305,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",283,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",306,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",54,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",57,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",62,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",61,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",159,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",55,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",63,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",60,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",59,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",58,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",165,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",167,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",163,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",166,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",164,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",162,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",74,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",87,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",81,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",72,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",75,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",80,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",76,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",85,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",73,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",82,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",86,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",83,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",84,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",77,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",78,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",79,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",97,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",96,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",98,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",94,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",95,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",90,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",92,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",93,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",91,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",68,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",70,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",71,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",69,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",64,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",66,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",67,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",65,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",89,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",88,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",99,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",100,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",168,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",284,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",285,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",286,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",287,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",288,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",289,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",101,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",102,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",106,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",172,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",173,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",107,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",174,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",108,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",176,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",122,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",111,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",120,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",121,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",112,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",117,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",124,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",119,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",123,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",114,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",113,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",118,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",115,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",116,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",175,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",110,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",125,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",109,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",177,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",141,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",128,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",137,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",139,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",140,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",132,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",138,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",127,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",134,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",135,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",129,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",133,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",136,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",130,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",131,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",126,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",146,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",147,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",179,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",178,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",142,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",143,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",144,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",145,[[["tokenstream"],["self"]]]],[11,"to_tokens","syn::punctuated","",294,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",293,[[["tokenstream"],["self"]]]],[11,"fmt","syn","",157,[[["formatter"],["self"]],["result"]]],[11,"span","","",157,[[["self"]],[["option",["span"]],["span"]]]],[11,"fmt","","",53,[[["formatter"],["self"]],["result"]]],[11,"span","","",53,[[["self"]],[["option",["span"]],["span"]]]],[11,"new","","Creates a new `Ident` with the given `string` as well as…",304,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",304,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its…",304,[[["span"],["self"]]]],[11,"visit_abi","syn::visit","",296,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",296,[[["anglebracketedgenericarguments"],["self"]]]],[11,"visit_arm","","",296,[[["self"],["arm"]]]],[11,"visit_attr_style","","",296,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",296,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",296,[[["barefnarg"],["self"]]]],[11,"visit_bin_op","","",296,[[["binop"],["self"]]]],[11,"visit_binding","","",296,[[["self"],["binding"]]]],[11,"visit_block","","",296,[[["self"],["block"]]]],[11,"visit_bound_lifetimes","","",296,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",296,[[["constparam"],["self"]]]],[11,"visit_constraint","","",296,[[["self"],["constraint"]]]],[11,"visit_data","","",296,[[["self"],["data"]]]],[11,"visit_data_enum","","",296,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",296,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",296,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",296,[[["deriveinput"],["self"]]]],[11,"visit_expr","","",296,[[["self"],["expr"]]]],[11,"visit_expr_array","","",296,[[["self"],["exprarray"]]]],[11,"visit_expr_assign","","",296,[[["self"],["exprassign"]]]],[11,"visit_expr_assign_op","","",296,[[["self"],["exprassignop"]]]],[11,"visit_expr_async","","",296,[[["exprasync"],["self"]]]],[11,"visit_expr_await","","",296,[[["self"],["exprawait"]]]],[11,"visit_expr_binary","","",296,[[["exprbinary"],["self"]]]],[11,"visit_expr_block","","",296,[[["self"],["exprblock"]]]],[11,"visit_expr_box","","",296,[[["self"],["exprbox"]]]],[11,"visit_expr_break","","",296,[[["self"],["exprbreak"]]]],[11,"visit_expr_call","","",296,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",296,[[["self"],["exprcast"]]]],[11,"visit_expr_closure","","",296,[[["exprclosure"],["self"]]]],[11,"visit_expr_continue","","",296,[[["self"],["exprcontinue"]]]],[11,"visit_expr_field","","",296,[[["self"],["exprfield"]]]],[11,"visit_expr_for_loop","","",296,[[["self"],["exprforloop"]]]],[11,"visit_expr_group","","",296,[[["exprgroup"],["self"]]]],[11,"visit_expr_if","","",296,[[["self"],["exprif"]]]],[11,"visit_expr_index","","",296,[[["exprindex"],["self"]]]],[11,"visit_expr_let","","",296,[[["exprlet"],["self"]]]],[11,"visit_expr_lit","","",296,[[["self"],["exprlit"]]]],[11,"visit_expr_loop","","",296,[[["self"],["exprloop"]]]],[11,"visit_expr_macro","","",296,[[["self"],["exprmacro"]]]],[11,"visit_expr_match","","",296,[[["self"],["exprmatch"]]]],[11,"visit_expr_method_call","","",296,[[["self"],["exprmethodcall"]]]],[11,"visit_expr_paren","","",296,[[["exprparen"],["self"]]]],[11,"visit_expr_path","","",296,[[["exprpath"],["self"]]]],[11,"visit_expr_range","","",296,[[["self"],["exprrange"]]]],[11,"visit_expr_reference","","",296,[[["self"],["exprreference"]]]],[11,"visit_expr_repeat","","",296,[[["self"],["exprrepeat"]]]],[11,"visit_expr_return","","",296,[[["self"],["exprreturn"]]]],[11,"visit_expr_struct","","",296,[[["self"],["exprstruct"]]]],[11,"visit_expr_try","","",296,[[["self"],["exprtry"]]]],[11,"visit_expr_try_block","","",296,[[["exprtryblock"],["self"]]]],[11,"visit_expr_tuple","","",296,[[["self"],["exprtuple"]]]],[11,"visit_expr_type","","",296,[[["self"],["exprtype"]]]],[11,"visit_expr_unary","","",296,[[["self"],["exprunary"]]]],[11,"visit_expr_unsafe","","",296,[[["self"],["exprunsafe"]]]],[11,"visit_expr_while","","",296,[[["exprwhile"],["self"]]]],[11,"visit_expr_yield","","",296,[[["expryield"],["self"]]]],[11,"visit_field","","",296,[[["field"],["self"]]]],[11,"visit_field_pat","","",296,[[["self"],["fieldpat"]]]],[11,"visit_field_value","","",296,[[["fieldvalue"],["self"]]]],[11,"visit_fields","","",296,[[["self"],["fields"]]]],[11,"visit_fields_named","","",296,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",296,[[["self"],["fieldsunnamed"]]]],[11,"visit_file","","",296,[[["self"],["file"]]]],[11,"visit_fn_arg","","",296,[[["self"],["fnarg"]]]],[11,"visit_foreign_item","","",296,[[["self"],["foreignitem"]]]],[11,"visit_foreign_item_fn","","",296,[[["self"],["foreignitemfn"]]]],[11,"visit_foreign_item_macro","","",296,[[["self"],["foreignitemmacro"]]]],[11,"visit_foreign_item_static","","",296,[[["foreignitemstatic"],["self"]]]],[11,"visit_foreign_item_type","","",296,[[["self"],["foreignitemtype"]]]],[11,"visit_generic_argument","","",296,[[["genericargument"],["self"]]]],[11,"visit_generic_method_argument","","",296,[[["self"],["genericmethodargument"]]]],[11,"visit_generic_param","","",296,[[["self"],["genericparam"]]]],[11,"visit_generics","","",296,[[["generics"],["self"]]]],[11,"visit_ident","","",296,[[["self"],["ident"]]]],[11,"visit_impl_item","","",296,[[["implitem"],["self"]]]],[11,"visit_impl_item_const","","",296,[[["self"],["implitemconst"]]]],[11,"visit_impl_item_macro","","",296,[[["self"],["implitemmacro"]]]],[11,"visit_impl_item_method","","",296,[[["self"],["implitemmethod"]]]],[11,"visit_impl_item_type","","",296,[[["self"],["implitemtype"]]]],[11,"visit_index","","",296,[[["self"],["index"]]]],[11,"visit_item","","",296,[[["item"],["self"]]]],[11,"visit_item_const","","",296,[[["self"],["itemconst"]]]],[11,"visit_item_enum","","",296,[[["itemenum"],["self"]]]],[11,"visit_item_extern_crate","","",296,[[["itemexterncrate"],["self"]]]],[11,"visit_item_fn","","",296,[[["self"],["itemfn"]]]],[11,"visit_item_foreign_mod","","",296,[[["self"],["itemforeignmod"]]]],[11,"visit_item_impl","","",296,[[["self"],["itemimpl"]]]],[11,"visit_item_macro","","",296,[[["self"],["itemmacro"]]]],[11,"visit_item_macro2","","",296,[[["self"],["itemmacro2"]]]],[11,"visit_item_mod","","",296,[[["self"],["itemmod"]]]],[11,"visit_item_static","","",296,[[["self"],["itemstatic"]]]],[11,"visit_item_struct","","",296,[[["self"],["itemstruct"]]]],[11,"visit_item_trait","","",296,[[["self"],["itemtrait"]]]],[11,"visit_item_trait_alias","","",296,[[["self"],["itemtraitalias"]]]],[11,"visit_item_type","","",296,[[["itemtype"],["self"]]]],[11,"visit_item_union","","",296,[[["itemunion"],["self"]]]],[11,"visit_item_use","","",296,[[["self"],["itemuse"]]]],[11,"visit_label","","",296,[[["self"],["label"]]]],[11,"visit_lifetime","","",296,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",296,[[["lifetimedef"],["self"]]]],[11,"visit_lit","","",296,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",296,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",296,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",296,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",296,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",296,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",296,[[["self"],["litint"]]]],[11,"visit_lit_str","","",296,[[["self"],["litstr"]]]],[11,"visit_local","","",296,[[["self"],["local"]]]],[11,"visit_macro","","",296,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",296,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",296,[[["self"],["member"]]]],[11,"visit_meta","","",296,[[["self"],["meta"]]]],[11,"visit_meta_list","","",296,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",296,[[["metanamevalue"],["self"]]]],[11,"visit_method_turbofish","","",296,[[["self"],["methodturbofish"]]]],[11,"visit_nested_meta","","",296,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",296,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_pat","","",296,[[["self"],["pat"]]]],[11,"visit_pat_box","","",296,[[["self"],["patbox"]]]],[11,"visit_pat_ident","","",296,[[["patident"],["self"]]]],[11,"visit_pat_lit","","",296,[[["patlit"],["self"]]]],[11,"visit_pat_macro","","",296,[[["self"],["patmacro"]]]],[11,"visit_pat_or","","",296,[[["self"],["pator"]]]],[11,"visit_pat_path","","",296,[[["self"],["patpath"]]]],[11,"visit_pat_range","","",296,[[["self"],["patrange"]]]],[11,"visit_pat_reference","","",296,[[["patreference"],["self"]]]],[11,"visit_pat_rest","","",296,[[["self"],["patrest"]]]],[11,"visit_pat_slice","","",296,[[["self"],["patslice"]]]],[11,"visit_pat_struct","","",296,[[["self"],["patstruct"]]]],[11,"visit_pat_tuple","","",296,[[["self"],["pattuple"]]]],[11,"visit_pat_tuple_struct","","",296,[[["pattuplestruct"],["self"]]]],[11,"visit_pat_type","","",296,[[["self"],["pattype"]]]],[11,"visit_pat_wild","","",296,[[["self"],["patwild"]]]],[11,"visit_path","","",296,[[["path"],["self"]]]],[11,"visit_path_arguments","","",296,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",296,[[["pathsegment"],["self"]]]],[11,"visit_predicate_eq","","",296,[[["predicateeq"],["self"]]]],[11,"visit_predicate_lifetime","","",296,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",296,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",296,[[["self"],["qself"]]]],[11,"visit_range_limits","","",296,[[["self"],["rangelimits"]]]],[11,"visit_receiver","","",296,[[["self"],["receiver"]]]],[11,"visit_return_type","","",296,[[["self"],["returntype"]]]],[11,"visit_signature","","",296,[[["self"],["signature"]]]],[11,"visit_span","","",296,[[["self"],["span"]]]],[11,"visit_stmt","","",296,[[["self"],["stmt"]]]],[11,"visit_trait_bound","","",296,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",296,[[["self"],["traitboundmodifier"]]]],[11,"visit_trait_item","","",296,[[["self"],["traititem"]]]],[11,"visit_trait_item_const","","",296,[[["self"],["traititemconst"]]]],[11,"visit_trait_item_macro","","",296,[[["traititemmacro"],["self"]]]],[11,"visit_trait_item_method","","",296,[[["self"],["traititemmethod"]]]],[11,"visit_trait_item_type","","",296,[[["traititemtype"],["self"]]]],[11,"visit_type","","",296,[[["type"],["self"]]]],[11,"visit_type_array","","",296,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",296,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",296,[[["typegroup"],["self"]]]],[11,"visit_type_impl_trait","","",296,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",296,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",296,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",296,[[["self"],["typenever"]]]],[11,"visit_type_param","","",296,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",296,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",296,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",296,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",296,[[["typeptr"],["self"]]]],[11,"visit_type_reference","","",296,[[["typereference"],["self"]]]],[11,"visit_type_slice","","",296,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",296,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",296,[[["typetuple"],["self"]]]],[11,"visit_un_op","","",296,[[["self"],["unop"]]]],[11,"visit_use_glob","","",296,[[["useglob"],["self"]]]],[11,"visit_use_group","","",296,[[["usegroup"],["self"]]]],[11,"visit_use_name","","",296,[[["self"],["usename"]]]],[11,"visit_use_path","","",296,[[["self"],["usepath"]]]],[11,"visit_use_rename","","",296,[[["self"],["userename"]]]],[11,"visit_use_tree","","",296,[[["self"],["usetree"]]]],[11,"visit_variadic","","",296,[[["self"],["variadic"]]]],[11,"visit_variant","","",296,[[["variant"],["self"]]]],[11,"visit_vis_crate","","",296,[[["viscrate"],["self"]]]],[11,"visit_vis_public","","",296,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",296,[[["visrestricted"],["self"]]]],[11,"visit_visibility","","",296,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",296,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",296,[[["self"],["wherepredicate"]]]],[11,"visit_abi_mut","syn::visit_mut","",297,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments_mut","","",297,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_arm_mut","","",297,[[["self"],["arm"]]]],[11,"visit_attr_style_mut","","",297,[[["self"],["attrstyle"]]]],[11,"visit_attribute_mut","","",297,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg_mut","","",297,[[["barefnarg"],["self"]]]],[11,"visit_bin_op_mut","","",297,[[["self"],["binop"]]]],[11,"visit_binding_mut","","",297,[[["binding"],["self"]]]],[11,"visit_block_mut","","",297,[[["self"],["block"]]]],[11,"visit_bound_lifetimes_mut","","",297,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param_mut","","",297,[[["self"],["constparam"]]]],[11,"visit_constraint_mut","","",297,[[["self"],["constraint"]]]],[11,"visit_data_mut","","",297,[[["self"],["data"]]]],[11,"visit_data_enum_mut","","",297,[[["dataenum"],["self"]]]],[11,"visit_data_struct_mut","","",297,[[["self"],["datastruct"]]]],[11,"visit_data_union_mut","","",297,[[["self"],["dataunion"]]]],[11,"visit_derive_input_mut","","",297,[[["self"],["deriveinput"]]]],[11,"visit_expr_mut","","",297,[[["expr"],["self"]]]],[11,"visit_expr_array_mut","","",297,[[["self"],["exprarray"]]]],[11,"visit_expr_assign_mut","","",297,[[["self"],["exprassign"]]]],[11,"visit_expr_assign_op_mut","","",297,[[["self"],["exprassignop"]]]],[11,"visit_expr_async_mut","","",297,[[["self"],["exprasync"]]]],[11,"visit_expr_await_mut","","",297,[[["exprawait"],["self"]]]],[11,"visit_expr_binary_mut","","",297,[[["self"],["exprbinary"]]]],[11,"visit_expr_block_mut","","",297,[[["exprblock"],["self"]]]],[11,"visit_expr_box_mut","","",297,[[["exprbox"],["self"]]]],[11,"visit_expr_break_mut","","",297,[[["self"],["exprbreak"]]]],[11,"visit_expr_call_mut","","",297,[[["self"],["exprcall"]]]],[11,"visit_expr_cast_mut","","",297,[[["self"],["exprcast"]]]],[11,"visit_expr_closure_mut","","",297,[[["self"],["exprclosure"]]]],[11,"visit_expr_continue_mut","","",297,[[["self"],["exprcontinue"]]]],[11,"visit_expr_field_mut","","",297,[[["exprfield"],["self"]]]],[11,"visit_expr_for_loop_mut","","",297,[[["exprforloop"],["self"]]]],[11,"visit_expr_group_mut","","",297,[[["self"],["exprgroup"]]]],[11,"visit_expr_if_mut","","",297,[[["self"],["exprif"]]]],[11,"visit_expr_index_mut","","",297,[[["self"],["exprindex"]]]],[11,"visit_expr_let_mut","","",297,[[["self"],["exprlet"]]]],[11,"visit_expr_lit_mut","","",297,[[["self"],["exprlit"]]]],[11,"visit_expr_loop_mut","","",297,[[["self"],["exprloop"]]]],[11,"visit_expr_macro_mut","","",297,[[["self"],["exprmacro"]]]],[11,"visit_expr_match_mut","","",297,[[["self"],["exprmatch"]]]],[11,"visit_expr_method_call_mut","","",297,[[["self"],["exprmethodcall"]]]],[11,"visit_expr_paren_mut","","",297,[[["self"],["exprparen"]]]],[11,"visit_expr_path_mut","","",297,[[["self"],["exprpath"]]]],[11,"visit_expr_range_mut","","",297,[[["self"],["exprrange"]]]],[11,"visit_expr_reference_mut","","",297,[[["self"],["exprreference"]]]],[11,"visit_expr_repeat_mut","","",297,[[["self"],["exprrepeat"]]]],[11,"visit_expr_return_mut","","",297,[[["self"],["exprreturn"]]]],[11,"visit_expr_struct_mut","","",297,[[["exprstruct"],["self"]]]],[11,"visit_expr_try_mut","","",297,[[["exprtry"],["self"]]]],[11,"visit_expr_try_block_mut","","",297,[[["self"],["exprtryblock"]]]],[11,"visit_expr_tuple_mut","","",297,[[["exprtuple"],["self"]]]],[11,"visit_expr_type_mut","","",297,[[["self"],["exprtype"]]]],[11,"visit_expr_unary_mut","","",297,[[["self"],["exprunary"]]]],[11,"visit_expr_unsafe_mut","","",297,[[["self"],["exprunsafe"]]]],[11,"visit_expr_while_mut","","",297,[[["self"],["exprwhile"]]]],[11,"visit_expr_yield_mut","","",297,[[["expryield"],["self"]]]],[11,"visit_field_mut","","",297,[[["self"],["field"]]]],[11,"visit_field_pat_mut","","",297,[[["fieldpat"],["self"]]]],[11,"visit_field_value_mut","","",297,[[["self"],["fieldvalue"]]]],[11,"visit_fields_mut","","",297,[[["fields"],["self"]]]],[11,"visit_fields_named_mut","","",297,[[["fieldsnamed"],["self"]]]],[11,"visit_fields_unnamed_mut","","",297,[[["self"],["fieldsunnamed"]]]],[11,"visit_file_mut","","",297,[[["file"],["self"]]]],[11,"visit_fn_arg_mut","","",297,[[["self"],["fnarg"]]]],[11,"visit_foreign_item_mut","","",297,[[["self"],["foreignitem"]]]],[11,"visit_foreign_item_fn_mut","","",297,[[["self"],["foreignitemfn"]]]],[11,"visit_foreign_item_macro_mut","","",297,[[["foreignitemmacro"],["self"]]]],[11,"visit_foreign_item_static_mut","","",297,[[["self"],["foreignitemstatic"]]]],[11,"visit_foreign_item_type_mut","","",297,[[["self"],["foreignitemtype"]]]],[11,"visit_generic_argument_mut","","",297,[[["self"],["genericargument"]]]],[11,"visit_generic_method_argument_mut","","",297,[[["self"],["genericmethodargument"]]]],[11,"visit_generic_param_mut","","",297,[[["self"],["genericparam"]]]],[11,"visit_generics_mut","","",297,[[["self"],["generics"]]]],[11,"visit_ident_mut","","",297,[[["self"],["ident"]]]],[11,"visit_impl_item_mut","","",297,[[["self"],["implitem"]]]],[11,"visit_impl_item_const_mut","","",297,[[["self"],["implitemconst"]]]],[11,"visit_impl_item_macro_mut","","",297,[[["implitemmacro"],["self"]]]],[11,"visit_impl_item_method_mut","","",297,[[["self"],["implitemmethod"]]]],[11,"visit_impl_item_type_mut","","",297,[[["self"],["implitemtype"]]]],[11,"visit_index_mut","","",297,[[["index"],["self"]]]],[11,"visit_item_mut","","",297,[[["self"],["item"]]]],[11,"visit_item_const_mut","","",297,[[["itemconst"],["self"]]]],[11,"visit_item_enum_mut","","",297,[[["self"],["itemenum"]]]],[11,"visit_item_extern_crate_mut","","",297,[[["self"],["itemexterncrate"]]]],[11,"visit_item_fn_mut","","",297,[[["itemfn"],["self"]]]],[11,"visit_item_foreign_mod_mut","","",297,[[["itemforeignmod"],["self"]]]],[11,"visit_item_impl_mut","","",297,[[["self"],["itemimpl"]]]],[11,"visit_item_macro_mut","","",297,[[["self"],["itemmacro"]]]],[11,"visit_item_macro2_mut","","",297,[[["self"],["itemmacro2"]]]],[11,"visit_item_mod_mut","","",297,[[["itemmod"],["self"]]]],[11,"visit_item_static_mut","","",297,[[["itemstatic"],["self"]]]],[11,"visit_item_struct_mut","","",297,[[["self"],["itemstruct"]]]],[11,"visit_item_trait_mut","","",297,[[["self"],["itemtrait"]]]],[11,"visit_item_trait_alias_mut","","",297,[[["self"],["itemtraitalias"]]]],[11,"visit_item_type_mut","","",297,[[["self"],["itemtype"]]]],[11,"visit_item_union_mut","","",297,[[["self"],["itemunion"]]]],[11,"visit_item_use_mut","","",297,[[["self"],["itemuse"]]]],[11,"visit_label_mut","","",297,[[["self"],["label"]]]],[11,"visit_lifetime_mut","","",297,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def_mut","","",297,[[["self"],["lifetimedef"]]]],[11,"visit_lit_mut","","",297,[[["lit"],["self"]]]],[11,"visit_lit_bool_mut","","",297,[[["self"],["litbool"]]]],[11,"visit_lit_byte_mut","","",297,[[["litbyte"],["self"]]]],[11,"visit_lit_byte_str_mut","","",297,[[["self"],["litbytestr"]]]],[11,"visit_lit_char_mut","","",297,[[["self"],["litchar"]]]],[11,"visit_lit_float_mut","","",297,[[["litfloat"],["self"]]]],[11,"visit_lit_int_mut","","",297,[[["self"],["litint"]]]],[11,"visit_lit_str_mut","","",297,[[["self"],["litstr"]]]],[11,"visit_local_mut","","",297,[[["local"],["self"]]]],[11,"visit_macro_mut","","",297,[[["self"],["macro"]]]],[11,"visit_macro_delimiter_mut","","",297,[[["self"],["macrodelimiter"]]]],[11,"visit_member_mut","","",297,[[["self"],["member"]]]],[11,"visit_meta_mut","","",297,[[["self"],["meta"]]]],[11,"visit_meta_list_mut","","",297,[[["self"],["metalist"]]]],[11,"visit_meta_name_value_mut","","",297,[[["self"],["metanamevalue"]]]],[11,"visit_method_turbofish_mut","","",297,[[["self"],["methodturbofish"]]]],[11,"visit_nested_meta_mut","","",297,[[["nestedmeta"],["self"]]]],[11,"visit_parenthesized_generic_arguments_mut","","",297,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_pat_mut","","",297,[[["self"],["pat"]]]],[11,"visit_pat_box_mut","","",297,[[["self"],["patbox"]]]],[11,"visit_pat_ident_mut","","",297,[[["self"],["patident"]]]],[11,"visit_pat_lit_mut","","",297,[[["self"],["patlit"]]]],[11,"visit_pat_macro_mut","","",297,[[["self"],["patmacro"]]]],[11,"visit_pat_or_mut","","",297,[[["pator"],["self"]]]],[11,"visit_pat_path_mut","","",297,[[["self"],["patpath"]]]],[11,"visit_pat_range_mut","","",297,[[["self"],["patrange"]]]],[11,"visit_pat_reference_mut","","",297,[[["patreference"],["self"]]]],[11,"visit_pat_rest_mut","","",297,[[["self"],["patrest"]]]],[11,"visit_pat_slice_mut","","",297,[[["self"],["patslice"]]]],[11,"visit_pat_struct_mut","","",297,[[["self"],["patstruct"]]]],[11,"visit_pat_tuple_mut","","",297,[[["self"],["pattuple"]]]],[11,"visit_pat_tuple_struct_mut","","",297,[[["self"],["pattuplestruct"]]]],[11,"visit_pat_type_mut","","",297,[[["self"],["pattype"]]]],[11,"visit_pat_wild_mut","","",297,[[["self"],["patwild"]]]],[11,"visit_path_mut","","",297,[[["self"],["path"]]]],[11,"visit_path_arguments_mut","","",297,[[["patharguments"],["self"]]]],[11,"visit_path_segment_mut","","",297,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq_mut","","",297,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime_mut","","",297,[[["predicatelifetime"],["self"]]]],[11,"visit_predicate_type_mut","","",297,[[["self"],["predicatetype"]]]],[11,"visit_qself_mut","","",297,[[["self"],["qself"]]]],[11,"visit_range_limits_mut","","",297,[[["self"],["rangelimits"]]]],[11,"visit_receiver_mut","","",297,[[["self"],["receiver"]]]],[11,"visit_return_type_mut","","",297,[[["returntype"],["self"]]]],[11,"visit_signature_mut","","",297,[[["self"],["signature"]]]],[11,"visit_span_mut","","",297,[[["self"],["span"]]]],[11,"visit_stmt_mut","","",297,[[["stmt"],["self"]]]],[11,"visit_trait_bound_mut","","",297,[[["traitbound"],["self"]]]],[11,"visit_trait_bound_modifier_mut","","",297,[[["traitboundmodifier"],["self"]]]],[11,"visit_trait_item_mut","","",297,[[["self"],["traititem"]]]],[11,"visit_trait_item_const_mut","","",297,[[["self"],["traititemconst"]]]],[11,"visit_trait_item_macro_mut","","",297,[[["traititemmacro"],["self"]]]],[11,"visit_trait_item_method_mut","","",297,[[["traititemmethod"],["self"]]]],[11,"visit_trait_item_type_mut","","",297,[[["traititemtype"],["self"]]]],[11,"visit_type_mut","","",297,[[["self"],["type"]]]],[11,"visit_type_array_mut","","",297,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn_mut","","",297,[[["typebarefn"],["self"]]]],[11,"visit_type_group_mut","","",297,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait_mut","","",297,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer_mut","","",297,[[["self"],["typeinfer"]]]],[11,"visit_type_macro_mut","","",297,[[["self"],["typemacro"]]]],[11,"visit_type_never_mut","","",297,[[["self"],["typenever"]]]],[11,"visit_type_param_mut","","",297,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound_mut","","",297,[[["typeparambound"],["self"]]]],[11,"visit_type_paren_mut","","",297,[[["typeparen"],["self"]]]],[11,"visit_type_path_mut","","",297,[[["self"],["typepath"]]]],[11,"visit_type_ptr_mut","","",297,[[["self"],["typeptr"]]]],[11,"visit_type_reference_mut","","",297,[[["self"],["typereference"]]]],[11,"visit_type_slice_mut","","",297,[[["typeslice"],["self"]]]],[11,"visit_type_trait_object_mut","","",297,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple_mut","","",297,[[["typetuple"],["self"]]]],[11,"visit_un_op_mut","","",297,[[["self"],["unop"]]]],[11,"visit_use_glob_mut","","",297,[[["self"],["useglob"]]]],[11,"visit_use_group_mut","","",297,[[["self"],["usegroup"]]]],[11,"visit_use_name_mut","","",297,[[["self"],["usename"]]]],[11,"visit_use_path_mut","","",297,[[["self"],["usepath"]]]],[11,"visit_use_rename_mut","","",297,[[["userename"],["self"]]]],[11,"visit_use_tree_mut","","",297,[[["self"],["usetree"]]]],[11,"visit_variadic_mut","","",297,[[["variadic"],["self"]]]],[11,"visit_variant_mut","","",297,[[["self"],["variant"]]]],[11,"visit_vis_crate_mut","","",297,[[["self"],["viscrate"]]]],[11,"visit_vis_public_mut","","",297,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted_mut","","",297,[[["self"],["visrestricted"]]]],[11,"visit_visibility_mut","","",297,[[["self"],["visibility"]]]],[11,"visit_where_clause_mut","","",297,[[["self"],["whereclause"]]]],[11,"visit_where_predicate_mut","","",297,[[["wherepredicate"],["self"]]]],[11,"peek","syn::parse","Looks at the next token in the parse stream to determine…",313,[[["peek"],["self"]],["bool"]]],[11,"error","","Triggers an error at the current position of the parse…",313,[[],["error"]]]],"p":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"Arm"],[3,"FieldValue"],[3,"Label"],[3,"MethodTurbofish"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"ForeignItemFn"],[3,"ForeignItemMacro"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ImplItemConst"],[3,"ImplItemMacro"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[3,"Receiver"],[3,"Signature"],[3,"TraitItemConst"],[3,"TraitItemMacro"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"UseGlob"],[3,"UseGroup"],[3,"UseName"],[3,"UsePath"],[3,"UseRename"],[3,"File"],[3,"Lifetime"],[3,"LitBool"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Block"],[3,"Local"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Variadic"],[3,"FieldPat"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatOr"],[3,"PatPath"],[3,"PatRange"],[3,"PatReference"],[3,"PatRest"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatType"],[3,"PatWild"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"GenericMethodArgument"],[4,"RangeLimits"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FnArg"],[4,"ForeignItem"],[4,"ImplItem"],[4,"Item"],[4,"TraitItem"],[4,"UseTree"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"Stmt"],[4,"ReturnType"],[4,"Type"],[4,"Pat"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"TypeGenerics"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[4,"Pair"],[3,"Punctuated"],[8,"Spanned"],[8,"Visit"],[8,"VisitMut"],[8,"Speculative"],[8,"Parse"],[8,"Parser"],[3,"StepCursor"],[3,"ParseBuffer"],[3,"Error"],[3,"Ident"],[3,"ImplGenerics"],[3,"Turbofish"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Lookahead1"],[3,"Nothing"]]};
searchIndex["tinystr"] = {"doc":"`tinystr` is a small ASCII-only bounded length string…","i":[[3,"TinyStr16","tinystr","A tiny string that is from 1 to 16 non-NUL ASCII characters.",null,null],[3,"TinyStr4","","A tiny string that is from 1 to 4 non-NUL ASCII characters.",null,null],[3,"TinyStr8","","A tiny string that is from 1 to 8 non-NUL ASCII characters.",null,null],[4,"Error","","Enum to store the various types of errors that can cause…",null,null],[13,"InvalidSize","","String is too large or too small to store as TinyStr.",0,null],[13,"InvalidNull","","String is empty.",0,null],[13,"NonAscii","","String contains non-ASCII character(s).",0,null],[11,"from_bytes","","Creates a TinyStr16 from a byte slice.",1,[[],[["error"],["result",["error"]]]]],[11,"new_unchecked","","An unsafe constructor intended for cases where the…",1,[[["u128"]],["self"]]],[11,"as_str","","Extracts a string slice containing the entire `TinyStr16`.",1,[[["self"]],["str"]]],[11,"is_ascii_alphabetic","","Checks if the value is composed of ASCII alphabetic…",1,[[],["bool"]]],[11,"is_ascii_alphanumeric","","Checks if the value is composed of ASCII alphanumeric…",1,[[],["bool"]]],[11,"is_ascii_numeric","","Checks if the value is composed of ASCII decimal digits:",1,[[],["bool"]]],[11,"to_ascii_lowercase","","Converts this type to its ASCII lower case equivalent…",1,[[],["self"]]],[11,"to_ascii_titlecase","","Converts this type to its ASCII title case equivalent…",1,[[],["self"]]],[11,"to_ascii_uppercase","","Converts this type to its ASCII upper case equivalent…",1,[[],["self"]]],[11,"from_bytes","","Creates a TinyStr4 from a byte slice.",2,[[],[["error"],["result",["error"]]]]],[11,"new_unchecked","","An unsafe constructor intended for cases where the…",2,[[["u32"]],["self"]]],[11,"as_str","","Extracts a string slice containing the entire `TinyStr4`.",2,[[["self"]],["str"]]],[11,"is_ascii_alphabetic","","Checks if the value is composed of ASCII alphabetic…",2,[[],["bool"]]],[11,"is_ascii_alphanumeric","","Checks if the value is composed of ASCII alphanumeric…",2,[[],["bool"]]],[11,"is_ascii_numeric","","Checks if the value is composed of ASCII decimal digits:",2,[[],["bool"]]],[11,"to_ascii_lowercase","","Converts this type to its ASCII lower case equivalent…",2,[[],["self"]]],[11,"to_ascii_titlecase","","Converts this type to its ASCII title case equivalent…",2,[[],["self"]]],[11,"to_ascii_uppercase","","Converts this type to its ASCII upper case equivalent…",2,[[],["self"]]],[11,"from_bytes","","Creates a TinyStr8 from a byte slice.",3,[[],[["error"],["result",["error"]]]]],[11,"new_unchecked","","An unsafe constructor intended for cases where the…",3,[[["u64"]],["self"]]],[11,"as_str","","Extracts a string slice containing the entire `TinyStr8`.",3,[[["self"]],["str"]]],[11,"is_ascii_alphabetic","","Checks if the value is composed of ASCII alphabetic…",3,[[],["bool"]]],[11,"is_ascii_alphanumeric","","Checks if the value is composed of ASCII alphanumeric…",3,[[],["bool"]]],[11,"is_ascii_numeric","","Checks if the value is composed of ASCII decimal digits:",3,[[],["bool"]]],[11,"to_ascii_lowercase","","Converts this type to its ASCII lower case equivalent…",3,[[],["self"]]],[11,"to_ascii_titlecase","","Converts this type to its ASCII title case equivalent…",3,[[],["self"]]],[11,"to_ascii_uppercase","","Converts this type to its ASCII upper case equivalent…",3,[[],["self"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"into","","",1,[[],["u128"]]],[11,"into","","",2,[[],["u32"]]],[11,"into","","",3,[[],["u64"]]],[11,"clone","","",1,[[["self"]],["tinystr16"]]],[11,"clone","","",2,[[["self"]],["tinystr4"]]],[11,"clone","","",3,[[["self"]],["tinystr8"]]],[11,"cmp","","",1,[[["self"]],["ordering"]]],[11,"cmp","","",2,[[["self"]],["ordering"]]],[11,"cmp","","",3,[[["self"]],["ordering"]]],[11,"eq","","",1,[[["self"],["tinystr16"]],["bool"]]],[11,"ne","","",1,[[["self"],["tinystr16"]],["bool"]]],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"eq","","",2,[[["tinystr4"],["self"]],["bool"]]],[11,"ne","","",2,[[["tinystr4"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["str"]],["bool"]]],[11,"eq","","",3,[[["self"],["tinystr8"]],["bool"]]],[11,"ne","","",3,[[["self"],["tinystr8"]],["bool"]]],[11,"eq","","",3,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["error"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",2,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"deref","","",1,[[["self"]],["str"]]],[11,"deref","","",2,[[["self"]],["str"]]],[11,"deref","","",3,[[["self"]],["str"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"from_str","","",1,[[["str"]],["result"]]],[11,"from_str","","",2,[[["str"]],["result"]]],[11,"from_str","","",3,[[["str"]],["result"]]]],"p":[[4,"Error"],[3,"TinyStr16"],[3,"TinyStr4"],[3,"TinyStr8"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser…","i":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is…",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid…",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the…",0,[[],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the…",0,[[],["bool"]]]],"p":[[8,"UnicodeXID"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);