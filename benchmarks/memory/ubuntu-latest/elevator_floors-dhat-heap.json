{
  "dhatFileVersion": 2,
  "mode": "rust-heap",
  "verb": "Allocated",
  "bklt": true,
  "bkacc": false,
  "tu": "Âµs",
  "Mtu": "s",
  "tuth": 10,
  "cmd": "target/release/examples/elevator_floors",
  "pid": 5599,
  "tg": 210,
  "te": 435,
  "pps": [
    {
      "tb": 84,
      "tbk": 1,
      "tl": 3,
      "mb": 84,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ]
    },
    {
      "tb": 28,
      "tbk": 1,
      "tl": 184,
      "mb": 28,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        14,
        15,
        16,
        12
      ]
    },
    {
      "tb": 336,
      "tbk": 3,
      "tl": 15,
      "mb": 192,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        17,
        18,
        19,
        12
      ]
    },
    {
      "tb": 156,
      "tbk": 2,
      "tl": 51,
      "mb": 104,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        20,
        21
      ]
    },
    {
      "tb": 141,
      "tbk": 2,
      "tl": 8,
      "mb": 94,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        20,
        22
      ]
    },
    {
      "tb": 24,
      "tbk": 2,
      "tl": 0,
      "mb": 16,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        12
      ]
    },
    {
      "tb": 176,
      "tbk": 1,
      "tl": 220,
      "mb": 176,
      "mbk": 1,
      "gb": 176,
      "gbk": 1,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        38,
        12
      ]
    },
    {
      "tb": 84,
      "tbk": 1,
      "tl": 2,
      "mb": 84,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        12
      ]
    },
    {
      "tb": 336,
      "tbk": 3,
      "tl": 164,
      "mb": 192,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        17,
        18,
        49,
        12
      ]
    },
    {
      "tb": 51,
      "tbk": 1,
      "tl": 6,
      "mb": 51,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        50
      ]
    },
    {
      "tb": 171,
      "tbk": 2,
      "tl": 104,
      "mb": 114,
      "mbk": 1,
      "gb": 114,
      "gbk": 1,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        51,
        12
      ]
    },
    {
      "tb": 8192,
      "tbk": 1,
      "tl": 23,
      "mb": 8192,
      "mbk": 1,
      "gb": 8192,
      "gbk": 1,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        52,
        12
      ]
    },
    {
      "tb": 57,
      "tbk": 1,
      "tl": 354,
      "mb": 57,
      "mbk": 1,
      "gb": 57,
      "gbk": 1,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        53
      ]
    },
    {
      "tb": 76,
      "tbk": 1,
      "tl": 3,
      "mb": 76,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        54,
        12
      ]
    },
    {
      "tb": 80,
      "tbk": 2,
      "tl": 157,
      "mb": 64,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        55,
        56,
        57,
        49,
        12
      ]
    },
    {
      "tb": 72,
      "tbk": 1,
      "tl": 8,
      "mb": 72,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        58
      ]
    },
    {
      "tb": 171,
      "tbk": 2,
      "tl": 42,
      "mb": 114,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        20,
        59
      ]
    },
    {
      "tb": 32,
      "tbk": 1,
      "tl": 151,
      "mb": 32,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        60,
        61,
        18,
        62,
        12
      ]
    },
    {
      "tb": 336,
      "tbk": 3,
      "tl": 137,
      "mb": 192,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        17,
        18,
        62,
        12
      ]
    },
    {
      "tb": 32,
      "tbk": 1,
      "tl": 165,
      "mb": 32,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        60,
        63,
        18,
        49,
        12
      ]
    },
    {
      "tb": 28,
      "tbk": 1,
      "tl": 192,
      "mb": 28,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        14,
        64,
        16,
        12
      ]
    },
    {
      "tb": 19,
      "tbk": 1,
      "tl": 2,
      "mb": 19,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73
      ]
    },
    {
      "tb": 32,
      "tbk": 1,
      "tl": 176,
      "mb": 32,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        60,
        61,
        18,
        49,
        12
      ]
    },
    {
      "tb": 47,
      "tbk": 1,
      "tl": 7,
      "mb": 47,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        74
      ]
    },
    {
      "tb": 8,
      "tbk": 1,
      "tl": 0,
      "mb": 8,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        75,
        76,
        77,
        78,
        79,
        12
      ]
    },
    {
      "tb": 32,
      "tbk": 1,
      "tl": 16,
      "mb": 32,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        60,
        63,
        18,
        19,
        12
      ]
    },
    {
      "tb": 32,
      "tbk": 1,
      "tl": 138,
      "mb": 32,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        60,
        63,
        18,
        62,
        12
      ]
    },
    {
      "tb": 80,
      "tbk": 2,
      "tl": 131,
      "mb": 64,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        55,
        56,
        57,
        62,
        12
      ]
    },
    {
      "tb": 28,
      "tbk": 1,
      "tl": 198,
      "mb": 28,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        14,
        80,
        16,
        12
      ]
    },
    {
      "tb": 80,
      "tbk": 2,
      "tl": 4,
      "mb": 64,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        55,
        56,
        57,
        19,
        12
      ]
    },
    {
      "tb": 32,
      "tbk": 1,
      "tl": 121,
      "mb": 32,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        60,
        61,
        18,
        19,
        12
      ]
    },
    {
      "tb": 480,
      "tbk": 4,
      "tl": 8,
      "mb": 256,
      "mbk": 1,
      "gb": 256,
      "gbk": 1,
      "eb": 0,
      "ebk": 0,
      "fs": [
        13,
        55,
        81,
        82,
        12
      ]
    }
  ],
  "ftbl": [
    "[root]",
    "0x561aa036fa34: <alloc::alloc::Global as core::alloc::Allocator>::allocate (alloc.rs:226:9)",
    "0x561aa036fa34: alloc::raw_vec::RawVec<T,A>::allocate_in (raw_vec.rs:204:45)",
    "0x561aa036fa34: alloc::raw_vec::RawVec<T,A>::with_capacity_in (raw_vec.rs:143:9)",
    "0x561aa036fa34: alloc::vec::Vec<T,A>::with_capacity_in (mod.rs:604:20)",
    "0x561aa036fa34: alloc::vec::Vec<T>::with_capacity (mod.rs:465:9)",
    "0x561aa036fa34: <&[u8] as std::ffi::c_str::CString::new::SpecIntoVec>::into_vec (c_str.rs:387:29)",
    "0x561aa036fa34: std::ffi::c_str::CString::new (c_str.rs:400:20)",
    "0x561aa036fa34: std::sys::unix::fs::cstr (fs.rs:927:8)",
    "0x561aa036fa34: std::sys::unix::fs::File::open (fs.rs:755:20)",
    "0x561aa036fa34: std::fs::OpenOptions::_open (fs.rs:933:9)",
    "0x561aa03314ed: icu_plurals::PluralRules::try_new (???:0:0)",
    "0x561aa03350c0: main (???:0:0)",
    "0x561aa032d73b: <dhat::DhatAlloc as core::alloc::global::GlobalAlloc>::alloc (???:0:0)",
    "0x561aa0330a07: serde::de::impls::<impl serde::de::Deserialize for core::option::Option<T>>::deserialize (???:0:0)",
    "0x561aa0337b21: core::ops::function::FnOnce::call_once (???:0:0)",
    "0x561aa0331c36: icu_plurals::PluralRules::try_new (???:0:0)",
    "0x561aa0339086: icu_plurals::rules::parser::Parser::get_and_condition (???:0:0)",
    "0x561aa033a4f7: icu_plurals::data::parse_rule (???:0:0)",
    "0x561aa0332afc: icu_plurals::PluralRules::try_new (???:0:0)",
    "0x561aa033c5dc: std::path::Path::join (???:0:0)",
    "0x561aa033411c: main (???:0:0)",
    "0x561aa03340e2: main (???:0:0)",
    "0x561aa0305383: alloc::raw_vec::finish_grow (???:0:0)",
    "0x561aa02ffa17: alloc::raw_vec::RawVec<T,A>::grow_amortized (raw_vec.rs:443:19)",
    "0x561aa02ffa17: alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle (raw_vec.rs:334:28)",
    "0x561aa030570a: alloc::raw_vec::RawVec<T,A>::reserve (raw_vec.rs:338:13)",
    "0x561aa030570a: alloc::vec::Vec<T,A>::reserve (mod.rs:804:9)",
    "0x561aa030570a: alloc::vec::Vec<T,A>::append_elements (mod.rs:1735:9)",
    "0x561aa030570a: <alloc::vec::Vec<T,A> as alloc::vec::spec_extend::SpecExtend<&T,core::slice::iter::Iter<T>>>::spec_extend (spec_extend.rs:85:18)",
    "0x561aa030570a: alloc::vec::Vec<T,A>::extend_from_slice (mod.rs:2162:9)",
    "0x561aa030570a: alloc::string::String::push_str (string.rs:841:9)",
    "0x561aa030570a: <alloc::string::String as core::fmt::Write>::write_str (string.rs:2711:9)",
    "0x561aa030570a: <&mut W as core::fmt::Write>::write_str (mod.rs:193:9)",
    "0x561aa031f2cc: core::fmt::write (mod.rs:1126:17)",
    "0x561aa0305657: core::fmt::Write::write_fmt (mod.rs:186:9)",
    "0x561aa0305657: alloc::fmt::format (fmt.rs:583:5)",
    "0x561aa0330cc3: icu_plurals::PluralRules::try_new (???:0:0)",
    "0x561aa0331921: icu_plurals::PluralRules::try_new (???:0:0)",
    "0x561aa036e364: <alloc::alloc::Global as core::alloc::Allocator>::allocate (alloc.rs:226:9)",
    "0x561aa036e364: alloc::raw_vec::RawVec<T,A>::allocate_in (raw_vec.rs:204:45)",
    "0x561aa036e364: alloc::raw_vec::RawVec<T,A>::with_capacity_in (raw_vec.rs:143:9)",
    "0x561aa036e364: alloc::vec::Vec<T,A>::with_capacity_in (mod.rs:604:20)",
    "0x561aa036e364: alloc::vec::Vec<T>::with_capacity (mod.rs:465:9)",
    "0x561aa036e364: <&[u8] as std::ffi::c_str::CString::new::SpecIntoVec>::into_vec (c_str.rs:387:29)",
    "0x561aa036e364: std::ffi::c_str::CString::new (c_str.rs:400:20)",
    "0x561aa036e364: std::sys::unix::fs::cstr (fs.rs:927:8)",
    "0x561aa036e364: std::sys::unix::fs::stat (fs.rs:1177:13)",
    "0x561aa0331366: icu_plurals::PluralRules::try_new (???:0:0)",
    "0x561aa03322d4: icu_plurals::PluralRules::try_new (???:0:0)",
    "0x561aa0334310: main (???:0:0)",
    "0x561aa0330ba9: icu_plurals::PluralRules::try_new (???:0:0)",
    "0x561aa0331673: icu_plurals::PluralRules::try_new (???:0:0)",
    "0x561aa0334153: main (???:0:0)",
    "0x561aa0330f32: icu_plurals::PluralRules::try_new (???:0:0)",
    "0x561aa0338e82: alloc::raw_vec::finish_grow (???:0:0)",
    "0x561aa02ffcb3: alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle (???:0:0)",
    "0x561aa033a5fc: icu_plurals::data::parse_rule (???:0:0)",
    "0x561aa03341ee: main (???:0:0)",
    "0x561aa03341b4: main (???:0:0)",
    "0x561aa0339547: icu_plurals::rules::parser::Parser::get_relation (???:0:0)",
    "0x561aa033902f: icu_plurals::rules::parser::Parser::get_and_condition (???:0:0)",
    "0x561aa03326ff: icu_plurals::PluralRules::try_new (???:0:0)",
    "0x561aa033914f: icu_plurals::rules::parser::Parser::get_and_condition (???:0:0)",
    "0x561aa0337a91: core::ops::function::FnOnce::call_once (???:0:0)",
    "0x561aa03538a2: <alloc::alloc::Global as core::alloc::Allocator>::allocate (alloc.rs:226:9)",
    "0x561aa03538a2: alloc::raw_vec::RawVec<T,A>::allocate_in (raw_vec.rs:204:45)",
    "0x561aa03538a2: alloc::raw_vec::RawVec<T,A>::with_capacity_in (raw_vec.rs:143:9)",
    "0x561aa03538a2: alloc::vec::Vec<T,A>::with_capacity_in (mod.rs:604:20)",
    "0x561aa03538a2: alloc::vec::Vec<T>::with_capacity (mod.rs:465:9)",
    "0x561aa03538a2: <&[u8] as std::ffi::c_str::CString::new::SpecIntoVec>::into_vec (c_str.rs:387:29)",
    "0x561aa03538a2: std::ffi::c_str::CString::new (c_str.rs:400:20)",
    "0x561aa03538a2: std::sys::unix::os::getenv (os.rs:530:13)",
    "0x561aa033404d: main (???:0:0)",
    "0x561aa0334083: main (???:0:0)",
    "0x561aa033a7c5: alloc::raw_vec::finish_grow (???:0:0)",
    "0x561aa02ff98c: alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle (???:0:0)",
    "0x561aa033b158: <alloc::string::String as core::fmt::Write>::write_str.2931 (???:0:0)",
    "0x561aa033aee9: <icu_provider::resource::ResourceOptionsComponents as core::convert::From<&icu_provider::resource::ResourceOptions>>::from (???:0:0)",
    "0x561aa033112b: icu_plurals::PluralRules::try_new (???:0:0)",
    "0x561aa03379e1: core::ops::function::FnOnce::call_once (???:0:0)",
    "0x561aa0302c2d: alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle (???:0:0)",
    "0x561aa0331723: icu_plurals::PluralRules::try_new (???:0:0)"
  ]
}