{
  "dhatFileVersion": 2,
  "mode": "rust-heap",
  "verb": "Allocated",
  "bklt": true,
  "bkacc": false,
  "tu": "Âµs",
  "Mtu": "s",
  "tuth": 10,
  "cmd": "target/release/examples/unread_emails",
  "pid": 1989,
  "tg": 349,
  "te": 377,
  "pps": [
    {
      "tb": 15,
      "tbk": 1,
      "tl": 23,
      "mb": 15,
      "mbk": 1,
      "gb": 15,
      "gbk": 1,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    {
      "tb": 32,
      "tbk": 1,
      "tl": 5,
      "mb": 32,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        6,
        7,
        8,
        9
      ]
    },
    {
      "tb": 174,
      "tbk": 2,
      "tl": 112,
      "mb": 116,
      "mbk": 1,
      "gb": 116,
      "gbk": 1,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        10
      ]
    },
    {
      "tb": 58,
      "tbk": 1,
      "tl": 253,
      "mb": 58,
      "mbk": 1,
      "gb": 58,
      "gbk": 1,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        11
      ]
    },
    {
      "tb": 24,
      "tbk": 2,
      "tl": 3,
      "mb": 16,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        12,
        13,
        14,
        15,
        16
      ]
    },
    {
      "tb": 48,
      "tbk": 1,
      "tl": 8,
      "mb": 48,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        17
      ]
    },
    {
      "tb": 8192,
      "tbk": 1,
      "tl": 26,
      "mb": 8192,
      "mbk": 1,
      "gb": 8192,
      "gbk": 1,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        18
      ]
    },
    {
      "tb": 159,
      "tbk": 2,
      "tl": 114,
      "mb": 106,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        19
      ]
    },
    {
      "tb": 86,
      "tbk": 1,
      "tl": 26,
      "mb": 86,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        20,
        21,
        22
      ]
    },
    {
      "tb": 86,
      "tbk": 1,
      "tl": 11,
      "mb": 86,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        20,
        23,
        24
      ]
    },
    {
      "tb": 2496,
      "tbk": 5,
      "tl": 144,
      "mb": 1024,
      "mbk": 1,
      "gb": 576,
      "gbk": 1,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        25,
        26,
        27
      ]
    },
    {
      "tb": 78,
      "tbk": 1,
      "tl": 23,
      "mb": 78,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        20,
        23,
        28
      ]
    },
    {
      "tb": 174,
      "tbk": 2,
      "tl": 111,
      "mb": 116,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        29
      ]
    },
    {
      "tb": 336,
      "tbk": 3,
      "tl": 4,
      "mb": 192,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        30,
        8,
        9
      ]
    },
    {
      "tb": 80,
      "tbk": 2,
      "tl": 2,
      "mb": 64,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        25,
        31,
        32,
        9
      ]
    },
    {
      "tb": 19,
      "tbk": 1,
      "tl": 17,
      "mb": 19,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        20,
        33,
        34
      ]
    },
    {
      "tb": 73,
      "tbk": 1,
      "tl": 42,
      "mb": 73,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        20,
        21,
        35
      ]
    },
    {
      "tb": 8,
      "tbk": 1,
      "tl": 0,
      "mb": 8,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        36,
        37,
        38,
        39,
        14,
        40,
        41
      ]
    },
    {
      "tb": 338,
      "tbk": 1,
      "tl": 47,
      "mb": 338,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        42
      ]
    },
    {
      "tb": 144,
      "tbk": 2,
      "tl": 2,
      "mb": 96,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        43
      ]
    },
    {
      "tb": 24,
      "tbk": 2,
      "tl": 8,
      "mb": 16,
      "mbk": 1,
      "gb": 16,
      "gbk": 1,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        44,
        45,
        46,
        47,
        5
      ]
    },
    {
      "tb": 32,
      "tbk": 1,
      "tl": 10,
      "mb": 32,
      "mbk": 1,
      "gb": 0,
      "gbk": 0,
      "eb": 0,
      "ebk": 0,
      "fs": [
        1,
        2,
        6,
        48,
        8,
        9
      ]
    }
  ],
  "ftbl": [
    "[root]",
    "0x1057afceb: backtrace::capture::Backtrace::new_unresolved (???:0:0)",
    "0x10581c012: ___rg_alloc (???:0:0)",
    "0x105815f9b: serde::de::impls::<impl serde::de::Deserialize for core::option::Option<T>>::deserialize (???:0:0)",
    "0x10581e28f: icu_provider_fs::deserializer::deserialize_into_type (???:0:0)",
    "0x10581918e: _main (???:0:0)",
    "0x1057dc3a5: icu_plurals::rules::parser::Parser::get_relation (???:0:0)",
    "0x1057dbe9c: icu_plurals::rules::parser::Parser::get_and_condition (???:0:0)",
    "0x1057dc8cc: icu_plurals::data::parse_rule (???:0:0)",
    "0x10581a484: _main (???:0:0)",
    "0x105818869: _main (???:0:0)",
    "0x105816d2c: _main (???:0:0)",
    "0x1057a95a4: alloc::raw_vec::finish_grow (???:0:0)",
    "0x1057a9a2e: <&mut W as core::fmt::Write>::write_str (???:0:0)",
    "0x1057ca71e: core::fmt::write (???:0:0)",
    "0x1057a9956: alloc::fmt::format (???:0:0)",
    "0x105818abf: _main (???:0:0)",
    "0x105816b98: _main (???:0:0)",
    "0x10581911b: _main (???:0:0)",
    "0x105816c9e: _main (???:0:0)",
    "0x1058102a6: <&[u8] as std::ffi::c_str::CString::new::SpecIntoVec>::into_vec (???:0:0)",
    "0x105810756: std::fs::OpenOptions::_open (???:0:0)",
    "0x10581903e: _main (???:0:0)",
    "0x1057de983: std::fs::metadata (???:0:0)",
    "0x105818e56: _main (???:0:0)",
    "0x1057ef9a3: alloc::raw_vec::finish_grow (???:0:0)",
    "0x1057e18b5: icu_provider_fs::manifest::_::<impl serde::de::Deserialize for icu_provider_fs::manifest::LocalesOption>::deserialize (???:0:0)",
    "0x105817407: _main (???:0:0)",
    "0x105818c36: _main (???:0:0)",
    "0x105816d6d: _main (???:0:0)",
    "0x1057dbdbb: icu_plurals::rules::parser::Parser::get_and_condition (???:0:0)",
    "0x1057db56a: alloc::vec::Vec<T,A>::reserve (???:0:0)",
    "0x1057dc9cd: icu_plurals::data::parse_rule (???:0:0)",
    "0x1057f1848: std::env::_var_os (???:0:0)",
    "0x105816b50: _main (???:0:0)",
    "0x105816df0: _main (???:0:0)",
    "0x105814769: alloc::raw_vec::finish_grow (???:0:0)",
    "0x1057de7d3: alloc::vec::Vec<T,A>::extend_from_slice (???:0:0)",
    "0x1057ddf8c: <&mut W as core::fmt::Write>::write_str (???:0:0)",
    "0x1057dde0e: <&T as core::fmt::Display>::fmt (???:0:0)",
    "0x1057dda86: <icu_provider::resource::ResourceOptionsComponents as core::convert::From<&icu_provider::resource::ResourceOptions>>::from (???:0:0)",
    "0x105818cda: _main (???:0:0)",
    "0x105816e9f: _main (???:0:0)",
    "0x105816c0b: _main (???:0:0)",
    "0x1058165cb: alloc::raw_vec::finish_grow (???:0:0)",
    "0x10581673a: alloc::vec::Vec<T,A>::reserve (???:0:0)",
    "0x105815692: <serde_json::read::IoRead<R> as serde_json::read::Read>::parse_str (???:0:0)",
    "0x10581d95c: icu_provider_fs::deserializer::deserialize_into_type (???:0:0)",
    "0x1057dbd53: icu_plurals::rules::parser::Parser::get_and_condition (???:0:0)"
  ]
}