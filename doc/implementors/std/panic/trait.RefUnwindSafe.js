(function() {var implementors = {};
implementors["bies"] = [{"text":"impl RefUnwindSafe for Breakpoints","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for BiesVector&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BiesMatrix","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BiesString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlgorithmIter","synthetic":true,"types":[]}];
implementors["fixed_decimal"] = [{"text":"impl RefUnwindSafe for FixedDecimal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["icu4x_cldr_export"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["icu4x_ecma402"] = [{"text":"impl RefUnwindSafe for PluralRules","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Locale","synthetic":true,"types":[]}];
implementors["icu4x_gen_testdata"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["icu_benchmark_memory"] = [{"text":"impl RefUnwindSafe for ProcessedArgs","synthetic":true,"types":[]}];
implementors["icu_capi"] = [{"text":"impl RefUnwindSafe for ICU4XCreatePluralRulesResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ICU4XPluralOperands","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ICU4XPluralRuleType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ICU4XPluralCategory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ICU4XDataProvider","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ICU4XCreateDataProviderResult","synthetic":true,"types":[]}];
implementors["icu_datetime"] = [{"text":"impl RefUnwindSafe for DateTimeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Era","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Year","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MonthCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Month","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DayOfYearInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsoWeekday","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DayOfMonth","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeekOfMonth","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeekOfYear","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsoHour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsoMinute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsoSecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FractionalSecond","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DateTimeFormatError","synthetic":true,"types":[]},{"text":"impl&lt;'l, T&gt; RefUnwindSafe for FormattedDateTime&lt;'l, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MockDateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Text","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Month","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeZoneName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HourCycle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Date","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DateTimeFormatOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SymbolsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormatWidthsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandAloneWidthsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContextsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SymbolsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormatWidthsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandAloneWidthsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContextsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SymbolsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormatWidthsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandAloneWidthsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContextsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StylePatternsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DatesV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DateSymbolsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatternsV1","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; RefUnwindSafe for DateTimeFormat&lt;'d&gt;","synthetic":true,"types":[]}];
implementors["icu_locale_canonicalizer"] = [{"text":"impl RefUnwindSafe for CanonicalizationResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for LocaleCanonicalizer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LikelySubtagsV1","synthetic":true,"types":[]}];
implementors["icu_locid"] = [{"text":"impl RefUnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Private","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transform","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Attributes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Keywords","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unicode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtensionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extensions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LanguageIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Locale","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Language","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Region","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Script","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variants","synthetic":true,"types":[]}];
implementors["icu_plurals"] = [{"text":"impl !RefUnwindSafe for PluralRulesError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PluralOperands","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for PluralRuleStringsV1&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Condition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndCondition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Relation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Operator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Operand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangeList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangeListItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Samples","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SampleList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SampleRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecimalValue","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; RefUnwindSafe for Lexer&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PluralRuleType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PluralCategory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PluralRules","synthetic":true,"types":[]}];
implementors["icu_provider"] = [{"text":"impl RefUnwindSafe for DataRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataResponseMetadata","synthetic":true,"types":[]},{"text":"impl&lt;'d, T:&nbsp;?Sized&gt; RefUnwindSafe for DataPayload&lt;'d, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'d, T:&nbsp;?Sized&gt; RefUnwindSafe for DataResponse&lt;'d, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResourceCategory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResourceKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResourceOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResourcePath","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for HelloWorldV1&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for HelloWorldProvider&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvariantDataProvider","synthetic":true,"types":[]},{"text":"impl&lt;'d, T&gt; RefUnwindSafe for StructProvider&lt;'d, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["icu_provider_cldr"] = [{"text":"impl RefUnwindSafe for CldrPathsLocal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CldrPathsAllInOne","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; RefUnwindSafe for DatesProvider&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; RefUnwindSafe for LikelySubtagsProvider&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; RefUnwindSafe for PluralsProvider&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'd&gt; !RefUnwindSafe for CldrJsonDataProvider&lt;'a, 'd&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CldrAllInOneDownloader","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["icu_provider_fs"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FsDataProvider","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AliasOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalesOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SyntaxOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OverwriteOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExporterOptions","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FilesystemExporter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StyleOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Serializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Serializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["icu_provider_ppucd"] = [{"text":"impl&lt;'s&gt; RefUnwindSafe for UnicodeProperties&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for PpucdDataProvider&lt;'s&gt;","synthetic":true,"types":[]}];
implementors["icu_segmenter_lstm"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lstm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LstmData","synthetic":true,"types":[]}];
implementors["icu_testdata"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PackageMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PackageInfo","synthetic":true,"types":[]}];
implementors["icu_uniset"] = [{"text":"impl RefUnwindSafe for UnicodeSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for UnicodeProperty&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnicodeSet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnicodeSetError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnicodeSetSpanCondition","synthetic":true,"types":[]}];
implementors["litemap"] = [{"text":"impl&lt;K, V&gt; RefUnwindSafe for LiteMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["writeable"] = [{"text":"impl RefUnwindSafe for LengthHint","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()