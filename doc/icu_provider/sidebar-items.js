initSidebarItems({"attr":[["data_struct","The `#[data_struct]` attribute should be applied to all types intended for use in a `DataStruct`. It does the following things:"]],"macro":[["impl_dyn_provider","Implements `DynProvider` for a marker type `S` on a type that already implements `DynProvider` or `ResourceProvider` for one or more `M`, where `M` is a concrete type that is convertible to `S` via [`UpcastDataPayload`]."],["make_forking_provider","Make a forking data provider with an arbitrary number of inner providers that are known at build time."],["resource_key","See [`ResourceKey`]."]],"mod":[["any","Traits for data providers that produce `Any` objects."],["buf","Traits for data providers that produce opaque buffers."],["datagen","This module contains various utilities required to generate ICU4X data files, typically via the `icu4x-datagen` tool. End users should not need to consume anything in this module as a library unless defining new types that integrate with `icu4x-datagen`."],["dynutil","Utilities for using trait objects with `DataPayload`."],["either","Helpers for switching between multiple providers."],["export","Types having to do with the exporting of data."],["filter","Providers that filter resource requests."],["fork","Providers that combine multiple other providers."],["hello_world","Data provider returning multilingual “Hello World” strings for testing."],["inv","Locale-invariant data provider that requires no I/O."],["marker","Marker types and traits for DataProvider."],["prelude","Core selection of APIs and structures for the ICU4X data provider."],["serde","Collection of traits for providers that support serializing or deserializing data."],["struct_provider","Data provider always serving the same struct."]]});