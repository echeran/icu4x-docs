initSidebarItems({"fn":[["get_alnum_property","Characters with the Alphabetic or Decimal_Number property This is defined for POSIX compatibility."],["get_alphabetic_property","Alphabetic characters"],["get_ascii_hex_digit_property","ASCII characters commonly used for the representation of hexadecimal numbers"],["get_bidi_control_property","Format control characters which have specific functions in the Unicode Bidirectional Algorithm"],["get_bidi_mirrored_property","Characters that are mirrored in bidirectional text"],["get_blank_property","Horizontal whitespace characters"],["get_case_ignorable_property","Characters which are ignored for casing purposes"],["get_case_sensitive_property","Characters that are either the source of a case mapping or in the target of a case mapping"],["get_cased_property","Uppercase, lowercase, and titlecase characters"],["get_changes_when_casefolded_property","Characters whose normalized forms are not stable under case folding"],["get_changes_when_casemapped_property","Characters which may change when they undergo case mapping"],["get_changes_when_lowercased_property","Characters whose normalized forms are not stable under a toLowercase mapping"],["get_changes_when_nfkc_casefolded_property","Characters which are not identical to their NFKC_Casefold mapping"],["get_changes_when_titlecased_property","Characters whose normalized forms are not stable under a toTitlecase mapping"],["get_changes_when_uppercased_property","Characters whose normalized forms are not stable under a toUppercase mapping"],["get_dash_property","Punctuation characters explicitly called out as dashes in the Unicode Standard, plus their compatibility equivalents"],["get_default_ignorable_code_point_property","For programmatic determination of default ignorable code points.  New characters that should be ignored in rendering (unless explicitly supported) will be assigned in these ranges, permitting programs to correctly handle the default rendering of such characters when not otherwise supported."],["get_deprecated_property","Deprecated characters. No characters will ever be removed from the standard, but the usage of deprecated characters is strongly discouraged."],["get_diacritic_property","Characters that linguistically modify the meaning of another character to which they apply"],["get_emoji_component_property","Characters used in emoji sequences that normally do not appear on emoji keyboards as separate choices, such as base characters for emoji keycaps"],["get_emoji_modifier_base_property","Characters that can serve as a base for emoji modifiers"],["get_emoji_modifier_property","Characters that are emoji modifiers"],["get_emoji_presentation_property","Characters that have emoji presentation by default"],["get_emoji_property","Characters that are emoji"],["get_extended_pictographic_property","Pictographic symbols, as well as reserved ranges in blocks largely associated with emoji characters"],["get_extender_property","Characters whose principal function is to extend the value of a preceding alphabetic character or to extend the shape of adjacent characters."],["get_full_composition_exclusion_property","Characters that are excluded from composition See https://unicode.org/Public/UNIDATA/CompositionExclusions.txt"],["get_general_category_val_set","Return a [`UnicodeSet`] for a particular value of the General_Category Unicode enumerated property General_Category specifies enumerated Unicode general category types. See https://www.unicode.org/reports/tr44/ ."],["get_graph_property","Visible characters. This is defined for POSIX compatibility."],["get_grapheme_base_property","Property used together with the definition of Standard Korean Syllable Block to define “Grapheme base”. See D58 in Chapter 3, Conformance in the Unicode Standard."],["get_grapheme_extend_property","Property used to define “Grapheme extender”. See D59 in Chapter 3, Conformance in the Unicode Standard."],["get_grapheme_link_property","Deprecated property. Formerly proposed for programmatic determination of grapheme cluster boundaries."],["get_hex_digit_property","Characters commonly used for the representation of hexadecimal numbers, plus their compatibility equivalents"],["get_hyphen_property","Deprecated property. Dashes which are used to mark connections between pieces of words, plus the Katakana middle dot."],["get_id_continue_property","Characters that can come after the first character in an identifier. If using NFKC to fold differences between characters, use [`get_xid_continue_property`] instead.  See `Unicode Standard Annex #31` for more details."],["get_id_start_property","Characters that can begin an identifier. If using NFKC to fold differences between characters, use [`get_xid_start_property`] instead.  See `Unicode Standard Annex #31` for more details."],["get_ideographic_property","Characters considered to be CJKV (Chinese, Japanese, Korean, and Vietnamese) ideographs, or related siniform ideographs"],["get_ids_binary_operator_property","Characters used in Ideographic Description Sequences"],["get_ids_trinary_operator_property","Characters used in Ideographic Description Sequences"],["get_join_control_property","Format control characters which have specific functions for control of cursive joining and ligation"],["get_logical_order_exception_property","A small number of spacing vowel letters occurring in certain Southeast Asian scripts such as Thai and Lao"],["get_lowercase_property","Lowercase characters"],["get_math_property","Characters used in mathematical notation"],["get_nfc_inert_property","Characters that are inert under NFC, i.e., they do not interact with adjacent characters"],["get_nfd_inert_property","Characters that are inert under NFD, i.e., they do not interact with adjacent characters"],["get_nfkc_inert_property","Characters that are inert under NFKC, i.e., they do not interact with adjacent characters"],["get_nfkd_inert_property","Characters that are inert under NFKD, i.e., they do not interact with adjacent characters"],["get_noncharacter_code_point_property","Code points permanently reserved for internal use"],["get_pattern_syntax_property","Characters used as syntax in patterns (such as regular expressions). See `Unicode Standard Annex #31` for more details."],["get_pattern_white_space_property","Characters used as whitespace in patterns (such as regular expressions).  See `Unicode Standard Annex #31` for more details."],["get_prepended_concatenation_mark_property","A small class of visible format controls, which precede and then span a sequence of other characters, usually digits."],["get_print_property","Printable characters (visible characters and whitespace). This is defined for POSIX compatibility."],["get_quotation_mark_property","Punctuation characters that function as quotation marks."],["get_radical_property","Characters used in the definition of Ideographic Description Sequences"],["get_regional_indicator_property","Regional indicator characters, U+1F1E6..U+1F1FF"],["get_script_val_set","Return a [`UnicodeSet`] for a particular value of the Script Unicode enumerated property See https://www.unicode.org/reports/tr44/ ."],["get_segment_starter_property","Characters that are starters in terms of Unicode normalization and combining character sequences"],["get_sentence_terminal_property","Punctuation characters that generally mark the end of sentences"],["get_soft_dotted_property","Characters with a “soft dot”, like i or j. An accent placed on these characters causes the dot to disappear."],["get_terminal_punctuation_property","Punctuation characters that generally mark the end of textual units"],["get_unified_ideograph_property","A property which specifies the exact set of Unified CJK Ideographs in the standard"],["get_uppercase_property","Uppercase characters"],["get_variation_selector_property","Characters that are Variation Selectors."],["get_white_space_property","Spaces, separator characters and other control characters which should be treated by programming languages as “white space” for the purpose of parsing elements"],["get_xdigit_property","Hexadecimal digits This is defined for POSIX compatibility."],["get_xid_continue_property","Characters that can begin an identifier.  See `Unicode Standard Annex #31` for more details."],["get_xid_start_property","Characters that can come after the first character in an identifier. See `Unicode Standard Annex #31` for more details."]]});